<?xml version="1.0"?>
<doc>
    <assembly>
        "ToolNetApi"
    </assembly>
    <members>
        <member name="M:Cnc.Tool.Interop.TlProfileBuilderParametric.CalcProfile(Cnc.Tool.Interop.MillToolProfileParams)">
            <summary> Calculates the profile. </summary>
            <param name="profileParams"> The profile calculation parameters. </param>
            <returns> The profile result. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileBuilderParametric">
            <summary> Service class providing functionality to build parametric profiles for milling and holemaking tools. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.arborDiameter">
            <summary> The arbor diameter. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.neckDiameter">
            <summary> The neck diameter. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.taperLength">
            <summary> Length of the taper. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.shoulderDiameter">
            <summary> The shoulder diameter. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.shoulderLength">
            <summary> The shoulder length. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.shankType">
            <summary> Type of the shank. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.threadPitch">
            <summary> The thread pitch. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.threadShape">
            <summary> The thread shape. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.pilotDiameter">
            <summary>  The pilot diameter. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.pilotLength">
            <summary> Length of the pilot.. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.chamferLength2">
            <summary> The secondary corner chamfer length. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.chamferLength1">
            <summary> Length of the primary tip chamfer. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.angle3">
            <summary> The shoulder angle or relief angle. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.angle2">
            <summary> The secondary corner chamfer angle. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.angle1">
            <summary> The tip angle. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.cornerRadius2">
            <summary> The secondary corner radius. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.cornerRadius1">
            <summary> The primary corner radius. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.secondaryDiameter">
            <summary> The secondary (usually tip) diameter.. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.primaryDiameter">
            <summary> The primary compensation diameter. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.fluteLength">
            <summary> The flute length. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.toolLength">
            <summary> The overall length of the tool. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.cornerType">
            <summary> Primary corner type of the tool. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.toolType">
            <summary> Mastercam tool type value. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.tolerance">
            <summary> The standard tolerance to be used for calculations. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.nc_tolerance">
            <summary> The NC tolerance to be used for calculations. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.isMetric">
            <summary> true if this tool is metric. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MillToolProfileParams.entColor">
            <summary> Profile Entity (line/arc) color. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.MillToolProfileParams">
            <summary> Parametric profile parameters for milling/hole-making tools. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeReducedNeckShankAboveShoulder(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes reduced neck shank above shoulder. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="xStart">  The start. </param>
            <param name="yStart">  The start. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeTaperedShankAboveShoulder(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes tapered shank above shoulder. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="xStart">  The start. </param>
            <param name="yStart">  The start. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeStraightShankAboveShoulder(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes straight shank above shoulder. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="xStart">  The start. </param>
            <param name="yStart">  The start. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeShankAboveShoulder(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes shank above shoulder. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="xStart">  The start. </param>
            <param name="yStart">  The start. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeFeedMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes feed mill. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.MakeLensBarrelHybrid(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Makes a lens barrel form AF tool. </summary>
            <param name="code">   	The code. </param>
            <param name="profile">	The profile. </param>
            <param name="params"> 	Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.MakeLensBarrelMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Makes a lens form AF tool. </summary>
            <param name="code">   	The code. </param>
            <param name="profile">	The profile. </param>
            <param name="params"> 	Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.MakeTaperBarrelMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Makes a taper form AF tool. </summary>
            <param name="code">   	The code. </param>
            <param name="profile">	The profile. </param>
            <param name="params"> 	Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeOvalFormBarrelMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes oval form AF tool. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeBarrelMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes barrel orm AF tool. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeUndefinedThread(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates an undefined thread profile. </summary>
            <param name="code">   [out] The result code. </param>
            <param name="yValue"> [in] The starting Y value for the thread. [out] The ending Y value for the thread. </param>
            <param name="params"> Options for controlling the operation. </param>
            <returns> A set of profile segments representing the thread. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeNPTThread(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes npt thread. </summary>
            <param name="code">   The code. </param>
            <param name="yvalue"> The current Y Value of the thread. </param>
            <param name="params"> Options for controlling the operation. </param>
            <returns> A std::vector&lt;TlProfileEnt&gt; </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeButtressThread(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes buttress thread. </summary>
            <param name="code">   The code. </param>
            <param name="yvalue"> The current Y Value of the thread. </param>
            <param name="params"> Options for controlling the operation. </param>
            <returns> A std::vector&lt;TlProfileEnt&gt; </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeACMEThread(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes ACME thread. </summary>
            <param name="code">   The code. </param>
            <param name="yvalue"> The current Y Value of the thread. </param>
            <param name="params"> Options for controlling the operation. </param>
            <returns> A std::vector&lt;TlProfileEnt&gt; </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeUNISOThread(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes Unified/ISO thread. </summary>
            <param name="code">   The code. </param>
            <param name="yvalue"> The current Y Value of the thread. </param>
            <param name="params"> Options for controlling the operation. </param>
            <returns> A std::vector&lt;TlProfileEnt&gt; </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeThread(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a thread. </summary>
            <param name="code">   The code. </param>
            <param name="yvalue"> The current Y Value of the thread. </param>
            <param name="params"> Options for controlling the operation. </param>
            <returns> A std::vector&lt;TlProfileEnt&gt; </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeThreadMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes thread mill. </summary>
            <param name="code">    The code. </param>
            <param name="profile"> The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeCounterBore(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a Counter bore. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeBullEndMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a bull end mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeLolliPopMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a lollipop mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeTaperMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a taper mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeRadiusMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes the radius mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeSlotMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a slot mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeFaceMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a face mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeChamferMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a chamfer mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeBallEndMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a ball end mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeBoringBar(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a boring bar. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeDoveTailMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a dove tail mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeReamer(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a reamer. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeFlatEndMill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a flat end mill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeDrill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a drill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeCenterDrill(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a center drill. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.makeCounterSinkOrTapOrNullTool(Cnc.Tool.TlProfileResultCode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes a counter sink or tap or null tool. </summary>
            <param name="code">    [in] The code. </param>
            <param name="profile"> [out] The profile. </param>
            <param name="params">  Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.CheckToolValidity(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Check tool validity. </summary>
            <param name="profileParams"> [in] The parameters to validate. </param>
            <returns> The result code. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderParametric.CalcProfile(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculates the profile. </summary>
            <param name="profileParams"> The profile calculation parameters. </param>
            <returns> The profile result. </returns>
        </member>
        <member name="T:Cnc.Tool.TlProfileBuilderParametric">
            <summary> Service class providing functionality to build parametric profiles for milling and holemaking tools. </summary>
        </member>
        <member name="T:Cnc.Tool.MillToolProfileParams">
            <summary> Parametric profile parameters for milling/hole-making tools. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.SetDrillLength(System.Double,System.Boolean)">
            <summary> Sets DrillLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.GetDrillLength(System.Boolean)">
            <summary> Gets DrillLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheDrillLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolCenterDrill.DrillLength">
            <summary> Drill Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.SetDrillDiameter(System.Double,System.Boolean)">
            <summary> Sets DrillDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.GetDrillDiameter(System.Boolean)">
            <summary> Gets DrillDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheDrillDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolCenterDrill.DrillDiameter">
            <summary> Drill Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.CopyFrom(Cnc.Tool.Interop.TlToolCenterDrill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCenterDrill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolCenterDrill">
            <summary> Defines the TlToolCenterDrill tool class type. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.BackoffPercent">
            <summary> Backoff percent </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetStockClearance(System.Double,System.Boolean)">
            <summary> Sets StockClearance property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetStockClearance(System.Boolean)">
            <summary> Gets StockClearance property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheStockClearance property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.StockClearance">
            <summary> Stock clearance </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetFinishDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets FinishDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetFinishDepthOfCut(System.Boolean)">
            <summary> Gets FinishDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFinishDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.FinishDepthOfCut">
            <summary> Finish depth of cut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetRoughDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets RoughDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetRoughDepthOfCut(System.Boolean)">
            <summary> Gets RoughDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRoughDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.RoughDepthOfCut">
            <summary> Rough depth of cut </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.EndAngle">
            <summary> End angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetNotchPointLocation(System.Double,System.Boolean)">
            <summary> Sets NotchPointLocation property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetNotchPointLocation(System.Boolean)">
            <summary> Gets NotchPointLocation property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheNotchPointLocation property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.NotchPointLocation">
            <summary> Notch point location </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetEndLength(System.Double,System.Boolean)">
            <summary> Sets EndLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetEndLength(System.Boolean)">
            <summary> Gets EndLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheEndLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.EndLength">
            <summary> End length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetShankWidth(System.Double,System.Boolean)">
            <summary> Sets ShankWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetShankWidth(System.Boolean)">
            <summary> Gets ShankWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShankWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.ShankWidth">
            <summary> Shank width </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.SetCutLength(System.Double,System.Boolean)">
            <summary> Sets CutLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.GetCutLength(System.Boolean)">
            <summary> Gets CutLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCutLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertGrooving.CutLength">
            <summary> Cut length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.CopyFrom(Cnc.Tool.Interop.TlInsertGrooving)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertGrooving.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlInsertGrooving">
            <summary> Defines the TlInsertGrooving tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheBoring.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheBoring.CopyFrom(Cnc.Tool.Interop.TlHolderLatheBoring)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheBoring.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheBoring.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolderLatheBoring">
            <summary> Defines the TlHolderLatheBoring tool class type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertGrooving.TlInsertGroovingDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlInsertGrooving.DoConvertUnits(System.Boolean)">
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlInsertGrooving.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertGrooving.DoGetDefaultCuttingSide">
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertGrooving.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlInsertGrooving.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheBoring.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyAdaptiveItem.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyAdaptiveItem.CopyFrom(Cnc.Tool.Interop.TlAssemblyAdaptiveItem)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyAdaptiveItem.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyAdaptiveItem.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAssemblyAdaptiveItem">
            <summary> Defines the TlAssemblyAdaptiveItem tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyAdaptiveItem.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlImageUtils.GenerateAndStoreLegacyLatheImage(Cnc.Tool.Interop.TlToolLathe)">
            <summary> Generates an image for the specified 2D lathe tool instance and stores it on the instance. </summary>
            <param name="toolLathe"> The 2D lathe tool instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlImageUtils.GenerateAndStoreInsertImage(Cnc.Tool.Interop.TlInsert)">
            <summary> Generates an image for the specified insert instance and stores it on the instance. </summary>
            <param name="insert"> The insert instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlImageUtils.GenerateAndStoreHolderImage(Cnc.Tool.Interop.TlTurnHolder)">
            <summary> Generates an image for the specified turn holder instance and stores it on the instance. </summary>
            <param name="holder"> The turn holder instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlImageUtils.GenerateAndStoreAdaptiveItemImage(Cnc.Tool.Interop.TlAdaptiveItem)">
            <summary> Generates an image for the specified adaptive item instance and stores it on the instance. </summary>
            <param name="adaptiveItem"> The adaptive item instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlImageUtils.GenerateAndStoreHolderAssemblyImage(Cnc.Tool.Interop.TlHolderAssembly)">
            <summary> Generates an image for the specified 3D holder assembly instance and stores it on the instance. </summary>
            <param name="holderAssembly"> The holder assembly instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlImageUtils.GenerateAndStoreDefinitionImages(Cnc.Tool.Interop.TlToolAssembly)">
            <summary> Generates images for each of the lathe tool definitions on the specified 3D tool assembly instance and
		  stores them on the instance. </summary>
            <param name="toolAssembly"> The lathe definition view. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlImageUtils.GenerateAndStoreDefinitionImage(Cnc.Tool.Interop.ILTool)">
            <summary> Generates an image for the specified lathe tool instance and stores it on the instance. </summary>
            <param name="ltool"> The lathe tool instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlImageUtils.GenerateAndStoreDefinitionImage(Cnc.Tool.Interop.TlToolAssemblyLatheDefView)">
            <summary> Generates an image for the specified lathe tool definition view of a 3D tool assembly instance and then
		  stores it on the instance. </summary>
            <param name="latheDefView"> The lathe definition view. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.TlImageUtils">
            <summary> Utility methods for generating and updating images on tool class instances. </summary>
        </member>
        <member name="M:Cnc.Tool.TlImageUtils.GenerateAndStoreLegacyLatheImage(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;)">
            <summary> Generates an image for the specified 2D lathe tool instance and stores it on the instance. </summary>
            <param name="toolLathe"> The 2D lathe tool instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlImageUtils.GenerateAndStoreInsertImage(Cnc.Tool.TlInsert*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Generates an image for the specified insert instance and stores it on the instance. </summary>
            <param name="insert"> The insert instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlImageUtils.GenerateAndStoreHolderImage(Cnc.Tool.TlTurnHolder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Generates an image for the specified turn holder instance and stores it on the instance. </summary>
            <param name="holder"> The turn holder instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlImageUtils.GenerateAndStoreAdaptiveItemImage(Cnc.Tool.TlAdaptiveItem*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Generates an image for the specified adaptive item instance and stores it on the instance. </summary>
            <param name="adaptiveItem"> The adaptive item instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlImageUtils.GenerateAndStoreHolderAssemblyImage(Cnc.Tool.TlHolderAssembly*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Generates an image for the specified 3D holder assembly instance and stores it on the instance. </summary>
            <param name="holderAssembly"> The holder assembly instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlImageUtils.GenerateAndStoreDefinitionImages(Cnc.Tool.TlToolAssembly*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Generates images for each of the lathe tool definitions on the specified 3D tool assembly instance and
		  stores them on the instance. </summary>
            <param name="toolAssembly"> The lathe definition view. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlImageUtils.GenerateAndStoreDefinitionImage(Cnc.Tool.ILTool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Generates an image for the specified lathe tool instance and stores it on the instance. </summary>
            <param name="ltool"> The lathe tool instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlImageUtils.GenerateAndStoreDefinitionImage(Cnc.Tool.TlToolAssemblyLatheDefView*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Generates an image for the specified lathe tool definition view of a 3D tool assembly instance and then
		  stores it on the instance. </summary>
            <param name="latheDefView"> The lathe definition view. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.Interop.MarshalAssembly(Cnc.Tool.Import.Interop.MappedToolAssembly)">
            <summary> Marshal a assembly. </summary>
            <param name="assembly"> If non-null, the assembly. </param>
            <returns> An Import::MappedToolAssembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.Interop.MarshalTreeNode(Cnc.Tool.Import.Interop.MappedToolItemTreeNode)">
            <summary> Marshal a tree node. </summary>
            <param name="treeNode"> If non-null, the tree node. </param>
            <returns> An Import::MappedToolItemTreeNode. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.Interop.MarshalMappedItem(Cnc.Tool.Import.Interop.MappedToolItem)">
            <summary> Marshal a mapped item. </summary>
            <param name="toolItem"> If non-null, the tool item. </param>
            <returns> An Import::MappedToolItem. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.Interop.MarshalLog(Cnc.Tool.Import.Interop.Log)">
            <summary> Marshal the given log. </summary>
            <param name="log"> If non-null, the log. </param>
            <returns> An Import::Log. </returns>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolAssembly.MappingLog">
            <summary> Gets the mapping log container to put informative messages about things that happened while mapping the
		  tool assembly. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolAssembly.RootNode">
            <summary> Gets or sets the root node. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolAssembly.ToolItems">
            <summary> Gets or sets the tool items. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolAssembly.PerformanceParams">
            <summary> Gets or sets the performance parameters on the assembly. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolAssembly.Measurements">
            <summary> Gets or sets the measurements. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolAssembly.ProductImages">
            <summary> Gets or sets the collection of product images. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolAssembly.LastModifiedDate">
            <summary> Gets or sets the last modified date. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolAssembly.ItemTypeName">
            <summary> Gets or sets the name of the item type. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolAssembly.Description">
            <summary> Gets or sets the description. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolAssembly.Name">
            <summary> Gets or sets the name. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolAssembly.Slot">
            <summary> Gets or sets the slot. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Interop.MappedToolAssembly">
            <summary> A mapped tool assembly. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItemTreeNode.Children">
            <summary> Gets or sets the collection of children nodes. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItemTreeNode.ItemId">
            <summary> Gets or sets the identifier of the item. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Interop.MappedToolItemTreeNode">
            <summary> A mapped tool item tree node. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItem.MappingLog">
            <summary> Gets the mapping log container to put informative messages about things that happened while mapping the
		  tool item. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItem.ModelFile">
            <summary> Gets or sets the the model file (should be in STEP file bytes). </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItem.ProductImages">
            <summary> Gets or sets the collection of product images. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItem.ItemPlanes">
            <summary> Gets or sets the item planes. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItem.UnMappedProperties">
            <summary> Gets or sets the unmapped properties. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItem.MappedProperties">
            <summary> Gets or sets the mapped properties. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItem.Group">
            <summary> Gets or sets the group. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItem.Type">
            <summary> Gets the or sets type. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItem.LastModifiedDate">
            <summary> Gets or sets the last modified date. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItem.TypeName">
            <summary> Gets or sets the Type Name. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItem.CatalogId">
            <summary> Gets or sets the Catalog ID. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItem.Name">
            <summary> Gets or sets the name. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.MappedToolItem.Id">
            <summary> Gets or sets the identifier. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Interop.MappedToolItem">
            <summary> A mapped tool item. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.Log.Messages">
            <summary> Gets or sets the messages. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.Log.Message.Contents">
            <summary> Gets or sets the contents of the message. </summary>
        </member>
        <member name="P:Cnc.Tool.Import.Interop.Log.Message.MessageType">
            <summary> Gets or sets the type of the message. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.Log.Message.Type.Error">
            <summary> An enum constant representing the error option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.Log.Message.Type.Warning">
            <summary> An enum constant representing the warning option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.Log.Message.Type.Information">
            <summary> An enum constant representing the information option. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Interop.Log.Message.Type">
            <summary> Values that represent types of messages. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Interop.Log.Message">
            <summary> A log message. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Interop.Log">
            <summary> A log message container. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam">
            <summary> Values that represent performance parameters on a mapped assembly. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.Application">
            <summary> An enum constant representing the application option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.TorqueAtTool">
            <summary> An enum constant representing the torque at tool option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.PowerAtTool">
            <summary> An enum constant representing the power at tool option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.NumEffectiveFlutes">
            <summary> An enum constant representing the number effective flutes option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.FeedPerRevolution">
            <summary> An enum constant representing the feed per revolution option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.MaterialRemovalRate">
            <summary> An enum constant representing the material removal rate option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.SpindleSpeed">
            <summary> An enum constant representing the spindle speed option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.FeedRate">
            <summary> An enum constant representing the feed rate option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.CuttingSpeed">
            <summary> An enum constant representing the cutting speed option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.FeedPerTooth">
            <summary> An enum constant representing the feed per tooth option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.RadialWidthOfCut">
            <summary> An enum constant representing the radial width of cut option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.AxialDepthOfCut">
            <summary> An enum constant representing the axial depth of cut option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.OperationType">
            <summary> An enum constant representing the operation type option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.Material">
            <summary> An enum constant representing the material option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyPerformanceParam.Unknown">
            <summary> An enum constant representing the unknown option. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Interop.MappedAssemblyMeasurement">
            <summary> Values that represent measurements on a mapped assembly. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyMeasurement.GaugeLengthToolAssembly">
            <summary> An enum constant representing the gauge length tool assembly option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyMeasurement.ToolProtrusionLength">
            <summary> An enum constant representing the tool protrusion length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyMeasurement.BodyLengthMax">
            <summary> An enum constant representing the body length maximum option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyMeasurement.DepthOfCutMax">
            <summary> An enum constant representing the depth of cut maximum option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyMeasurement.ToolAssemblyLength">
            <summary> An enum constant representing the tool assembly length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyMeasurement.BodyDiameterMax">
            <summary> An enum constant representing the body diameter maximum option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyMeasurement.CuttingDiameterMax">
            <summary> An enum constant representing the cutting diameter maximum option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedAssemblyMeasurement.Unknown">
            <summary> An enum constant representing the unknown option. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Interop.MappedItemProperty">
            <summary> Values that represent the mapped property from imported data. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.Unknown">
            <summary> An enum constant representing the unknown option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.CuttingEdgeLength">
            <summary> An enum constant representing the cutting edge length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ToolProtrusionLength">
            <summary> An enum constant representing the tool protrusion length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.BodyLength">
            <summary> An enum constant representing the body length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ToolLeadAngle">
            <summary> An enum constant representing the tool lead angle option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.StepDiameterLength">
            <summary> An enum constant representing the step diameter length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ShoulderAngle">
            <summary> An enum constant representing the shoulder angle option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.PlugAngle">
            <summary> An enum constant representing the plug angle option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.PlugLength">
            <summary> An enum constant representing the plug length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.PointLength">
            <summary> An enum constant representing the point length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ShankDiameter">
            <summary> An enum constant representing the shank diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.InsertLength">
            <summary> An enum constant representing the insert length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.CuttingWidth">
            <summary> An enum constant representing the cutting width option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ToothCount">
            <summary> An enum constant representing the tooth count option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ThreadForm">
            <summary> An enum constant representing the thread form option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ThreadingLength">
            <summary> An enum constant representing the threading length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ThreadsPerInch">
            <summary> An enum constant representing the threads per inch option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ThreadPitch">
            <summary> An enum constant representing the thread pitch option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ThreadDiameterNominalInch">
            <summary> An enum constant representing the thread diameter nominal inch option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ThreadDiameter">
            <summary> An enum constant representing the thread diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.UsableLength">
            <summary> An enum constant representing the usable length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.InsertIncludedAngle">
            <summary> An enum constant representing the insert included angle option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.TipAngle">
            <summary> An enum constant representing the tip angle option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.RampingAngleMax">
            <summary> An enum constant representing the ramp angle maximum option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ToolCuttingEdgeAngle">
            <summary> An enum constant representing the tool cutting edge angle option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ItemProjection">
            <summary> An enum constant representing the item projection option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.FluteHelixAngle">
            <summary> An enum constant representing the flute helix angle option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.FluteHelixHand">
            <summary> An enum constant representing the flute helix hand option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ChamferAngle">
            <summary> An enum constant representing the chamfer angle option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ChamferLength">
            <summary> An enum constant representing the chamfer length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.CornerRadius">
            <summary> An enum constant representing the corner radius option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.NeckDiameter">
            <summary> An enum constant representing the neck diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ShoulderDiameter">
            <summary> An enum constant representing the shoulder diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ShoulderLength">
            <summary> An enum constant representing the head length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ShankLength">
            <summary> An enum constant representing the shank length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.FluteLength">
            <summary> An enum constant representing the flute length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.CuttingDepth">
            <summary> An enum constant representing the cutting depth option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.CuttingDiameterMax">
            <summary> An enum constant representing the cutting diameter maximum option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.CuttingDiameter">
            <summary> An enum constant representing the cutting diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.OverallLength">
            <summary> An enum constant representing the overall length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.NumFlutes">
            <summary> An enum constant representing the number of flutes option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.BodyMaterialCode">
            <summary> An enum constant representing the body material code option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.UnitSystem">
            <summary> An enum constant representing the unit system option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.Hand">
            <summary> An enum constant representing the hand option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ThruCoolant">
            <summary> An enum constant representing the thru coolant option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.HubDiameter">
            <summary> An enum constant representing the hub diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ConnectionDiameter">
            <summary> An enum constant representing the connection diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ConnectionSizeWorkpieceSide">
            <summary> An enum constant representing the connection size workpiece side option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ConnectionSizeMachineSide">
            <summary> An enum constant representing the connection size machine side option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ConnectionTypeWorkpieceSide">
            <summary> An enum constant representing the connection type workpiece side option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemProperty.ConnectionTypeMachineSide">
            <summary> An enum constant representing the connection type machine side option. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Interop.MappedItemType">
            <summary> Values that represent the type of the mapped assembly item. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.TurnHolder">
            <summary> An enum constant representing the turn holder option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.Engrave">
            <summary> An enum constant representing the engrave option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.CenterDrill">
            <summary> An enum constant representing the center drill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.DoveMill">
            <summary> An enum constant representing the dove mill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.IndexThreadMill">
            <summary> An enum constant representing the index thread mill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.ThreadMill">
            <summary> An enum constant representing the thread mill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.RadiusMill">
            <summary> An enum constant representing the radius mill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.CounterBore">
            <summary> An enum constant representing the counter bore option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.SlotMill">
            <summary> An enum constant representing the slot mill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.TaperMill">
            <summary> An enum constant representing the taper mill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.Reamer">
            <summary> An enum constant representing the reamer option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.Tap">
            <summary> An enum constant representing the tap option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.SpotDrill">
            <summary> An enum constant representing the spot drill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.IndexDrill">
            <summary> An enum constant representing the index drill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.Drill">
            <summary> An enum constant representing the drill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.ChamferMill">
            <summary> An enum constant representing the chamfer option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.FaceMill">
            <summary> An enum constant representing the face mill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.IndexEndmill">
            <summary> An enum constant representing the index endmill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.BallEndmill">
            <summary> An enum constant representing the ball endmill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.Endmill">
            <summary> An enum constant representing the endmill option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.Undefined">
            <summary> An enum constant representing the undefined option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.Insert">
            <summary> An enum constant representing the insert option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.RoundInsert">
            <summary> An enum constant representing the round insert option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.AccessoryItem">
            <summary> An enum constant representing the accessory item option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.Adapter">
            <summary> An enum constant representing the adapter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemType.Unknown">
            <summary> An enum constant representing the Unknown option. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Interop.MappedItemGroup">
            <summary> Values that represent the group of the mapped assembly item. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemGroup.AccessoryItem">
            <summary> An enum constant representing the accessory item option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemGroup.Insert">
            <summary> An enum constant representing the insert option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemGroup.ToolItem">
            <summary> An enum constant representing the tool item option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemGroup.AdaptiveItem">
            <summary> An enum constant representing the adaptive item option. </summary>
        </member>
        <member name="F:Cnc.Tool.Import.Interop.MappedItemGroup.Unknown">
            <summary> An enum constant representing the unmapped option. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheGrooving.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheGrooving.CopyFrom(Cnc.Tool.Interop.TlHolderLatheGrooving)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheGrooving.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheGrooving.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolderLatheGrooving">
            <summary> Defines the TlHolderLatheGrooving tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheGrooving.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Compress">
            <summary> Utility function that compresses the database. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.BrowseForToolLibraryToSaveOrAppend(System.String@)">
            <summary> Display the browse for tool library to save or append dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location of the dialog, and then used to
						return the selected library path. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.BrowseForToolLibraryToSaveOrAppend(System.String@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Display the browse for tool library to save or append dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional, defaults to NULL) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.BrowseForToolLibraryToSave(System.String@)">
            <summary> Display the browse for tool library to save dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location of the dialog, and then used to
						return the selected library path. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.BrowseForToolLibraryToSave(System.String@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Display the browse for tool library to save dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional, defaults to NULL) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.BrowseForToolLibraryToOpen(System.String@)">
            <summary> Display the browse for tool library to open dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location of the dialog, and then used to
						return the selected library path. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.BrowseForToolLibraryToOpen(System.String@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Display the browse for tool library to open dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional, defaults to NULL) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.WasMigrated">
            <summary> Queries if the library has been migrated.  If it has, callers should call "GetLibraryPath" to retrieve an
		  updated library path. </summary>
            <returns> true if the library has been migrated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.IsUpdated">
            <summary> Query if the library is updated. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if updated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.IsOpen">
            <summary> Query if this object is open. </summary>
            <returns> true if open, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetLibraryPath">
            <summary> Gets the full library path including the filename. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library path. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetLibraryFilename">
            <summary> Gets library filename including the extension. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library filename. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetLibraryDataVersion">
            <summary> Gets the library data version. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library data version. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetLibrarySchemaVersion">
            <summary> Gets the library schema version. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library schema version. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.PerformBatchChanges(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject},System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject},System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject})">
            <summary> Performs a batch of changes including the addition of items, deletion of items, and the update of items. </summary>
            <param name="itemsToAdd">    The items to add. </param>
            <param name="itemsToDelete"> The items to delete. </param>
            <param name="itemsToUpdate"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAll">
            <summary> Deletes all items in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlCutParams">
            <summary> Deletes all TlCutParams from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlToolGrades">
            <summary> Deletes all TlToolGrades from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlManufacturers">
            <summary> Deletes all TlManufacturers from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlToolTypes">
            <summary> Deletes all TlToolTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlToolGroups">
            <summary> Deletes all TlToolGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlMaterials">
            <summary> Deletes all TlMaterials from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlOpTypes">
            <summary> Deletes all TlOpTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlOpGroups">
            <summary> Deletes all TlOpGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlHolderLathes">
            <summary> Deletes all TlHolderLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlInserts">
            <summary> Deletes all TlInserts from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlHolders">
            <summary> Deletes all TlHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlToolLathes">
            <summary> Deletes all TlToolLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlToolMills">
            <summary> Deletes all TlToolMills from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlTools">
            <summary> Deletes all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.DeleteAllTlAssemblies">
            <summary> Deletes all TlAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Delete(System.Collections.Generic.List`1{Cnc.Tool.Interop.ILTool})">
            <summary> Deletes the given lathe tools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Delete(Cnc.Tool.Interop.ILTool)">
            <summary> Deletes the given lathe tool from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Delete(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject})">
            <summary> Deletes the given items from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Delete(Cnc.Tool.Interop.TlObject)">
            <summary> Deletes the given item from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Update(System.Collections.Generic.List`1{Cnc.Tool.Interop.ILTool})">
            <summary> Updates the given lathe tools in the library. The items must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Update(Cnc.Tool.Interop.ILTool)">
            <summary> Updates the given lathe tool in the library. The item must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Update(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject})">
            <summary> Updates the given items in the library. The items must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Update(Cnc.Tool.Interop.TlObject)">
            <summary> Updates the given item in the library. The item must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllLatheTools(System.Collections.Generic.List`1{Cnc.Tool.Interop.ILTool})">
            <summary> Gets all lathe tools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="tools"> The vector of resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllLatheTools(Cnc.Tool.Interop.TlMgr)">
            <summary> Gets all lathe tools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The manager to get all items to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllItems(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject})">
            <summary> Gets all items from the library. Does not includes default assemblies (tools not
		  in an assembly). </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The vector of resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllItems(Cnc.Tool.Interop.TlMgr)">
            <summary> Gets all items from the library. Does not includes default assemblies (tools not
		  in an assembly). </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The manager to get all items to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlCutParams(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlCutParam})">
            <summary> Gets all TlCutParams from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlToolGrades(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlToolGrade})">
            <summary> Gets all TlToolGrades from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlManufacturers(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlManufacturer})">
            <summary> Gets all TlManufacturers from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlToolTypes(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlToolType})">
            <summary> Gets all TlToolTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlToolGroups(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlToolGroup})">
            <summary> Gets all TlToolGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlMaterials(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlMaterial})">
            <summary> Gets all TlMaterials from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlOpTypes(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlOpType})">
            <summary> Gets all TlOpTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlOpGroups(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlOpGroup})">
            <summary> Gets all TlOpGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlAdaptiveItems(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlAdaptiveItem})">
            <summary> Gets all TlTurnHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlTurnHolders(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlTurnHolder})">
            <summary> Gets all TlTurnHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlHolderLathes(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlHolderLathe})">
            <summary> Gets all TlHolderLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlInserts(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlInsert})">
            <summary> Gets all TlInserts from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlHolders(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlHolder})">
            <summary> Gets all TlHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlToolLathes(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlToolLathe})">
            <summary> Gets all TlToolLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlToolMills(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlToolMill})">
            <summary> Gets all TlToolMills from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlTools(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlTool})">
            <summary> Gets all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlHolderAssemblies(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlHolderAssembly})">
            <summary> Gets all TlHolderAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlAssemblies(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlAssembly})">
            <summary> Gets all TlAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetAllTlAssemblies(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlAssembly},System.Boolean)">
            <summary> Gets all TlAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items">				    The resulting items. </param>
            <param name="includeDefaultAssemblies"> (Optional, defaults to false) True to locally convert mill tools that are not in an assembly into
										an assembly with a default holder, and include them in the resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.GetItem(System.Guid,Cnc.Tool.Interop.TlObject@)">
            <summary> Retrieves a specific object from the library associated to the specified identifier. </summary>
            <param name="id">	  The identifier. </param>
            <param name="result"> The result instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Add(Cnc.Tool.Interop.TlMgr)">
            <summary> Adds the contents of a TlMgr to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The TlMgr to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Add(System.Collections.Generic.List`1{Cnc.Tool.Interop.ILTool})">
            <summary> Adds a vector of TlObjectPtrs to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Add(Cnc.Tool.Interop.ILTool)">
            <summary> Adds a TlObject item to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Add(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject})">
            <summary> Adds a vector of TlObjectPtrs to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Add(Cnc.Tool.Interop.TlObject)">
            <summary> Adds a TlObject item to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.CreateNewLibrary(System.String)">
            <summary> Creates new library at the specified libraryPath. </summary>
            <param name="libraryPath"> The library file path, including the filename. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.BackupLibrary">
            <summary> Creates a backup up the opened library. Auto-generates backup filename, and places it in the same location
		  as the opened library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.UpdateLibrary">
            <summary> Updates the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.UpdateLibrary(System.Boolean)">
            <summary> Updates the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="createBackup"> (Optional, defaults to true) true to create a backup of the pre-updated library. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.CloseLibrary">
            <summary> Closes the library. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.OpenLibrary(System.String,System.Boolean)">
            <summary> Opens the specified library. Will create the library if it does not exist. </summary>
            <param name="libraryPath">   Full pathname of the library file to open. </param>
            <param name="updateLibrary"> true to update the library to the latest schema version. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.OpenLibrary(System.String,System.Boolean,System.Boolean)">
            <summary> Opens the specified library. Will create the library if it does not exist. </summary>
            <param name="libraryPath">   Full pathname of the library file to open. </param>
            <param name="updateLibrary"> true to update the library to the latest schema version. </param>
            <param name="createBackup">  (Optional, defaults to true) true to create a backup of the pre-updated library. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Finalize">
            <summary> Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.Dispose">
            <summary>Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolLibrarySystem.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ToolLibrarySystem">
            <summary> The tool library system class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolCenterDrill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolCenterDrill.DoSetProfileParams(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolCenterDrill.DoGetProfileParams(Cnc.Tool.MillToolProfileParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolCenterDrill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolCenterDrill.#ctor(Cnc.Tool.TlToolDrill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor taking a base class type. This is used to sepparate the CenterDrill tool type from it's
		  previous home (TlToolDrill) to this class definition. </summary>
            <param name="other"> The const TlToolDrill to process. </param>
            <summary> Copy constructor taking a base class type. This is used to sepparate the CenterDrill tool type from it's
		  previous home (TlToolDrill) to this class definition. </summary>
            <param name="other"> The const TlToolDrill to process. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolCenterDrill.#ctor">
            <summary> Default Constructor. </summary>
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Compress">
            <summary> Utility function that compresses the database. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.BrowseForToolLibraryToSaveOrAppend(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Display the browse for tool library to save or append dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.BrowseForToolLibraryToSave(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Display the browse for tool library to save dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.BrowseForToolLibraryToOpen(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Display the browse for tool library to open dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location
						of the dialog, and then used to return the selected library path. </param>
            <param name="parent">   (Optional) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.WasMigrated">
            <summary> Queries if the library has been migrated.  If it has, callers should call "GetLibraryPath" to retrieve an
		  updated library path. </summary>
            <returns> true if the library has been migrated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.IsUpdated">
            <summary> Query if the library is updated. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if updated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.IsOpen">
            <summary> Query if this object is open. </summary>
            <returns> true if open, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetLibraryPath">
            <summary> Gets the full library path including the filename. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library path. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetLibraryFilename">
            <summary> Gets library filename including the extension. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library filename. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetLibraryDataVersion">
            <summary> Gets the library data version. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library data version. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetLibrarySchemaVersion">
            <summary> Gets the library schema version. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library schema version. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.PerformBatchChanges(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Performs a batch of changes including the addition of items, deletion of items, and the update of items. </summary>
            <param name="itemsToAdd">    The items to add. </param>
            <param name="itemsToDelete"> The items to delete. </param>
            <param name="itemsToUpdate"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAll">
            <summary> Deletes all items in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlCutParams">
            <summary> Deletes all TlCutParams from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolGrades">
            <summary> Deletes all TlToolGrades from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlManufacturers">
            <summary> Deletes all TlManufacturers from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolTypes">
            <summary> Deletes all TlToolTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolGroups">
            <summary> Deletes all TlToolGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlMaterials">
            <summary> Deletes all TlMaterials from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlOpTypes">
            <summary> Deletes all TlOpTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlOpGroups">
            <summary> Deletes all TlOpGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlHolderLathes">
            <summary> Deletes all TlHolderLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlInserts">
            <summary> Deletes all TlInserts from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlHolders">
            <summary> Deletes all TlHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolLathes">
            <summary> Deletes all TlToolLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlToolMills">
            <summary> Deletes all TlToolMills from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlTools">
            <summary> Deletes all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.DeleteAllTlAssemblies">
            <summary> Deletes all TlAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Delete(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given lathe tools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Delete(std.shared_ptr&lt;Cnc.Tool.ILTool&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given lathe tool from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Delete(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given items from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Delete(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given item from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Update(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the given lathe tools in the library. The items must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Update(std.shared_ptr&lt;Cnc.Tool.ILTool&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the given lathe tool in the library. The item must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Update(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the given items in the library. The items must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Update(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the given item in the library. The item must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllLatheTools(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all lathe tools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="tools"> The vector of resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllLatheTools(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all lathe tools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The manager to get all items to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlConnections(std.vector&lt;Cnc.Tool.TlConnection,std.allocator&lt;Cnc.Tool.TlConnection&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all connections from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="tools"> The vector of resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllItems(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all items from the library. Does not includes default assemblies (tools not
		  in an assembly). </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The vector of resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllItems(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all items from the library. Does not includes default assemblies (tools not
		  in an assembly). </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The manager to get all items to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlCutParams(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlCutParam&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlCutParam&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlCutParams from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolGrades(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGrade&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGrade&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolGrades from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlManufacturers(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlManufacturer&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlManufacturer&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlManufacturers from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolTypes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolType&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolType&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolGroups(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGroup&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGroup&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlMaterials(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlMaterial&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlMaterial&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlMaterials from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlOpTypes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlOpType&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlOpType&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlOpTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlOpGroups(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlOpGroup&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlOpGroup&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlOpGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlAdaptiveItems(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlAdaptiveItem&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlAdaptiveItem&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlTurnHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlTurnHolders(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlTurnHolder&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlTurnHolder&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlTurnHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlHolderLathes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderLathe&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderLathe&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlHolderLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlInserts(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlInsert&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlInsert&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlInserts from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlHolders(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolLathes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlToolMills(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolMills from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlTools(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlTool&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlHolderAssemblies(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderAssembly&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderAssembly&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlAssemblies(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all mill tools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The manager to get all items to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetAllTlAssemblies(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets all TlAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items">				    The resulting items. </param>
            <param name="includeDefaultAssemblies"> True to locally convert mill tools that are not in an assembly into
										an assembly with a default holder, and include them in the resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetItem(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlObject&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves a specific object from the library associated to the specified identifier. </summary>
            <param name="id">	    The identifier. </param>
            <param name="spResult"> The result instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Add(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a vector of lathe tools to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Add(std.shared_ptr&lt;Cnc.Tool.ILTool&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Adds a lathe tool to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem">	The item to add. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Add(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the contents of a TlMgr to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The TlMgr to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Add(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a vector of TlObjectPtrs to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Add(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a TlObject item to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.GetFilterString(System.Boolean)">
            <summary>	Gets filter string. </summary>
            <param name="wireMachine">	true if wire machine. </param>
            <returns>	The filter string. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.CreateNewLibrary(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Creates new library at the specified libraryPath. </summary>
            <param name="libraryPath"> The library file path, including the filename. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.BackupLibrary">
            <summary> Creates a backup up the opened library. Auto-generates backup filename, and places it in the same location
		  as the opened library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.UpdateLibrary(System.Boolean)">
            <summary> Updates the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="createBackup"> (Optional) true to create a backup of the pre-updated library. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.CloseLibrary">
            <summary> Closes the library. </summary>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.OpenLibrary(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Boolean)">
            <summary> Opens the specified library. Will create the library if it does not exist. </summary>
            <param name="libraryPath">   Full pathname of the library file to open. </param>
            <param name="updateLibrary"> true to update the library to the latest schema version. </param>
            <param name="createBackup">  (Optional) true to create a backup of the pre-updated library. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.ToolLibrarySystem.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.ToolLibrarySystem">
            <summary> The tool library system class. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.BrowseForToolLibraryToSaveOrAppend(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Display the browse for tool library to save or append dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location of the dialog, and then used to
						return the selected library path. </param>
            <param name="parent">   (Optional) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.BrowseForToolLibraryToSave(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Display the browse for tool library to save dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location of the dialog, and then used to
						return the selected library path. </param>
            <param name="parent">   (Optional) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.BrowseForToolLibraryToOpen(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Display the browse for tool library to open dialog. </summary>
            <param name="filePath"> Full path of the library file. Used as the start location of the dialog, and then used to
						return the selected library path. </param>
            <param name="parent">   (Optional) HWnd of the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Compress">
            <summary> Utility function that compresses the database. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.WasMigrated">
            <summary> Queries if the library has been migrated.  If it has, callers should call "GetLibraryPath" to retrieve an
		  updated library path. </summary>
            <returns> true if the library has been migrated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.IsUpdated">
            <summary> Query if the library is updated. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if updated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.IsOpen">
            <summary> Query if this object is open. </summary>
            <returns> true if open, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetLibraryPath">
            <summary> Gets the full library path including the filename. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library path. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetLibraryFilename">
            <summary> Gets library filename including the extension. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library filename. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetLibraryDataVersion">
            <summary> Gets the library data version. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library data version. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetLibrarySchemaVersion">
            <summary> Gets the library schema version. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> The library schema version. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.PerformBatchChanges(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Performs a batch of changes including the addition of items, deletion of items, and the update of items. </summary>
            <param name="itemsToAdd">    The items to add. </param>
            <param name="itemsToDelete"> The items to delete. </param>
            <param name="itemsToUpdate"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAll">
            <summary> Deletes all items in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlCutParams">
            <summary> Deletes all TlCutParams from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlToolGrades">
            <summary> Deletes all TlToolGrades from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlManufacturers">
            <summary> Deletes all TlManufacturers from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlToolTypes">
            <summary> Deletes all TlToolTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlToolGroups">
            <summary> Deletes all TlToolGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlMaterials">
            <summary> Deletes all TlMaterials from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlOpTypes">
            <summary> Deletes all TlOpTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlOpGroups">
            <summary> Deletes all TlOpGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlHolderLathes">
            <summary> Deletes all TlHolderLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlInserts">
            <summary> Deletes all TlInserts from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlHolders">
            <summary> Deletes all TlHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlToolLathes">
            <summary> Deletes all TlToolLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlToolMills">
            <summary> Deletes all TlToolMills from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlTools">
            <summary> Deletes all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.DeleteAllTlAssemblies">
            <summary> Deletes all TlAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Delete(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given lathe tools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Delete(std.shared_ptr&lt;Cnc.Tool.ILTool&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given lathe tool from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Delete(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given items from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Delete(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given item from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Update(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the given lathe tools in the library. The items must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Update(std.shared_ptr&lt;Cnc.Tool.ILTool&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the given lathe tool in the library. The item must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Update(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the given items in the library. The items must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Update(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the given item in the library. The item must already exist in the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to update. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllLatheTools(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all lathe tools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="tools"> The vector of resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllLatheTools(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all lathe tools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The manager to get all items to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlConnections(std.vector&lt;Cnc.Tool.TlConnection,std.allocator&lt;Cnc.Tool.TlConnection&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all connections from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="tools"> The vector of resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllItems(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all items from the library. Does not includes default assemblies (tools not
		  in an assembly). </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The vector of resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllItems(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all items from the library. Does not includes default assemblies (tools not
		  in an assembly). </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The manager to get all items to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlCutParams(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlCutParam&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlCutParam&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlCutParams from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlToolGrades(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGrade&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGrade&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolGrades from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlManufacturers(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlManufacturer&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlManufacturer&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlManufacturers from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlToolTypes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolType&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolType&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlToolGroups(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGroup&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolGroup&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlMaterials(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlMaterial&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlMaterial&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlMaterials from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlOpTypes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlOpType&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlOpType&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlOpTypes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlOpGroups(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlOpGroup&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlOpGroup&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlOpGroups from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlAdaptiveItems(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlAdaptiveItem&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlAdaptiveItem&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlTurnHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlTurnHolders(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlTurnHolder&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlTurnHolder&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlTurnHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlHolderLathes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderLathe&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderLathe&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlHolderLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlInserts(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlInsert&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlInsert&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlInserts from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlHolders(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlHolders from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlToolLathes(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolLathes from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlToolMills(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlToolMills from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlTools(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlTool&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlHolderAssemblies(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderAssembly&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderAssembly&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all TlTools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlAssemblies(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets all mill tools from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The manager to get all items to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetAllTlAssemblies(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets all TlAssemblies from the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items">				    The resulting items. </param>
            <param name="includeDefaultAssemblies"> True to locally convert mill tools that are not in an assembly into
										an assembly with a default holder, and include them in the resulting items. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.GetItem(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlObject&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves a specific object from the library associated to the specified identifier. </summary>
            <param name="id">	    The identifier. </param>
            <param name="spResult"> The result instance. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Add(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a vector of lathe tools to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Add(std.shared_ptr&lt;Cnc.Tool.ILTool&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Adds a lathe tool to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem">	The item to add. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Add(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the contents of a TlMgr to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="mgr"> The TlMgr to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Add(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a vector of TlObjectPtrs to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="items"> The items to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.Add(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a TlObject item to the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="spItem"> The item to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.BackupLibrary">
            <summary> Creates a backup up the opened library. Auto-generates backup filename, and places it in the same location
		  as the opened library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.UpdateLibrary(System.Boolean)">
            <summary> Updates the library. </summary>
            <remarks> The library must be opened to perform this functionality. </remarks>
            <param name="createBackup"> (Optional) true to create a backup of the pre-updated library. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.CloseLibrary">
            <summary> Closes the library. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolLibrarySystem.OpenLibrary(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Boolean)">
            <summary> Opens the specified library. Will create the library if it does not exist. </summary>
            <param name="libraryPath">   Full pathname of the library file to open. </param>
            <param name="updateLibrary"> true to update the library to the latest schema version. </param>
            <param name="createBackup">  (Optional) true to create a backup of the pre-updated library. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolLibrarySystem">
            <summary> A tool library system interface. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLatheLiveCenter.TaperSize">
            <summary> Taper Size </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLatheLiveCenter.TaperStyle">
            <summary> Taper Style </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLatheLiveCenter.MaxRPM">
            <summary> Maximum RPM </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLatheLiveCenter.MaxWorkpieceWeight">
            <summary> Maximum Workpiece Weight </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.SetCompressionLength(System.Double,System.Boolean)">
            <summary> Sets CompressionLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.GetCompressionLength(System.Boolean)">
            <summary> Gets CompressionLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCompressionLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLatheLiveCenter.CompressionLength">
            <summary> Compression Length </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLatheLiveCenter.PointStyle">
            <summary> Point Style </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.CopyFrom(Cnc.Tool.Interop.TlHolderLatheLiveCenter)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheLiveCenter.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolderLatheLiveCenter">
            <summary> Defines the TlHolderLatheLiveCenter tool class type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheLiveCenter.TlHolderLatheLiveCenterDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheLiveCenter.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheLiveCenter.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheLiveCenter.IsCompleteProfile">
            <summary> Query if this object is complete profile. </summary>
            <returns> true if complete profile, false if not or if empty profile. </returns>
            <summary> Query if this object is complete profile. </summary>
            <returns> true if complete profile, false if not or if empty profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheLiveCenter.CompleteProfile">
            <summary> Completes the profile. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Completes the profile. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheLiveCenter.HalfProfile">
            <summary> Half the profile. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Half the profile. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheLiveCenter.#ctor">
            <summary> Default constructor. </summary>
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.SetFacingXOvercutAmount(System.Double,System.Boolean)">
            <summary> Sets FacingXOvercutAmount property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.GetFacingXOvercutAmount(System.Boolean)">
            <summary> Gets FacingXOvercutAmount property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFacingXOvercutAmount property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.FacingXOvercutAmount">
            <summary> Gets or sets the Facing X Overcut Amount </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.SetFacingRetractionAmount(System.Double,System.Boolean)">
            <summary> Sets FacingRetractionAmount property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.GetFacingRetractionAmount(System.Boolean)">
            <summary> Gets FacingRetractionAmount property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFacingRetractionAmount property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.FacingRetractionAmount">
            <summary> Gets or sets the Facing Retraction Amount </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.SetRoughOverlapAmount(System.Double,System.Boolean)">
            <summary> Sets RoughOverlapAmount property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.GetRoughOverlapAmount(System.Boolean)">
            <summary> Gets RoughOverlapAmount property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRoughOverlapAmount property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.RoughOverlapAmount">
            <summary> Gets or sets the Rough Overlap Amount </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.SetFinishDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets FinishDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.GetFinishDepthOfCut(System.Boolean)">
            <summary> Gets FinishDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFinishDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.FinishDepthOfCut">
            <summary> Gets or sets the Finish Depth Of Cut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.SetRoughDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets RoughDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.GetRoughDepthOfCut(System.Boolean)">
            <summary> Gets RoughDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRoughDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.RoughDepthOfCut">
            <summary> Gets or sets the Rough Depth Of Cut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.CopyFrom(Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlCuttingConfigurationTurningBoring">
            <summary> Defines the TlCuttingConfigurationTurningBoring tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfigurationTurningBoring.DoConvertUnits(System.Boolean)">
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfigurationTurningBoring.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfigurationTurningBoring.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfigurationTurningBoring.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolSlotMill.SecondaryChamferAngle">
            <summary> Chamfer Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.SetSecondaryChamferDist(System.Double,System.Boolean)">
            <summary> Sets SecondaryChamferDist property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.GetSecondaryChamferDist(System.Boolean)">
            <summary> Gets SecondaryChamferDist property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheSecondaryChamferDist property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolSlotMill.SecondaryChamferDist">
            <summary> Chamfer Distance </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.SetSecondaryCornerRadius(System.Double,System.Boolean)">
            <summary> Sets SecondaryCornerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.GetSecondaryCornerRadius(System.Boolean)">
            <summary> Gets SecondaryCornerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheSecondaryCornerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolSlotMill.SecondaryCornerRadius">
            <summary> Corner Radius </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolSlotMill.SecondaryCornerType">
            <summary> Corner Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.CopyFrom(Cnc.Tool.Interop.TlToolSlotMill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolSlotMill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolSlotMill">
            <summary> Defines the TlToolSlotMill tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.GetMillingOpParams">
            <summary> Gets milling operation parameters. </summary>
            <returns> The milling operation parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.SetRadiusType(Cnc.Tool.Interop.TlCornerType)">
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.SetRadiusType(Cnc.Tool.Interop.TlRadiusType)">
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.GetRadiusType">
            <summary>	Gets the radius type. </summary>
            <returns>	The radius type. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.SetPrimaryCornerRadius(System.Double,System.Boolean)">
            <summary> Sets PrimaryCornerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.GetPrimaryCornerRadius(System.Boolean)">
            <summary> Gets PrimaryCornerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePrimaryCornerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolEndmill.PrimaryCornerRadius">
            <summary> Gets or sets the primary corner radius. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.SetChamferLength(System.Double,System.Boolean)">
            <summary> Sets ChamferLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.GetChamferLength(System.Boolean)">
            <summary> Gets ChamferLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheChamferLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolEndmill.ChamferLength">
            <summary> ChamferLength </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolEndmill.CornerType">
            <summary> Corner Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.SetTipDiameter(System.Double,System.Boolean)">
            <summary> Sets TipDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.GetTipDiameter(System.Boolean)">
            <summary> Gets TipDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTipDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolEndmill.TipDiameter">
            <summary> Tip Diameter </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolEndmill.TaperAngle">
            <summary> Taper Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.CopyFrom(Cnc.Tool.Interop.TlToolEndmill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolEndmill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolEndmill">
            <summary> Defines the TlToolEndmill tool class type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolSlotMill.TlToolSlotMillDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.DoIsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The sp other. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The sp other. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.DoSetProfileParams(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.DoGetProfileParams(Cnc.Tool.MillToolProfileParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.#ctor(Cnc.Tool.TlToolEndmill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor taking a base class type. This is used to sepparate the SlotMill tool type from it's
		  previous home (TlToolEndmill) to this class definition. </summary>
            <param name="other"> The const TlToolEndmill to process. </param>
            <summary> Copy constructor taking a base class type. This is used to sepparate the SlotMill tool type from it's
		  previous home (TlToolEndmill) to this class definition. </summary>
            <param name="other"> The const TlToolEndmill to process. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolSlotMill.#ctor">
            <summary> Default Constructor. </summary>
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolEndmill.TlToolEndmillDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
            <summary>	Declaration of private deserialization implementation class. </summary>
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.DoIsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The sp other. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The sp other. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The sp other. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.DoSetProfileParams(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.DoGetProfileParams(Cnc.Tool.MillToolProfileParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.GetMillingOpParams">
            <summary> Gets milling operation parameters. </summary>
            <returns> The milling operation parameters. </returns>
            <summary> Gets milling operation parameters. </summary>
            <returns> The milling operation parameters. </returns>
            <summary> Gets milling operation parameters. </summary>
            <returns> The milling operation parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.SetRadiusType(TlCornerType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.SetRadiusType(TlRadiusType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.SetRadiusType(System.Int16)">
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.GetRadiusType">
            <summary>	Gets the radius type. </summary>
            <returns>	The radius type. </returns>
            <summary>	Gets the radius type. </summary>
            <returns>	The radius type. </returns>
            <summary>	Gets the radius type. </summary>
            <returns>	The radius type. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.SetCornerRadius(System.Double)">
            <summary>	Sets the corner radius. </summary>
            <param name="cornerRadius">	The corner radius. </param>
            <summary>	Sets the corner radius. </summary>
            <param name="cornerRadius">	The corner radius. </param>
            <summary>	Sets the corner radius. </summary>
            <param name="cornerRadius">	The corner radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.GetCornerRadius">
            <summary>	Gets the corner radius. </summary>
            <returns>	The corner radius. </returns>
            <summary>	Gets the corner radius. </summary>
            <returns>	The corner radius. </returns>
            <summary>	Gets the corner radius. </summary>
            <returns>	The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets an operation tool information. </summary>
            <param name="info"> The information. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Sets an operation tool information. </summary>
            <param name="info"> The information. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Sets an operation tool information. </summary>
            <param name="info"> The information. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.GetOpToolInfo">
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolEndmill.#ctor">
            <summary>	Default constructor. </summary>
            <summary>	Default constructor. </summary>
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlSolidUtils.RunRepairSmallFacesApp(Cnc.Tool.Interop.TlAdaptiveItem,System.Windows.Media.Media3D.Matrix3D)">
            <summary> Runs the Solid Repair Small Faces App on the solids defined for the given item. </summary>
            <param name="item">		 The item to repair the small faces of. </param>
            <param name="viewXform"> The view transform used to present the solids in a user friendly way. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlSolidUtils.RunRepairSmallFacesApp(Cnc.Tool.Interop.TlTurnHolder,System.Windows.Media.Media3D.Matrix3D)">
            <summary> Runs the Solid Repair Small Faces App on the solids defined for the given item. </summary>
            <param name="item">		 The item to repair the small faces of. </param>
            <param name="viewXform"> The view transform used to present the solids in a user friendly way. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlSolidUtils.RunRepairSmallFacesApp(Cnc.Tool.Interop.TlInsert,System.Windows.Media.Media3D.Matrix3D)">
            <summary> Runs the Solid Repair Small Faces App on the solids defined for the given item. </summary>
            <param name="item">		 The item to repair the small faces of. </param>
            <param name="viewXform"> The view transform used to present the solids in a user friendly way. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlSolidUtils.OptimizeAndCheckForFaults(Cnc.Tool.Interop.TlAdaptiveItem,System.Boolean@)">
            <summary> Optimizes the solids defined as part of the given item and checks for faults on the result. </summary>
            <param name="item">		 The item to optimize the solids of. </param>
            <param name="hasFaults"> Output flag to convey if the optimized solids have faults. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlSolidUtils.OptimizeAndCheckForFaults(Cnc.Tool.Interop.TlTurnHolder,System.Boolean@)">
            <summary> Optimizes the solids defined as part of the given item and checks for faults on the result. </summary>
            <param name="item">		 The item to optimize the solids of. </param>
            <param name="hasFaults"> Output flag to convey if the optimized solids have faults. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlSolidUtils.OptimizeAndCheckForFaults(Cnc.Tool.Interop.TlInsert,System.Boolean@)">
            <summary> Optimizes the solids defined as part of the given item and checks for faults on the result. </summary>
            <param name="item">		 The item to optimize the solids of. </param>
            <param name="hasFaults"> Output flag to convey if the optimized solids have faults. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlSolidUtils.CheckForFaults(Cnc.Tool.Interop.TlAdaptiveItem)">
            <summary> Checks for faults on the solids defined as part of the given item. </summary>
            <param name="item"> The item to optimize the solids of. </param>
            <returns> True if faults are found, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlSolidUtils.CheckForFaults(Cnc.Tool.Interop.TlTurnHolder)">
            <summary> Checks for faults on the solids defined as part of the given item. </summary>
            <param name="item"> The item to optimize the solids of. </param>
            <returns> True if faults are found, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlSolidUtils.CheckForFaults(Cnc.Tool.Interop.TlInsert)">
            <summary> Checks for faults on the solids defined as part of the given item. </summary>
            <param name="item"> The item to optimize the solids of. </param>
            <returns> True if faults are found, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlSolidUtils.Optimize(Cnc.Tool.Interop.TlAdaptiveItem)">
            <summary> Optimizes the solids defined as part of the given adaptive item. </summary>
            <param name="item"> The adaptive item to optimize the solids of. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlSolidUtils.Optimize(Cnc.Tool.Interop.TlTurnHolder)">
            <summary> Optimizes the solids defined as part of the given turn holder. </summary>
            <param name="item"> The turn holder to optimize the solids of. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlSolidUtils.Optimize(Cnc.Tool.Interop.TlInsert)">
            <summary> Optimizes the solids defined as part of the given insert. </summary>
            <param name="item"> The insert to optimize the solids of. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.TlSolidUtils">
            <summary> Utility methods for shared functionality related to tool solids. </summary>
        </member>
        <member name="M:Cnc.Tool.TlSolidUtils.RunRepairSmallFacesApp(Cnc.Tool.TlAdaptiveItem*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Runs the Solid Repair Small Faces App on the solids defined for the given item. </summary>
            <param name="item">			The item to repair the small faces of. </param>
            <param name="viewXform">	(Optional) The view transform used to present the solids in a user friendly way. </param>
        </member>
        <member name="M:Cnc.Tool.TlSolidUtils.RunRepairSmallFacesApp(Cnc.Tool.TlTurnHolder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Runs the Solid Repair Small Faces App on the solids defined for the given item. </summary>
            <param name="item">			The item to repair the small faces of. </param>
            <param name="viewXform">	(Optional) The view transform used to present the solids in a user friendly way. </param>
        </member>
        <member name="M:Cnc.Tool.TlSolidUtils.RunRepairSmallFacesApp(Cnc.Tool.TlInsert*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Runs the Solid Repair Small Faces App on the solids defined for the given item. </summary>
            <param name="item">			The item to repair the small faces of. </param>
            <param name="viewXform">	(Optional) The view transform used to present the solids in a user friendly way. </param>
        </member>
        <member name="M:Cnc.Tool.TlSolidUtils.OptimizeAndCheckForFaults(Cnc.Tool.TlAdaptiveItem*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Optimizes the solids defined as part of the given item and checks for faults on the result. </summary>
            <param name="item">			The item to optimize the solids of. </param>
            <param name="hasFaults">	Output flag to convey if the optimized solids have faults. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlSolidUtils.OptimizeAndCheckForFaults(Cnc.Tool.TlTurnHolder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Optimizes the solids defined as part of the given item and checks for faults on the result. </summary>
            <param name="item">			The item to optimize the solids of. </param>
            <param name="hasFaults">	Output flag to convey if the optimized solids have faults. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlSolidUtils.OptimizeAndCheckForFaults(Cnc.Tool.TlInsert*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Optimizes the solids defined as part of the given item and checks for faults on the result. </summary>
            <param name="item">			The item to optimize the solids of. </param>
            <param name="hasFaults">	Output flag to convey if the optimized solids have faults. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlSolidUtils.CheckForFaults(Cnc.Tool.TlAdaptiveItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Checks for faults on the solids defined as part of the given item. </summary>
            <param name="item">	The item to optimize the solids of. </param>
            <returns>	True if faults are found, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlSolidUtils.CheckForFaults(Cnc.Tool.TlTurnHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Checks for faults on the solids defined as part of the given item. </summary>
            <param name="item">	The item to optimize the solids of. </param>
            <returns>	True if faults are found, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlSolidUtils.CheckForFaults(Cnc.Tool.TlInsert!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Checks for faults on the solids defined as part of the given item. </summary>
            <param name="item">	The item to optimize the solids of. </param>
            <returns>	True if faults are found, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlSolidUtils.Optimize(Cnc.Tool.TlAdaptiveItem*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Optimizes the solids defined as part of the given adaptive item. </summary>
            <param name="item">	The adaptive item to optimize the solids of. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlSolidUtils.Optimize(Cnc.Tool.TlTurnHolder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Optimizes the solids defined as part of the given turn holder. </summary>
            <param name="item">	The turn holder to optimize the solids of. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlSolidUtils.Optimize(Cnc.Tool.TlInsert*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Optimizes the solids defined as part of the given insert. </summary>
            <param name="item">	The insert to optimize the solids of. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.SetOpGroupID(System.Guid)">
            <summary>	Sets an operation group identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.SetOpGroupID(Cnc.Tool.Interop.TlOpGroup)">
            <summary>	Sets an operation group identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.GetOpGroupID">
            <summary>	Gets the operation group identifier. </summary>
            <returns>	The operation group identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.CopyFrom(Cnc.Tool.Interop.TlOpType)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpType.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlOpType">
            <summary> Defines the TlOpType tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlOpType.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="F:Cnc.Tool.TlOpType.m_ParentGroup">
            <summary>	Group the parent belongs to. </summary>
            <summary>	Group the parent belongs to. </summary>
        </member>
        <member name="M:Cnc.Tool.TlOpType.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlOpType.SetOpGroupID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an operation group identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Sets an operation group identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlOpType.SetOpGroupID(Cnc.Tool.TlOpGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an operation group identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Sets an operation group identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlOpType.GetOpGroupID">
            <summary>	Gets the operation group identifier. </summary>
            <returns>	The operation group identifier. </returns>
            <summary>	Gets the operation group identifier. </summary>
            <returns>	The operation group identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.SetFinishDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets FinishDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.GetFinishDepthOfCut(System.Boolean)">
            <summary> Gets FinishDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFinishDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.FinishDepthOfCut">
            <summary> Gets or sets the finish depth of cut. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.SetRoughDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets RoughDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.GetRoughDepthOfCut(System.Boolean)">
            <summary> Gets RoughDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRoughDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.RoughDepthOfCut">
            <summary> Gets or sets the rough depth of cut. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.BackoffPercent">
            <summary>  Gets or sets the backoff percent. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.SetStockClearance(System.Double,System.Boolean)">
            <summary> Sets StockClearance property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.GetStockClearance(System.Boolean)">
            <summary> Gets StockClearance property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheStockClearance property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.StockClearance">
            <summary> Gets or sets the stock clearance. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.CopyFrom(Cnc.Tool.Interop.TlCuttingConfigurationGrooving)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationGrooving.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlCuttingConfigurationGrooving">
            <summary> Defines the TlCuttingConfigurationGrooving tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfigurationGrooving.DoConvertUnits(System.Boolean)">
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfigurationGrooving.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfigurationGrooving.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfigurationGrooving.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheTurning.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheTurning.CopyFrom(Cnc.Tool.Interop.TlHolderLatheTurning)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheTurning.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheTurning.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolderLatheTurning">
            <summary> Defines the TlHolderLatheTurning tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheTurning.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="F:CBitmapRenderTarget.m_pBitmapRenderTarget">
            <summary>
A pointer to an ID2D1BitmapRenderTarget object.
</summary>
        </member>
        <member name="M:CBitmapRenderTarget.GetBitmap(CD2DBitmap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the bitmap for this render target. The returned bitmap can be used for drawing operations. </summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="bitmap">When this method returns, contains the valid bitmap for this render target. This bitmap can be used for drawing operations.</param>
        </member>
        <member name="M:CBitmapRenderTarget.op_Implicit~ID2D1BitmapRenderTarget*">
            <summary>
Returns ID2D1BitmapRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1BitmapRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CBitmapRenderTarget.GetBitmapRenderTarget">
            <summary>
Returns ID2D1BitmapRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1BitmapRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CBitmapRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CBitmapRenderTarget.Attach(ID2D1BitmapRenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CBitmapRenderTarget.#ctor">
            <summary>
Constructs a CBitmapRenderTarget object.</summary>
        </member>
        <member name="F:CDCRenderTarget.m_pDCRenderTarget">
            <summary>
A pointer to an ID2D1DCRenderTarget object.
</summary>
        </member>
        <member name="M:CDCRenderTarget.op_Implicit~ID2D1DCRenderTarget*">
            <summary>
Returns ID2D1DCRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1DCRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CDCRenderTarget.GetDCRenderTarget">
            <summary>
Returns ID2D1DCRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1DCRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CDCRenderTarget.BindDC(CDC!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Binds the render target to the device context to which it issues drawing commands</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="dc">The device context to which the render target issues drawing commands</param>
            <param name="rect">The dimensions of the handle to a device context (HDC) to which the render target is bound</param>
        </member>
        <member name="M:CDCRenderTarget.Create(D2D1_RENDER_TARGET_PROPERTIES!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a CDCRenderTarget.</summary>
            <returns>
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="props">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering.</param>
        </member>
        <member name="M:CDCRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CDCRenderTarget.Attach(ID2D1DCRenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CDCRenderTarget.#ctor">
            <summary>
Constructs a CDCRenderTarget object.</summary>
        </member>
        <member name="T:CDCRenderTarget">
            <summary>
ID2D1DCRenderTarget wrapper.
</summary>
        </member>
        <member name="F:CHwndRenderTarget.m_pHwndRenderTarget">
            <summary>
A pointer to an ID2D1HwndRenderTarget object.
</summary>
        </member>
        <member name="M:CHwndRenderTarget.Resize(CD2DSizeU!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Changes the size of the render target to the specified pixel size</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="size">The new size of the render target in device pixels</param>
        </member>
        <member name="M:CHwndRenderTarget.CheckWindowState">
            <summary>
Indicates whether the HWND associated with this render target is occluded.</summary>
            <returns>
A value that indicates whether the HWND associated with this render target is occluded.</returns>
        </member>
        <member name="M:CHwndRenderTarget.GetHwnd">
            <summary>
Returns the HWND associated with this render target.</summary>
            <returns>
The HWND associated with this render target.</returns>
        </member>
        <member name="M:CHwndRenderTarget.op_Implicit~ID2D1HwndRenderTarget*">
            <summary>
Returns ID2D1HwndRenderTarget interface.</summary>
            <returns>
Pointer to an ID2D1HwndRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CHwndRenderTarget.GetHwndRenderTarget">
            <summary>
Returns ID2D1HwndRenderTarget interface.</summary>
            <returns>
Pointer to an ID2D1HwndRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CHwndRenderTarget.ReCreate(HWND__*)">
            <summary>
Re-creates a render target associated with the window</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="hWnd">The HWND associated with this render target</param>
        </member>
        <member name="M:CHwndRenderTarget.Create(HWND__*)">
            <summary>
Creates a render target associated with the window </summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="hWnd">The HWND associated with this render target</param>
        </member>
        <member name="M:CHwndRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CHwndRenderTarget.Attach(ID2D1HwndRenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CHwndRenderTarget.#ctor(HWND__*)">
            <summary>
Constructs a CHwndRenderTarget object from HWND.</summary>
            <param name="hwnd">The HWND associated with this render target</param>
        </member>
        <member name="T:CHwndRenderTarget">
            <summary>
ID2D1HwndRenderTarget wrapper.
</summary>
        </member>
        <member name="F:CRenderTarget.m_pTextFormatDefault">
            <summary>
A pointer to CD2DTextFormat object that contains a default text format.
</summary>
        </member>
        <member name="F:CRenderTarget.m_lstResources">
            <summary>
A list of pointers to CD2DResource objects.
</summary>
        </member>
        <member name="F:CRenderTarget.m_pRenderTarget">
            <summary>
A pointer to an ID2D1RenderTarget object.
</summary>
        </member>
        <member name="M:CRenderTarget.VerifyResource(CD2DResource*)">
            <summary>
Verifies CD2DResource object validity; creates the object if it didn't already exist.</summary>
            <param name="pResource">Pointer to CD2DResource object.</param>
            <returns> 
TRUE is object if valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CRenderTarget.PopAxisAlignedClip">
            <summary>
Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.</summary>
        </member>
        <member name="M:CRenderTarget.PushAxisAlignedClip(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,D2D1_ANTIALIAS_MODE)">
            <summary>
Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.</summary>
            <param name="rectClip">The size and position of the clipping area, in device-independent pixels.</param>
            <param name="mode">The antialiasing mode that is used to draw the edges of clip rects that have subpixel boundaries, and to blend the clip with the scene contents. The blending is performed once when the PopAxisAlignedClip method is called, and does not apply to each primitive within the layer.</param>
        </member>
        <member name="M:CRenderTarget.RestoreDrawingState(ID2D1DrawingStateBlock*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the render target's drawing state to that of the specified ID2D1DrawingStateBlock.</summary>
            <param name="drawingStateBlock">The new drawing state of the render target.</param>
        </member>
        <member name="M:CRenderTarget.SaveDrawingState(ID2D1DrawingStateBlock*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Saves the current drawing state to the specified ID2D1DrawingStateBlock.</summary>
            <param name="drawingStateBlock">When this method returns, contains the current drawing state of the render target. This parameter must be initialized before passing it to the method.</param>
        </member>
        <member name="M:CRenderTarget.Flush(System.UInt64*,System.UInt64*)">
            <summary>
Executes all pending drawing commands.</summary>
            <param name="tag1">Contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</param>
            <param name="tag2">Contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:CRenderTarget.PopLayer">
            <summary>
Stops redirecting drawing operations to the layer that is specified by the last PushLayer call.</summary>
        </member>
        <member name="M:CRenderTarget.PushLayer(D2D1_LAYER_PARAMETERS!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DLayer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds the specified layer to the render target so that it receives all subsequent drawing operations until PopLayer is called.</summary>
            <param name="layerParameters">The content bounds, geometric mask, opacity, opacity mask, and antialiasing options for the layer.</param>
            <param name="layer">The layer that receives subsequent drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.CreateCompatibleRenderTarget(CBitmapRenderTarget*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF,CD2DSizeU,D2D1_PIXEL_FORMAT*,D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS)">
            <summary>
Creates a new bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target .</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="bitmapTarget">When this method returns, contains the address of a pointer to a new bitmap render target. This parameter is passed uninitialized.</param>
            <param name="sizeDesired">The desired size of the new render target in device-independent pixels if it should be different from the original render target, or NULL. For more information, see the Remarks section.</param>
            <param name="sizePixelDesired">The desired size of the new render target in pixels if it should be different from the original render target, or NULL. For more information, see the Remarks section.</param>
            <param name="desiredFormat">The desired pixel format and alpha mode of the new render target, or NULL. If the pixel format is set to DXGI_FORMAT_UNKNOWN or if this parameter is null, the new render target uses the same pixel format as the original render target. If the alpha mode is D2D1_ALPHA_MODE_UNKNOWN or this parameter is NULL, the alpha mode of the new render target defaults to D2D1_ALPHA_MODE_PREMULTIPLIED. For information about supported pixel formats, see Supported Pixel Formats and Alpha Modes.</param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
        </member>
        <member name="M:CRenderTarget.GetTransform(D2D_MATRIX_3X2_F*)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
            <param name="transform">The transform to apply to the render target.</param>
        </member>
        <member name="M:CRenderTarget.SetTransform(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
            <param name="transform">The transform to apply to the render target.</param>
        </member>
        <member name="M:CRenderTarget.SetTransform(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
            <param name="transform">The transform to apply to the render target.</param>
        </member>
        <member name="M:CRenderTarget.GetTextRenderingParams(IDWriteRenderingParams**)">
            <summary>
Retrieves the render target's current text rendering options.</summary>
            <param name="textRenderingParams">When this method returns, textRenderingParamscontains the address of a pointer to the render target's current text rendering options.</param>
        </member>
        <member name="M:CRenderTarget.SetTextRenderingParams(IDWriteRenderingParams*)">
            <summary>
Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.</summary>
            <param name="textRenderingParams">The text rendering options to be applied to all subsequent text and glyph drawing operations; NULL to clear current text rendering options.</param>
        </member>
        <member name="M:CRenderTarget.GetTextAntialiasMode">
            <summary>
Gets the current antialiasing mode for text and glyph drawing operations.</summary>
            <returns>
Current antialiasing mode for text and glyph drawing operations.</returns>
        </member>
        <member name="M:CRenderTarget.SetTextAntialiasMode(D2D1_TEXT_ANTIALIAS_MODE)">
            <summary>
Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.</summary>
            <param name="textAntialiasMode">The antialiasing mode to use for subsequent text and glyph drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.GetAntialiasMode">
            <summary>
Retrieves the current antialiasing mode for nontext drawing operations.</summary>
            <returns>
Current antialiasing mode for nontext drawing operations.</returns>
        </member>
        <member name="M:CRenderTarget.SetAntialiasMode(D2D1_ANTIALIAS_MODE)">
            <summary>
Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.</summary>
            <param name="antialiasMode">The antialiasing mode for future drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.FillMesh(CD2DMesh*,CD2DBrush*)">
            <summary>
Paints the interior of the specified mesh.</summary>
            <param name="pMesh">The mesh to paint.</param>
            <param name="pBrush">The brush used to paint the mesh.</param>
        </member>
        <member name="M:CRenderTarget.DrawGlyphRun(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,DWRITE_GLYPH_RUN!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,DWRITE_MEASURING_MODE)">
            <summary>
Draws the specified glyphs.</summary>
            <param name="ptBaseLineOrigin">The origin, in device-independent pixels, of the glyphs' baseline.</param>
            <param name="glyphRun">The glyphs to render.</param>
            <param name="pForegroundBrush">The brush used to paint the specified glyphs.</param>
            <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is DWRITE_MEASURING_MODE_NATURAL.</param>
        </member>
        <member name="M:CRenderTarget.FillGeometry(CD2DGeometry*,CD2DBrush*,CD2DBrush*)">
            <summary>
Paints the interior of the specified geometry.</summary>
            <param name="pGeometry">The geometry to paint.</param>
            <param name="pBrush">The brush used to paint the geometry's interior.</param>
            <param name="pOpacityBrush">The opacity mask to apply to the geometry;NULL for no opacity mask. If an opacity mask (the opacityBrush parameter) is specified, brush must be an ID2D1BitmapBrush that has its x- and y-extend modes set to D2D1_EXTEND_MODE_CLAMP. For more information, see the Remarks section.</param>
        </member>
        <member name="M:CRenderTarget.DrawGeometry(CD2DGeometry*,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of the specified geometry using the specified stroke style.</summary>
            <param name="pGeometry">The geometry to draw.</param>
            <param name="pBrush">The brush used to paint the geometry's stroke.</param>
            <param name="fStrokeWidth">The thickness of the geometry's stroke. The stroke is centered on the geometry's outline.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry's outline, or NULL to paint a solid stroke.</param>
        </member>
        <member name="M:CRenderTarget.DrawBitmap(CD2DBitmap*,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,D2D1_BITMAP_INTERPOLATION_MODE,CD2DRectF!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Draws the formatted text described by the specified IDWriteTextLayout object.</summary>
            <param name="pBitmap">The bitmap to render.</param>
            <param name="rectDest">The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn. If the rectangle is not well-ordered, nothing is drawn, but the render target does not enter an error state.</param>
            <param name="fOpacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.</param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation.</param>
            <param name="pRectSrc">The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to draw.</param>
        </member>
        <member name="M:CRenderTarget.DrawTextLayout(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DTextLayout*,CD2DBrush*,D2D1_DRAW_TEXT_OPTIONS)">
            <summary>
Draws the formatted text described by the specified IDWriteTextLayout object.</summary>
            <param name="ptOrigin">The point, described in device-independent pixels, at which the upper-left corner of the text described by textLayout is drawn.</param>
            <param name="textLayout">The formatted text to draw. Any drawing effects that do not inherit from ID2D1Resource are ignored. If there are drawing effects that inherit from ID2D1Resource that are not brushes, this method fails and the render target is put in an error state.</param>
            <param name="pBrushForeground">The brush used to paint any text in textLayout that does not already have a brush associated with it as a drawing effect (specified by the IDWriteTextLayout::SetDrawingEffect method).</param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is D2D1_DRAW_TEXT_OPTIONS_NONE, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</param>
        </member>
        <member name="M:CRenderTarget.DrawText(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,CD2DTextFormat*,D2D1_DRAW_TEXT_OPTIONS,DWRITE_MEASURING_MODE)">
            <summary>
Draws the specified text using the format information provided by an IDWriteTextFormat object.</summary>
            <param name="strText">A pointer to an array of Unicode characters to draw.</param>
            <param name="rect">The size and position of the area in which the text is drawn.</param>
            <param name="pForegroundBrush">The brush used to paint the text.</param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.</param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is D2D1_DRAW_TEXT_OPTIONS_NONE, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</param>
            <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is DWRITE_MEASURING_MODE_NATURAL.</param>
        </member>
        <member name="M:CRenderTarget.FillOpacityMask(CD2DBitmap*,CD2DBrush*,D2D1_OPACITY_MASK_CONTENT,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.</summary>
            <param name="pOpacityMask">The position and radius, in device-independent pixels, of the ellipse to paint.</param>
            <param name="pBrush">The brush used to paint the region of the render target specified by destinationRectangle.</param>
            <param name="content">The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended.</param>
            <param name="rectDest">The region of the render target to paint, in device-independent pixels.</param>
            <param name="rectSrc">The region of the bitmap to use as the opacity mask, in device-independent pixels.</param>
        </member>
        <member name="M:CRenderTarget.DrawLine(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws a line between the specified points using the specified stroke style.</summary>
            <param name="ptFrom">The start point of the line, in device-independent pixels.</param>
            <param name="ptTo">The end point of the line, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the line's stroke.</param>
            <param name="fStrokeWidth">A value greater than or equal to 0.0f that specifies the width of the stroke. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</param>
            <param name="strokeStyle">The style of stroke to paint, or NULL to paint a solid line.</param>
        </member>
        <member name="M:CRenderTarget.FillEllipse(CD2DEllipse!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*)">
            <summary>
Paints the interior of the specified ellipse.</summary>
            <param name="ellipse">The position and radius, in device-independent pixels, of the ellipse to paint.</param>
            <param name="pBrush">The brush used to paint the interior of the ellipse.</param>
        </member>
        <member name="M:CRenderTarget.DrawEllipse(CD2DEllipse!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of the specified ellipse using the specified stroke style.</summary>
            <param name="ellipse">The position and radius of the ellipse to draw, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the ellipse's outline.</param>
            <param name="fStrokeWidth">The thickness of the ellipse's stroke. The stroke is centered on the ellipse's outline.</param>
            <param name="strokeStyle">The style of stroke to apply to the ellipse's outline, or NULL to paint a solid stroke.</param>
        </member>
        <member name="M:CRenderTarget.FillRoundedRectangle(CD2DRoundedRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*)">
            <summary>
Paints the interior of the specified rounded rectangle.</summary>
            <param name="rectRounded">The dimensions of the rounded rectangle to paint, in device independent pixels.</param>
            <param name="pBrush">The brush used to paint the interior of the rounded rectangle.</param>
        </member>
        <member name="M:CRenderTarget.DrawRoundedRectangle(CD2DRoundedRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of the specified rounded rectangle using the specified stroke style.</summary>
            <param name="rectRounded">The dimensions of the rounded rectangle to draw, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the rounded rectangle's outline.</param>
            <param name="fStrokeWidth">The width of the rounded rectangle's stroke. The stroke is centered on the rounded rectangle's outline. The default value is 1.0f.</param>
            <param name="strokeStyle">The style of the rounded rectangle's stroke, or NULL to paint a solid stroke. The default value is NULL.</param>
        </member>
        <member name="M:CRenderTarget.FillRectangle(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*)">
            <summary>
Paints the interior of the specified rectangle.</summary>
            <param name="rect">The dimension of the rectangle to paint, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the rectangle's interior.</param>
        </member>
        <member name="M:CRenderTarget.DrawRectangle(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of a rectangle that has the specified dimensions and stroke style.</summary>
            <param name="rect">The dimensions of the rectangle to draw, in device-independent pixels</param>
            <param name="pBrush">The brush used to paint the rectangle's stroke</param>
            <param name="fStrokeWidth">A value greater than or equal to 0.0f that specifies the width of the rectangle's stroke. The stroke is centered on the rectangle's outline.</param>
            <param name="strokeStyle">The style of stroke to paint, or NULL to paint a solid stroke.</param>
        </member>
        <member name="M:CRenderTarget.Clear(_D3DCOLORVALUE)">
            <summary>
Clears the drawing area to the specified color.</summary>
            <param name="color">The color to which the drawing area is cleared.</param>
        </member>
        <member name="M:CRenderTarget.COLORREF_TO_D2DCOLOR(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary>
Converts GDI color and alpha values to the D2D1_COLOR_F object.</summary>
            <param name="color">RGB value.</param>
            <param name="nAlpha">Alpha value.</param>
            <returns>
D2D1_COLOR_F value.</returns>
        </member>
        <member name="M:CRenderTarget.EndDraw">
            <summary>
Ends drawing operations on the render target and indicates the current error state and associated tags.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:CRenderTarget.BeginDraw">
            <summary>
Initiates drawing on this render target.</summary>
        </member>
        <member name="M:CRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CRenderTarget.Attach(ID2D1RenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pRenderTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CRenderTarget.GetMaximumBitmapSize">
            <summary>
Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target</summary>
            <returns> 
The maximum size, in pixels, of any one bitmap dimension supported by the render target</returns>
        </member>
        <member name="M:CRenderTarget.IsSupported(D2D1_RENDER_TARGET_PROPERTIES!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Indicates whether the render target supports the specified properties</summary>
            <returns> 
TRUE if the specified render target properties are supported by this render target; otherwise, FALSE</returns>
            <param name="renderTargetProperties">The render target properties to test</param>
        </member>
        <member name="M:CRenderTarget.SetTags(System.UInt64,System.UInt64)">
            <summary>
Specifies a label for subsequent drawing operations.</summary>
            <param name="tag1">A label to apply to subsequent drawing operations.</param>
            <param name="tag2">A label to apply to subsequent drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.GetTags(System.UInt64*,System.UInt64*)">
            <summary>
Gets the label for subsequent drawing operations.</summary>
            <param name="tag1">Contains the first label for subsequent drawing operations. This parameter is passed uninitialized. If NULL is specified, no value is retrieved for this parameter.</param>
            <param name="tag2">Contains the second label for subsequent drawing operations. This parameter is passed uninitialized. If NULL is specified, no value is retrieved for this parameter.</param>
        </member>
        <member name="M:CRenderTarget.GetPixelSize">
            <summary>
Returns the size of the render target in device pixels</summary>
            <returns> 
The size of the render target in device pixels</returns>
        </member>
        <member name="M:CRenderTarget.GetPixelFormat">
            <summary>
Retrieves the pixel format and alpha mode of the render target</summary>
            <returns> 
The pixel format and alpha mode of the render target</returns>
        </member>
        <member name="M:CRenderTarget.GetDpi">
            <summary>
Returns the render target's dots per inch (DPI)</summary>
            <returns> 
The render target's dots per inch (DPI).</returns>
        </member>
        <member name="M:CRenderTarget.SetDpi(CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the dots per inch (DPI) of the render target.</summary>
            <param name="sizeDPI">A value greater than or equal to zero that specifies the horizontal/verticalDPI of the render target.</param>
        </member>
        <member name="M:CRenderTarget.GetSize">
            <summary>
Returns the size of the render target in device-independent pixels</summary>
            <returns> 
The current size of the render target in device-independent pixels</returns>
        </member>
        <member name="M:CRenderTarget.op_Implicit~ID2D1RenderTarget*">
            <summary>
Returns ID2D1RenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1RenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CRenderTarget.GetRenderTarget">
            <summary>
Returns ID2D1RenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1RenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CRenderTarget.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CRenderTarget.Destroy(System.Int32)">
            <summary>
Deletes one or more resources</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="bDeleteResources">If bDeleteResources is TRUE, all resources located in m_lstResources will be automatically destroyed.</param>
        </member>
        <member name="M:CRenderTarget.Dispose">
            <summary>
The destructor. Called when a render target object is being destroyed.
</summary>
        </member>
        <member name="M:CRenderTarget.#ctor">
            <summary>
Constructs a CRenderTarget object.</summary>
        </member>
        <member name="T:CRenderTarget">
            <summary>
ID2D1RenderTarget wrapper.
</summary>
        </member>
        <member name="F:CD2DMesh.m_pMesh">
            <summary>
A pointer to an ID2D1Mesh.
</summary>
        </member>
        <member name="M:CD2DMesh.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DMesh.Destroy">
            <summary>
Destroys a CD2DMesh object.</summary>
        </member>
        <member name="M:CD2DMesh.Create(CRenderTarget*)">
            <summary>
Creates a CD2DMesh.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DMesh.Open">
            <summary>
Opens the mesh for population.</summary>
            <returns>
A pointer to an ID2D1TessellationSink that is used to populate the mesh.</returns>
        </member>
        <member name="M:CD2DMesh.op_Implicit~ID2D1Mesh*">
            <summary>
Returns ID2D1Mesh interface</summary>
            <returns> 
Pointer to an ID2D1Mesh interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DMesh.Get">
            <summary>
Returns ID2D1Mesh interface</summary>
            <returns> 
Pointer to an ID2D1Mesh interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DMesh.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DMesh.Attach(ID2D1Mesh*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DMesh.Dispose">
            <summary>
The destructor. Called when a D2D mesh object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DMesh.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DMesh object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DMesh">
            <summary>
ID2D1Mesh wrapper.
</summary>
        </member>
        <member name="F:CD2DGeometrySink.m_pSink">
            <summary>
A pointer to an ID2D1GeometrySink.
</summary>
        </member>
        <member name="M:CD2DGeometrySink.SetSegmentFlags(D2D1_PATH_SEGMENT)">
            <summary>
Specifies stroke and join options to be applied to new segments added to the geometry sink.</summary>
            <param name="vertexFlags">Stroke and join options to be applied to new segments added to the geometry sink.</param>
        </member>
        <member name="M:CD2DGeometrySink.SetFillMode(D2D1_FILL_MODE)">
            <summary>
Specifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside.</summary>
            <param name="fillMode">The method used to determine whether a given point is part of the geometry.</param>
        </member>
        <member name="M:CD2DGeometrySink.Close">
            <summary>
Closes the geometry sink</summary>
            <returns> 
Nonzero if successful; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DGeometrySink.AddLines(CArray&lt;CD2DPointF,CD2DPointF&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a sequence of lines using the specified points and adds them to the geometry sink.</summary>
            <param name="points">An array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure) to the first point in the array. if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on. An array of a sequence of the end points of the lines to draw.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddLine(CD2DPointF)">
            <summary>
Creates a line segment between the current point and the specified end point and adds it to the geometry sink.</summary>
            <param name="point">The end point of the line to draw.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddQuadraticBeziers(CArray&lt;D2D1_QUADRATIC_BEZIER_SEGMENT,D2D1_QUADRATIC_BEZIER_SEGMENT&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds a sequence of quadratic Bezier segments as an array in a single call.</summary>
            <param name="beziers">An array of a sequence of quadratic Bezier segments.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddQuadraticBezier(D2D1_QUADRATIC_BEZIER_SEGMENT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a quadratic Bezier curve between the current point and the specified end point.</summary>
            <param name="bezier">A structure that describes the control point and the end point of the quadratic Bezier curve to add.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddBeziers(CArray&lt;D2D1_BEZIER_SEGMENT,D2D1_BEZIER_SEGMENT&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a sequence of cubic Bezier curves and adds them to the geometry sink.</summary>
            <param name="beziers">An array of Bezier segments that describes the Bezier curves to create. A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure) to the end point of the first Bezier segment in the array. if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddBezier(D2D1_BEZIER_SEGMENT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a cubic Bezier curve between the current point and the specified end point.</summary>
            <param name="bezier">A structure that describes the control points and end point of the Bezier curve to add.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddArc(D2D1_ARC_SEGMENT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds a single arc to the path geometry</summary>
            <param name="arc">The arc segment to add to the figure</param>
        </member>
        <member name="M:CD2DGeometrySink.EndFigure(D2D1_FIGURE_END)">
            <summary>
Ends the current figure; optionally, closes it.</summary>
            <param name="figureEnd">A value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by BeginFigure.</param>
        </member>
        <member name="M:CD2DGeometrySink.BeginFigure(CD2DPointF,D2D1_FIGURE_BEGIN)">
            <summary>
Starts a new figure at the specified point.</summary>
            <param name="startPoint">The point at which to begin the new figure.</param>
            <param name="figureBegin">Whether the new figure should be hollow or filled.</param>
        </member>
        <member name="M:CD2DGeometrySink.op_Implicit~ID2D1GeometrySink*">
            <summary>
Returns ID2D1GeometrySink interface</summary>
            <returns> 
Pointer to an ID2D1GeometrySink interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometrySink.Get">
            <summary>
Returns ID2D1GeometrySink interface</summary>
            <returns> 
Pointer to an ID2D1GeometrySink interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometrySink.IsValid">
            <summary>
Checks geometry sink validity</summary>
            <returns> 
TRUE if geometry sink is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DGeometrySink.Dispose">
            <summary>
The destructor. Called when a D2D geometry sink object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DGeometrySink.#ctor(CD2DPathGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DGeometrySink object from CD2DPathGeometry object.</summary>
            <param name="pathGeometry">An existing CD2DPathGeometry object.</param>
        </member>
        <member name="T:CD2DGeometrySink">
            <summary>
ID2D1GeometrySink wrapper.
</summary>
        </member>
        <member name="F:CD2DPathGeometry.m_pPathGeometry">
            <summary>
A pointer to an ID2D1PathGeometry.
</summary>
        </member>
        <member name="M:CD2DPathGeometry.GetFigureCount">
            <summary>
Retrieves tthe number of figures in the path geometry.</summary>
            <returns> 
Returns the number of figures in the path geometry.</returns>
        </member>
        <member name="M:CD2DPathGeometry.GetSegmentCount">
            <summary>
Retrieves the number of segments in the path geometry.</summary>
            <returns> 
Returns the number of segments in the path geometry.</returns>
        </member>
        <member name="M:CD2DPathGeometry.Stream(ID2D1GeometrySink*)">
            <summary>
Copies the contents of the path geometry to the specified ID2D1GeometrySink.</summary>
            <returns>
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="geometrySink">The sink to which the path geometry's contents are copied. Modifying this sink does not change the contents of this path geometry.</param>
        </member>
        <member name="M:CD2DPathGeometry.Open">
            <summary>
Retrieves the geometry sink that is used to populate the path geometry with figures and segments.</summary>
            <returns>
A pointer to the ID2D1GeometrySink that is used to populate the path geometry with figures and segments.</returns>
        </member>
        <member name="M:CD2DPathGeometry.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DPathGeometry.Attach(ID2D1PathGeometry*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DPathGeometry.Destroy">
            <summary>
Destroys a CD2DPathGeometry object.</summary>
        </member>
        <member name="M:CD2DPathGeometry.Create(CRenderTarget*)">
            <summary>
Creates a CD2DPathGeometry.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DPathGeometry.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DPathGeometry object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DPathGeometry">
            <summary>
ID2D1PathGeometry wrapper.
</summary>
        </member>
        <member name="F:CD2DGeometry.m_pGeometry">
            <summary>
A pointer to an ID2D1Geometry.
</summary>
        </member>
        <member name="M:CD2DGeometry.Widen(System.Single,ID2D1StrokeStyle*,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Widens the geometry by the specified stroke and writes the result to an ID2D1SimplifiedGeometrySink after it has been transformed by the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry, or NULL.</param>
            <param name="worldTransform">The transform to apply to the geometry after widening it.</param>
            <param name="geometrySink">The ID2D1SimplifiedGeometrySink to which the widened geometry is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.Tessellate(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1TessellationSink*,System.Single)">
            <summary>
Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to this geometry, or NULL.</param>
            <param name="tessellationSink">The ID2D1TessellationSink to which the tessellated is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.Simplify(D2D1_GEOMETRY_SIMPLIFICATION_OPTION,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an ID2D1SimplifiedGeometrySink.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves.</param>
            <param name="worldTransform">The transform to apply to the simplified geometry.</param>
            <param name="geometrySink">The ID2D1SimplifiedGeometrySink to which the simplified geometry is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.Outline(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Computes the outline of the geometry and writes the result to an ID2D1SimplifiedGeometrySink.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to the geometry outline.</param>
            <param name="geometrySink">The ID2D1SimplifiedGeometrySink to which the geometry transformed outline is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.StrokeContainsPoint(CD2DPointF,System.Single,ID2D1StrokeStyle*,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*,System.Single)">
            <summary>
Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="point">The point to test for containment.</param>
            <param name="strokeWidth">The thickness of the stroke to apply.</param>
            <param name="strokeStyle">The style of the stroke to apply.</param>
            <param name="worldTransform">The transform to apply to the stroked geometry.</param>
            <param name="contains">When this method returns, contains a boolean value set to TRUE if the geometry's stroke contains the specified point; otherwise, FALSE. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the stroke by less than the tolerance are still considered inside. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.FillContainsPoint(CD2DPointF,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*,System.Single)">
            <summary>
Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="point">The point to test.</param>
            <param name="worldTransform">The transform to apply to the geometry prior to testing for containment.</param>
            <param name="contains">When this method returns, contains a bool value that is TRUE if the area filled by the geometry contains point; otherwise, FALSE. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.GetWidenedBounds(System.Single,ID2D1StrokeStyle*,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline.</param>
            <param name="strokeStyle">The style of the stroke that widens the geometry.</param>
            <param name="worldTransform">A transform to apply to the geometry after the geometry is transformed and after the geometry has been stroked.</param>
            <param name="bounds">When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.GetBounds(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the bounds of the geometry.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to this geometry before calculating its bounds.</param>
            <param name="bounds">When this method returns, contains the bounds of this geometry. If the bounds are empty, this will be a rect where bounds.left is greater than bounds.right. You must allocate storage for this parameter.</param>
        </member>
        <member name="M:CD2DGeometry.ComputePointAtLength(System.Single,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Calculates the point and tangent vector at the specified distance along the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="length">The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry.</param>
            <param name="worldTransform">The transform to apply to the geometry before calculating the specified point and tangent.</param>
            <param name="point">The location at the specified distance along the geometry. If the geometry is empty, this point contains NaN as its x and y values.</param>
            <param name="unitTangentVector">When this method returns, contains a pointer to the tangent vector at the specified distance along the geometry. If the geometry is empty, this vector contains NaN as its x and y values. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.ComputeLength(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Calculates the length of the geometry as though each segment were unrolled into a line.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to the geometry before calculating its length.</param>
            <param name="length">When this method returns, contains a pointer to the length of the geometry. For closed geometries, the length includes an implicit closing segment. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.ComputeArea(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Computes the area of the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to this geometry before computing its area.</param>
            <param name="area">When this method returns, contains a pointer to the area of the transformed, flattened version of this geometry. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.CompareWithGeometry(CD2DGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Describes the intersection between this geometry and the specified geometry. The comparison is performed using the specified flattening tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="inputGeometry">The geometry to test.</param>
            <param name="inputGeometryTransform">The transform to apply to inputGeometry.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. </param>
        </member>
        <member name="M:CD2DGeometry.CombineWithGeometry(CD2DGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,D2D1_COMBINE_MODE,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Combines this geometry with the specified geometry and stores the result in an ID2D1SimplifiedGeometrySink.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="inputGeometry">The geometry to combine with this instance.</param>
            <param name="combineMode">The type of combine operation to perform.</param>
            <param name="inputGeometryTransform">The transform to apply to inputGeometry before combining.</param>
            <param name="geometrySink">The result of the combine operation.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DGeometry.Destroy">
            <summary>
Destroys a CD2DGeometry object.</summary>
        </member>
        <member name="M:CD2DGeometry.op_Implicit~ID2D1Geometry*">
            <summary>
Returns ID2D1Geometry interface</summary>
            <returns> 
Pointer to an ID2D1Geometry interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometry.Get">
            <summary>
Returns ID2D1Geometry interface</summary>
            <returns> 
Pointer to an ID2D1Geometry interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometry.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DGeometry.Attach(ID2D1Geometry*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DGeometry.Dispose">
            <summary>
The destructor. Called when a D2D geometry object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DGeometry.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DGeometry object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DGeometry">
            <summary>
ID2D1Geometry wrapper.
</summary>
        </member>
        <member name="F:CD2DTextLayout.m_pTextLayout">
            <summary>
A pointer to an IDWriteTextLayout.
</summary>
        </member>
        <member name="M:CD2DTextLayout.GetLocaleName(System.UInt32,DWRITE_TEXT_RANGE*)">
            <summary>
Gets the locale name of the text at the specified position.</summary>
            <returns>
CString object that contains the current locale name.</returns>
            <param name="currentPosition">The position of the text to inspect.</param>
            <param name="textRange">The range of text that has the same formatting as the text at the position specified by currentPosition. This means the run has the exact formatting as the position specified, including but not limited to the locale name.</param>
        </member>
        <member name="M:CD2DTextLayout.GetFontFamilyName(System.UInt32,DWRITE_TEXT_RANGE*)">
            <summary>
Copies the font family name of the text at the specified position.</summary>
            <returns>
CString object that contains the current font family name.</returns>
            <param name="currentPosition">The position of the text to examine.</param>
            <param name="textRange">The range of text that has the same formatting as the text at the position specified by currentPosition. This means the run has the exact formatting as the position specified, including but not limited to the font family name.</param>
        </member>
        <member name="M:CD2DTextLayout.SetLocaleName(System.Char!System.Runtime.CompilerServices.IsConst*,DWRITE_TEXT_RANGE)">
            <summary>
Sets the locale name for text within a specified text range</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="pwzLocaleName">A null-terminated locale name string</param>
            <param name="textRange">Text range to which this change applies</param>
        </member>
        <member name="M:CD2DTextLayout.SetFontFamilyName(System.Char!System.Runtime.CompilerServices.IsConst*,DWRITE_TEXT_RANGE)">
            <summary>
Sets null-terminated font family name for text within a specified text range</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="pwzFontFamilyName">The font family name that applies to the entire text string within the range specified by textRange</param>
            <param name="textRange">Text range to which this change applies</param>
        </member>
        <member name="M:CD2DTextLayout.op_Implicit~IDWriteTextLayout*">
            <summary>
Returns IDWriteTextLayout interface</summary>
            <returns>
Pointer to an IDWriteTextLayout interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextLayout.Get">
            <summary>
Returns IDWriteTextLayout interface</summary>
            <returns>
Pointer to an IDWriteTextLayout interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextLayout.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DTextLayout.Destroy">
            <summary>
Destroys a CD2DTextLayout object.</summary>
        </member>
        <member name="M:CD2DTextLayout.Create(CRenderTarget*)">
            <summary>
Creates a CD2DTextLayout.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextLayout.ReCreate(CRenderTarget*)">
            <summary>
Re-creates a CD2DTextLayout.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextLayout.Dispose">
            <summary>
The destructor. Called when a D2D text layout object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DTextLayout.#ctor(CRenderTarget*,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DTextFormat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary>
Constructs a CD2DTextLayout object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="strText">A CString object that contains the string to create a new CD2DTextLayout object from.</param>
            <param name="textFormat">A CString object that contains the format to apply to the string.</param>
            <param name="sizeMax">The size of the layout box.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DTextLayout">
            <summary>
IDWriteTextLayout wrapper.
</summary>
        </member>
        <member name="F:CD2DTextFormat.m_pTextFormat">
            <summary>
A pointer to an IDWriteTextFormat.
</summary>
        </member>
        <member name="M:CD2DTextFormat.GetLocaleName">
            <summary>
Gets a copy of the locale name.</summary>
            <returns>
CString object that contains the current locale name.</returns>
        </member>
        <member name="M:CD2DTextFormat.GetFontFamilyName">
            <summary>
Gets a copy of the font family name.</summary>
            <returns>
CString object that contains the current font family name.</returns>
        </member>
        <member name="M:CD2DTextFormat.op_Implicit~IDWriteTextFormat*">
            <summary>
Returns IDWriteTextFormat interface</summary>
            <returns>
Pointer to an IDWriteTextFormat interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextFormat.Get">
            <summary>
Returns IDWriteTextFormat interface</summary>
            <returns> 
Pointer to an IDWriteTextFormat interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextFormat.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DTextFormat.Destroy">
            <summary>
Destroys a CD2DTextFormat object.</summary>
        </member>
        <member name="M:CD2DTextFormat.Create(CRenderTarget*)">
            <summary>
Creates a CD2DTextFormat.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextFormat.ReCreate(CRenderTarget*)">
            <summary>
Re-creates a CD2DTextFormat.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextFormat.Dispose">
            <summary>
The destructor. Called when a D2D text format object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DTextFormat.#ctor(CRenderTarget*,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,DWRITE_FONT_WEIGHT,DWRITE_FONT_STYLE,DWRITE_FONT_STRETCH,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDWriteFontCollection*,System.Int32)">
            <summary>
Constructs a CD2DTextFormat object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="strFontFamilyName">A CString object that contains the name of the font family.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIPequals 1/96 inch.</param>
            <param name="fontWeight">A value that indicates the font weight for the text object.</param>
            <param name="fontStyle">A value that indicates the font style for the text object.</param>
            <param name="fontStretch">A value that indicates the font stretch for the text object.</param>
            <param name="strFontLocale">A CString object that contains the locale name.</param>
            <param name="pFontCollection">A pointer to a font collection object. When this is NULL, indicates the system font collection.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DTextFormat">
            <summary>
IDWriteTextFormat wrapper.
</summary>
        </member>
        <member name="F:CD2DRadialGradientBrush.m_pRadialGradientBrush">
            <summary>
A pointer to an ID2D1RadialGradientBrush.
</summary>
        </member>
        <member name="F:CD2DRadialGradientBrush.m_RadialGradientBrushProperties">
            <summary>
The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.
</summary>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetRadiusY">
            <summary>
Retrieves the y-radius of the gradient ellipse</summary>
            <returns> 
The y-radius of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetRadiusX">
            <summary>
Retrieves the x-radius of the gradient ellipse</summary>
            <returns> 
The x-radius of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetGradientOriginOffset">
            <summary>
Retrieves the offset of the gradient origin relative to the gradient ellipse's center</summary>
            <returns> 
The offset of the gradient origin from the center of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetCenter">
            <summary>
Retrieves the center of the gradient ellipse</summary>
            <returns> 
The center of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetRadiusY(System.Single)">
            <summary>
Specifies the y-radius of the gradient ellipse, in the brush's coordinate space</summary>
            <param name="radiusY">The y-radius of the gradient ellipse. This value is in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetRadiusX(System.Single)">
            <summary>
Specifies the x-radius of the gradient ellipse, in the brush's coordinate space</summary>
            <param name="radiusX">The x-radius of the gradient ellipse. This value is in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetGradientOriginOffset(CD2DPointF)">
            <summary>
Specifies the offset of the gradient origin relative to the gradient ellipse's center</summary>
            <param name="gradientOriginOffset">The offset of the gradient origin from the center of the gradient ellipse</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetCenter(CD2DPointF)">
            <summary>
Specifies the center of the gradient ellipse in the brush's coordinate space</summary>
            <param name="point">The center of the gradient ellipse, in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.op_Implicit~ID2D1RadialGradientBrush*">
            <summary>
Returns ID2D1RadialGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1RadialGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.Get">
            <summary>
Returns ID2D1RadialGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1RadialGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.Attach(ID2D1RadialGradientBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.Destroy">
            <summary>
Destroys a CD2DRadialGradientBrush object.</summary>
        </member>
        <member name="M:CD2DRadialGradientBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DRadialGradientBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.Dispose">
            <summary>
The destructor. Called when a D2D radial gradient brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DRadialGradientBrush.#ctor(CRenderTarget*,D2D1_GRADIENT_STOP!System.Runtime.CompilerServices.IsConst*,System.UInt32,D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES,D2D1_GAMMA,D2D1_EXTEND_MODE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DLinearGradientBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the gradientStops array.</param>
            <param name="RadialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DRadialGradientBrush">
            <summary>
ID2D1RadialGradientBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DLinearGradientBrush.m_pLinearGradientBrush">
            <summary>
A pointer to an ID2D1LinearGradientBrush.
</summary>
        </member>
        <member name="F:CD2DLinearGradientBrush.m_LinearGradientBrushProperties">
            <summary>
The start and end points of the gradient.
</summary>
        </member>
        <member name="M:CD2DLinearGradientBrush.GetEndPoint">
            <summary>
Retrieves the ending coordinates of the linear gradient</summary>
            <returns> 
The ending two-dimensional coordinates of the linear gradient, in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.GetStartPoint">
            <summary>
Retrieves the starting coordinates of the linear gradient</summary>
            <returns> 
The starting two-dimensional coordinates of the linear gradient, in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.SetEndPoint(CD2DPointF)">
            <summary>
Sets the ending coordinates of the linear gradient in the brush's coordinate space</summary>
            <param name="point">The ending two-dimensional coordinates of the linear gradient, in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.SetStartPoint(CD2DPointF)">
            <summary>
Sets the starting coordinates of the linear gradient in the brush's coordinate space</summary>
            <param name="point">The starting two-dimensional coordinates of the linear gradient, in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.op_Implicit~ID2D1LinearGradientBrush*">
            <summary>
Returns ID2D1LinearGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1LinearGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.Get">
            <summary>
Returns ID2D1LinearGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1LinearGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.Attach(ID2D1LinearGradientBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.Destroy">
            <summary>
Destroys a CD2DLinearGradientBrush object.</summary>
        </member>
        <member name="M:CD2DLinearGradientBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DLinearGradientBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.Dispose">
            <summary>
The destructor. Called when a D2D linear gradient brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DLinearGradientBrush.#ctor(CRenderTarget*,D2D1_GRADIENT_STOP!System.Runtime.CompilerServices.IsConst*,System.UInt32,D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES,D2D1_GAMMA,D2D1_EXTEND_MODE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DLinearGradientBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the gradientStops array.</param>
            <param name="LinearGradientBrushProperties">The start and end points of the gradient.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DLinearGradientBrush">
            <summary>
ID2D1LinearGradientBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_pGradientStops">
            <summary>
A pointer to an array of D2D1_GRADIENT_STOP structures.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_extendMode">
            <summary>
The behavior of the gradient outside the [0,1] normalized range.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_colorInterpolationGamma">
            <summary>
The space in which color interpolation between the gradient stops is performed.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_arGradientStops">
            <summary>
Array of the D2D1_GRADIENT_STOP structures.
</summary>
        </member>
        <member name="M:CD2DGradientBrush.Destroy">
            <summary>
Destroys a CD2DGradientBrush object.</summary>
        </member>
        <member name="M:CD2DGradientBrush.Dispose">
            <summary>
The destructor. Called when a D2D gradient brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DGradientBrush.#ctor(CRenderTarget*,D2D1_GRADIENT_STOP!System.Runtime.CompilerServices.IsConst*,System.UInt32,D2D1_GAMMA,D2D1_EXTEND_MODE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DGradientBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the gradientStops array.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DGradientBrush">
            <summary>
The base class of CD2DLinearGradientBrush and CD2DRadialGradientBrush classes.
</summary>
        </member>
        <member name="F:CD2DBitmapBrush.m_pBitmapBrushProperties">
            <summary>
Bitmap brush properties.
</summary>
        </member>
        <member name="F:CD2DBitmapBrush.m_pBitmapBrush">
            <summary>
Stores a pointer to an ID2D1BitmapBrush object.
</summary>
        </member>
        <member name="F:CD2DBitmapBrush.m_pBitmap">
            <summary>
Stores a pointer to a CD2DBitmap object.
</summary>
        </member>
        <member name="M:CD2DBitmapBrush.CommonInit(D2D1_BITMAP_BRUSH_PROPERTIES*)">
            <summary>
Initializes the object</summary>
            <param name="pBitmapBrushProperties">A pointer to the bitmap brush properties.</param>
        </member>
        <member name="M:CD2DBitmapBrush.Destroy">
            <summary>
Destroys a CD2DBitmapBrush object.</summary>
        </member>
        <member name="M:CD2DBitmapBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DBitmapBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DBitmapBrush.GetInterpolationMode">
            <summary>
Gets the interpolation method used when the brush bitmap is scaled or rotated</summary>
            <returns> 
The interpolation method used when the brush bitmap is scaled or rotated</returns>
        </member>
        <member name="M:CD2DBitmapBrush.GetExtendModeY">
            <summary>
Gets the method by which the brush vertically tiles those areas that extend past its bitmap</summary>
            <returns> 
A value that specifies how the brush vertically tiles those areas that extend past its bitmap</returns>
        </member>
        <member name="M:CD2DBitmapBrush.GetExtendModeX">
            <summary>
Gets the method by which the brush horizontally tiles those areas that extend past its bitmap</summary>
            <returns> 
A value that specifies how the brush horizontally tiles those areas that extend past its bitmap</returns>
        </member>
        <member name="M:CD2DBitmapBrush.SetBitmap(CD2DBitmap*)">
            <summary>
Specifies the bitmap source that this brush uses to paint</summary>
            <param name="pBitmap">The bitmap source used by the brush</param>
        </member>
        <member name="M:CD2DBitmapBrush.SetInterpolationMode(D2D1_BITMAP_INTERPOLATION_MODE)">
            <summary>
Specifies the interpolation mode used when the brush bitmap is scaled or rotated</summary>
            <param name="interpolationMode">The interpolation mode used when the brush bitmap is scaled or rotated</param>
        </member>
        <member name="M:CD2DBitmapBrush.SetExtendModeY(D2D1_EXTEND_MODE)">
            <summary>
Specifies how the brush vertically tiles those areas that extend past its bitmap</summary>
            <param name="extendModeY">A value that specifies how the brush vertically tiles those areas that extend past its bitmap</param>
        </member>
        <member name="M:CD2DBitmapBrush.SetExtendModeX(D2D1_EXTEND_MODE)">
            <summary>
Specifies how the brush horizontally tiles those areas that extend past its bitmap</summary>
            <param name="extendModeX">A value that specifies how the brush horizontally tiles those areas that extend past its bitmap</param>
        </member>
        <member name="M:CD2DBitmapBrush.GetBitmap">
            <summary>
Gets the bitmap source that this brush uses to paint</summary>
            <returns> 
Pointer to an CD2DBitmap object or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.op_Implicit~ID2D1BitmapBrush*">
            <summary>
Returns ID2D1BitmapBrush interface</summary>
            <returns> 
Pointer to an ID2D1BitmapBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.Get">
            <summary>
Returns ID2D1BitmapBrush interface</summary>
            <returns> 
Pointer to an ID2D1BitmapBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.Attach(ID2D1BitmapBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DBitmapBrush.Dispose">
            <summary>
The destructor. Called when a D2D bitmap brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DBitmapBrush.#ctor(CRenderTarget*,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,D2D1_BITMAP_BRUSH_PROPERTIES*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBitmapBrush object from file.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="lpszImagePath">Pointer to a null-terminated string that contains the name of file.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="pBitmapBrushProperties">A pointer to the extend modes and the interpolation mode of a bitmap brush.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmapBrush.#ctor(CRenderTarget*,System.UInt32,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,D2D1_BITMAP_BRUSH_PROPERTIES*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBitmapBrush object from resource.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="uiResID">The resource ID number of the resource.</param>
            <param name="lpszType">Pointer to a null-terminated string that contains the resource type.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="pBitmapBrushProperties">A pointer to the extend modes and the interpolation mode of a bitmap brush.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmapBrush.#ctor(CRenderTarget*,D2D1_BITMAP_BRUSH_PROPERTIES*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBitmapBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="pBitmapBrushProperties">A pointer to the extend modes and the interpolation mode of a bitmap brush.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DBitmapBrush">
            <summary>
ID2D1BitmapBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DSolidColorBrush.m_colorSolid">
            <summary>
Brush solid color.
</summary>
        </member>
        <member name="F:CD2DSolidColorBrush.m_pSolidColorBrush">
            <summary>
Stores a pointer to an ID2D1SolidColorBrush object.
</summary>
        </member>
        <member name="M:CD2DSolidColorBrush.Destroy">
            <summary>
Destroys a CD2DSolidColorBrush object.</summary>
        </member>
        <member name="M:CD2DSolidColorBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DSolidColorBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DSolidColorBrush.GetColor">
            <summary>
Retrieves the color of the solid color brush</summary>
            <returns> 
The color of this solid color brush</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.SetColor(_D3DCOLORVALUE)">
            <summary>
Specifies the color of this solid color brush</summary>
            <param name="color">The color of this solid color brush</param>
        </member>
        <member name="M:CD2DSolidColorBrush.op_Implicit~ID2D1SolidColorBrush*">
            <summary>
Returns ID2D1SolidColorBrush interface</summary>
            <returns> 
Pointer to an ID2D1SolidColorBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.Get">
            <summary>
Returns ID2D1SolidColorBrush interface</summary>
            <returns> 
Pointer to an ID2D1SolidColorBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.Attach(ID2D1SolidColorBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DSolidColorBrush.Dispose">
            <summary>
The destructor. Called when a D2D solid brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DSolidColorBrush.#ctor(CRenderTarget*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DSolidColorBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="color">The red, green, and blue values of the brush's color.</param>
            <param name="nAlpha">The opacity of the brush's color.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DSolidColorBrush.#ctor(CRenderTarget*,_D3DCOLORVALUE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DSolidColorBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="color">The red, green, blue, and alpha values of the brush's color.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DSolidColorBrush">
            <summary>
ID2D1SolidColorBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DBrush.m_pBrushProperties">
            <summary>
Brush properties.
</summary>
        </member>
        <member name="F:CD2DBrush.m_pBrush">
            <summary>
Stores a pointer to an ID2D1Brush object.
</summary>
        </member>
        <member name="M:CD2DBrush.GetTransform(D2D_MATRIX_3X2_F*)">
            <summary>
Gets the current transform of the render target</summary>
            <param name="transform">When this returns, contains the current transform of the render target. This parameter is passed uninitialized</param>
        </member>
        <member name="M:CD2DBrush.SetTransform(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space</summary>
            <param name="transform">The transform to apply to the render target</param>
        </member>
        <member name="M:CD2DBrush.GetOpacity">
            <summary>
Gets the degree of opacity of this brush</summary>
            <returns> 
A value between zero and 1 that indicates the opacity of the brush. This value is a constant multiplier that linearly scales the alpha value of all pixels filled by the brush. The opacity values are clamped in the range 0 to 1 before they are multiplied together</returns>
        </member>
        <member name="M:CD2DBrush.SetOpacity(System.Single)">
            <summary>
Sets the degree of opacity of this brush</summary>
            <param name="opacity">A value between zero and 1 that indicates the opacity of the brush. This value is a constant multiplier that linearly scales the alpha value of all pixels filled by the brush. The opacity values are clamped in the range 0 to 1 before they are multiplied together</param>
        </member>
        <member name="M:CD2DBrush.Destroy">
            <summary>
Destroys a CD2DBrush object.</summary>
        </member>
        <member name="M:CD2DBrush.op_Implicit~ID2D1Brush*">
            <summary>
Returns ID2D1Brush interface</summary>
            <returns> 
Pointer to an ID2D1Brush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBrush.Get">
            <summary>
Returns ID2D1Brush interface</summary>
            <returns> 
Pointer to an ID2D1Brush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBrush.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DBrush.Attach(ID2D1Brush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DBrush.Dispose">
            <summary>
The destructor. Called when a D2D brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DBrush.#ctor(CRenderTarget*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DBrush">
            <summary>
ID2D1Brush wrapper.
</summary>
        </member>
        <member name="M:CD2DBrushProperties.CommonInit">
            <summary>
Initializes the object</summary>
        </member>
        <member name="M:CD2DBrushProperties.#ctor(D2D_MATRIX_3X2_F,System.Single)">
            <summary>
Creates a CD2D_BRUSH_PROPERTIES structure</summary>
            <param name="_transform">The transformation to apply to the brush</param>
            <param name="_opacity">The base opacity of the brush. The default value is 1.0.</param>
        </member>
        <member name="M:CD2DBrushProperties.#ctor(System.Single)">
            <summary>
Creates a CD2D_BRUSH_PROPERTIES structure</summary>
            <param name="_opacity">The base opacity of the brush. The default value is 1.0.</param>
        </member>
        <member name="M:CD2DBrushProperties.#ctor">
            <summary>
Creates a CD2D_BRUSH_PROPERTIES structure</summary>
        </member>
        <member name="T:CD2DBrushProperties">
            <summary>
D2D1_BRUSH_PROPERTIES wrapper.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_bAutoDestroyHBMP">
            <summary>
TRUE if m_hBmpSrc should be destroyed; otherwise FALSE.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_hBmpSrc">
            <summary>
Source bitmap handle.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_sizeDest">
            <summary>
Bitmap destination size.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_strPath">
            <summary>
Botmap file path.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_lpszType">
            <summary>
Resource type.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_uiResID">
            <summary>
Bitmap resource ID.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_pBitmap">
            <summary>
Stores a pointer to an ID2D1Bitmap object.
</summary>
        </member>
        <member name="M:CD2DBitmap.Destroy">
            <summary>
Destroys a CD2DBitmap object.</summary>
        </member>
        <member name="M:CD2DBitmap.Create(CRenderTarget*)">
            <summary>
Creates a CD2DBitmap.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DBitmap.CommonInit">
            <summary>
Initializes the object</summary>
        </member>
        <member name="M:CD2DBitmap.op_Implicit~ID2D1Bitmap*">
            <summary>
Returns ID2D1Bitmap interface</summary>
            <returns> 
Pointer to an ID2D1Bitmap interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmap.Get">
            <summary>
Returns ID2D1Bitmap interface</summary>
            <returns> 
Pointer to an ID2D1Bitmap interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmap.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DBitmap.CopyFromMemory(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,CD2DRectU!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies the specified region from memory into the current bitmap</summary>
            <returns> 
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="srcData">The data to copy</param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding</param>
            <param name="destRect">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied</param>
        </member>
        <member name="M:CD2DBitmap.CopyFromRenderTarget(CRenderTarget!System.Runtime.CompilerServices.IsConst*,CD2DPointU!System.Runtime.CompilerServices.IsConst*,CD2DRectU!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies the specified region from the specified render target into the current bitmap</summary>
            <returns> 
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">The render target that contains the region to copy</param>
            <param name="destPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied</param>
            <param name="srcRect">The area of renderTarget to copy</param>
        </member>
        <member name="M:CD2DBitmap.CopyFromBitmap(CD2DBitmap!System.Runtime.CompilerServices.IsConst*,CD2DPointU!System.Runtime.CompilerServices.IsConst*,CD2DRectU!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies the specified region from the specified bitmap into the current bitmap</summary>
            <returns> 
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pBitmap">The bitmap to copy from</param>
            <param name="destPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied</param>
            <param name="srcRect">The area of bitmap to copy</param>
        </member>
        <member name="M:CD2DBitmap.GetDPI">
            <summary>
Return the dots per inch (DPI) of the bitmap</summary>
            <returns> 
The horizontal and vertical DPI of the bitmap.</returns>
        </member>
        <member name="M:CD2DBitmap.GetPixelFormat">
            <summary>
Retrieves the pixel format and alpha mode of the bitmap</summary>
            <returns> 
The pixel format and alpha mode of the bitmap.</returns>
        </member>
        <member name="M:CD2DBitmap.GetPixelSize">
            <summary>
Returns the size, in device-dependent units (pixels), of the bitmap</summary>
            <returns> 
The size, in pixels, of the bitmap..</returns>
        </member>
        <member name="M:CD2DBitmap.GetSize">
            <summary>
Returns the size, in device-independent pixels (DIPs), of the bitmap</summary>
            <returns> 
The size, in DIPs, of the bitmap.</returns>
        </member>
        <member name="M:CD2DBitmap.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DBitmap.Attach(ID2D1Bitmap*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DBitmap.Dispose">
            <summary>
The destructor. Called when a D2D bitmap object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DBitmap object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,HBITMAP__*,CD2DSizeU,System.Int32)">
            <summary>
Constructs a CD2DBitmap object from HBITMAP.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="hbmpSrc">Handle to the bitmap.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,System.Int32)">
            <summary>
Constructs a CD2DBitmap object from file.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="lpszPath">Pointer to a null-terminated string that contains the name of file.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,System.UInt32,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,System.Int32)">
            <summary>
Constructs a CD2DBitmap object from resource.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="uiResID">The resource ID number of the resource.</param>
            <param name="lpszType">Pointer to a null-terminated string that contains the resource type.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DBitmap">
            <summary>
ID2D1Bitmap wrapper.
</summary>
        </member>
        <member name="F:CD2DLayer.m_pLayer">
            <summary>
Stores a pointer to an ID2D1Layer object.
</summary>
        </member>
        <member name="M:CD2DLayer.Destroy">
            <summary>
Destroys a CD2DLayer object.</summary>
        </member>
        <member name="M:CD2DLayer.Create(CRenderTarget*)">
            <summary>
Creates a CD2DLayer.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DLayer.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DLayer.Attach(ID2D1Layer*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DLayer.op_Implicit~ID2D1Layer*">
            <summary>
Returns ID2D1Layer interface</summary>
            <returns> 
Pointer to an ID2D1Layer interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLayer.Get">
            <summary>
Returns ID2D1Layer interface</summary>
            <returns> 
Pointer to an ID2D1Layer interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLayer.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DLayer.GetSize">
            <summary>
Returns the size of the render target in device-independent pixels</summary>
            <returns> 
The current size of the render target in device-independent pixels</returns>
        </member>
        <member name="M:CD2DLayer.Dispose">
            <summary>
The destructor. Called when a D2D layer object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DLayer.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DLayer object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DLayer">
            <summary>
ID2D1Layer wrapper.
</summary>
        </member>
        <member name="F:CD2DResource.m_pParentTarget">
            <summary>
Pointer to the parent CRenderTarget)</summary>
        </member>
        <member name="F:CD2DResource.m_bIsAutoDestroy">
            <summary>
Resource will be destoyed by owner (CRenderTarget)</summary>
        </member>
        <member name="M:CD2DResource.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DResource.Destroy">
            <summary>
Destroys a CD2DResource object.</summary>
        </member>
        <member name="M:CD2DResource.Create(CRenderTarget*)">
            <summary>
Creates a CD2DResource.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DResource.ReCreate(CRenderTarget*)">
            <summary>
Re-creates a CD2DResource.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DResource.IsAutoDestroy">
            <summary>
Check auto destroy flag.</summary>
            <returns>
TRUE if the object will be destroyed by its owner; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DResource.Dispose">
            <summary>
The destructor. Called when a D2D resource object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DResource.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DResource object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DResource">
            <summary>
An abstract class, which provides a interface for creating and managing D2D resources such as brushes, layers and texts.
</summary>
        </member>
        <member name="M:CD2DEllipse.#ctor(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DEllipse from CD2DPointF and CD2DSizeF objects.</summary>
            <param name="ptCenter">The center point of the ellipse.</param>
            <param name="sizeRadius">The X-radius and Y-radius of the ellipse.</param>
        </member>
        <member name="M:CD2DEllipse.#ctor(D2D1_ELLIPSE!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DEllipse object from D2D1_ELLIPSE object.</summary>
            <param name="ellipse">source ellipse</param>
        </member>
        <member name="M:CD2DEllipse.#ctor(D2D1_ELLIPSE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DEllipse object from D2D1_ELLIPSE object.</summary>
            <param name="ellipse">source ellipse</param>
        </member>
        <member name="M:CD2DEllipse.#ctor(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DEllipse object from CD2DRectF object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="T:CD2DEllipse">
            <summary>
D2D1_ELLIPSE wrapper
</summary>
        </member>
        <member name="M:CD2DRoundedRect.#ctor(D2D1_ROUNDED_RECT!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DRoundedRect object from D2D1_ROUNDED_RECT object.</summary>
            <param name="rectIn">source rectangle</param>
        </member>
        <member name="M:CD2DRoundedRect.#ctor(D2D1_ROUNDED_RECT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRoundedRect object from D2D1_ROUNDED_RECT object.</summary>
            <param name="rectIn">source rectangle</param>
        </member>
        <member name="M:CD2DRoundedRect.#ctor(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRoundedRect object from CD2DRectF object.</summary>
            <param name="rectIn">source rectangle</param>
            <param name="sizeRadius">radius size</param>
        </member>
        <member name="T:CD2DRoundedRect">
            <summary>
D2D1_ROUNDED_RECT wrapper
</summary>
        </member>
        <member name="M:CD2DRectU.op_Implicit~CRect">
            <summary>
Converts CD2DRectU to CRect object.</summary>
            <returns>
Current value of D2D rectangle.
</returns>
        </member>
        <member name="M:CD2DRectU.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if rectangle's top, left, bottom, and right values are all equal to 0; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DRectU.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
Constructs a CD2DRectU object from four UINT32 values.</summary>
            <param name="uLeft">source left coordinate</param>
            <param name="uTop">source top coordinate</param>
            <param name="uRight">source right coordinate</param>
            <param name="uBottom">source bottom coordinate</param>
        </member>
        <member name="M:CD2DRectU.#ctor(D2D_RECT_U!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DRectU object from D2D1_RECT_U object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectU.#ctor(D2D_RECT_U!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectU object from D2D1_RECT_U object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectU.#ctor(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectU object from CRect object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="T:CD2DRectU">
            <summary>
D2D1_RECT_U wrapper
</summary>
        </member>
        <member name="M:CD2DRectF.op_Implicit~CRect">
            <summary>
Converts CD2DRectF to CRect object.</summary>
            <returns>
Current value of D2D rectangle.
</returns>
        </member>
        <member name="M:CD2DRectF.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if rectangle's top, left, bottom, and right values are all equal to 0; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DRectF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Constructs a CD2DRectF object from four FLOAT values.</summary>
            <param name="fLeft">source left coordinate</param>
            <param name="fTop">source top coordinate</param>
            <param name="fRight">source right coordinate</param>
            <param name="fBottom">source bottom coordinate</param>
        </member>
        <member name="M:CD2DRectF.#ctor(D2D_RECT_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DRectF object from D2D1_RECT_F object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectF.#ctor(D2D_RECT_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectF object from D2D1_RECT_F object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectF.#ctor(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectF object from CRect object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="T:CD2DRectF">
            <summary>
D2D1_RECT_F wrapper
</summary>
        </member>
        <member name="M:CD2DSizeU.op_Implicit~CSize">
            <summary>
Converts CD2DSizeU to CSize object.</summary>
            <returns>
Current value of D2D size.
</returns>
        </member>
        <member name="M:CD2DSizeU.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if width and height are empty; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DSizeU.#ctor(System.UInt32,System.UInt32)">
            <summary>
Constructs a CD2DSizeU object from two UINT32 values.</summary>
            <param name="cx">source width</param>
            <param name="cy">source height</param>
        </member>
        <member name="M:CD2DSizeU.#ctor(D2D_SIZE_U!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DSizeU object from D2D1_SIZE_U object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeU.#ctor(D2D_SIZE_U!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeU object from D2D1_SIZE_U object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeU.#ctor(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeU object from CSize object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="T:CD2DSizeU">
            <summary>
D2D1_SIZE_U wrapper
</summary>
        </member>
        <member name="M:CD2DSizeF.op_Implicit~CSize">
            <summary>
Converts CD2DSizeF to CSize object.</summary>
            <returns>
Current value of D2D size.
</returns>
        </member>
        <member name="M:CD2DSizeF.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if width and height are empty; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DSizeF.#ctor(System.Single,System.Single)">
            <summary>
Constructs a CD2DSizeF object from two FLOAT values.</summary>
            <param name="cx">source width</param>
            <param name="cy">source height</param>
        </member>
        <member name="M:CD2DSizeF.#ctor(D2D_SIZE_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DSizeF object from D2D1_SIZE_F object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeF.#ctor(D2D_SIZE_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeF object from D2D1_SIZE_F object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeF.#ctor(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeF object from CSize object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="T:CD2DSizeF">
            <summary>
D2D1_SIZE_F wrapper
</summary>
        </member>
        <member name="M:CD2DPointU.op_Implicit~CPoint">
            <summary>
Converts CD2DPointU to CPoint object.</summary>
            <returns>
Current value of D2D point.
</returns>
        </member>
        <member name="M:CD2DPointU.#ctor(System.UInt32,System.UInt32)">
            <summary>
Constructs a CD2DPointU object from two UINT32 values.</summary>
            <param name="uX">source X</param>
            <param name="uY">source Y</param>
        </member>
        <member name="M:CD2DPointU.#ctor(D2D_POINT_2U!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DPointU from object D2D1_POINT_2U object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointU.#ctor(D2D_POINT_2U!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointU from object D2D1_POINT_2U object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointU.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointU object from CPoint object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="T:CD2DPointU">
            <summary>
D2D1_POINT_2U wrapper
</summary>
        </member>
        <member name="M:CD2DPointF.op_Implicit~CPoint">
            <summary>
Converts CD2DPointF to CPoint object.</summary>
            <returns>
Current value of D2D point.
</returns>
        </member>
        <member name="M:CD2DPointF.#ctor(System.Single,System.Single)">
            <summary>
Constructs a CD2DPointF object from two FLOAT values.</summary>
            <param name="fX">source X</param>
            <param name="fY">source Y</param>
        </member>
        <member name="M:CD2DPointF.#ctor(D2D_POINT_2F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DPointF object from D2D1_POINT_2F object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointF.#ctor(D2D_POINT_2F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointF object from D2D1_POINT_2F object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointF.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointF object from CPoint object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="T:CD2DPointF">
            <summary>
D2D1_POINT_2F wrapper
</summary>
        </member>
        <member name="M:CCustomTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <remarks>
This method also can set initial value and initial velocity to be applied to an animation variable, which is
associated with this transition. For this purpose you have to call SetInitialValue and SetInitialVelocity before
the framework creates the encapsulated transition COM object (it happens when you call CAnimationController::AnimateGroup).
</remarks>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="M:CCustomTransition.SetInitialVelocity(System.Double)">
            <summary>
Sets an initial velocity, which will be applied to an animation variable associated with this transition.
</summary>
        </member>
        <member name="M:CCustomTransition.SetInitialValue(System.Double)">
            <summary>
Sets an initial value, which will be applied to an animation variable associated with this transition.
</summary>
        </member>
        <member name="M:CCustomTransition.#ctor(CCustomInterpolator*)">
            <summary>
Constructs a custom transition object.
</summary>
            <param name="pInterpolator">A pointer to custom interpolator.</param>
        </member>
        <member name="F:CCustomTransition.m_initialVelocity">
            <summary>
Stores the initial velocity.
</summary>
        </member>
        <member name="F:CCustomTransition.m_initialValue">
            <summary>
Stores the initial value.
</summary>
        </member>
        <member name="F:CCustomTransition.m_bInitialVelocitySpecified">
            <summary>
Specifies whether the initial velocity was specified with SetInitialVelocity.
</summary>
        </member>
        <member name="F:CCustomTransition.m_bInitialValueSpecified">
            <summary>
Specifies whether the initial value was specified with SetInitialValue.
</summary>
        </member>
        <member name="F:CCustomTransition.m_pInterpolator">
            <summary>
Stores a pointer to a custom interpolator.
</summary>
        </member>
        <member name="T:CCustomTransition">
            <summary>
Implements custom transition.
</summary>
            <remarks>
The CCustomTransitions class allows developers to implement custom transitions. It's created and used
as a standard transition, but its constructor accepts as parameter a pointer to a custom interpolator.
Perform the following steps to use custom transitions:
1. Derive a class from CCustomInterpolator and implement at least InterpolateValue method.
2. Ensure that the lifetime of custom interpolator object must be longer than duration of animation where it's used.
3. Instantiate (using operator new) a CCustomTransition object and pass a pointer to custom interpolator in the constructor.
4. Call CCustomTransition::SetInitialValue and CCustomTransition::SetInitialVelocity if these parameters are required for custom interpolation.
5. Pass the pointer to custom transition to AddTransition method of animation object, whose value should be animated with the custom algorithm.
6. When the value of animation object should change Windows Animation API will call InterpolateValue (and other relevant methods) in CCustomInterpolator.
</remarks>
        </member>
        <member name="M:CInterpolatorBase.GetDependencies(__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*)">
            <summary>
Gets the interpolator's dependencies.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the GetDependencies method.
</returns>
            <param name="initialValueDependencies">Output. Aspects of the interpolator that depend on the initial value passed to SetInitialValueAndVelocity.</param>
            <param name="initialVelocityDependencies">Output. Aspects of the interpolator that depend on the initial velocity passed to SetInitialValueAndVelocity.</param>
            <param name="durationDependencies">Output. Aspects of the interpolator that depend on the duration passed to SetDuration.</param>
        </member>
        <member name="M:CInterpolatorBase.InterpolateVelocity(System.Double,System.Double*)">
            <summary>
Interpolates the velocity at a given offset
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the InterpolateVelocity method.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than or equal to the duration of the transition.
This method is not called if the duration of the transition is zero. </param>
            <param name="velocity">Output. The velocity of the variable at the offset.</param>
        </member>
        <member name="M:CInterpolatorBase.InterpolateValue(System.Double,System.Double*)">
            <summary>
Interpolates the value at a given offset
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the InterpolateValue method.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than the duration of the transition.
This method is not called if the duration of the transition is zero.</param>
            <param name="value">Output. The interpolated value.</param>
        </member>
        <member name="M:CInterpolatorBase.GetFinalValue(System.Double*)">
            <summary>
Gets the final value to which the interpolator leads.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the GetFinalValue method.
</returns>
            <param name="value">Output. The final value of a variable at the end of the transition.</param>
        </member>
        <member name="M:CInterpolatorBase.GetDuration(System.Double*)">
            <summary>
Gets the interpolator's duration.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the GetDuration method.
</returns>
            <param name="duration">Output. The duration of the transition, in seconds.</param>
        </member>
        <member name="M:CInterpolatorBase.SetDuration(System.Double)">
            <summary>
Sets the interpolator's duration
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the SetDuration method.
</returns>
            <param name="duration">The duration of the transition.</param>
        </member>
        <member name="M:CInterpolatorBase.SetInitialValueAndVelocity(System.Double,System.Double)">
            <summary>
Sets the interpolator's initial value and velocity.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the SetInitialValueAndVelocity method.
</returns>
            <param name="initialValue">The value of the variable at the start of the transition.</param>
            <param name="initialVelocity">The velocity of the variable at the start of the transition.</param>
        </member>
        <member name="M:CInterpolatorBase.CreateInstance(CCustomInterpolator*,IUIAnimationInterpolator**)">
            <summary>
Creates an instance of CInterpolatorBase and stores a pointer to custom interpolator, which will be handling events.
</summary>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
<param name="pInterpolator">A pointer to custom interpolator.</param><param name="ppHandler">Output. Contains a pointer to instance of CInterpolatorBase when the function returns.</param></member>
        <member name="M:CInterpolatorBase.SetCustomInterpolator(CCustomInterpolator*)">
            <summary>
Stores  a pointer to custom interpolator, which will be handling events.
</summary>
            <param name="pInterpolator">A pointer to custom interpolator.</param>
        </member>
        <member name="M:CInterpolatorBase.#ctor">
            <summary>
Constructs the CInterpolatorBase object.
</summary>
        </member>
        <member name="T:CInterpolatorBase">
            <summary>
Implements a callback, which is called by Animation API when it needs to calculate a new value of animation variable.
</summary>
            <remarks>
This handler is created and passed to IUIAnimationTransitionFactory::CreateTransition when a CCustomTransition
object is being created as a part of animation initialization process (started by CAnimationController::AnimateGroup).
Usually you don't need to use this class directly, it just routs all events to a CCustomInterpolator-derived class, whose
pointer is passed to constructor of CCustomTransition.
</remarks>
        </member>
        <member name="M:CCustomInterpolator.GetDependencies(__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*)">
            <summary>
Gets the interpolator's dependencies.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="initialValueDependencies">Output. Aspects of the interpolator that depend on the initial value passed to SetInitialValueAndVelocity.</param>
            <param name="initialVelocityDependencies">Output. Aspects of the interpolator that depend on the initial velocity passed to SetInitialValueAndVelocity.</param>
            <param name="durationDependencies">Output. Aspects of the interpolator that depend on the duration passed to SetDuration.</param>
        </member>
        <member name="M:CCustomInterpolator.InterpolateVelocity(System.Double,System.Double*)">
            <summary>
Interpolates the velocity at a given offset
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than or equal to the duration of the transition.
This method is not called if the duration of the transition is zero. </param>
            <param name="velocity">Output. The velocity of the variable at the offset.</param>
        </member>
        <member name="M:CCustomInterpolator.InterpolateValue(System.Double,System.Double*)">
            <summary>
Interpolates the value at a given offset.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than the duration of the transition.
This method is not called if the duration of the transition is zero.</param>
            <param name="value">Output. The interpolated value.</param>
        </member>
        <member name="M:CCustomInterpolator.GetFinalValue(System.Double*)">
            <summary>
Gets the final value to which the interpolator leads.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="value">Output. The final value of a variable at the end of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.GetDuration(System.Double*)">
            <summary>
Gets the interpolator's duration.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="duration">Output. The duration of the transition, in seconds.</param>
        </member>
        <member name="M:CCustomInterpolator.SetDuration(System.Double)">
            <summary>
Sets the interpolator's duration.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="duration">The duration of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.SetInitialValueAndVelocity(System.Double,System.Double)">
            <summary>
Sets the interpolator's initial value and velocity.
</summary>
            <returns>
The basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="initialValue">The value of the variable at the start of the transition.</param>
            <param name="initialVelocity">The velocity of the variable at the start of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.Init(System.Double,System.Double)">
            <summary>
Initializes duration and final value.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="finalValue">The final value of a variable at the end of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.#ctor(System.Double,System.Double)">
            <summary>
Constructs a custom interpolator object and initializes duration and velocity to specified values.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="finalValue" />
        </member>
        <member name="M:CCustomInterpolator.#ctor">
            <summary>
Constructs a custom interpolator object and sets all values to default 0.
</summary>
            <remarks>
Use CCustomInterpolator::Init to initialize duration and final value later in the code.
</remarks>
        </member>
        <member name="F:CCustomInterpolator.m_currentVelocity">
            <summary>
The interpolated velocity.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_currentValue">
            <summary>
The interpolated value.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_initialVelocity">
            <summary>
The velocity of the variable at the start of the transition.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_initialValue">
            <summary>
The value of the variable at the start of the transition.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_finalValue">
            <summary>
The final value of a variable at the end of the transition.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="T:CCustomInterpolator">
            <summary>
Implements a basic interpolator.
</summary>
            <remarks>
Derive a class from CCustomInterpolator and override all necessary methods in order to implement a custom
interpolation algorithm. A pointer to this class should be passed as a parameter to CCustomTransition.
</remarks>
        </member>
        <member name="M:CSinusoidalTransitionFromVelocity.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CSinusoidalTransitionFromVelocity.m_period">
            <summary>
The period of oscillation of the sinusoidal wave in seconds.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromVelocity.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CSinusoidalTransitionFromVelocity.#ctor(System.Double,System.Double)">
            <summary>
Constructs a transition object.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="period">The period of oscillation of the sinusoidal wave in seconds. </param>
        </member>
        <member name="T:CSinusoidalTransitionFromVelocity">
            <summary>
Encapsulates a sinusoidal-velocity transition, with an amplitude determined by the animation variable's initial velocity..
</summary>
            <remarks>
The value of the animation variable oscillates around the initial value over the entire duration of a
sinusoidal-range transition. The amplitude of the oscillation is determined by the animation variable's velocity
when the transition begins.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CSinusoidalTransitionFromRange.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_slope">
            <summary>
The slope at the start of the transition.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_period">
            <summary>
The period of oscillation of the sinusoidal wave in seconds.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_dblMaximumValue">
            <summary>
The value of the animation variable at a peak of the sinusoidal wave.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_dblMinimumValue">
            <summary>
The value of the animation variable at a trough of the sinusoidal wave.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CSinusoidalTransitionFromRange.#ctor(System.Double,System.Double,System.Double,System.Double,__MIDL___MIDL_itf_UIAnimation_0000_0009_0001)">
            <summary>
Constructs a transition object.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="dblMinimumValue">The value of the animation variable at a trough of the sinusoidal wave.</param>
            <param name="dblMaximumValue">The value of the animation variable at a peak of the sinusoidal wave.</param>
            <param name="period">The period of oscillation of the sinusoidal wave in seconds. </param>
            <param name="slope">The slope at the start of the transition. </param>
        </member>
        <member name="T:CSinusoidalTransitionFromRange">
            <summary>
Encapsulates a sinusoidal-range transition, with a given range of oscillation.
</summary>
            <remarks>
The value of the animation variable fluctuates between the specified minimum and maximum values over the entire
duration of a sinusoidal-range transition. The slope parameter is used to disambiguate between the two possible
sine waves specified by the other parameters.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CReversalTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CReversalTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CReversalTransition.#ctor(System.Double)">
            <summary>
Constructs a reversal transition object and initializes its duration.
</summary>
            <param name="duration">The duration of the transition. </param>
        </member>
        <member name="T:CReversalTransition">
            <summary>
Encapsulates a reversal transition.
</summary>
            <remarks>
A reversal transition smoothly changes direction over a given duration.
The final value will be the same as the initial value and the final velocity will be the negative of the initial velocity.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CParabolicTransitionFromAcceleration.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CParabolicTransitionFromAcceleration.m_dblAcceleration">
            <summary>
The acceleration of the animation variable during the transition.
</summary>
        </member>
        <member name="F:CParabolicTransitionFromAcceleration.m_dblFinalVelocity">
            <summary>
The velocity of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CParabolicTransitionFromAcceleration.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="M:CParabolicTransitionFromAcceleration.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Constructs a parabolic-acceleration transition and initializes it with specified parameters.
</summary>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition. </param>
            <param name="dblFinalVelocity">The velocity of the animation variable at the end of the transition. </param>
            <param name="dblAcceleration">The acceleration of the animation variable during the transition.</param>
        </member>
        <member name="T:CParabolicTransitionFromAcceleration">
            <summary>
Encapsulates a parabolic-acceleration transition.
</summary>
            <remarks>
During a parabolic-acceleration transition, the value of the animation variable changes from the initial value
to the final value ending at a specified velocity. You can control how quickly the variable reaches the final
value by specifying the rate of acceleration.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CSmoothStopTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CSmoothStopTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CSmoothStopTransition.m_maximumDuration">
            <summary>
The maximum duration of the transition.
</summary>
        </member>
        <member name="M:CSmoothStopTransition.#ctor(System.Double,System.Double)">
            <summary>
Constructs a smooth-stop transition and initializes its maximum duration and final value.
</summary>
            <param name="maximumDuration">The maximum duration of the transition.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CSmoothStopTransition">
            <summary>
Encapsulates a smooth-stop transition.
</summary>
            <remarks>
A smooth-stop transition slows down as it approaches a given final value, and reaches it with a velocity of zero.
The duration of the transition is determined by the initial velocity, the difference between the initial and final values,
and the specified maximum duration. If there is no solution consisting of a single parabolic arc,
this method creates a cubic transition.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CLinearTransitionFromSpeed.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CLinearTransitionFromSpeed.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CLinearTransitionFromSpeed.m_dblSpeed">
            <summary>
The absolute value of the variable's velocity.
</summary>
        </member>
        <member name="M:CLinearTransitionFromSpeed.#ctor(System.Double,System.Double)">
            <summary>
Constructs a linear-speed transition object and initializes it with speed and final value.
</summary>
            <param name="dblSpeed">The absolute value of the variable's velocity.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CLinearTransitionFromSpeed">
            <summary>
Encapsulates a linear-speed transition.
</summary>
            <remarks>
During a linear-speed transition, the value of the animation variable changes at a specified rate.
The duration of the transition is determined by the difference between the initial value and the specified final value.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CLinearTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CLinearTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CLinearTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CLinearTransition.#ctor(System.Double,System.Double)">
            <summary>
Constructs a linear transition object and initializes it with duration and final value.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CLinearTransition">
            <summary>
Encapsulates a linear transition.
</summary>
            <remarks>
During a linear transition, the value of the animation variable transitions linearly from its initial value to a specified final value.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CInstantaneousTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CInstantaneousTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="M:CInstantaneousTransition.#ctor(System.Double)">
            <summary>
Constructs a transition object and initializes its final value.
</summary>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CInstantaneousTransition">
            <summary>
Encapsulates an instantaneous transition.
</summary>
            <remarks>
During an instantaneous transition, the value of the animation variable changes instantly from its current
value to a specified final value. The duration of this transition is always zero.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CDiscreteTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CDiscreteTransition.m_hold">
            <summary>
The amount of time by which to hold the variable at its final value.
</summary>
        </member>
        <member name="F:CDiscreteTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CDiscreteTransition.m_delay">
            <summary>
The amount of time by which to delay the instantaneous switch to the final value.
</summary>
        </member>
        <member name="M:CDiscreteTransition.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Constructs a discrete transition object and initializes its parameters.
</summary>
            <param name="delay">The amount of time by which to delay the instantaneous switch to the final value.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition. </param>
            <param name="hold">The amount of time by which to hold the variable at its final value.</param>
        </member>
        <member name="T:CDiscreteTransition">
            <summary>
Encapsulates a discrete transition.
</summary>
            <remarks>
During a discrete transition, the animation variable remains at the initial value for a specified delay time,
then switches instantaneously to a specified final value and remains at that value for a given hold time.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CCubicTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CCubicTransition.m_dblFinalVelocity">
            <summary>
The velocity of the variable at the end of the transition.
</summary>
        </member>
        <member name="F:CCubicTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CCubicTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CCubicTransition.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Constructs a transition object and initializes its parameters.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="finalValue">The value of the animation variable at the end of the transition.</param>
            <param name="finalVelocity">The velocity of the variable at the end of the transition.</param>
        </member>
        <member name="T:CCubicTransition">
            <summary>
Encapsulates a cubic transition.
</summary>
            <remarks>
During a cubic transition, the value of the animation variable changes from its initial value to a specified
final value over the duration of the transition, ending at a specified velocity.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CConstantTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CConstantTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CConstantTransition.#ctor(System.Double)">
            <summary>
Constructs a transition object and initializes its duration.
</summary>
            <param name="duration">The duration of the transition. </param>
        </member>
        <member name="T:CConstantTransition">
            <summary>
Encapsulates a constant transition.
</summary>
            <remarks>
During a constant transition, the value of an animation variable remains at the initial value over the duration
of the transition.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CAccelerateDecelerateTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_decelerationRatio">
            <summary>
The ratio of the time spent decelerating to the duration.
</summary>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_accelerationRatio">
            <summary>
The ratio of the time spent accelerating to the duration.
</summary>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_finalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CAccelerateDecelerateTransition.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
Constructs a transition object.
</summary>
            <param name="duration">The duration of the transition. </param>
            <param name="finalValue">The value of the animation variable at the end of the transition. </param>
            <param name="accelerationRatio">The ratio of the time spent accelerating to the duration.</param>
            <param name="decelerationRatio">The ratio of the time spent decelerating to the duration. </param>
        </member>
        <member name="T:CAccelerateDecelerateTransition">
            <summary>
Implements an accelerate-decelerate transition.
</summary>
            <remarks>
During an accelerate-decelerate transition, the animation variable speeds up and then slows down over the
duration of the transition, ending at a specified value. You can control how quickly the variable accelerates and
decelerates independently, by specifying different acceleration and deceleration ratios.
When the initial velocity is zero, the acceleration ratio is the fraction of the duration that the variable will
spend accelerating; likewise with the deceleration ratio. If the initial velocity is non-zero, it is the
fraction of the time between the velocity reaching zero and the end of transition. The acceleration ratio and
the deceleration ratio should sum to a maximum of 1.0.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CAnimationTimerEventHandler.OnRenderingTooSlow(System.UInt32)">
            <summary>
Handles events that occur when the rendering frame rate for an animation falls below the minimum desirable frame rate.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
        </member>
        <member name="M:CAnimationTimerEventHandler.OnPostUpdate">
            <summary>
Handles events that occur after an animation update is finished.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
        </member>
        <member name="M:CAnimationTimerEventHandler.OnPreUpdate">
            <summary>
Handles events that occur before an animation update begins.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
        </member>
        <member name="M:CAnimationTimerEventHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationTimerEventHandler.CreateInstance(CAnimationController*,IUIAnimationTimerEventHandler**)">
            <summary>
Creates an instance of CAnimationTimerEventHandler callback.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppTimerEventHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
animation timer events.</param>
        </member>
        <member name="T:CAnimationTimerEventHandler">
            <summary>
Implements a call back, which is called by Animation API when timing events occur.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationTimer::SetTimerEventHandler when you call
CAnimationController::EnableAnimationTimerEventHandler.
</remarks>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.OnStoryboardUpdated(IUIAnimationStoryboard*)">
            <summary>
Handles OnStoryboardUpdated events, which occur when a storyboard is updated
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
            <param name="storyboard">A pointer to storyboard, which was updated.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.OnStoryboardStatusChanged(IUIAnimationStoryboard*,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001)">
            <summary>
Handles OnStoryboardStatusChanged events, which occur when a storyboard's status changes
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
            <param name="storyboard">A pointer to storyboard whose status has changed.</param>
            <param name="newStatus">Specifies new storyboard status.</param>
            <param name="previousStatus">Specifies previous storyboard status.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.CreateInstance(CAnimationController*,IUIAnimationStoryboardEventHandler**)">
            <summary>
Creates an instance of CAnimationStoryboardEventHandler callback.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
storyboard events.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.#ctor">
            <summary>
Constructs a CAnimationStoryboardEventHandler object.
</summary>
        </member>
        <member name="T:CAnimationStoryboardEventHandler">
            <summary>
Implements a callback, which is called by Animation API when storyboard's status is changed or storyboard is updated.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationStoryboard::SetStoryboardEventHandler method,
when you call CAnimationController::EnableStoryboardEventHandler.
</remarks>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.OnIntegerValueChanged(IUIAnimationStoryboard*,IUIAnimationVariable*,System.Int32,System.Int32)">
            <summary>
Called when a value of an animation variable has changed.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
            <param name="storyboard">The storyboard that is animating the variable.</param>
            <param name="variable">The animation variable that was updated.</param>
            <param name="newValue">The new rounded value.</param>
            <param name="previousValue">The previous rounded value.</param>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.CreateInstance(CAnimationController*,IUIAnimationVariableIntegerChangeHandler**)">
            <summary>
Creates an instance of CAnimationVariableIntegerChangeHandler callback.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
variable integer change events.</param>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.#ctor">
            <summary>
Constructs a CAnimationVariableIntegerChangeHandler object.
</summary>
        </member>
        <member name="T:CAnimationVariableIntegerChangeHandler">
            <summary>
Implements a call back, which is called by Animation API when the value of an animation variable changes.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationVariable::SetVariableIntegerChangeHandler method,
when you call CAnimationVariable::EnableIntegerValueChangedEvent or CAnimationBaseObject::EnableIntegerValueChangedEvent
(which enables this event for all animation variables encapsulated in an animation object).
</remarks>
        </member>
        <member name="M:CAnimationVariableChangeHandler.OnValueChanged(IUIAnimationStoryboard*,IUIAnimationVariable*,System.Double,System.Double)">
            <summary>
Called when a value of an animation variable has changed.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="storyboard">The storyboard that is animating the variable.</param>
            <param name="variable">The animation variable that was updated.</param>
            <param name="newValue">The new value.</param>
            <param name="previousValue">The previous value.</param>
        </member>
        <member name="M:CAnimationVariableChangeHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationVariableChangeHandler.CreateInstance(CAnimationController*,IUIAnimationVariableChangeHandler**)">
            <summary>
Creates an instance of CAnimationVariableChangeHandler object.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
variable change events.</param>
        </member>
        <member name="M:CAnimationVariableChangeHandler.#ctor">
            <summary>
Constructs a CAnimationVariableChangeHandler object.
</summary>
        </member>
        <member name="T:CAnimationVariableChangeHandler">
            <summary>
Implements a call back, which is called by Animation API when the value of an animation variable changes.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationVariable::SetVariableChangeHandler method,
when you call CAnimationVariable::EnableValueChangedEvent or CAnimationBaseObject::EnableValueChangedEvent
(which enables this event for all animation variables encapsulated in an animation object).
</remarks>
        </member>
        <member name="M:CAnimationManagerEventHandler.OnManagerStatusChanged(__MIDL___MIDL_itf_UIAnimation_0000_0000_0002,__MIDL___MIDL_itf_UIAnimation_0000_0000_0002)">
            <summary>
Called when a status of animation manager has changed.
</summary>
            <returns>
Current implementation always returns S_OK;
</returns>
            <param name="newStatus">New status.</param>
            <param name="previousStatus">Previous status.</param>
        </member>
        <member name="M:CAnimationManagerEventHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationManagerEventHandler.CreateInstance(CAnimationController*,IUIAnimationManagerEventHandler**)">
            <summary>
Creates an instance of CAnimationManagerEventHandler object.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppManagerEventHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
status updates to an animation manager.</param>
        </member>
        <member name="M:CAnimationManagerEventHandler.#ctor">
            <summary>
Constructs a CAnimationManagerEventHandler object.
</summary>
        </member>
        <member name="T:CAnimationManagerEventHandler">
            <summary>
Implements a callback, which is called by Animation API when a status of animation manager changed.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationManager::SetManagerEventHandler method,
when you call CAnimationController::EnableAnimationManagerEvent.
</remarks>
        </member>
        <member name="M:CAnimationController.CleanUpGroup(CAnimationGroup*)">
            <summary>
A helper that cleans up the group.
</summary>
            <remarks>
This method removes all transitions and keyframes from the specified group.
</remarks>
            <param name="pGroup">A pointer to animation group to clean.</param>
        </member>
        <member name="M:CAnimationController.OnAfterSchedule(CAnimationGroup*)">
            <summary>
Called by the framework when an animation for the specified group has just been scheduled.
</summary>
            <remarks>
The default implementation removes keyframes from the specified group and transitions from animation variables that
belong to the specified group. Can be overridden in a derived class to take any additional actions upon animation schedule.
</remarks>
            <param name="pGroup">A pointer to an animation group, which has been scheduled.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationTimerRenderingTooSlow(System.UInt32)">
            <summary>
Called by the framework when the rendering frame rate for an animation falls below a minimum desirable frame rate.
</summary>
            <remarks>
This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.
It can be overridden in a derived class to take application-specific actions.
The minimum desirable frame rate is specified by calling IUIAnimationTimer::SetFrameRateThreshold.
</remarks>
            <param name="fps">The current frame rate in frames per second. </param>
        </member>
        <member name="M:CAnimationController.OnAnimationTimerPostUpdate">
            <summary>
Called by the framework after an animation update is finished.
</summary>
            <remarks>
This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
        </member>
        <member name="M:CAnimationController.OnAnimationTimerPreUpdate">
            <summary>
Called by the framework before an animation update begins.
</summary>
            <remarks>
This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
        </member>
        <member name="M:CAnimationController.OnHasPriorityCompress(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_COMPRESS.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnHasPriorityTrim(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_TRIM.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnHasPriorityConclude(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_CONCLUDE.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnHasPriorityCancel(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_CANCEL.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnStoryboardUpdated(CAnimationGroup*)">
            <summary>
Called by the framework when storyboard has been updated.
</summary>
            <remarks>
This method is called if you enable storyboard events using CAnimationController::EnableStoryboardEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to a group that owns the storyboard.</param>
        </member>
        <member name="M:CAnimationController.OnStoryboardStatusChanged(CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001)">
            <summary>
Called by the framework when storyboard status has changed.
</summary>
            <remarks>
This method is called if you enable storyboard events using CAnimationController::EnableStoryboardEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to an animation group that owns the storyboard whose status has changed.</param>
            <param name="newStatus">Specifies the new status.</param>
            <param name="previousStatus">Specifies the previous status.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationIntegerValueChanged(CAnimationGroup*,CAnimationBaseObject*,IUIAnimationVariable*,System.Int32,System.Int32)">
            <summary>
Called by the framework when integer value of animation variable has changed.
</summary>
            <remarks>
This method is called if you enable animation variable events with EnableIntegerValueChangedEvent called for a specific
animation variable or animation object.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to an animation group that holds an animation object whose value has changed.</param>
            <param name="pObject">A pointer to an animation object that contains an animation variable whose value has changed.</param>
            <param name="variable">A pointer to an animation variable.</param>
            <param name="newValue">Specifies new value.</param>
            <param name="prevValue">Specifies previous value.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationValueChanged(CAnimationGroup*,CAnimationBaseObject*,IUIAnimationVariable*,System.Double,System.Double)">
            <summary>
Called by the framework when value of animation variable has changed.
</summary>
            <remarks>
This method is called if you enable animation variable events with EnableValueChangedEvent called for a specific
animation variable or animation object.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to an animation group that holds an animation object whose value has changed.</param>
            <param name="pObject">A pointer to an animation object that contains an animation variable whose value has changed.</param>
            <param name="variable">A pointer to an animation variable.</param>
            <param name="newValue">Specifies new value.</param>
            <param name="prevValue">Specifies previous value.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationManagerStatusChanged(__MIDL___MIDL_itf_UIAnimation_0000_0000_0002,__MIDL___MIDL_itf_UIAnimation_0000_0000_0002)">
            <summary>
Called by the framework in response to StatusChanged event from animation manager.
</summary>
            <remarks>
This method is called if you enable animation manager events with EnableAnimationManagerEvent.
It can be overridden in a derived class to take application-specific actions. The default implementation
updates a related window if it has been set with SetRelatedWnd.
</remarks>
            <param name="newStatus">New animation manager status.</param>
            <param name="previousStatus">Previous animation manager status.</param>
        </member>
        <member name="M:CAnimationController.OnBeforeAnimationStart(CAnimationGroup*)">
            <summary>
Called by the framework right before the animation is scheduled.
</summary>
            <remarks>
This call is routed to related CWnd and can be overridden in a derived class to perform any
additional actions before the animation starts for the specified group.
</remarks>
            <param name="pGroup">A pointer to an animation group whose animation is about to start.</param>
        </member>
        <member name="M:CAnimationController.CleanUpGroup(System.UInt32)">
            <summary>
Called by the framework to clean up the group when animation has been scheduled.
</summary>
            <remarks>
This method removes all transitions and keyframes from the specified group, because they are not relevant
after an animation has been scheduled.
</remarks>
            <param name="nGroupID">Specifies GroupID.</param>
        </member>
        <member name="M:CAnimationController.ScheduleGroup(System.UInt32,System.Double)">
            <summary>
Schedules an animation.
</summary>
            <returns>
TRUE if animation was scheduled successfully. FALSE if storyboard has not been created, or other error occurs.
</returns>
            <remarks>
You must call AnimateGroup with parameter bScheduleNow set to FALSE prior ScheduleGroup. You can specify the
desired animation time obtained from IUIAnimationTimer::GetTime. If the time parameter is 0.0, the animation is scheduled for the
current time.
</remarks>
            <param name="nGroupID">Specifies animation Group ID to schedule.</param>
            <param name="time">Specifies time to schedule.</param>
        </member>
        <member name="M:CAnimationController.AnimateGroup(System.UInt32,System.Int32)">
            <summary>
Prepares a group to run animation and optionally schedules it.
</summary>
            <returns>
TRUE if animation was successfully scheduled and run.
</returns>
            <remarks>
This method does the actual work creating storyboard, adding animation variables, applying transitions and setting keyframes.
It's possible to delay scheduling if you set bScheduleNow to FALSE. In this case the specified group
will hold a storyboard that has been set up for animation. At that point you can setup events for the storyboard and
animation variables. When you actually need to run the animation call CAnimationController::ScheduleGroup.
</remarks>
            <param name="nGroupID">Specifies GroupID.</param>
            <param name="bScheduleNow">Specifies whether to run animation right away.</param>
        </member>
        <member name="M:CAnimationController.FindAnimationObject(IUIAnimationVariable*,CAnimationBaseObject**,CAnimationGroup**)">
            <summary>
Finds animation object containing a specified animation variable.
</summary>
            <returns>
TRUE if object was found; otherwise FALSE.
</returns>
            <remarks>
Called from event handlers when it's required to find an animation object from incoming animation variable.
</remarks>
            <param name="pVariable">A pointer to animation variable.</param>
            <param name="ppObject">Output. Contains a pointer to animation object or NULL. </param>
            <param name="ppGroup">Output. Contains a pointer to animation group that holds the animation object, or NULL.</param>
        </member>
        <member name="M:CAnimationController.FindAnimationGroup(IUIAnimationStoryboard*)">
            <summary>
Finds an animation group by its storyboard.
</summary>
            <returns>
A pointer to animation group if succeeds, or NULL if no group plays the specified storyboard.
</returns>
            <remarks>
This method is usually called from event handlers to find a group by pointer to storyboard that comes as a parameter to an event handler.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
        </member>
        <member name="M:CAnimationController.FindAnimationGroup(System.UInt32)">
            <summary>
Finds an animation group by its Group ID.
</summary>
            <returns>
A pointer to animation group or NULL if the group with specified ID is not found.
</returns>
            <remarks>
Use this method to find an animation group at runtime. A group is created and added to the internal list of animation groups
when a first animation object with particular GroupID is being added to animation controller.
</remarks>
            <param name="nGroupID">Specifies a GroupID.</param>
        </member>
        <member name="M:CAnimationController.AddKeyframeToGroup(System.UInt32,CBaseKeyFrame*)">
            <summary>
Adds a keyframe to group.
</summary>
            <returns>
TRUE if the function succeeds; otherwise FALSE.
</returns>
            <remarks>
Usually you don't need to call this method, use CAnimationController::CreateKeyframe instead, which creates
and adds the created keyframe to a group automatically.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="pKeyframe">A pointer to a keyframe.</param>
        </member>
        <member name="M:CAnimationController.CreateKeyframe(System.UInt32,CBaseKeyFrame*,System.Double)">
            <summary>
Creates a keyframe that depends on other keyframe with optional offset in seconds and adds it to the specified group.
</summary>
            <returns>
A pointer to newly created keyframe if the function succeeds.
</returns>
            <remarks>
You can store the returned pointer and base other keyframes on the newly created keyframe (see the second overload).
It's possible to begin transitions at keyframes - see CBaseTransition::SetKeyframes.
You don't need to delete keyframes created in this way, because they are deleted automatically by animation groups.
Be careful when creating keyframes based on other keyframes and transitions and avoid circular references.
</remarks>
            <param name="nGroupID">Specifies Group ID for which keyframe is created.</param>
            <param name="pKeyframe">A  pointer to base keyframe for this keyframe.</param>
            <param name="offset">Offset in seconds from the base keyframe specified by pKeyframe.</param>
        </member>
        <member name="M:CAnimationController.CreateKeyframe(System.UInt32,CBaseTransition*)">
            <summary>
Creates a keyframe that depends on transition and adds it to the specified group.
</summary>
            <returns>
A pointer to newly created keyframe if the function succeeds.
</returns>
            <remarks>
You can store the returned pointer and base other keyframes on the newly created keyframe (see the second overload).
It's possible to begin transitions at keyframes - see CBaseTransition::SetKeyframes.
You don't need to delete keyframes created in this way, because they are deleted automatically by animation groups.
Be careful when creating keyframes based on other keyframes and transitions and avoid circular references.
</remarks>
            <param name="nGroupID">Specifies Group ID for which keyframe is created.</param>
            <param name="pTransition">A pointer to transition. Keyframe will be inserted to storyboard after this transition.</param>
        </member>
        <member name="M:CAnimationController.RemoveTransitions(System.UInt32)">
            <summary>
Removes transitions from animation objects that belong to the specified group.
</summary>
            <remarks>
The group loops over its animation objects and calls ClearTransitions(FALSE) for each animation object.
This method is called by the framework after animation has been scheduled.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
        </member>
        <member name="M:CAnimationController.RemoveAllAnimationGroups">
            <summary>
Removes all animation groups from animation controller.
</summary>
            <remarks>
All groups will be deleted, their pointer, if stored at the application level, must be invalidated.
If CAnimationGroup::m_bAutodestroyAnimationObjects for a group being deleted is TRUE,
all animation objects that belong to that group will be deleted; otherwise their references to parent animation
controller will be set to NULL and they can be added to another controller.
</remarks>
        </member>
        <member name="M:CAnimationController.RemoveAnimationGroup(System.UInt32)">
            <summary>
Removes an animation group with specified ID from animation controller.
</summary>
            <remarks>
This method removes an animation group from the internal list of groups and deletes it, therefore if you stored
a pointer to that animation group, it must be invalidated. If CAnimationGroup::m_bAutodestroyAnimationObjects is TRUE,
all animation objects that belong to that group will be deleted; otherwise their references to parent animation
controller will be set to NULL and they can be added to another controller.
</remarks>
            <param name="nGroupID">Specifies animation group ID.</param>
        </member>
        <member name="M:CAnimationController.RemoveAnimationObject(CAnimationBaseObject*,System.Int32)">
            <summary>
Remove an animation object from animation controller.
</summary>
            <remarks>
Removes an animation object from animation controller and animation group. Call this function if
a particular object should not be animated anymore, or if you need to move the object to another animation controller.
In the last case bNoDelete must be TRUE.
</remarks>
            <param name="pObject">A pointer to an animation object.</param>
            <param name="bNoDelete">If this parameter is TRUE the object will not be deleted upon remove.</param>
        </member>
        <member name="M:CAnimationController.AddAnimationObject(CAnimationBaseObject*)">
            <summary>
Adds an animation object to a group that belongs to the animation controller.
</summary>
            <returns>
A pointer to existing or new animation group where pObject has been added if function succeeds; NULL if
pObject has already been added to a group that belongs to another animation controller.
</returns>
            <remarks>
Call this method to add an animation object to the animation controller. An object will be added to a group
according to object's GroupID (see CAnimationBaseObject::SetID). The animation controller will create a new
group if it's the first object being added with the specified GroupID. An animation object can be added to
one animation controller only. If you need to add an object to another controller, call RemoveAnimationObject first.
If you call SetID with new GroupID for an object that has been already added to a group, the object will be removed
from the old group and added to another group with specified ID.
</remarks>
            <param name="pObject">A pointer to an animation object.</param>
        </member>
        <member name="M:CAnimationController.SetRelatedWnd(CWnd*)">
            <summary>
Establishes a relationship between animation controller and a window.
</summary>
            <remarks>
If a related CWnd object is set, the animation controller can automatically update it (send WM_PAINT message) when
the status of animation manager has changed or timer post update event has occurred.
</remarks>
            <param name="pWnd">A pointer to window object to set.</param>
        </member>
        <member name="M:CAnimationController.IsAnimationInProgress">
            <summary>
Tells whether at least one group is playing animation.
</summary>
            <returns>
TRUE if there is an animation in progress for this animation controller; otherwise FALSE.
</returns>
            <remarks>
Checks status of animation manager and returns TRUE if the status is UI_ANIMATION_MANAGER_BUSY.
</remarks>
        </member>
        <member name="M:CAnimationController.UpdateAnimationManager">
            <summary>
Directs the animation manager to update the values of all animation variables.
</summary>
            <remarks>
Calling this method advances the animation manager to current time, changing statuses of storyboards as necessary
and updating any animation variables to appropriate interpolated values. Internally this method calls
IUIAnimationTimer::GetTime(timeNow) and IUIAnimationManager::Update(timeNow). Override this method in a derived
class to customize this behavior.
</remarks>
        </member>
        <member name="M:CAnimationController.EnableAnimationTimerEventHandler(System.Int32,__MIDL___MIDL_itf_UIAnimation_0000_0012_0001)">
            <summary>
Sets or releases a handler for timing events and handler for timing updates.
</summary>
            <returns>
TRUE if handlers were successfully set or released; FALSE if this method is called for a second time without
releasing the handlers first, or if any other error occurs.
</returns>
            <remarks>
When the handlers are set (enabled) Windows Animation API calls OnAnimationTimerPreUpdate, OnAnimationTimerPostUpdate,
OnRenderingTooSlow methods.
You need to enable animation timers to allow Windows Animation API update storyboards. Otherwise you'll need to
call CAnimationController::UpdateAnimationManager in order to direct the animation manager to update the values
of all animation variables.
</remarks>
            <param name="bEnable">Specifies whether to set or release the handlers.</param>
            <param name="idleBehavior">Specifies idle behavior for timer update handler.</param>
        </member>
        <member name="M:CAnimationController.EnableStoryboardEventHandler(System.UInt32,System.Int32)">
            <summary>
Sets or releases a handler for storyboard status and update events.
</summary>
            <returns>
TRUE if the handler was successfully set or released; FALSE if the specified animation group is now found or
animation for the specified group has not been initiated and its internal storyboard is NULL.
</returns>
            <remarks>
When a handler is set (enabled) Windows Animation API calls OnStoryboardStatusChanges and OnStoryboardUpdated virtual methods.
A handler must be set after CAnimationController::Animate has been called for the specified animation group, because
it creates encapsulated IUIAnimationStoryboard object.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="bEnable">Specifies whether to set or release a handler.</param>
        </member>
        <member name="M:CAnimationController.EnablePriorityComparisonHandler(System.UInt64)">
            <summary>
Sets or releases the priority comparison handler to call to determine whether a scheduled storyboard can be cancelled,
concluded, trimmed or compressed.
</summary>
            <returns>
TRUE if the handler was successfully set or released.
</returns>
            <remarks>
When a handler is set (enabled) Windows Animation calls the following virtual methods depending on dwHandlerType:
OnHasPriorityCancel, OnHasPriorityConclude, OnHasPriorityTrim, OnHasPriorityCompress.
dwHandler can be a combination of the following flags:
UI_ANIMATION_PHT_NONE - release all handlers
UI_ANIMATION_PHT_CANCEL - set Cancel comparison handler
UI_ANIMATION_PHT_CONCLUDE - set Conclude comparison handler
UI_ANIMATION_PHT_COMPRESS - set Compress comparison handler
UI_ANIMATION_PHT_TRIM - set Trim comparison handler
UI_ANIMATION_PHT_CANCEL_REMOVE - remove Cancel comparison handler
UI_ANIMATION_PHT_CONCLUDE_REMOVE - remove Conclude comparison handler
UI_ANIMATION_PHT_COMPRESS_REMOVE - remove Compress comparison handler
UI_ANIMATION_PHT_TRIM_REMOVE - remove Trim comparison handler
</remarks>
            <param name="dwHandlerType">A combination of UI_ANIMATION_PHT_ flags (see remarks), which specifies what handlers to set or release.</param>
        </member>
        <member name="M:CAnimationController.EnableAnimationManagerEvent(System.Int32)">
            <summary>
Sets or releases a handler to call when animation manager's status changes.
</summary>
            <returns>
TRUE if the handler was successfully set or released.
</returns>
            <remarks>
When a handler is set (enabled) Windows Animation calls OnAnimationManagerStatusChanged when animation manager's status changes.
</remarks>
            <param name="bEnable">Specifies whether to set or release a handler.</param>
        </member>
        <member name="M:CAnimationController.GetKeyframeStoryboardStart">
            <summary>
Returns a keyframe that identifies start of storyboard.
</summary>
            <returns>
A pointer to base keyframe, which identifies start of storyboard.
</returns>
            <remarks>
Obtain this keyframe to base any other keyframes or transitions on the moment in time when a storyboard starts.
</remarks>
        </member>
        <member name="M:CAnimationController.IsValid">
            <summary>
Tells whether animation controller is valid.
</summary>
            <returns>
TRUE if animation controller is valid; otherwise FALSE.
</returns>
            <remarks>
This method returns FALSE only if Windows Animation API is not supported on the current OS and creation of
animation manager failed because it's not registered. You need to call GetUIAnimationManager at least once after initialization of
COM libraries to cause setting of this flag.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUITransitionFactory">
            <summary>
A pointer to IUIAnimationTransitionFactory interface or NULL, if creation of transition library failed.
</summary>
            <returns>
A pointer to IUIAnimationTransitionFactory or NULL, if creation of transition factory failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUIAnimationTimer">
            <summary>
Provides access to encapsulated IUIAnimationTimer object.
</summary>
            <returns>
A pointer to IUIAnimationTimer interface or NULL, if creation of animation timer failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUITransitionLibrary">
            <summary>
Provides access to encapsulated IUIAnimationTransitionLibrary object.
</summary>
            <returns>
A pointer to IUIAnimationTransitionLibrary interface or NULL, if creation of transition library failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUIAnimationManager">
            <summary>
Provides access to encapsulated IUIAnimationManager object.
</summary>
            <returns>
A pointer to IUIAnimationManager interface or NULL, if creation of animation manager failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
You may need to access IUIAnimationManager in order to call its interface methods, which are not wrapped by
animation controller.
</remarks>
        </member>
        <member name="M:CAnimationController.Dispose">
            <summary>
The destructor. Called when animation controller object is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationController.#ctor">
            <summary>
Constructs an animation controller.
</summary>
        </member>
        <member name="F:CAnimationController.g_KeyframeStoryboardStart">
            <summary>
A keyframe that represents start of storyboard.
</summary>
        </member>
        <member name="F:CAnimationController.m_lstAnimationGroups">
            <summary>
A list of animation groups that belong to this animation controller.
</summary>
        </member>
        <member name="F:CAnimationController.m_pRelatedWnd">
            <summary>
A pointer to a related CWnd object, which can be automatically redrawn when
the status of animation manager has changed, or post update event has occurred. Can be NULL.
</summary>
        </member>
        <member name="F:CAnimationController.m_pTransitionFactory">
            <summary>
Stores a pointer to Transition Factory COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_pAnimationTimer">
            <summary>
Stores a pointer to Animation Timer COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_pTransitionLibrary">
            <summary>
Stores a pointer to Transition Library COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_pAnimationManager">
            <summary>
Stores a pointer to Animation Manager COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_bIsValid">
            <summary>
Specifies whether an animation controller is valid or not.
This member is set to FALSE if current OS does not support Windows Animation API.
</summary>
        </member>
        <member name="T:CAnimationController">
            <summary>
Implements the animation controller, which provides a central interface for creating and managing UI animations.
</summary>
            <remarks>
The CAnimationController class is the key class that manages animations.
You may create one or more instances of animation controller in an application and, optionally, connect an instance of
animation controller to a CWnd object using CAnimationController::SetRelatedWnd. This connection is required to send WM_PAINT messages
to the related window automatically when animation manager status has changed or animation timer has been updated.
If you do not enable this relation, you must redraw a window that displays an animation manually. For this purpose you can derive a class
from CAnimationController and override OnAnimationManagerStatusChanged and/or OnAnimationTimerPostUpdate and invalidate one or
more windows when necessary.
</remarks>
        </member>
        <member name="F:CAnimationGroup.m_bAutodestroyAnimationObjects">
            <summary>
Specifies how to destroy animation objects. If this parameter is TRUE, animation objects will be destroyed automatically
when the group is destroyed. Otherwise animation objects must be destroyed manually. The default value is FALSE.
Set this value to TRUE only if all animation objects that belong to group are allocated dynamically with operator new.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_bAutoclearTransitions">
            <summary>
Specifies how to clear transitions from animation objects that belong to group. If this member is TRUE,
transitions are removed automatically when an animation has been scheduled. Otherwise you need to remove
transitions manually.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_bAutodestroyKeyframes">
            <summary>
Specifies how to destroy keyframes. If this value is TRUE, all keyframes are removed and destroyed;
otherwise they are removed from the list only. The default value is TRUE.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_pStoryboard">
            <summary>
Points to animation storyboard. This pointer is valid only after call on Animate.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_lstKeyFrames">
            <summary>
Contains a list of keyframes.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_lstAnimationObjects">
            <summary>
Contains a list of animation objects.
</summary>
        </member>
        <member name="M:CAnimationGroup.SetAutodestroyTransitions(System.Int32)">
            <summary>
Directs all animation objects that belong to group automatically destroy transitions.
</summary>
            <remarks>
Set this value to FALSE only if you allocate transitions on the stack. The default value is TRUE, therefore
it's highly recommended to allocate transition objects using operator new.
</remarks>
            <param name="bAutoDestroy">Specifies how to destroy transitions.</param>
        </member>
        <member name="M:CAnimationGroup.Schedule(IUIAnimationTimer*,System.Double)">
            <summary>
Schedules an animation at the specified time.
</summary>
            <returns>
TRUE if the method succeeds; FALSE if the method fails or if Animate has not been called with bScheduleNow set to FALSE.
</returns>
            <remarks>
Call this function to schedule an animation at the specified time. You must call Animate with bScheduleNow set to FALSE first.
</remarks>
            <param name="pTimer">A pointer to animation timer.</param>
            <param name="time">Specifies time to schedule the animation.</param>
        </member>
        <member name="M:CAnimationGroup.Animate(IUIAnimationManager*,IUIAnimationTimer*,System.Int32)">
            <summary>
Animates a group.
</summary>
            <returns>
TRUE if the method succeeds; otherwise FALSE.
</returns>
            <remarks>
This method creates an internal storyboard, creates and applies transitions and schedules an animation
if bScheduleNow is TRUE. If bScheduleNow is FALSE, you need to call Schedule to start animation at the
specified time.
</remarks>
            <param name="pManager" />
            <param name="pTimer" />
            <param name="bScheduleNow" />
        </member>
        <member name="M:CAnimationGroup.FindAnimationObject(IUIAnimationVariable*)">
            <summary>
Finds an animation object that contains the specified animation variable.
</summary>
            <returns>
A pointer to animation object, or NULL if animation object is not found.
</returns>
            <param name="pVariable">A pointer to animation variable.</param>
        </member>
        <member name="M:CAnimationGroup.RemoveKeyframes">
            <summary>
Removes and optionally destroys all keyframes that belong to an animation group.
</summary>
            <remarks>
If m_bAutodestroyKeyframes member is TRUE then keyframes are removed and destroyed, otherwise keyframes are
just removed from the internal list of keyframes.
</remarks>
        </member>
        <member name="M:CAnimationGroup.RemoveTransitions">
            <summary>
Removes transitions from animation objects that belong to an animation group.
</summary>
            <remarks>
If m_bAutoclearTransitions flag is set to TRUE, this method loops over all animation objects that belong to the group
and calls CAnimationObject::ClearTransitions(FALSE).
</remarks>
        </member>
        <member name="M:CAnimationGroup.ApplyTransitions">
            <summary>
Applies transitions to animation objects.
</summary>
            <remarks>
This method ASSERTS in debug mode if storyboard has not been created.
It creates all transitions first, then adds "static" keyframes (keyframes that depend on offsets),
adds transitions that do not depend on keyframes, adds keyframes depending on transitions and other keyframes,
and at last adds transitions that depend on keyframes.
</remarks>
        </member>
        <member name="M:CAnimationGroup.GetGroupID">
            <summary>
Returns GroupID.
</summary>
            <returns>
A group identifier.
</returns>
        </member>
        <member name="M:CAnimationGroup.Dispose">
            <summary>
The destructor. Called when an animation group is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationGroup.#ctor(CAnimationController*,System.UInt32)">
            <summary>
Constructs an animation group.
</summary>
            <param name="pParentController">A pointer to animation controller that creates a group.</param>
            <param name="nGroupID">Specifies GroupID.</param>
        </member>
        <member name="M:CAnimationGroup.CreateTransitions">
            <summary>
A helper that creates COM transition objects.
</summary>
            <returns>
TRUE is the method succeeds, otherwise FALSE.
</returns>
        </member>
        <member name="M:CAnimationGroup.AddTransitions(IUIAnimationStoryboard*,System.Int32)">
            <summary>
A helper that adds transitions to a storyboard.
</summary>
            <param name="pStoryboard">A pointer to a storyboard COM object.</param>
            <param name="bDependOnKeyframes">Specifies whether this method should add to the storyboard transitions that depend on other keyframes.</param>
        </member>
        <member name="M:CAnimationGroup.AddKeyframes(IUIAnimationStoryboard*,System.Int32)">
            <summary>
A helper that adds keyframes to a storyboard.
</summary>
            <param name="pStoryboard">A pointer to a storyboard COM object.</param>
            <param name="bAddDeep">Specifies whether this method should add to the storyboard keyframes that depend on other keyframes.</param>
        </member>
        <member name="F:CAnimationGroup.m_pParentController">
            <summary>
A pointer to animation controller this group belongs to.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_nGroupID">
            <summary>
A unique identifier of animation group.
</summary>
        </member>
        <member name="T:CAnimationGroup">
            <summary>
Implements an animation group, which combines an animation storyboard, animation objects and transitions
to define an animation.
</summary>
            <remarks>
Animation groups are created automatically by animation controller (CAnimationController) when you add animation
objects using CAnimationController::AddAnimationObject.
An animation group is identified by GroupID, which is usually taken as a parameter to manipulate animation groups.
The GroupID is taken from the first animation object being added to a new animation group.
An encapsulated animation storyboard is created after you call CAnimationController::AnimateGroup and can be
accessed via public member m_pStoryboard.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to four CAnimationVariable objects
representing coordinates of rectangle.</param>
        </member>
        <member name="F:CAnimationRect.m_bFixedSize">
            <summary>
Specifies whether the rectangle has fixed size.
</summary>
            <remarks>
If this member is true, then the size of rectangle is fixed and right and bottom values
are recalculated each time the top-left corner is  moved according to the fixed size.
Set this value to TRUE to easily move the rectangle around the screen. In this case transitions applied to
right and bottom coordinates are ignored. The size is stored internally when you construct the object and/or
call SetDefaultValue. By default this member is set to FALSE.
</remarks>
        </member>
        <member name="M:CAnimationRect.AddTransition(CBaseTransition*,CBaseTransition*,CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for left, top, right and bottom coordinates.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for each rectangle sides.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of the rectangle sides, you can pass NULL.
</remarks>
            <param name="pLeftTransition">Specifies transition for the left side.</param>
            <param name="pTopTransition">Specifies transition for the top side.</param>
            <param name="pRightTransition">Specifies transition for the right side.</param>
            <param name="pBottomTransition">Specifies transition for the bottom side.</param>
        </member>
        <member name="M:CAnimationRect.op_Implicit~tagRECT">
            <summary>
Converts a CAnimationRect to RECT.
</summary>
            <returns>
Current value of animation rectangle as RECT.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned RECT will contain default values for all rectangle coordinates.
</remarks>
        </member>
        <member name="M:CAnimationRect.op_Assign(tagRECT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assigns rect to CAnimationRect.
</summary>
            <remarks>
It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for color components if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="rect">The new value of animation rectangle.</param>
        </member>
        <member name="M:CAnimationRect.GetBottom">
            <summary>
Provides access to CAnimationVariable representing bottom coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing bottom coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the bottom coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetRight">
            <summary>
Provides access to CAnimationVariable representing right coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing right coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the right coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetTop">
            <summary>
Provides access to CAnimationVariable representing top coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing top coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the top coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetLeft">
            <summary>
Provides access to CAnimationVariable representing left coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing left coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the left coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetValue(CRect*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation rectangle. If this method fails or underlying COM objects for
left, top, right and bottom have not been initialized, rect contains default value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="rect">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationRect.GetDefaultValue">
            <summary>
Returns the default values for rectangle's bounds.
</summary>
            <returns>
A CRect value containing defaults for left, right, top and bottom.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationRect.SetDefaultValue(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to rectangle's bounds.
It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="rect">Specifies new default values for left, top, right and bottom.</param>
        </member>
        <member name="M:CAnimationRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation rect object.
</summary>
            <remarks>
The object is constructed with specified coordinates of each side, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="nLeft">Specifies coordinate of left bound.</param>
            <param name="nTop">Specifies coordinate of top bound.</param>
            <param name="nRight">Specifies coordinate of right bound.</param>
            <param name="nBottom">Specifies coordinate of bottom bound.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationRect.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation rect object.
</summary>
            <remarks>
The object is constructed with specified top-left corner coordinates and size of rectangle, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="pt">Coordinate of top-left corner.</param>
            <param name="sz">Size of rectangle.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationRect.#ctor(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation rect object.
</summary>
            <remarks>
The object is constructed with specified rect coordinates, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="rect">Specifies default rectangle.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationRect.#ctor">
            <summary>
Constructs a CAnimationRect object.
</summary>
            <remarks>
The object is constructed with default values for left, top, right and bottom, Object ID and Group ID, which will be set to 0. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
        </member>
        <member name="F:CAnimationRect.m_szInitial">
            <summary>
Specifies initial size of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_bottomValue">
            <summary>
The encapsulated animation variable that represents Bottom bound of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_rightValue">
            <summary>
The encapsulated animation variable that represents Right bound of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_topValue">
            <summary>
The encapsulated animation variable that represents Top bound of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_leftValue">
            <summary>
The encapsulated animation variable that represents Left bound of animation rectangle.
</summary>
        </member>
        <member name="T:CAnimationRect">
            <summary>
Implements the functionality of a rectangle whose top, left, right and bottom sides can be animated.
</summary>
            <remarks>
The CAnimationRect class encapsulates four CAnimationVariable objects and can represent in applications
a rectangle.
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to left, right top and bottom coordinates.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to three CAnimationVariable objects
representing red, green and blue components.</param>
        </member>
        <member name="M:CAnimationColor.AddTransition(CBaseTransition*,CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for Red, Green and Blue components.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables representing color components.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of the color components, you can pass NULL.
</remarks>
            <param name="pRTransition">Transition for Red component.</param>
            <param name="pGTransition">Transition for Green component.</param>
            <param name="pBTransition">Transition for Blue component.</param>
        </member>
        <member name="M:CAnimationColor.op_Implicit~System.UInt32!System.Runtime.CompilerServices.IsLong">
            <summary>
Converts a CAnimationColor to COLORREF.
</summary>
            <returns>
Current value of animation color object as COLORREF.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned COLORREF will contain default values for all color components.
</remarks>
        </member>
        <member name="M:CAnimationColor.op_Assign(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Assigns color to CAnimationColor.
</summary>
            <remarks>
It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for color components if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="color">Specifies new value Animation Color.</param>
        </member>
        <member name="M:CAnimationColor.GetB">
            <summary>
Provides access to CAnimationVariable representing Blue component.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Blue component.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Blue component.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetG">
            <summary>
Provides access to CAnimationVariable representing Green component.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Green component.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Green component.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetR">
            <summary>
Provides access to CAnimationVariable representing Red component.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Red component.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Red component.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetValue(System.UInt32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation color. If this method fails or underlying COM objects for
color components have not been initialized, color contains default value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="color">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationColor.GetDefaultValue">
            <summary>
Returns the default values for color components.
</summary>
            <returns>
A COLORREF value containing defaults for RGB components.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationColor.SetDefaultValue(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to color components
of animation color. It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="color">Specifies new default values for red, green and blue components.</param>
        </member>
        <member name="M:CAnimationColor.#ctor(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation color object.
</summary>
            <remarks>
The object is constructed with specified values for RGB components, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="color">Specifies default color.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationColor.#ctor">
            <summary>
Constructs a CAnimationColor object.
</summary>
            <remarks>
The object is constructed with default values for red, green, blue, Object ID and Group ID, which will be set to 0. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
        </member>
        <member name="F:CAnimationColor.m_bValue">
            <summary>
The encapsulated animation variable that represents Blue component of animation color.
</summary>
        </member>
        <member name="F:CAnimationColor.m_gValue">
            <summary>
The encapsulated animation variable that represents Green component of animation color.
</summary>
        </member>
        <member name="F:CAnimationColor.m_rValue">
            <summary>
The encapsulated animation variable that represents Red component of animation color.
</summary>
        </member>
        <member name="T:CAnimationColor">
            <summary>
Implements the functionality of a color whose red, green and blue components can be animated.
</summary>
            <remarks>
The CAnimationColor class encapsulates three CAnimationVariable objects and can represent in applications
a color. For example, you can use this class to animate colors of any object on the screen (like text color, background color etc).
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to Red, Green and Blue components.
</remarks>
        </member>
        <member name="M:CAnimationSize.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to two CAnimationVariable objects
representing the width and height.</param>
        </member>
        <member name="M:CAnimationSize.AddTransition(CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for Width and Height.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for Width and Height.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of dimensions, you can pass NULL.
</remarks>
            <param name="pCXTransition">A pointer to transition for Width.</param>
            <param name="pCYTransition">A pointer to transition for Height.</param>
        </member>
        <member name="M:CAnimationSize.op_Implicit~CSize">
            <summary>
Converts a CAnimationSize to a CSize.
</summary>
            <returns>
Current value of animation size as CSize.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned size will contain default values for Width and Height.
</remarks>
        </member>
        <member name="M:CAnimationSize.op_Assign(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assigns szSrc to CAnimationSize.
</summary>
            <remarks>
Assigns szSrc to CAnimationSize. It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for Width and Height if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="szSrc">Refers to CSize or SIZE.</param>
        </member>
        <member name="M:CAnimationSize.GetCY">
            <summary>
Provides access to CAnimationVariable representing Height.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Height.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Height.
</remarks>
        </member>
        <member name="M:CAnimationSize.GetCX">
            <summary>
Provides access to CAnimationVariable representing Width.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Width.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Width.
</remarks>
        </member>
        <member name="M:CAnimationSize.GetValue(CSize*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation size. If this method fails or underlying COM objects for
Width and Size have not been initialized, szValue contains default value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="szValue">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationSize.GetDefaultValue">
            <summary>
Returns the default values for Width and Height.
</summary>
            <returns>
A CSize object containing default values.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationSize.SetDefaultValue(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to Width and Height
of animation size. It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="szDefault">Specifies new default size.</param>
        </member>
        <member name="M:CAnimationSize.#ctor(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation size object.
</summary>
            <remarks>
The object is constructed with specified values for width, height, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="szDefault">Specifies default size.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationSize.#ctor">
            <summary>
Constructs an animation size object.
</summary>
            <remarks>
The object is constructed with default values for width, height, Object ID and Group ID, which will be set to 0. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
        </member>
        <member name="F:CAnimationSize.m_cyValue">
            <summary>
The encapsulated animation variable that represents height of animation size.
</summary>
        </member>
        <member name="F:CAnimationSize.m_cxValue">
            <summary>
The encapsulated animation variable that represents width of animation size.
</summary>
        </member>
        <member name="T:CAnimationSize">
            <summary>
Implements the functionality of a size object whose dimensions can be animated.
</summary>
            <remarks>
The CAnimationSize class encapsulates two CAnimationVariable objects and can represent in applications
a size. For example, you can use this class to animate a size of any two dimensional object on the screen (like rectangle, control etc).
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to Width and/or Height.
</remarks>
        </member>
        <member name="M:CAnimationPoint.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to two CAnimationVariable objects
representing the X and Y coordinates.</param>
        </member>
        <member name="M:CAnimationPoint.AddTransition(CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for X and Y coordinates.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for X and Y coordinates.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of coordinates, you can pass NULL.
</remarks>
            <param name="pXTransition">A pointer to transition for X coordinates.</param>
            <param name="pYTransition">A pointer to transition for Y coordinate.</param>
        </member>
        <member name="M:CAnimationPoint.GetY">
            <summary>
Provides access to CAnimationVariable for Y coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Y coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Y coordinate.
</remarks>
        </member>
        <member name="M:CAnimationPoint.GetX">
            <summary>
Provides access to CAnimationVariable for X coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing X coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing X coordinate.
</remarks>
        </member>
        <member name="M:CAnimationPoint.op_Implicit~CPoint">
            <summary>
Converts a CAnimationPoint to a CPoint.
</summary>
            <returns>
Current value of CAnimationPoint as CPoint.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned point will contain default values for X and Y coordinates.
</remarks>
        </member>
        <member name="M:CAnimationPoint.op_Assign(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assigns ptSrc to CAnimationPoint.
</summary>
            <remarks>
Assigns ptSrc to CAnimationPoint. It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for X and Y coordinates if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="ptSrc">Refers to CPoint or POINT.</param>
        </member>
        <member name="M:CAnimationPoint.GetValue(CPoint*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation point. If this method fails or underlying COM objects for
X and Y coordinates have not been initialized, ptValue contains default
value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="ptValue">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationPoint.GetDefaultValue">
            <summary>
Returns the default values for X and Y coordinates.
</summary>
            <returns>
A point containing default value.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationPoint.SetDefaultValue(tagPOINT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to X and Y
coordinates of animation point. It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="ptDefault">Specifies the default point value.</param>
        </member>
        <member name="M:CAnimationPoint.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs CAnimationPoint object.
</summary>
            <remarks>
Constructs CAnimationPoint object with specified properties.
</remarks>
            <param name="ptDefault">Specifies default point coordinates.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationPoint.#ctor">
            <summary>
Constructs CAnimationPoint object.
</summary>
            <remarks>
Constructs CAnimationPoint object with default properties: default point coordinates, Group ID and Object ID are set to 0.
</remarks>
        </member>
        <member name="F:CAnimationPoint.m_yValue">
            <summary>
The encapsulated animation variable that represents Y coordinate of animation point.
</summary>
        </member>
        <member name="F:CAnimationPoint.m_xValue">
            <summary>
The encapsulated animation variable that represents X coordinate of animation point.
</summary>
        </member>
        <member name="T:CAnimationPoint">
            <summary>
Implements the functionality of a point whose coordinates can be animated.
</summary>
            <remarks>
The CAnimationPoint class encapsulates two CAnimationVariable objects and can represent in applications
a point. For example, you can use this class to animate a position of any object on the screen (like text string, circle, point etc).
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to X and/or Y coordinates.
</remarks>
        </member>
        <member name="M:CAnimationValue.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variable into a list.
</summary>
            <param name="lst">When the function returns, it contains a pointer to CAnimationVariable representing the animated value.</param>
        </member>
        <member name="M:CAnimationValue.AddTransition(CBaseTransition*)">
            <summary>
Adds a transition to be applied to a value.
</summary>
            <remarks>
Call this function to add a transition to internal list of transitions to be applied to an animation variable.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
</remarks>
            <param name="pTransition">A pointer to transition object.</param>
        </member>
        <member name="M:CAnimationValue.GetVariable">
            <summary>
Provides access to encapsulated animation variable.
</summary>
            <returns>
A reference to encapsulated animation variable.
</returns>
            <remarks>
Use this method to access the encapsulated animation variable. From CAnimationVariable you get access
to underlying IUIAnimationVariable object, whose pointer can be NULL if animation variable has not been created.
</remarks>
        </member>
        <member name="M:CAnimationValue.op_Assign(System.Int32)">
            <summary>
Assigns an INT32 value to CAnimationValue.
</summary>
            <remarks>
Assigns an INT32 value to CAnimationValue. This value is set as a default value for encapsulated animation variable.
If you subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="nVal">Specifies the value to be assigned to Animation Value.</param>
        </member>
        <member name="M:CAnimationValue.op_Assign(System.Double)">
            <summary>
Assigns a DOUBLE value to CAnimationValue.
</summary>
            <remarks>
Assigns a DOUBLE value to CAnimationValue. This value is set as a default value for encapsulated animation variable.
If you subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="dblVal">Specifies the value to be assigned to Animation Value.</param>
        </member>
        <member name="M:CAnimationValue.op_Implicit~System.Int32">
            <summary>
Provides conversion between CAnimationValue and INT32.
</summary>
            <returns>
Current value of Animation Value as integer.
</returns>
            <remarks>
Provides conversion between CAnimationValue and INT32. This method internally calls GetValue and doesn't check for
errors. If GetValue fails, the returned value will contain a default value previously set in constructor or with SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationValue.op_Implicit~System.Double">
            <summary>
Provides conversion between CAnimationValue and DOUBLE.
</summary>
            <returns>
Current value of Animation Value.
</returns>
            <remarks>
Provides conversion between CAnimationValue and DOUBLE. This method internally calls GetValue and doesn't check for
errors. If GetValue fails, the returned value will contain a default value previously set in constructor or with SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationValue.GetValue(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the current value.
</summary>
            <returns>
TRUE if the current value was retrieved successfully; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value. This implementation calls the encapsulated COM object, and if
the call fails, this method returns the default value that was previously set in constructor or with SetDefaultValue.
</remarks>
            <param name="nValue">Output. When the function returns it contains a current value of animation variable.</param>
        </member>
        <member name="M:CAnimationValue.GetValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the current value.
</summary>
            <returns>
TRUE if the current value was retrieved successfully; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value. This implementation calls the encapsulated COM object, and if
the call fails, this method returns the default value that was previously set in constructor or with SetDefaultValue.
</remarks>
            <param name="dblValue">Output. When the function returns it contains a current value of animation variable.</param>
        </member>
        <member name="M:CAnimationValue.SetDefaultValue(System.Double)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this method to set a default value. A default value is returned to application when animation has not been started
and/or underlying COM object has not been created. If the underlying COM object encapsulated in CAnimationVarible
was already created, this method recreates it, therefore you might need to call EnableValueChanged/EnableIntegerValueChanged
methods again.
</remarks>
            <param name="dblDefaultValue">Specifies the default value.</param>
        </member>
        <member name="M:CAnimationValue.#ctor(System.Double,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs a CAnimationValue object.
</summary>
            <remarks>
Constructs CAnimationValue object with specified properties.
</remarks>
            <param name="dblDefaultValue">Specifies default value.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationValue.#ctor">
            <summary>
Constructs a CAnimationValue object.
</summary>
            <remarks>
Constructs CAnimationValue object with default properties: default value, Group ID and Object ID are set to 0.
</remarks>
        </member>
        <member name="F:CAnimationValue.m_value">
            <summary>
The encapsulated animation variable that represents animation value.
</summary>
        </member>
        <member name="T:CAnimationValue">
            <summary>
Implements the functionality of animation object with one value.
</summary>
            <remarks>
The CAnimationValue class encapsulates a single CAnimationVariable object and can represent in applications
a single animated value. For example, you can use this class for animated transparency (fade effect), angle (to rotate objects),
or for any other case when you need to create an animation depending on a single animated value.
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to the value.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.SetParentAnimationObjects">
            <summary>
Establishes relationship between animation variables, contained in an animation object, and their container.
</summary>
            <remarks>
This is a helper that can be used to establish relationship between animation variables, contained in an animation object,
and their container. It loops over animation variables and sets a back pointer to a parent animation object
to each animation variable.
In the current implementation the actual relationship is established in CAnimationBaseObject::ApplyTransitions, therefore
back pointers are not set until you call CAnimationGroup::Animate.
Knowing the relationship may be helpful when you processing events and need to get a parent animation object
from CAnimationVariable (use CAnimationVariable::GetParentAnimationObject).
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Collects pointers to contained animation variables.
</summary>
            <remarks>
This is a pure virtual method that must be overridden in a derived class.
An animation object, depending on its type, contains one or more animation variables. For example, CAnimationPoint
contains two variables, for X and Y coordinates respectively. The base class CAnimationBaseObject implements
some generic methods, which act on a list of animation variables: ApplyTransitions, ClearTransitions,
EnableValueChangedEvent, EnableIntegerValueChangedEvent. These methods call GetAnimationVariableList, which is filled
in a derived class with actual animation variables contained in a particular animation object, then loop over the
list and perform necessary actions.
If you create a custom animation object, you must add to lst all animation variables contained in that object.
</remarks>
            <param name="lst">A list that must be filled with animation variables contained in an animation object.</param>
        </member>
        <member name="M:CAnimationBaseObject.ContainsVariable(IUIAnimationVariable*)">
            <summary>
Determines whether an animation object contains a particular animation variable.
</summary>
            <returns>
TRUE if the animation variable is contained in the animation object; otherwise FALSE.
</returns>
            <remarks>
This method can be used to determine whether an animation variable specified by pVariable is contained
within an animation object. An animation object, depending on its type, may contain several animation variables.
For example, CAnimationColor contains three variables, one for each color component (red, green and blue). When a
value of animation variable has changed, Windows Animation API sends ValueChanged or IntegerValueChanged events (if enabled),
and the parameter of this event is a pointer to interface IUIAnimationVariable of animation variable.
This method helps to obtain a pointer to animation from a pointer to contained COM object.
</remarks>
            <param name="pVariable">A pointer to animation variable.</param>
        </member>
        <member name="M:CAnimationBaseObject.EnableIntegerValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Sets up Integer Value Changed event handler.
</summary>
            <remarks>
If the Integer Value Changed event handler is enabled, you can handle this event in CAnimationController::OnAnimationIntegerValueChanged method,
which should be overridden in a CAnimationController-derived class. This method is called every time the animation integer value has changed.
</remarks>
            <param name="pController">A pointer to a parent controller.</param>
            <param name="bEnable">Specifies whether to enable, or disable Integer Value Changed event.</param>
        </member>
        <member name="M:CAnimationBaseObject.EnableValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Sets up Value Changed event handler.
</summary>
            <remarks>
If the Value Changed event handler is enabled, you can handle this event in CAnimationController::OnAnimationValueChanged method,
which should be overridden in a CAnimationController-derived class. This method is called every time the animation value has changed.
</remarks>
            <param name="pController">A pointer to a parent controller.</param>
            <param name="bEnable">Specifies whether to enable, or disable Value Changed event.</param>
        </member>
        <member name="M:CAnimationBaseObject.ClearTransitions(System.Int32)">
            <summary>
Removes all related transitions.
</summary>
            <remarks>
Removes all related transitions and destroys them if bAutodestroy or m_bAutodestroyTransitions flag is TRUE.
Transitions should be destroyed automatically only if they are not allocated on the stack.
If the above flags are FALSE, transitions are just removed from the internal list of related transitions.
</remarks>
            <param name="bAutodestroy">Specifies whether to destroy transition objects automatically, or just remove them from the related list.</param>
        </member>
        <member name="M:CAnimationBaseObject.ApplyTransitions(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds transitions to storyboard with encapsulated animation variable.
</summary>
            <returns>
TRUE if transitions were added successfully.
</returns>
            <remarks>
Adds related transitions, that have been added with AddTransition (overloaded methods in derived classes), to storyboard.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDependOnKeyframes">With FALSE this method adds only those transitions that do not depend on keyframes.</param>
        </member>
        <member name="M:CAnimationBaseObject.GetAutodestroyTransitions">
            <summary>
Tells whether related transition are destroyed automatically.
</summary>
            <returns>
If TRUE, related transitions are destroyed automatically; if FALSE, transition objects should be deallocated by calling application.
</returns>
            <remarks>
By default this flag is TRUE. Set this flag only if you allocated transition on the stack and/or transitions should be deallocated by
the calling application.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.SetAutodestroyTransitions(System.Int32)">
            <summary>
Sets a flag that orders to automatically destroy transitions.
</summary>
            <remarks>
Set this flag only if you allocated transition objects using operator new. If for some reason transition
objects are allocated on the stack, the auto destroy flag should be FALSE. By default this flag is TRUE.
</remarks>
            <param name="bValue">Specifies the auto destroy flag.</param>
        </member>
        <member name="M:CAnimationBaseObject.GetUserData">
            <summary>
Returns user defined data.
</summary>
            <returns>
A value of custom data.
</returns>
            <remarks>
Call this method to retrieve the custom data at runtime. The returned value will be 0 if it was not explicitly initialized in constructor or with SetUserData.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.GetGroupID">
            <summary>
Returns current Group ID.
</summary>
            <returns>
Current Group ID.
</returns>
            <remarks>
Use this method to retrieve Group ID. It's 0 if Group ID has not been set explicitly in constructor or with SetID.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.GetObjectID">
            <summary>
Returns current Object ID.
</summary>
            <returns>
Current Object ID.
</returns>
            <remarks>
Use this method to retrieve Object ID. It's 0 if Object ID has not been set explicitly in constructor or with SetID.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.DetachFromController">
            <summary>
Detaches an animation object from parent animation controller.
</summary>
            <remarks>
This method is used internally.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.SetUserData(System.UInt64)">
            <summary>
Sets user-defined data.
</summary>
            <remarks>
Use this method to associate a custom data with an animation object. This data may be retrieved later at runtime by GetUserData.
</remarks>
            <param name="dwUserData">Specifies the custom data.</param>
        </member>
        <member name="M:CAnimationBaseObject.SetID(System.UInt32,System.UInt32)">
            <summary>
Sets new IDs.
</summary>
            <remarks>
Allows to change Object ID and Group ID. If the new Group ID differs from the current ID, an animation object
is moved to another group (a new group will be created, if necessary).
</remarks>
            <param name="nObjectID">Specifies new Object ID.</param>
            <param name="nGroupID">Specifies new Group ID.</param>
        </member>
        <member name="M:CAnimationBaseObject.CreateTransitions">
            <summary>
Creates transitions associated with an animation object.
</summary>
            <returns>
TRUE if transitions were created successfully; otherwise FALSE.
</returns>
            <remarks>
Loops over list of animation variables encapsulated in a derived animation object and creates transitions
associated with each animation variable.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.Dispose">
            <summary>
The destructor. Called when an animation object is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationBaseObject.#ctor(System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation object.
</summary>
            <remarks>
Constructs an animation object with specified Object ID and Group ID.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">User-defined data, which can be associated with animation object and retrieved later at runtime.</param>
        </member>
        <member name="M:CAnimationBaseObject.#ctor">
            <summary>
Constructs an animation object.
</summary>
            <remarks>
Constructs an animation objects and assigns default Object ID (0) and Group ID (0).
</remarks>
        </member>
        <member name="F:CAnimationBaseObject.m_pParentController">
            <summary>
A pointer to the parent animation controller.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_bAutodestroyTransitions">
            <summary>
Specifies whether related transitions should be automatically destroyed.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_dwUserData">
            <summary>
Stores user-defined data.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_nObjectID">
            <summary>
Specifes the Object ID of the animation object.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_nGroupID">
            <summary>
Specifies the Group ID of the animation object.
</summary>
        </member>
        <member name="T:CAnimationBaseObject">
            <summary>
The base class for all animation objects.
</summary>
            <remarks>
This class implements basic methods for all animation objects. An animation object can represent a value, point,
size, rectangle or color in an application, as well as any custom entity. Animation objects are stored in animation groups
(see CAnimationGroup). Each group can be animated separately and can be treated as an analogue of storyboard.
An animation object encapsulates one or more animation variables (see CAnimationVariable), depending on its logical
representation. For example, CAnimationRect contains four animation variables - one variable for each side of rectangle.
Each animation object class exposes overloaded AddTransition method, which should be used to apply transitions to
encapsulated animation variables.
An animation object can be identified by Object ID (optionally) and by Group ID. A Group ID is necessary in order
to place an animation object to correct group, but if a Group ID is not specified, an object is placed in the default group with ID 0.
If you call SetID with different GroupID, an animation object will be moved to another group (a new group is created if necessary).
</remarks>
        </member>
        <member name="F:CAnimationVariable.m_bAutodestroyTransitions">
            <summary>
Specifies whether related transition objects should be deleted.
</summary>
            <remarks>
Set this value to TRUE to force deletion of transition objects when they are being removed from the internal list
of transitions. If this value is FALSE the transitions should be deleted by calling application.
The list of transitions is always cleared after an animation has been scheduled. The default value is FALSE.
</remarks>
        </member>
        <member name="M:CAnimationVariable.GetDefaultValue">
            <summary>
Returns default value.
</summary>
            <returns>
The default value.
</returns>
            <remarks>
Use this function to obtain default value of animation variable. The default value can be set in constructor or by
SetDefaultValue method.
</remarks>
        </member>
        <member name="M:CAnimationVariable.EnableIntegerValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Enables or disables the IntegerValueChanged event.
</summary>
            <remarks>
When ValueChanged event is enabled, the framework calls virtual method CAnimationController::OnAnimationIntegerValueChanged.
You need to override it in a class derived from CAnimationController in order to process this event. This method is called every time
the integer value of animation variable is changed.
</remarks>
            <param name="pController">A pointer to parent controller.</param>
            <param name="bEnable">TRUE - enable event, FALSE - disable event.</param>
        </member>
        <member name="M:CAnimationVariable.EnableValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Enables or disables the ValueChanged event.
</summary>
            <remarks>
When ValueChanged event is enabled, the framework calls virtual method CAnimationController::OnAnimationValueChanged.
You need to override it in a class derived from CAnimationController in order to process this event. This method is called every time
the value of animation variable is changed.
</remarks>
            <param name="pController">A pointer to parent controller.</param>
            <param name="bEnable">TRUE - enable event, FALSE - disable event.</param>
        </member>
        <member name="M:CAnimationVariable.ApplyTransitions(CAnimationController*,IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds transitions from the internal list to storyboard.
</summary>
            <remarks>
This method adds transitions from the internal list to storyboard. It's called from the
top level code several times to add transitions that do not depend on keyframes and add
transitions that depend on keyframes. If the underlying animation variable
COM object has not been created, this method creates it at this stage.
</remarks>
            <param name="pController">A pointer to parent animation controller.</param>
            <param name="pStoryboard">A pointer to storyboard.</param>
            <param name="bDependOnKeyframes">TRUE, if this method should add transitions that depend on keyframes.</param>
        </member>
        <member name="M:CAnimationVariable.ClearTransitions(System.Int32)">
            <summary>
Clears transitions.
</summary>
            <remarks>
This method removes all transitions from the internal list of transitions. If bAutodestroy is TRUE, or
m_bAutodestroyTransitions is TRUE, then transitions are deleted. Otherwise the caller should deallocate
the transition objects.
</remarks>
            <param name="bAutodestroy">Specifies whether this method should delete transition objects.</param>
        </member>
        <member name="M:CAnimationVariable.AddTransition(CBaseTransition*)">
            <summary>
Adds a transition.
</summary>
            <remarks>
This method is called to add a transition to the internal list of transitions to be applied to the animation variable.
This list should be cleared when an animation has been scheduled.
</remarks>
            <param name="pTransition">A pointer to a transition to add.</param>
        </member>
        <member name="M:CAnimationVariable.GetValue(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the current value of animation variable.
</summary>
            <returns>
S_OK if the value was obtained successfully, or underlying animation variable has not been created. Otherwise
HRESULT error code.
</returns>
            <remarks>
This method can be called to retrieve the current value of animation variable. If the underlying COM object
has not been created, dblValue will contain a default value, when the function returns.
</remarks>
            <param name="nValue">The current value of the animation variable.</param>
        </member>
        <member name="M:CAnimationVariable.GetValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the current value of animation variable.
</summary>
            <returns>
S_OK if the value was obtained successfully, or underlying animation variable has not been created. Otherwise
HRESULT error code.
</returns>
            <remarks>
This method can be called to retrieve the current value of animation variable. If the underlying COM object
has not been created, dblValue will contain a default value, when the function returns.
</remarks>
            <param name="dblValue">The current value of the animation variable.</param>
        </member>
        <member name="M:CAnimationVariable.CreateTransitions(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Creates all transitions to be applied to this animation variable.
</summary>
            <returns>
TRUE if transitions were created successfully; otherwise FALSE.
</returns>
            <remarks>
This method is called by the framework when it needs to create transitions that have been added
to the variable's internal list of transitions.
</remarks>
            <param name="pLibrary">A pointer to transition library.</param>
            <param name="pFactory">A pointer to transition factory.</param>
        </member>
        <member name="M:CAnimationVariable.Create(IUIAnimationManager*)">
            <summary>
Creates the underlying animation variable COM object.
</summary>
            <returns>
TRUE if the animation variable was successfully created; otherwise FALSE.
</returns>
            <remarks>
This method creates the underlying animation variable COM object and sets its default value.
</remarks>
            <param name="pManager">A pointer to animation manager.</param>
        </member>
        <member name="M:CAnimationVariable.SetDefaultValue(System.Double)">
            <summary>
Sets default value and releases IUIAnimationVariable COM object.
</summary>
            <remarks>
Use this method to reset the default value. This method releases the internal IUIAnimationVariable COM object,
therefore when animation variable is recreated, the underlying COM object gets the new default value.
The default value is returned by GetValue if the COM object representing the animation variable is not created,
or if the variable has not been animated.
</remarks>
            <param name="dblDefaultValue">Specifies the new default value.</param>
        </member>
        <member name="M:CAnimationVariable.GetVariable">
            <summary>
Returns a pointer to IUIAnimationVariable COM object.
</summary>
            <returns>
A valid pointer to IUIAnimationVariable COM object, or NULL if animation variable was not created, or can't be created.
</returns>
            <remarks>
Use this function to access the underlying IUIAnimationVariable COM object and call its methods directly if needed.
</remarks>
        </member>
        <member name="M:CAnimationVariable.GetParentAnimationObject">
            <summary>
Returns the parent animation object.
</summary>
            <returns>
A pointer to parent animation object, if relationship was established, otherwise NULL.
</returns>
            <remarks>
This method can be called to retrieve a pointer to a parent animation object (a container).
</remarks>
        </member>
        <member name="M:CAnimationVariable.Dispose">
            <summary>
The destructor. Called when a CAnimationVariable object is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationVariable.#ctor(System.Double)">
            <summary>
Constructs an animation variable object.
</summary>
            <remarks>
Constructs an animation variable object and sets its default value. A default value is used when
a variable is not animated, or can't be animated.
</remarks>
            <param name="dblDefaultValue">Specifies the default value.</param>
        </member>
        <member name="M:CAnimationVariable.SetParentAnimationObject(CAnimationBaseObject*)">
            <summary>
Sets the relationship between an animation variable and an animation object.
</summary>
            <remarks>
This method is called internally to establish one-to-one relationship between an animation variable and an animation object that encapsulates it.
</remarks>
            <param name="pParentObject">A pointer to an animation object that contains this variable.</param>
        </member>
        <member name="F:CAnimationVariable.m_pParentObject">
            <summary>
A pointer to an animation object that encapsulates this animation variable.
</summary>
        </member>
        <member name="F:CAnimationVariable.m_lstTransitions">
            <summary>
Contains a list of transitions that animate this animation variable.
</summary>
        </member>
        <member name="F:CAnimationVariable.m_dblDefaultValue">
            <summary>
Specifies the default value, which is propagated to IUIAnimationVariable.
</summary>
        </member>
        <member name="F:CAnimationVariable.m_variable">
            <summary>
Stores a pointer to IUIAnimationVariable COM object. NULL if the COM object has not been created yet, or if creation failed.
</summary>
        </member>
        <member name="T:CAnimationVariable">
            <summary>
Represents an animation variable.
</summary>
            <remarks>
The CAnimationVariable class encapsulates IUIAnimationVariable COM object. It also holds a list of transitions
to be applied to the animation variable in a storyboard. CAnimationVariable objects are embedded to
animation objects, which can represent in an application an animated value, point, size, color and rectangle.
</remarks>
        </member>
        <member name="M:CKeyFrame.AddToStoryboardAtOffset(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to storyboard at offset.
</summary>
            <returns>
TRUE, if keyframe was added successfully.
</returns>
            <remarks>
This function is called by the framework to add a keyframe to storyboard at offset.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">Specifies whether to add a keyframe this keyframe depend on recursively.</param>
        </member>
        <member name="M:CKeyFrame.AddToStoryboardAfterTransition(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to storyboard after transition.
</summary>
            <returns>
TRUE, if keyframe was added successfully.
</returns>
            <remarks>
This function is called by the framework to add a keyframe to storyboard after transition.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">Specifies whether to add a transition recursively.</param>
        </member>
        <member name="M:CKeyFrame.AddToStoryboard(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to a storyboard.
</summary>
            <returns>
TRUE, if keyframe was added successfully.
</returns>
            <remarks>
This method adds a keyframe to storyboard. If it depends on other keyframe or transition and bDeepAdd is TRUE,
this method tries to add them recursively.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">Specifies whether to add keyframe or transition recursively.</param>
        </member>
        <member name="M:CKeyFrame.GetOffset">
            <summary>
Returns an offset from other keyframe.
</summary>
            <returns>
An offset in seconds from other keyframe.
</returns>
            <remarks>
This method should be called to determine an offset in seconds from other keyframe.
</remarks>
        </member>
        <member name="M:CKeyFrame.GetExistingKeyframe">
            <summary>
Returns a pointer to a keyframe this keyframe depends on.
</summary>
            <returns>
A valid pointer to keyframe, or NULL if this keyframe does not depend on other keyframe.
</returns>
            <remarks>
This is an accessor to a keyframe this keyframe depends on.
</remarks>
        </member>
        <member name="M:CKeyFrame.GetTransition">
            <summary>
Returns a pointer to a transition this keyframe depends on.
</summary>
            <returns>
A valid pointer to transition, or NULL if this keyframe does not depend on transition.
</returns>
            <remarks>
This is an accessor to a transition this keyframe depends on.
</remarks>
        </member>
        <member name="M:CKeyFrame.#ctor(CBaseKeyFrame*,System.Double)">
            <summary>
Constructs a keyframe that depends on other keyframe.
</summary>
            <remarks>
The constructed keyframe will represent a moment in time within a storyboard, which has a specified offset from pKeyframe.
</remarks>
            <param name="pKeyframe">A pointer to keyframe.</param>
            <param name="offset">Offset, in seconds, from keyframe specified by pKeyframe.</param>
        </member>
        <member name="M:CKeyFrame.#ctor(CBaseTransition*)">
            <summary>
Constructs a keyframe that depends on a transition.
</summary>
            <remarks>
The constructed keyframe will represent a moment in time within a storyboard when the specified transition ends.
</remarks>
            <param name="pTransition">A pointer to a transition.</param>
        </member>
        <member name="F:CKeyFrame.m_pExistingKeyFrame">
            <summary>
Stores a pointer to an existing keframe. This keyframe is added to storyboard with m_offset to the existing keyframe.
</summary>
        </member>
        <member name="F:CKeyFrame.m_offset">
            <summary>
Specifies offset of this keyframe from a keyframe stored in m_pExistingKeyFrame.
</summary>
        </member>
        <member name="F:CKeyFrame.m_pTransition">
            <summary>
Stores a pointer to transtion that begins at this keyframe.
</summary>
        </member>
        <member name="T:CKeyFrame">
            <summary>
Represents an animation keyframe.
</summary>
            <remarks>
This class implements an animation keyframe. A keyframe represents a moment in time within a
storyboard and can be used to specify the start and end times of transitions.
A keyframe may be based on other keyframe and have an offset (in seconds) from it, or may be based on a transition and
represent a moment in time when this transition ends.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.AddToStoryboard(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to storyboard.
</summary>
            <returns>
TRUE if keyframe was added to storyboard successfully; otherwise FALSE.
</returns>
            <remarks>
This method is called to add a keyframe to storyboard.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">If this parameter is TRUE and the keyframe being added depends on some other keyframe or transition, this method tries
to add this keyframe or transition to storyboard first.</param>
        </member>
        <member name="M:CBaseKeyFrame.IsKeyframeAtOffset">
            <summary>
Specifies whether the keyframe should be added to storyboard at offset, or after transition.
</summary>
            <returns>
TRUE if the keyframe should be added to storyboard at some specified offset.
FALSE if the keyframe should be added to storyboard after some transition.
</returns>
            <remarks>
Specifies whether the keyframe should be added to storyboard at offset.
The offset or transition must be specified in a derived class.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.IsAdded">
            <summary>
Tells whether a keyframe has been added to storyboard.
</summary>
            <returns>
TRUE if a keyframe is added to a storyboard; otehrwise FALSE.
</returns>
            <remarks>
In the base class IsAdded always returns TRUE, but it's overridden in derived classes.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.GetAnimationKeyframe">
            <summary>
Returns the underlying keyframe value.
</summary>
            <returns>
A current keyframe. The default value is UI_ANIMATION_KEYFRAME_STORYBOARD_START.
</returns>
            <remarks>
This is an accessor to the underlying keyframe value.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.#ctor">
            <summary>
Constructs a keyframe object.
</summary>
        </member>
        <member name="F:CBaseKeyFrame.m_bIsKeyframeAtOffset">
            <summary>
Specifies whether this keyframe should be added to storyboard at an offset from
another existing keyframe, or at the end of some transition.
</summary>
        </member>
        <member name="F:CBaseKeyFrame.m_bAdded">
            <summary>
Specifies whether this keyframe has been added to a storyboard.
</summary>
        </member>
        <member name="F:CBaseKeyFrame.m_keyframe">
            <summary>
Represents a Windows Animation API keyframe. When a keyframe is not initialized
it is set to the predefined value UI_ANIMATION_KEYFRAME_STORYBOARD_START.
</summary>
        </member>
        <member name="T:CBaseKeyFrame">
            <summary>
Implements basic functionality of keyframe.
</summary>
            <remarks>
Encapsulates UI_ANIMATION_KEYFRAME variable. Serves as a base class for any keyframe implementation.
A keyframe represents a moment in time within a storyboard and can be used to specify the start and end times of transitions.
There are two types of keyframes - keyframes added to storyboard at the specified offset (in time), or keyframes added
after specified transition. Because durations of some transitions can't be known before animation starts, the actual values
of some keyframes are determined at runtime only.
Because keyframes may depend on transitions, which in their turn depend on keyframes, it's important to prevent
infinite recursions when building keyframe chains.
</remarks>
        </member>
        <member name="F:CBaseTransition.m_bAdded">
            <summary>
Specifies whether a transition has been added to a storyboard.
</summary>
        </member>
        <member name="F:CBaseTransition.m_pRelatedVariable">
            <summary>
A pointer to an animation variable, which is animated with the transition stored in m_transition.
</summary>
        </member>
        <member name="F:CBaseTransition.m_pEndKeyframe">
            <summary>
Stores a pointer to the keyframe that specifies the end of the transition.
</summary>
        </member>
        <member name="F:CBaseTransition.m_pStartKeyframe">
            <summary>
Stores a pointer to the keyframe that specifies the beginning of the transition.
</summary>
        </member>
        <member name="F:CBaseTransition.m_transition">
            <summary>
Stores a pointer to IUIAnimationTransition. NULL if a COM transition object has not been created.
</summary>
        </member>
        <member name="F:CBaseTransition.m_type">
            <summary>
Stores the transition type.
</summary>
        </member>
        <member name="M:CBaseTransition.AddToStoryboardAtKeyframes(IUIAnimationStoryboard*)">
            <summary>
Adds a transition to a storyboard.
</summary>
            <returns>
TRUE, if transition was successfully added to a storyboard.
</returns>
            <remarks>
Applies the transition to the related variable in the storyboard. If the start keyframe was specified, the transition
begins at that keyframe. If the end keyframe was specified, the transition begins at the start keyframe and
and stops at the end keyframe. If the transition was created with a duration parameter specified, that duration is
overwritten with the duration of time between the start and end keyframes.
If no keyframe was specified, the transition is appended to the transition added most recently to the variable.
</remarks>
            <param name="pStoryboard">A pointer to storyboard, which will animate the related variable.</param>
        </member>
        <member name="M:CBaseTransition.AddToStoryboard(IUIAnimationStoryboard*)">
            <summary>
Adds a transition to a storyboard.
</summary>
            <returns>
TRUE, if transition was successfully added to a storyboard.
</returns>
            <remarks>
Applies the transition to the related variable in the storyboard.  If this is the first transition
applied to this variable in this storyboard, the transition begins at the start of the storyboard.
Otherwise, the transition is appended to the transition added most recently to the variable.
</remarks>
            <param name="pStoryboard">A pointer to storyboard, which will animate the related variable.</param>
        </member>
        <member name="M:CBaseTransition.GetRelatedVariable">
            <summary>
Returns a pointer to related variable.
</summary>
            <returns>
A valid pointer to animation variable, or NULL if an animation variable has not been set by SetRelatedVariable.
</returns>
            <remarks>
This is an accessor to related animation variable.
</remarks>
        </member>
        <member name="M:CBaseTransition.SetRelatedVariable(CAnimationVariable*)">
            <summary>
Establishes a relationship between animation variable and transition.
</summary>
            <remarks>
Establishes a relationship between animation variable and transition. A transition can be applied only to one variable.
</remarks>
            <param name="pVariable">A pointer to related animation variable.</param>
        </member>
        <member name="M:CBaseTransition.GetEndKeyframe">
            <summary>
Returns start keyframe.
</summary>
            <returns>
A valid pointer to a keyframe, or NULL if a transition should not be inserted between keyframes.
</returns>
            <remarks>
This method can be used to access a keyframe object that was previously set by SetKeyframes.
It's called by top level code when transitions are being added to storyboard.
</remarks>
        </member>
        <member name="M:CBaseTransition.GetStartKeyframe">
            <summary>
Returns start keyframe.
</summary>
            <returns>
A valid pointer to a keyframe, or NULL if a transition should not start after a keyframe.
</returns>
            <remarks>
This method can be used to access a keyframe object that was previously set by SetKeyframes.
It's called by top level code when transitions are being added to storyboard.
</remarks>
        </member>
        <member name="M:CBaseTransition.IsAdded">
            <summary>
Tells whether a transition has been added to a storyboard.
</summary>
            <returns>
Returns TRUE if a transition has been added to a storyboard, otherwise FALSE.
</returns>
            <remarks>
This flag is set internally when the top level code adds transitions to storyboard.
</remarks>
        </member>
        <member name="M:CBaseTransition.SetKeyframes(CBaseKeyFrame*,CBaseKeyFrame*)">
            <summary>
Sets keyframes for a transition.
</summary>
            <remarks>
This method tells the transition to start after specified keyframe and, optionally, if pEnd is not NULL, end
before the specified keyframe.
If the transition was created with a duration parameter specified, that duration is overwritten with the duration of time between the start and end keyframes.
</remarks>
            <param name="pStart">A keyframe that specifies the beginning of the transition. </param>
            <param name="pEnd">A keyframe that specifies the end of the transition.</param>
        </member>
        <member name="M:CBaseTransition.GetTransition">
            <summary>
Returns a pointer to underlying COM transition object.
</summary>
            <returns>
A valid pointer to IUIAnimationTransition or NULL if underlying transition can't be created.
</returns>
            <remarks>
It's an accessor method to underlying COM transition object. It doesn't instantiates the underlying IUIAnimationTransition COM
object if it wasn't created.
</remarks>
        </member>
        <member name="M:CBaseTransition.GetTransition(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Returns a pointer to underlying COM transition object.
</summary>
            <returns>
A valid pointer to IUIAnimationTransition or NULL if underlying transition can't be created.
</returns>
            <remarks>
This method returns a pointer to underlying COM transition object and creates it if necessary.
</remarks>
            <param name="pLibrary">A pointer to transition library, which creates standard transitions. It can be NULL for custom transitions.</param>
            <param name="pFactory">A pointer to transition factory, which creates custom transitions. It can be NULL for standard transitions.</param>
        </member>
        <member name="M:CBaseTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Creates a COM transition.
</summary>
            <returns>
TRUE if a transition COM object was created successfully; otherwise FALSE.
</returns>
            <remarks>
This is a pure virtual function that must be overridden in a derived class.
It's called by the framework to instantiate the underlying COM transition object.
</remarks>
            <param name="pLibrary">A pointer to transition library, which creates standard transitions. It can be NULL for custom transitions.</param>
            <param name="pFactory">A pointer to transition factory, which creates custom transitions. It can be NULL for standard transitions.</param>
        </member>
        <member name="M:CBaseTransition.GetType">
            <summary>
Returns transition type.
</summary>
            <returns>
One of TRANSITION_TYPE enumerated values.
</returns>
            <remarks>
This method can be used to identify a transition object by its type.
The type is set in a constructor in a derived class.
</remarks>
        </member>
        <member name="M:CBaseTransition.Clear">
            <summary>
Releases encapsulated IUIAnimationTransition COM object.
</summary>
            <remarks>
This method should be called from a derived class's Create method in order to prevent
IUITransition interface leak.
</remarks>
        </member>
        <member name="M:CBaseTransition.Dispose">
            <summary>
The destructor. Called when a transition object is being destroyed.
</summary>
        </member>
        <member name="M:CBaseTransition.#ctor">
            <summary>
Constructs a base transtion object.
</summary>
        </member>
        <member name="T:CBaseTransition.TRANSITION_TYPE">
            <summary>
Defines the transition types currently supported by the MFC implementation of Windows Animation API.
</summary>
            <remarks>
A transition type is set in the constructor of specific transition.
For example, CSinusoidalTransitionFromRange sets its type to SINUSOIDAL_FROM_RANGE.
</remarks>
        </member>
        <member name="T:CBaseTransition">
            <summary>
Represents a basic transition.
</summary>
            <remarks>
This class encapsulates IUIAnimationTransition interface and serves as a base class for all transitions.
</remarks>
        </member>
        <member name="P:Cnc.Tool.Interop.TlWorkMaterial.Density">
            <summary> Density </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlWorkMaterial.HardnessValue">
            <summary> Hardness Value </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlWorkMaterial.HardnessUnit">
            <summary> Hardness Unit </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlWorkMaterial.ISOValue">
            <summary> ISO Value </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlWorkMaterial.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlWorkMaterial.CopyFrom(Cnc.Tool.Interop.TlWorkMaterial)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlWorkMaterial.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlWorkMaterial.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlWorkMaterial">
            <summary> Defines the TlWorkMaterial tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.SetISOValue(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets an ISO value. </summary>
            <param name="value">    The value. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Sets an ISO value. </summary>
            <param name="value">    The value. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.RemoveOldMaterialHardness(TlMaterialHardness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Removes the old material hardness described by scale. </summary>
            <param name="scale">    The scale. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Removes the old material hardness described by scale. </summary>
            <param name="scale">    The scale. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.RemoveOldMaterialGroup(TlMaterialGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Removes the old material group described by group. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Removes the old material group described by group. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.SetOldHardnessValue(TlMaterialHardness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets an old hardness value. </summary>
            <param name="scale">    The scale. </param>
            <param name="value">    The value. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Sets an old hardness value. </summary>
            <param name="scale">    The scale. </param>
            <param name="value">    The value. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.SetOldMaterialGroupID(TlMaterialGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets an old material group identifier. </summary>
            <param name="group">    The group. </param>
            <param name="id">       The identifier. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Sets an old material group identifier. </summary>
            <param name="group">    The group. </param>
            <param name="id">       The identifier. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWorkMaterial.GetHardnessForScale(TlMaterialHardness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Gets the hardness for scale. </summary>
            <param name="scale">    The scale. </param>
            <returns>   The hardness for scale. </returns>
            <summary>   Gets the hardness for scale. </summary>
            <param name="scale">    The scale. </param>
            <returns>   The hardness for scale. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.SetMaxThreadPitch(System.Double,System.Boolean)">
            <summary> Sets MaxThreadPitch property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.GetMaxThreadPitch(System.Boolean)">
            <summary> Gets MaxThreadPitch property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheMaxThreadPitch property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationThreading.MaxThreadPitch">
            <summary> Gets or sets the Maximum Thread Pitch </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.SetMinThreadPitch(System.Double,System.Boolean)">
            <summary> Sets MinThreadPitch property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.GetMinThreadPitch(System.Boolean)">
            <summary> Gets MinThreadPitch property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheMinThreadPitch property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationThreading.MinThreadPitch">
            <summary> Gets or sets the Minimum Thread Pitch </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationThreading.NumSpringCuts">
            <summary> Gets or sets the Number Spring Cuts </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.SetPullOff(System.Double,System.Boolean)">
            <summary> Sets PullOff property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.GetPullOff(System.Boolean)">
            <summary> Gets PullOff property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePullOff property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationThreading.PullOff">
            <summary> Gets or sets the Pull Off </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.SetFinishPassAllowance(System.Double,System.Boolean)">
            <summary> Sets FinishPassAllowance property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.GetFinishPassAllowance(System.Boolean)">
            <summary> Gets FinishPassAllowance property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFinishPassAllowance property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationThreading.FinishPassAllowance">
            <summary> Gets or sets the Finish Pass Allowance </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.SetLastDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets LastDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.GetLastDepthOfCut(System.Boolean)">
            <summary> Gets LastDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLastDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationThreading.LastDepthOfCut">
            <summary> Gets or sets the Last Depth Of Cut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.SetFirstDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets FirstDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.GetFirstDepthOfCut(System.Boolean)">
            <summary> Gets FirstDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFirstDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfigurationThreading.FirstDepthOfCut">
            <summary> Gets or sets the First Depth Of Cut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.CopyFrom(Cnc.Tool.Interop.TlCuttingConfigurationThreading)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfigurationThreading.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlCuttingConfigurationThreading">
            <summary> Defines the TlCuttingConfigurationThreading tool class type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCuttingConfigurationThreading.TlCuttingConfigurationThreadingDeserializationImpl">
            <summary>	A cutting configuration threading deserialization implementation. </summary>
            <summary>	A cutting configuration threading deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfigurationThreading.DoConvertUnits(System.Boolean)">
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfigurationThreading.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfigurationThreading.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfigurationThreading.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheISO.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheISO.CopyFrom(Cnc.Tool.Interop.TlToolLatheISO)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheISO.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheISO.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolLatheISO">
            <summary> Defines the TlToolLatheISO tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolLatheISO.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.Cycle">
            <summary> Cycle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.DwellTime">
            <summary> Dwell time </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetRetract(System.Double,System.Boolean)">
            <summary> Sets Retract property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetRetract(System.Boolean)">
            <summary> Gets Retract property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRetract property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.Retract">
            <summary> Retract </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetPeckClr(System.Double,System.Boolean)">
            <summary> Sets PeckClr property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetPeckClr(System.Boolean)">
            <summary> Gets PeckClr property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePeckClr property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.PeckClr">
            <summary> Peck clearance </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetPeck2(System.Double,System.Boolean)">
            <summary> Sets Peck2 property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetPeck2(System.Boolean)">
            <summary> Gets Peck2 property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePeck2 property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.Peck2">
            <summary> Peck 2 </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetPeck1(System.Double,System.Boolean)">
            <summary> Sets Peck1 property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetPeck1(System.Boolean)">
            <summary> Gets Peck1 property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePeck1 property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.Peck1">
            <summary> Peck 1 </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.TapType">
            <summary> Tap type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetPitch(System.Double,System.Boolean)">
            <summary> Sets Pitch property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetPitch(System.Boolean)">
            <summary> Gets Pitch property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePitch property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.Pitch">
            <summary> Pitch </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.ShoulderAngle">
            <summary> Shoulder angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetTipLength(System.Double,System.Boolean)">
            <summary> Sets TipLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetTipLength(System.Boolean)">
            <summary> Gets TipLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTipLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.TipLength">
            <summary> Tip length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetTipDiameter(System.Double,System.Boolean)">
            <summary> Sets TipDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetTipDiameter(System.Boolean)">
            <summary> Gets TipDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTipDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.TipDiameter">
            <summary> Tip diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetChamferHeight(System.Double,System.Boolean)">
            <summary> Sets ChamferHeight property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetChamferHeight(System.Boolean)">
            <summary> Gets ChamferHeight property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheChamferHeight property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.ChamferHeight">
            <summary> Chamfer height </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.FluteCount">
            <summary> Flutes count </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.FluteAngle">
            <summary> Flute angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetCutLength(System.Double,System.Boolean)">
            <summary> Sets CutLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetCutLength(System.Boolean)">
            <summary> Gets CutLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCutLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.CutLength">
            <summary> Cut length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetFluteLength(System.Double,System.Boolean)">
            <summary> Sets FluteLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetFluteLength(System.Boolean)">
            <summary> Gets FluteLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFluteLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.FluteLength">
            <summary> Flute length </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.TipAngle">
            <summary> Tip angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetShankDiameter(System.Double,System.Boolean)">
            <summary> Sets ShankDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetShankDiameter(System.Boolean)">
            <summary> Gets ShankDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShankDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.ShankDiameter">
            <summary> Shank diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.SetDiameter(System.Double,System.Boolean)">
            <summary> Sets Diameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.GetDiameter(System.Boolean)">
            <summary> Gets Diameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.Diameter">
            <summary> Diameter </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertLatheDrill.DrillType">
            <summary> Drill type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.CopyFrom(Cnc.Tool.Interop.TlInsertLatheDrill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertLatheDrill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlInsertLatheDrill">
            <summary> Defines the TlInsertLatheDrill tool class type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertLatheDrill.TlInsertLatheDrillDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlInsertLatheDrill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertLatheDrill.DoGetDefaultCuttingSide">
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertLatheDrill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.SpringCuts">
            <summary> Spring cuts </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetPulloff(System.Double,System.Boolean)">
            <summary> Sets Pulloff property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetPulloff(System.Boolean)">
            <summary> Gets Pulloff property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePulloff property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.Pulloff">
            <summary> Pulloff </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetFinishAllowance(System.Double,System.Boolean)">
            <summary> Sets FinishAllowance property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetFinishAllowance(System.Boolean)">
            <summary> Gets FinishAllowance property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFinishAllowance property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.FinishAllowance">
            <summary> Finish allowance </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetLastDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets LastDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetLastDepthOfCut(System.Boolean)">
            <summary> Gets LastDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLastDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.LastDepthOfCut">
            <summary> Last depth of cut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetFirstDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets FirstDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetFirstDepthOfCut(System.Boolean)">
            <summary> Gets FirstDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFirstDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.FirstDepthOfCut">
            <summary> First depth of cut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetFlatWidth(System.Double,System.Boolean)">
            <summary> Sets FlatWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetFlatWidth(System.Boolean)">
            <summary> Gets FlatWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFlatWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.FlatWidth">
            <summary> Flat width </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetLaydownHeight(System.Double,System.Boolean)">
            <summary> Sets LaydownHeight property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetLaydownHeight(System.Boolean)">
            <summary> Gets LaydownHeight property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLaydownHeight property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.LaydownHeight">
            <summary> Laydown height </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetNotchPointLocation(System.Double,System.Boolean)">
            <summary> Sets NotchPointLocation property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetNotchPointLocation(System.Boolean)">
            <summary> Gets NotchPointLocation property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheNotchPointLocation property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.NotchPointLocation">
            <summary> Notch point location </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetMaxThreadPitch(System.Double,System.Boolean)">
            <summary> Sets MaxThreadPitch property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetMaxThreadPitch(System.Boolean)">
            <summary> Gets MaxThreadPitch property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheMaxThreadPitch property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.MaxThreadPitch">
            <summary> Gets or sets the Maximum Thread Pitch </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.SetMinThreadPitch(System.Double,System.Boolean)">
            <summary> Sets MinThreadPitch property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.GetMinThreadPitch(System.Boolean)">
            <summary> Gets MinThreadPitch property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheMinThreadPitch property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.MinThreadPitch">
            <summary> Gets or sets the Minimum Thread Pitch </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.IsExternalThread">
            <summary> Is external thread </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.ThreadType">
            <summary> Thread type (UNIFIED, ACME, BUTTRESS, ETC.) </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertThreading.InsertStyle">
            <summary> Insert style (TOP NOTCH, LAYDOWN) </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.CopyFrom(Cnc.Tool.Interop.TlInsertThreading)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertThreading.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlInsertThreading">
            <summary> Defines the TlInsertThreading tool class type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertThreading.TlInsertThreadingDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlInsertThreading.DoConvertUnits(System.Boolean)">
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlInsertThreading.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertThreading.DoGetDefaultCuttingSide">
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertThreading.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlInsertThreading.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.IsMultiDirectional">
            <summary> Is multi directional </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.Definition">
            <summary> The insert definition </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.TypeCode">
            <summary> Type code </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.IndexReliefAngle">
            <summary> Index relief angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.SetFacingXOvercut(System.Double,System.Boolean)">
            <summary> Sets FacingXOvercut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.GetFacingXOvercut(System.Boolean)">
            <summary> Gets FacingXOvercut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFacingXOvercut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.FacingXOvercut">
            <summary> Facing x coordinate overcut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.SetFacingRetract(System.Double,System.Boolean)">
            <summary> Sets FacingRetract property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.GetFacingRetract(System.Boolean)">
            <summary> Gets FacingRetract property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFacingRetract property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.FacingRetract">
            <summary> Facing retract </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.SetRoughOverlap(System.Double,System.Boolean)">
            <summary> Sets RoughOverlap property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.GetRoughOverlap(System.Boolean)">
            <summary> Gets RoughOverlap property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRoughOverlap property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.RoughOverlap">
            <summary> Rough overlap </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.SetFinishDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets FinishDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.GetFinishDepthOfCut(System.Boolean)">
            <summary> Gets FinishDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFinishDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.FinishDepthOfCut">
            <summary> Finish depth of cut </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.SetRoughDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets RoughDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.GetRoughDepthOfCut(System.Boolean)">
            <summary> Gets RoughDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRoughDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.RoughDepthOfCut">
            <summary> Rough depth of cut </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.ReliefAngle">
            <summary> Relief angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsertTurningBoring.AnsiCrossSectionCode">
            <summary> ANSI cross section code </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.CopyFrom(Cnc.Tool.Interop.TlInsertTurningBoring)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsertTurningBoring.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlInsertTurningBoring">
            <summary> Defines the TlInsertTurningBoring tool class type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertTurningBoring.TlInsertTurningBoringDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlInsertTurningBoring.DoConvertUnits(System.Boolean)">
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlInsertTurningBoring.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertTurningBoring.DoGetDefaultCuttingSide">
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsertTurningBoring.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlInsertTurningBoring.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolGrade.Manufacturer">
            <summary> Manufacturer Identifier </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGrade.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGrade.CopyFrom(Cnc.Tool.Interop.TlToolGrade)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGrade.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGrade.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolGrade">
            <summary> Defines the TlToolGrade tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterNativeWrapper.ImportFromFile(System.Char!System.Runtime.CompilerServices.IsConst*,Cnc.Tool.IToolDataImportContext!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Import the contents from the specified file into the specified context. </summary>
            <param name="path">    Full pathname of the file to import. </param>
            <param name="context"> The context to import data through. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterNativeWrapper.RunUI(Cnc.Tool.IToolDataImportContext!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Launches the user interface operation for this importer. </summary>
            <param name="context"> The context from which it has been launched. </param>
            <param name="pParent"> Handle of the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterNativeWrapper.ProvidesUI">
            <summary> Queries the importer on whether or not it will provide a interface for the user.  If an interface is not
		  provided, and an interface is desired, a value of 'false' should be returned. Mastercam will supply
		  an interface in this case when one is supported. </summary>
            <returns> True to put the responsibility for any user interaction within this importer. False to let Mastercam
		  handle the user interface responsibility. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterNativeWrapper.GetImportFileTypes">
            <summary> Retrieves a set of possible file types that can be imported by this importer. </summary>
            <returns> The import file types. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterNativeWrapper.GetName">
            <summary> Retrieves the localized name of this tool data importer. </summary>
            <returns> The name. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterNativeWrapper.GetClientInstance">
            <summary> Gets client instance. </summary>
            <returns> Nullptr if it fails, else the client instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterNativeWrapper.#ctor(Cnc.Tool.Interop.IToolDataImporter)">
            <summary> Constructor. </summary>
            <param name="clientImporter">   If non-null, the client importer to direct to. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataImporterNativeWrapper">
            <summary> A tool data importer adapter. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.DoTrimAtXValue(System.Double,System.Boolean)">
            <summary> Executes the trim at x coordinate value operation. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
            <summary> Executes the trim at x coordinate value operation. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.DoTrimAtYValue(System.Double,System.Boolean)">
            <summary> Executes the trim at y coordinate value operation. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
            <summary> Executes the trim at y coordinate value operation. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.DoIsCoincidentWithYAxis">
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.SetToOldSegment(TlProfileEnt*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.SetToOldSegment(prof_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.Transform(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlProfileSegment.TransformationType)">
            <summary> Transforms the current segment by the given transformation. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
            <summary> Transforms the current segment by the given transformation. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.ValidateQuadrant">
            <summary> Validates the quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Validates the quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.Reverse">
            <summary> Reverses the segment. </summary>
            <summary> Reverses the segment. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetMaxWidth">
            <summary> Gets maximum width. </summary>
            <returns> The maximum width. </returns>
            <summary> Gets maximum width. </summary>
            <returns> The maximum width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetTopWidth">
            <summary> Gets top width. </summary>
            <returns> The top width. </returns>
            <summary> Gets top width. </summary>
            <returns> The top width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetBottomWidth">
            <summary> Gets bottom width. </summary>
            <returns> The bottom width. </returns>
            <summary> Gets bottom width. </summary>
            <returns> The bottom width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetHeight">
            <summary>	Height of segment </summary>
            <returns>	said height </returns>
            <summary>	Height of segment </summary>
            <returns>	said height </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetLength">
            <summary> Gets the length of this profile segment. </summary>
            <returns> The length. </returns>
            <summary> Gets the length of this profile segment. </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetEndpoint2">
            <summary> Gets the end endpoint of this segment. </summary>
            <returns> The end endpoint. </returns>
            <summary> Gets the end endpoint of this segment. </summary>
            <returns> The end endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.GetEndpoint1">
            <summary> Gets the start endpoint of this segment. </summary>
            <returns> The start endpoint. </returns>
            <summary> Gets the start endpoint of this segment. </summary>
            <returns> The start endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.MinY">
            <summary> Lowest point contained in segment </summary>
            <returns> Lowest point contained in segment </returns>
            <summary> Lowest point contained in segment </summary>
            <returns> Lowest point contained in segment </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.MinX">
            <summary> Minimum x coordinate. </summary>
            <returns> A double. </returns>
            <summary> Minimum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.MaxY">
            <summary> Highest point contained in segment </summary>
            <returns> Highest point contained in segment </returns>
            <summary> Highest point contained in segment </summary>
            <returns> Highest point contained in segment </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.MaxX">
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.Linearize(std.optional&lt;System.Double&gt;)">
            <summary> Conversion function. </summary>
            <param name="chordTol"> (Optional) The chordal deviation tolerance. </param>
            <returns> vector of TlProfileLineSegmentPtr representing this object, linearized. </returns>
            <summary> Conversion function. </summary>
            <param name="chordTol"> (Optional) The chordal deviation tolerance. </param>
            <returns> vector of TlProfileLineSegmentPtr representing this object, linearized. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Byte)">
            <summary> Constructor. </summary>
            <param name="endpoint1X"> The endpoint 1 x coordinate. </param>
            <param name="endpoint1Y"> The endpoint 1 y coordinate. </param>
            <param name="endpoint2X"> The endpoint 2 x coordinate. </param>
            <param name="endpoint2Y"> The endpoint 2 y coordinate. </param>
            <param name="color">	  The color. </param>
            <summary> Constructor. </summary>
            <param name="endpoint1X"> The endpoint 1 x coordinate. </param>
            <param name="endpoint1Y"> The endpoint 1 y coordinate. </param>
            <param name="endpoint2X"> The endpoint 2 x coordinate. </param>
            <param name="endpoint2Y"> The endpoint 2 y coordinate. </param>
            <param name="color">	  The color. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.#ctor(l_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">
            <summary> Constructor. </summary>
            <param name="line">  The segment. </param>
            <param name="color"> The color. </param>
            <summary> Constructor. </summary>
            <param name="line">  The segment. </param>
            <param name="color"> The color. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileLineSegment.#ctor">
            <summary> Default constructor. </summary>
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.MarshalAs(Cnc.Tool.Interop.ToolProfileFit.ToolFitResult)">
            <summary> Marshal as native. </summary>
            <param name="managedInstance"> The managed instance. </param>
            <returns> A ToolFitResult. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.MarshalAs(Cnc.Tool.ToolProfileFit.ToolFitResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Marshal as managed. </summary>
            <param name="nativeInstance"> The native instance. </param>
            <returns> A ToolFitResult. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileFit.FitCutProfileToTool(Cnc.Tool.Interop.TlProfile,Cnc.Tool.Interop.TlToolMill)">
            <summary> Fits a tool profile to a standard convex tool shape and applies the result to the tool's parameters. </summary>
            <param name="profile">  The tool profile. </param>
            <param name="millTool"> The mill tool to apply the fit result to. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileFit.FitCutProfileToShape(Cnc.Tool.Interop.TlProfile,System.Double,System.Boolean)">
            <summary> Fit cut profile to a standard convex tool shape. </summary>
            <param name="profile">					  The tool profile. </param>
            <param name="cuttingLength">			  Cutting length of tool.  Used to set tool cutting length absolutely if
										  non-zero. </param>
            <param name="forceStandardConvexToolFit"> True to force standard convex tool fit. </param>
            <returns> The resulting ToolFitResult. </returns>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.m_CuttingDiameter">
            <summary> Common tool parameters - The cutting diameter of the tool. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.m_CuttingLength">
            <summary> Common tool parameters - The cutting length of the tool. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.m_OverallLength">
            <summary> Common tool parameters - The overall length of the tool. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.m_ShankDiameter">
            <summary> Common tool parameters - The shank diameter of tool. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.m_FitTool">
            <summary> The fit tool. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.m_BestFitType">
            <summary> Type of the best fit. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.StandardConvexFormTool.m_CylinderHeight">
            <summary> Fifth Region - cylinder top - Additional height of the cylinder after all previous regions. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.StandardConvexFormTool.m_UpperCornerRadius">
            <summary> Fourth Region - upper arc - Upper corner radius. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.StandardConvexFormTool.m_UpperTaperAngle">
            <summary> Third Region Taper - Tangent angle from vertical at end of previous region. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.StandardConvexFormTool.m_TaperHeight">
            <summary> Third Region Taper - Height of angled region. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.StandardConvexFormTool.m_LowerTaperAngle">
            <summary> Second Region - Tangent angle from vertical at start of arc. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.StandardConvexFormTool.m_CornerRadius">
            <summary> Second Region - Curved region from the end of the flat to the next region. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.StandardConvexFormTool.m_FlatRadius">
            <summary> First Region - Horizontal region from the center to the first lift upwards. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.StandardConvexFormTool">
            <summary> A standard convex form tool. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.BestFitType.StandardConvexForm">
            <summary> General standard convex form tool. All StandardConvexFormTool parameters are applicable. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.BestFitType.TaperForm">
            <summary> Simple taper form tool. All StandardConvexFormTool parameters but LowerTaperAngle are applicable. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.BestFitType.CylindricalForm">
            <summary> Simple cylindrical form tool. Only StandardConvexFormTool FlatRadius, CornerRadius, CylinderHeight are applicable. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult.BestFitType">
            <summary> An enumerated type representing the type of the best resulting fit. </summary>
            <remarks> Only certain StandardConvexFormTool parameters are applicable based on the resulting best fit type. </remarks>
        </member>
        <member name="T:Cnc.Tool.Interop.ToolProfileFit.ToolFitResult">
            <summary> Encapsulates the result of a tool fit. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ToolProfileFit">
            <summary> Utility functions used to fit custom tool profiles to a standard convex tool shape to aid in parametric
		  tool definition parameter identification.  Usually used on imported custom tool profiles. </summary>
        </member>
        <member name="M:Cnc.Tool.ToolProfileFit.ReadToolFitResultFromFile(Cnc.Tool.ToolProfileFit.ToolFitResult*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Reads tool fit result from file. </summary>
            <param name="toolFitResult"> The tool fit result. </param>
            <param name="fullPath">		 (Optional) Full pathname of the full file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileFit.WriteToolFitResultToFile(Cnc.Tool.ToolProfileFit.ToolFitResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Writes a tool fit result to file. </summary>
            <param name="toolFitResult"> The tool fit result. </param>
            <param name="fullPath">		 (Optional) Full pathname of the full file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileFit.ReadTlProfileFromFile(Cnc.Tool.TlProfile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Reads a TlProfile from file. </summary>
            <remarks> Simple human readable serialization of TlProfile objects for general debugging and unit testing. </remarks>
            <param name="profile">  The profile. </param>
            <param name="fullPath"> (Optional) Full pathname of the full file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileFit.WriteTlProfileToFile(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Writes a TlProfile  to file in text format. </summary>
            <remarks> Simple human readable serialization of TlProfile objects for general debugging and unit testing. </remarks>
            <param name="profile">  The profile. </param>
            <param name="fullPath"> (Optional) Full pathname of the full file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileFit.FitCutProfileToTool(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlToolMill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Fits a tool profile to a standard convex tool shape and applies the result to the tool's parameters. </summary>
            <param name="profile">  The tool profile. </param>
            <param name="millTool"> The mill tool to apply the fit result to. </param>
        </member>
        <member name="M:Cnc.Tool.ToolProfileFit.FitCutProfileToToolShape(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Boolean)">
            <summary> Fit cut profile to a standard convex tool shape. </summary>
            <param name="profile">					  The tool profile. </param>
            <param name="cuttingLength">			  (Optional) Cutting length of tool.  Used to set tool cutting length
										   absolutely if non-zero. </param>
            <param name="forceStandardConvexToolFit"> (Optional) True to force standard convex tool fit. </param>
            <returns> The resulting ToolFitResult. </returns>
        </member>
        <member name="T:Cnc.Tool.ToolProfileFit.ToolFitResult.StandardConvexFormTool">
            <summary> A StandardConvexFormTool tool definition. </summary>
        </member>
        <member name="T:Cnc.Tool.ToolProfileFit.ToolFitResult.BestFitType">
            <summary> An enumerated type representing the type of the best resulting fit. </summary>
            <remarks> Only certain StandardConvexFormTool parameters are applicable based on the resulting best fit type. </remarks>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheThreading.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheThreading.CopyFrom(Cnc.Tool.Interop.TlHolderLatheThreading)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheThreading.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheThreading.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolderLatheThreading">
            <summary> Defines the TlHolderLatheThreading tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheThreading.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.ImportFromStoredProfile(Cnc.Tool.Interop.TlProfile,System.Double)">
            <summary> Import from stored profile. </summary>
            <param name="storedProfile"> The stored profile to validate, sort, and scale. </param>
            <param name="scale">		 The scale to apply to the profile. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.BatchImportFromLayer(System.Collections.Generic.List`1{System.Int32},System.Collections.Generic.List`1{System.Double})">
            <summary> Batch import from layer. </summary>
            <param name="levels"> The levels to import from. </param>
            <param name="scales"> The scales to apply to the profiles. </param>
            <returns> A vector of TlProfileResult objects. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.ImportFromLayer(System.Int32,System.Double)">
            <summary> Import from layer. </summary>
            <param name="level"> The level to import from. </param>
            <param name="scale"> The scale to apply to the profile. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.BatchImportFromFile(System.Collections.Generic.List`1{System.String},System.Collections.Generic.List`1{System.Double},System.Collections.Generic.List`1{System.Boolean},System.Collections.Generic.List`1{System.String})">
            <summary> Batch import from file. </summary>
            <param name="filenames">		 The filenames. </param>
            <param name="scales">			 The scales to apply to the profiles. </param>
            <param name="isToolFlags">		 The isTool flags, true if importing for a tool, false for a holder. </param>
            <param name="transmitFilePaths"> Full pathnames of the resulting transmit files, if any are created. </param>
            <returns> A vector of TlProfileResult objects. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.BatchImportFromFile(System.Collections.Generic.List`1{System.String},System.Collections.Generic.List`1{System.Double},System.Collections.Generic.List`1{System.Boolean})">
            <summary> Batch import from file. </summary>
            <param name="filenames">   The filenames. </param>
            <param name="scales">	   The scales. </param>
            <param name="isToolFlags"> The isTool flags, true if importing for a tool, false for a holder. </param>
            <returns> A vector of TlProfileResult objects. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.ImportFromFile(System.String,System.Double,System.Boolean,System.String@)">
            <summary> Import profile from file. </summary>
            <param name="filename">		    Filename of the file. </param>
            <param name="scale">		    The scale to apply to the profile. </param>
            <param name="isTool">		    true if importing for a tool, false for a holder. </param>
            <param name="transmitFilePath"> Full pathname of the resulting transmit file, if one is created. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolProfileImporter.ImportFromFile(System.String,System.Double,System.Boolean)">
            <summary> Import profile from file. </summary>
            <param name="filename"> Filename of the file. </param>
            <param name="scale">    The scale. </param>
            <param name="isTool">   true if importing for a tool, false for a holder. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.ToolProfileImporter">
            <summary> Implementation of the main Mastercam tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.ImportFromStoredProfile(std.shared_ptr&lt;Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Import from stored profile. </summary>
            <param name="storedProfile"> The stored profile to validate, sort, and scale. </param>
            <param name="scale">		 The scale to apply to the profile. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.BatchImportFromLayer(std.vector&lt;System.Int32,std.allocator&lt;System.Int32&gt;&gt;,std.vector&lt;System.Double,std.allocator&lt;System.Double&gt;&gt;)">
            <summary> Batch import from layer. </summary>
            <param name="levels"> The levels to import from. </param>
            <param name="scales"> The scales to apply to the profiles. </param>
            <returns> A vector of TlProfileResult objects. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.ImportFromSketch(System.Char!System.Runtime.CompilerServices.IsConst*,System.Double)">
            <summary> Import from a SW Sketch (only in MCforSW). </summary>
            <param name="sketchname"> Name of the SW sketch. </param>
            <param name="scale"> The scale to apply to the profile. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.ImportFromLayer(System.Int32,System.Double)">
            <summary> Import from layer. </summary>
            <param name="level"> The level to import from. </param>
            <param name="scale"> The scale to apply to the profile. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.BatchImportFromFile(std.vector&lt;System.Char!System.Runtime.CompilerServices.IsConst**,std.allocator&lt;System.Char!System.Runtime.CompilerServices.IsConst**&gt;&gt;,std.vector&lt;System.Double,std.allocator&lt;System.Double&gt;&gt;,std.vector&lt;System.Boolean,std.allocator&lt;System.Boolean&gt;&gt;,std.vector&lt;ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,std.allocator&lt;ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Batch import from file. </summary>
            <param name="filenames">		 The filenames. </param>
            <param name="scales">			 The scales to apply to the profiles. </param>
            <param name="isToolFlags">		 The isTool flags where true means importing a tool and false is importing a holder. </param>
            <param name="transmitFilePaths"> Full pathnames of the resulting transmit files, if any are created. </param>
            <returns> A vector of TlProfileResult objects. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.BatchImportFromFile(std.vector&lt;System.Char!System.Runtime.CompilerServices.IsConst**,std.allocator&lt;System.Char!System.Runtime.CompilerServices.IsConst**&gt;&gt;,std.vector&lt;System.Double,std.allocator&lt;System.Double&gt;&gt;,std.vector&lt;System.Boolean,std.allocator&lt;System.Boolean&gt;&gt;)">
            <summary> Batch import from file. </summary>
            <param name="filenames">   The filenames. </param>
            <param name="scales">	   The scales. </param>
            <param name="isToolFlags"> The isTool flags where true means importing a tool and false is importing a holder. </param>
            <returns> A vector of TlProfileResult objects. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.ImportFromFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Double,System.Boolean,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Import profile from file. </summary>
            <param name="filename">		    Filename of the file. </param>
            <param name="scale">		    The scale to apply to the profile. </param>
            <param name="isTool">		    true if importing a tool, false if a holder. </param>
            <param name="transmitFilePath"> Full pathname of the resulting transmit file, if one is created. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.ToolProfileImporter.ImportFromFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Double,System.Boolean)">
            <summary> Import profile from file. </summary>
            <param name="filename"> Filename of the file. </param>
            <param name="scale">    The scale. </param>
            <param name="isTool">   true if importing a tool, false if a holder. </param>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.LinearizeArc(a_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;System.Double&gt;)">
            <summary> Turns an arc into a set of lines. </summary>
            <param name="arc">	    arc to linearize. </param>
            <param name="chordTol"> (Optional) The chordal deviation tolerance. </param>
            <returns> a set of lines. </returns>
            <summary> Turns an arc into a set of lines. </summary>
            <param name="arc">	    arc to linearize. </param>
            <param name="chordTol"> (Optional) The chordal deviation tolerance. </param>
            <returns> a set of lines. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.Normalize">
            <summary>	Normalizes the arc to avoid bizarre construction.  Should be called whenever arc is set </summary>
            <summary>	Normalizes the arc to avoid bizarre construction.  Should be called whenever arc is set </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetYValueIntersectionAngles(System.Double)">
            <summary> Get y coordinate value intersection angles. </summary>
            <param name="yValue"> The value. </param>
            <returns> The y coordinate value intersection angles. </returns>
            <summary> Get y coordinate value intersection angles. </summary>
            <param name="yValue"> The value. </param>
            <returns> The y coordinate value intersection angles. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetXValueIntersectionAngles(System.Double)">
            <summary> Get x coordinate value intersection angles. </summary>
            <param name="yValue"> The value. </param>
            <returns> The x coordinate value intersection angles. </returns>
            <summary> Get x coordinate value intersection angles. </summary>
            <param name="yValue"> The value. </param>
            <returns> The x coordinate value intersection angles. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetPointAtAngle(System.Double)">
            <summary> Gets the point at the specified angle. </summary>
            <param name="theta"> The angle. </param>
            <returns> The point at the specified angle on the arc. </returns>
            <summary> Gets the point at the specified angle. </summary>
            <param name="theta"> The angle. </param>
            <returns> The point at the specified angle on the arc. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.SweepsTo">
            <summary>	Determines the angle to which the arc sweeps </summary>
            <returns>	Final angle of sweep in radians </returns>
            <summary>	Determines the angle to which the arc sweeps </summary>
            <returns>	Final angle of sweep in radians </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.DoTrimAtXValue(System.Double,System.Boolean)">
            <summary> Executes the trim at x coordinate value operation. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
            <summary> Executes the trim at x coordinate value operation. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.DoTrimAtYValue(System.Double,System.Boolean)">
            <summary> Executes the trim at y coordinate value operation. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
            <summary> Executes the trim at y coordinate value operation. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.DoIsCoincidentWithYAxis">
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.SetToOldSegment(TlProfileEnt*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.SetToOldSegment(prof_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.Transform(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlProfileSegment.TransformationType)">
            <summary> Transforms the given transformation. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
            <summary> Transforms the given transformation. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.ValidateQuadrant">
            <summary> Validates the quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Validates the quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.Reverse">
            <summary> Reverses the segment. </summary>
            <summary> Reverses the segment. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetMaxWidth">
            <summary> Gets maximum width. </summary>
            <returns> The maximum width. </returns>
            <summary> Gets maximum width. </summary>
            <returns> The maximum width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetTopWidth">
            <summary> Gets top width using just the endpoints of the arc. </summary>
            <returns> The top width. </returns>
            <summary> Gets top width using just the endpoints of the arc. </summary>
            <returns> The top width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetBottomWidth">
            <summary> Gets bottom width using just the endpoints of the arc. </summary>
            <returns> The bottom width. </returns>
            <summary> Gets bottom width using just the endpoints of the arc. </summary>
            <returns> The bottom width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetHeight">
            <summary>	Height of segment </summary>
            <returns>	said height </returns>
            <summary>	Height of segment </summary>
            <returns>	said height </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetLength">
            <summary> Gets the length of this profile segment. </summary>
            <returns> The length. </returns>
            <summary> Gets the length of this profile segment. </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.IsConvex">
            <summary> Query if this object is convex. </summary>
            <returns> true if convex, false if not. </returns>
            <summary> Query if this object is convex. </summary>
            <returns> true if convex, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.SweepsBetween270to90">
            <summary> Query if arc sweeps completely between 270 degrees to 90 degrees (inclusive). </summary>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Query if arc sweeps completely between 270 degrees to 90 degrees (inclusive). </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.IncludesAngle(System.Double)">
            <summary> Query if the angle 'theta' is included in this arc. </summary>
            <param name="theta"> The angle. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Query if the angle 'theta' is included in this arc. </summary>
            <param name="theta"> The angle. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetEndpoint2">
            <summary> Gets the end endpoint of this segment. </summary>
            <returns> The end endpoint. </returns>
            <summary> Gets the end endpoint of this segment. </summary>
            <returns> The end endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.GetEndpoint1">
            <summary> Gets the start endpoint of this segment. </summary>
            <returns> The start endpoint. </returns>
            <summary> Gets the start endpoint of this segment. </summary>
            <returns> The start endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.MinY">
            <summary> Lowest point contained in segment </summary>
            <returns> Lowest point contained in segment </returns>
            <summary> Lowest point contained in segment </summary>
            <returns> Lowest point contained in segment </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.MinX">
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.MaxY">
            <summary> Highest point contained in segment </summary>
            <returns> Highest point contained in segment </returns>
            <summary> Highest point contained in segment </summary>
            <returns> Highest point contained in segment </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.MaxX">
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.Linearize(std.optional&lt;System.Double&gt;)">
            <summary> Conversion function </summary>
            <param name="chordTol"> (Optional) The chordal deviation tolerance. </param>
            <returns> vector of TlProfileLineSegmentPtr representing this object, linearized</returns>
            <summary> Conversion function </summary>
            <param name="chordTol"> (Optional) The chordal deviation tolerance. </param>
            <returns> vector of TlProfileLineSegmentPtr representing this object, linearized</returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.op_Assign(Cnc.Tool.TlProfileArcSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> The right hand side of the assignment operation. </param>
            <returns> A deep copy of this object. </returns>
            <summary> Assignment operator. </summary>
            <param name="rhs"> The right hand side of the assignment operation. </param>
            <returns> A deep copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Byte)">
            <summary> Constructor. </summary>
            <param name="centerX">    The center x coordinate. </param>
            <param name="centerY">    The center y coordinate. </param>
            <param name="radius">	  The radius. </param>
            <param name="startAngle"> The start angle. </param>
            <param name="sweepAngle"> The sweep angle. </param>
            <param name="color">	  The color. </param>
            <summary> Constructor. </summary>
            <param name="centerX">    The center x coordinate. </param>
            <param name="centerY">    The center y coordinate. </param>
            <param name="radius">	  The radius. </param>
            <param name="startAngle"> The start angle. </param>
            <param name="sweepAngle"> The sweep angle. </param>
            <param name="color">	  The color. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.#ctor(a_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">
            <summary> Constructor. </summary>
            <param name="arc">   The segment. </param>
            <param name="color"> The color. </param>
            <summary> Constructor. </summary>
            <param name="arc">   The segment. </param>
            <param name="color"> The color. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.#ctor(Cnc.Tool.TlProfileArcSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="other"> The other. </param>
            <summary> Copy constructor. </summary>
            <param name="other"> The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileArcSegment.#ctor">
            <summary> Default constructor. </summary>
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.a_2dMarshal(Cnc.Tool.Interop.TlProfileArcSegment.Arc2D)">
            <summary> Marshals managed TlProfileArcSegment::Arc2D type to native a_2d type. </summary>
            <param name="arc2D"> The arc of type Arc2D. </param>
            <returns> A arc of type a_2d. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.a_2dMarshal(a_2d)">
            <summary> Marshals native a_2d type to managed TlProfileArcSegment::Arc2D type. </summary>
            <param name="arc2D"> The arc of type a_2d. </param>
            <returns> A arc of type Arc2D. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.l_2dMarshal(Cnc.Tool.Interop.TlProfileLineSegment.Line2D)">
            <summary> Marshals managed TlProfileLineSegment::Line2d type to native l_2d type. </summary>
            <param name="line2D"> The line of type Line2D. </param>
            <returns> A line of type l_2d. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.l_2dMarshal(l_2d)">
            <summary> Marshals native l_2d type to managed TlProfileLineSegment::Line2d type. </summary>
            <param name="line2D"> The line of type l_2d. </param>
            <returns> A line of type Line2D. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.p_2dMarshal(Cnc.Tool.Interop.TlProfileSegment.Point2D)">
            <summary> Marshals managed TlProfileSegment::Point2D type to native p_2d type. </summary>
            <param name="pt2D"> The point of type Point2D. </param>
            <returns> A point of type p_2d. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.p_2dMarshal(p_2d)">
            <summary> Marshals native p_2d type to managed TlProfileSegment::Point2D type. </summary>
            <param name="pt2D"> The point of type p_2d. </param>
            <returns> A point of type Point2D. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.IsConvex">
            <summary> Query if this object is convex. </summary>
            <returns> true if convex, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.SweepsBetween270to90">
            <summary> Query if arc sweeps completely between 270 degrees to 90 degrees (inclusive). </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.IncludesAngle(System.Double)">
            <summary> Query if the angle 'theta' is included in this arc. </summary>
            <param name="theta"> The angle. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Byte)">
            <summary> Constructor. </summary>
            <param name="centerX">    The center x coordinate. </param>
            <param name="centerY">    The center y coordinate. </param>
            <param name="radius">	  The radius. </param>
            <param name="startAngle"> The start angle. </param>
            <param name="sweepAngle"> The sweep angle. </param>
            <param name="color">	  The color. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.#ctor(Cnc.Tool.Interop.TlProfileArcSegment.Arc2D,System.Byte)">
            <summary> Constructor. </summary>
            <param name="arc">   The segment. </param>
            <param name="color"> The color. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlProfileArcSegment.Arc">
            <summary> Arc </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.CopyFrom(Cnc.Tool.Interop.TlProfileArcSegment)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileArcSegment.Arc2D.#ctor(Cnc.Tool.Interop.TlProfileSegment.Point2D,System.Double,System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="c">  A Point2D to process. </param>
            <param name="r">  A double to process. </param>
            <param name="sa"> The start angle. </param>
            <param name="sw"> The sweep angle. </param>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileArcSegment.Arc2D.sw">
            <summary> Sweep angle in radians. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileArcSegment.Arc2D.sa">
            <summary> Start angle in radians. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileArcSegment.Arc2D.r">
            <summary> Arc radius. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileArcSegment.Arc2D.c">
            <summary> Centerpoint. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileArcSegment.Arc2D">
            <summary> Arc2D. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileArcSegment">
            <summary> Defines the TlProfileArcSegment tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Byte)">
            <summary> Constructor. </summary>
            <param name="endpoint1X"> The endpoint 1 x coordinate. </param>
            <param name="endpoint1Y"> The endpoint 1 y coordinate. </param>
            <param name="endpoint2X"> The endpoint 2 x coordinate. </param>
            <param name="endpoint2Y"> The endpoint 2 y coordinate. </param>
            <param name="color">	  The color. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlProfileLineSegment.Line">
            <summary> Line </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.CopyFrom(Cnc.Tool.Interop.TlProfileLineSegment)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.Line2D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="x1"> The first x value. </param>
            <param name="y1"> The first y value. </param>
            <param name="x2"> The second x value. </param>
            <param name="y2"> The second y value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileLineSegment.Line2D.#ctor(Cnc.Tool.Interop.TlProfileSegment.Point2D,Cnc.Tool.Interop.TlProfileSegment.Point2D)">
            <summary> Constructor. </summary>
            <param name="endPoint1"> The end point 1. </param>
            <param name="endPoint2"> The end point 2. </param>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileLineSegment.Line2D.EndPoint2">
            <summary> The second endpoint. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileLineSegment.Line2D.EndPoint1">
            <summary> The first endpoint. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileLineSegment.Line2D">
            <summary> Line2D. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileLineSegment">
            <summary> Defines the TlProfileLineSegment tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContextAdapter.AddImportedItemsToLibrary(System.String,System.Collections.Generic.ICollection`1{Cnc.Tool.Interop.TlObject})">
            <summary> Adds a series of imported items to the specified library. </summary>
            <remarks> Only tool libraries are supported at this time. </remarks>
            <param name="libraryPath">   Full pathname of the library file. </param>
            <param name="importedItems"> The imported items. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContextAdapter.AddImportedItemsToPart(System.Collections.Generic.ICollection`1{Cnc.Tool.Interop.TlObject})">
            <summary> Adds a series of imported items to the part list in the machine group determined by the context from
		  which the importer was launched from. </summary>
            <remarks> Only mill tools and mill tool assemblies are supported at this time. </remarks>
            <param name="importedItems"> The imported items. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContextAdapter.AddImportedItems(System.Collections.Generic.ICollection`1{Cnc.Tool.Interop.TlObject})">
            <summary> Adds a series of imported items to the context from which the importer was launched from. </summary>
            <param name="importedItems"> The imported items. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContextAdapter.Logger">
            <summary> Gets the logger. </summary>
            <returns> A reference to an IToolDataImportLogger. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContextAdapter.#ctor(Cnc.Tool.IToolDataImportContext!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="pNativeInstance"> The native instance. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataImportContextAdapter">
            <summary> A tool data import Context adapter. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportLoggerAdapter.SaveLogToDisk(System.String@)">
            <summary> Saves the log to disk. </summary>
            <param name="path"> The full pathname of the file to save to. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportLoggerAdapter.Log(System.String,Cnc.Tool.Interop.IToolDataImportLogger.MessageType)">
            <summary> Logs a message to the logger. </summary>
            <param name="message">	   The message. </param>
            <param name="messageType"> The type of the message. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportLoggerAdapter.#ctor(Cnc.Tool.IToolDataImportLogger*)">
            <summary> Constructor. </summary>
            <param name="pNativeInstance"> The native instance. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataImportLoggerAdapter">
            <summary> A tool data import logger adapter. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParamsAdapter.Finalize">
            <summary>	Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParamsAdapter.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParamsAdapter.#ctor(Cnc.Tool.ILToolThreadCutParams*)">
            <summary>	Constructor. </summary>
            <param name="pNativeInstance">	The native instance to adapt. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.ILToolThreadCutParamsAdapter">
            <summary>	An adapter class for the ILToolThreadCutParams interface. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParams.SetMaxThreadPitch(System.Double,System.Boolean)">
            <summary> Sets the MaxhreadPitch property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParams.GetMaxThreadPitch(System.Boolean)">
            <summary> Gets the MaxThreadPitch property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The MaxThreadPitch property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolThreadCutParams.MaxThreadPitch">
            <summary>	Gets or sets the maximum thread pitch. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParams.SetMinThreadPitch(System.Double,System.Boolean)">
            <summary> Sets the MinThreadPitch property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParams.GetMinThreadPitch(System.Boolean)">
            <summary> Gets the MinThreadPitch property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The MinThreadPitch property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolThreadCutParams.MinThreadPitch">
            <summary>	Gets or sets the minimum thread pitch. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolThreadCutParams.NumSpringCuts">
            <summary>	Gets or sets the number of spring cuts. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParams.SetPullOff(System.Double,System.Boolean)">
            <summary> Sets the PullOff property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParams.GetPullOff(System.Boolean)">
            <summary> Gets the PullOff property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The PullOff property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolThreadCutParams.PullOff">
            <summary>	Gets or sets the pull off. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParams.SetFinishPassAllowance(System.Double,System.Boolean)">
            <summary> Sets the FinishPassAllowance property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParams.GetFinishPassAllowance(System.Boolean)">
            <summary> Gets the FinishPassAllowance property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The FinishPassAllowance property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolThreadCutParams.FinishPassAllowance">
            <summary>	Gets or sets the finish pass allowance. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParams.SetLastDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets the LastDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParams.GetLastDepthOfCut(System.Boolean)">
            <summary> Gets the LastDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The LastDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolThreadCutParams.LastDepthOfCut">
            <summary>	Gets or sets the last depth of cut. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParams.SetFirstDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets the FirstDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolThreadCutParams.GetFirstDepthOfCut(System.Boolean)">
            <summary> Gets the FirstDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The FirstDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolThreadCutParams.FirstDepthOfCut">
            <summary>	Gets or sets the first depth of cut. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ILToolThreadCutParams">
            <summary>	An interface representing lathe threading tool cutting parameters. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolTurnBoreCutParamsAdapter.Finalize">
            <summary>	Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolTurnBoreCutParamsAdapter.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolTurnBoreCutParamsAdapter.#ctor(Cnc.Tool.ILToolTurnBoreCutParams*)">
            <summary>	Constructor. </summary>
            <param name="pNativeInstance">	The native instance to adapt. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.ILToolTurnBoreCutParamsAdapter">
            <summary>	An adapter class for the ILToolTurnBoreCutParams interface. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolTurnBoreCutParams.SetFacingXOvercutAmount(System.Double,System.Boolean)">
            <summary> Sets the FacingXOvercutAmount property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolTurnBoreCutParams.GetFacingXOvercutAmount(System.Boolean)">
            <summary> Gets the FacingXOvercutAmount property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The FacingXOvercutAmount property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolTurnBoreCutParams.FacingXOvercutAmount">
            <summary>	Gets or sets the facing X overcut amount. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolTurnBoreCutParams.SetFacingRetractionAmount(System.Double,System.Boolean)">
            <summary> Sets the FacingRetractionAmount property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolTurnBoreCutParams.GetFacingRetractionAmount(System.Boolean)">
            <summary> Gets the FacingRetractionAmount property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The FacingRetractionAmount property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolTurnBoreCutParams.FacingRetractionAmount">
            <summary>	Gets or sets the facing retraction amount. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolTurnBoreCutParams.SetRoughOverlapAmount(System.Double,System.Boolean)">
            <summary> Sets the RoughOverlapAmount property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolTurnBoreCutParams.GetRoughOverlapAmount(System.Boolean)">
            <summary> Gets the RoughOverlapAmount property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The RoughOverlapAmount property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolTurnBoreCutParams.RoughOverlapAmount">
            <summary>	Gets or sets the rough overlap amount. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolTurnBoreCutParams.SetFinishDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets the FinishDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolTurnBoreCutParams.GetFinishDepthOfCut(System.Boolean)">
            <summary> Gets the FinishDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The FinishDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolTurnBoreCutParams.FinishDepthOfCut">
            <summary>	Gets or sets the finish depth of cut. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolTurnBoreCutParams.SetRoughDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets the RoughDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolTurnBoreCutParams.GetRoughDepthOfCut(System.Boolean)">
            <summary> Gets the RoughDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The RoughDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolTurnBoreCutParams.RoughDepthOfCut">
            <summary>	Gets or sets the rough depth of cut. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ILToolTurnBoreCutParams">
            <summary>	An interface representing lathe turning boring tool cutting parameters. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolDrillCutParamsAdapter.Finalize">
            <summary>	Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolDrillCutParamsAdapter.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolDrillCutParamsAdapter.#ctor(Cnc.Tool.ILToolDrillCutParams*)">
            <summary>	Constructor. </summary>
            <param name="pNativeInstance">	The native instance to adapt. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.ILToolDrillCutParamsAdapter">
            <summary>	An adapter class for the ILToolDrillCutParams interface. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolDrillCutParams.Cycle">
            <summary>	Gets or sets the drill cycle. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolDrillCutParams.Dwell">
            <summary>	Gets or sets the Dwell Amount. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolDrillCutParams.SetRetract(System.Double,System.Boolean)">
            <summary> Sets the Retract property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolDrillCutParams.GetRetract(System.Boolean)">
            <summary> Gets the Retract property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The Retract property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolDrillCutParams.Retract">
            <summary>	Gets or sets the Retraction Amount. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolDrillCutParams.SetPeckClearance(System.Double,System.Boolean)">
            <summary> Sets the PeckClearance property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolDrillCutParams.GetPeckClearance(System.Boolean)">
            <summary> Gets the PeckClearance property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The PeckClearance property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolDrillCutParams.PeckClearance">
            <summary>	Gets or sets the Peck clearance. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolDrillCutParams.SetPeck2(System.Double,System.Boolean)">
            <summary> Sets the Peck2 property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolDrillCutParams.GetPeck2(System.Boolean)">
            <summary> Gets the Peck2 property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The Peck2 property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolDrillCutParams.Peck2">
            <summary>	Gets or sets the second Peck. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolDrillCutParams.SetPeck1(System.Double,System.Boolean)">
            <summary> Sets the Peck1 property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolDrillCutParams.GetPeck1(System.Boolean)">
            <summary> Gets the Peck1 property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The Peck1 property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolDrillCutParams.Peck1">
            <summary>	Gets or sets the first Peck. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ILToolDrillCutParams">
            <summary>	An interface representing lathe drilling tool cutting parameters. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.RunMillSaveGeometryToMcamFileApp(Cnc.Tool.Interop.TlMgr,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Executes the save geometry to Mastercam file application used to save mill assembly, tool, and/or holder
		  boundaries and solids to a Mastercam part file. </summary>
            <param name="itemsToSave"> The items to save. </param>
            <param name="pParent">	   If non-null, the parent window. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.RunSaveGeometryToMcamFileApp(Cnc.Tool.Interop.TlMgr,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Executes the save geometry to Mastercam file application used to save tool, holder, and/or insert
		  boundaries and solids to a Mastercam part file. </summary>
            <param name="itemsToSave"> The items to save. </param>
            <param name="pParent">	   If non-null, the parent window. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportToolModels(Cnc.Tool.Interop.ILTool,Cnc.Tool.Interop.TlGeometryImportExport.ExportModelParams)">
            <summary> Exports the model data for the given lathe tool assembly. </summary>
            <param name="toolToExport"> The lathe tool assembly. </param>
            <param name="exportParams"> (Optional) Export model parameters. </param>
            <returns> The collection of exported models. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportToolModels(Cnc.Tool.Interop.TlToolLathe,Cnc.Tool.Interop.TlGeometryImportExport.ExportModelParams)">
            <summary> Exports the model data for the given lathe tool. </summary>
            <param name="toolToExport"> The lathe tool. </param>
            <param name="exportParams"> (Optional) Export model parameters. </param>
            <returns> The collection of exported models. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportToolModels(Cnc.Tool.Interop.TlToolAssembly,Cnc.Tool.Interop.TlGeometryImportExport.ExportModelParams)">
            <summary> Exports the model data for the given lathe 3D tool assembly. </summary>
            <param name="toolToExport"> The lathe 3D tool assembly. </param>
            <param name="exportParams"> (Optional) Export model parameters. </param>
            <returns> The collection of exported models. </returns>#include
</member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportToolModels(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,Cnc.Tool.Interop.TlGeometryImportExport.ExportModelParams)">
            <summary> Exports the model data for the tool assembly associated to the operation identified by the given
		  operation id. If there is an acceptable tool associated to the operation specified by the given id,
		  the solid model geometry representing the tool assembly will be exported as a tesselated triangle
		  data set.  The model data and cutting/noncutting state of this data will be filled out into the given
		  result vector. </summary>
            <param name="opId">				    Identifier for the operation. </param>
            <param name="includeOpAdjustments"> True to include operation adjustments in the final orientation of
									the tool. </param>
            <param name="exportParams">		    Export model parameters. </param>
            <returns> The collection of exported models. </returns>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGeometryImportExport.ExportedModelData.NonCuttingModel">
            <summary>	The non cutting model (Holder). </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGeometryImportExport.ExportedModelData.CuttingModel">
            <summary>	The cutting model (Insert). </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlGeometryImportExport.ExportedModelData">
            <summary>	An exported model data. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGeometryImportExport.TriangleData.TriangleIndices">
            <summary>	The model triangle array. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGeometryImportExport.TriangleData.Vertices">
            <summary>	The model vertex array. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGeometryImportExport.TriangleData.TriangleIndexDef.Index2">
            <summary>	The third triangle index. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGeometryImportExport.TriangleData.TriangleIndexDef.Index1">
            <summary>	The second triangle index. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGeometryImportExport.TriangleData.TriangleIndexDef.Index0">
            <summary>	The first triangle index. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlGeometryImportExport.TriangleData.TriangleIndexDef">
            <summary> Triangle data structure for mesh model. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGeometryImportExport.TriangleData.VertexData.Normal">
            <summary>	The normal. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGeometryImportExport.TriangleData.VertexData.Vertex">
            <summary>	The vertex. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlGeometryImportExport.TriangleData.VertexData">
            <summary> Triangle Vertex data structure. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlGeometryImportExport.TriangleData">
            <summary> Triangle data structure for mesh model. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGeometryImportExport.ExportModelParams.viewMatrix">
            <summary>	The view matrix to apply to models before they are exported. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGeometryImportExport.ExportModelParams.NonCuttingSurfaceTolerance">
            <summary>	The surface tolerance for non-cutting portions of the tool. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGeometryImportExport.ExportModelParams.CuttingSurfaceTolerance">
            <summary>	The surface tolerance for cutting portions of the tool. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlGeometryImportExport.ExportModelParams">
            <summary>	Parameters specifying the tessellation and transformation of the exported models. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportBoundariesAndSolidsToLevel(Cnc.Tool.Interop.ILTool,System.Int32)">
            <summary> Export the boundaries and solids defined for the given lathe tool onto the specified level. Solids will
		  only be stored on the specified level if the tool is a 3d tool assembly. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="level">	    The level. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportBoundariesAndSolidsToLevel(Cnc.Tool.Interop.TlToolAssemblyLatheDefView,System.Int32)">
            <summary> Exports the boundaries and solid models stored within the specified lathe tool onto the specified level. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="level">	    The level. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportProfilesAndSolidsToLevel(Cnc.Tool.Interop.TlHolder,System.Int32,Cnc.Tool.Interop.TlGeometryImportExport.LevelParams)">
            <summary> Exports the profiles and solids specified by the mill holder onto the specified level. </summary>
            <param name="holder"> The mill holder. </param>
            <param name="level">  The level. </param>
            <param name="params"> The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportProfilesAndSolidsToLevel(Cnc.Tool.Interop.TlToolMill,System.Int32,Cnc.Tool.Interop.TlGeometryImportExport.LevelParams)">
            <summary> Exports the profiles and solids specified by the mill tool onto the specified level. </summary>
            <param name="millTool"> The mill tool. </param>
            <param name="level">    The level. </param>
            <param name="params">   The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportProfilesAndSolidsToLevel(Cnc.Tool.Interop.TlAssembly,System.Int32,Cnc.Tool.Interop.TlGeometryImportExport.LevelParams)">
            <summary> Exports the profiles and solids specified by the mill assembly onto the specified level. </summary>
            <param name="assembly"> The mill assembly. </param>
            <param name="level">    The level. </param>
            <param name="params">   The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.Interop.TlHolder,System.Int32,Cnc.Tool.Interop.TlGeometryImportExport.LevelParams)">
            <summary> Exports the solids specified by the mill holder onto the specified level. </summary>
            <param name="holder"> The mill holder. </param>
            <param name="level">  The level. </param>
            <param name="params"> The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.Interop.TlToolMill,System.Int32,Cnc.Tool.Interop.TlGeometryImportExport.LevelParams)">
            <summary> Exports the solids specified by the mill tool onto the specified level. </summary>
            <param name="millTool"> The mill tool. </param>
            <param name="level">    The level. </param>
            <param name="params">   The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.Interop.TlAssembly,System.Int32,Cnc.Tool.Interop.TlGeometryImportExport.LevelParams)">
            <summary> Exports the solids specified by the mill assembly onto the specified level. </summary>
            <param name="assembly"> The mill assembly. </param>
            <param name="level">    The level. </param>
            <param name="params">   The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.Interop.ILTool,System.Int32)">
            <summary> Exports the solid models stored within the specified lathe tool onto the specified level. Only valid for
		  3d tool assemblies. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="level">	    The level. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.Interop.TlToolAssembly,System.Int32)">
            <summary> Exports the solid models stored within the specified 3d tool assembly onto the specified level. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="level">	    The level. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.Interop.TlTurnHolder,System.Int32)">
            <summary> Exports the solid models stored within the specified turn holder onto the specified level. </summary>
            <param name="holder"> The holder. </param>
            <param name="level">  The level. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.Interop.TlInsert,System.Int32)">
            <summary> Exports the solid models stored within the specified insert onto the specified level. </summary>
            <param name="insert"> The insert. </param>
            <param name="level">  The level. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportBoundariesAndSolidsToMcamFile(System.Collections.Generic.IList`1{Cnc.Tool.Interop.ILTool},System.String)">
            <summary> Exports boundaries and solids to the specified mcam file. Boundaries will be exported for all tools, but
		  solids will only be exported for 3d tool assemblies. </summary>
            <param name="toolAssemblies"> The tool assemblies. </param>
            <param name="filePath">		  Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportBoundariesAndSolidsToMcamFile(Cnc.Tool.Interop.I3dLTool,System.String)">
            <summary> Exports the boundaries and solids for the specified 3d tool assembly out to the specified Mastercam part
		  file. Only the specific boundaries for the specified view of the tool assembly will be exported. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="filePath">	    Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportBoundariesAndSolidsToMcamFile(Cnc.Tool.Interop.TlToolAssemblyLatheDefView,System.String)">
            <summary> Exports the boundaries and solids for the specified 3d tool assembly view out to the specified Mastercam
		  part file. Only the specific boundaries for the specified view of the tool assembly will be exported. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="filePath">	    Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToMcamFile(System.Collections.Generic.IList`1{Cnc.Tool.Interop.ILTool},System.String)">
            <summary> Exports the solids for all 3d tools in the given collection of lathe tool assemblies to the specified
		  Mastercam part file. </summary>
            <param name="toolAssemblies"> The tool assemblies. </param>
            <param name="filePath">		  Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToMcamFile(Cnc.Tool.Interop.TlHolder,System.String)">
            <summary> Export the solids for the specified mill holder out to the specified Mastercam part file. </summary>
            <param name="holder">   The mill holder. </param>
            <param name="filePath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToMcamFile(Cnc.Tool.Interop.TlToolMill,System.String)">
            <summary> Export the solids for the specified mill tool out to the specified Mastercam part file. </summary>
            <param name="millTool"> The mill tool. </param>
            <param name="filePath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToMcamFile(Cnc.Tool.Interop.TlAssembly,System.String)">
            <summary> Export the solids for the specified mill assembly out to the specified Mastercam part file. </summary>
            <param name="toolAssembly"> The mill tool assembly. </param>
            <param name="filePath">	    Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToMcamFile(Cnc.Tool.Interop.TlToolAssembly,System.String)">
            <summary> Export the solids for the specified 3d tool assembly out to the specified Mastercam part file. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="filePath">	    Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToMcamFile(Cnc.Tool.Interop.TlTurnHolder,System.String)">
            <summary> Export the solids for the specified turn holder out to the specified Mastercam part file. </summary>
            <param name="holder">   The holder. </param>
            <param name="filePath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportSolidsToMcamFile(Cnc.Tool.Interop.TlInsert,System.String)">
            <summary> Export the solids for the specified insert  out to the specified Mastercam part file. </summary>
            <param name="insert">   The insert. </param>
            <param name="filePath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ImportSolidsFromStepFile(Cnc.Tool.Interop.TlTurnHolder,System.String)">
            <summary> Imports solids for the specified turn holder from the specified step file into the holder. </summary>
            <param name="holder">   The holder. </param>
            <param name="filePath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ImportSolidsFromStepFile(Cnc.Tool.Interop.TlInsert,System.String)">
            <summary> Imports solids for the specified insert from the specified step file into the insert. </summary>
            <param name="insert">   The insert. </param>
            <param name="filePath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportBoundariesToLevel(Cnc.Tool.Interop.ILTool,System.Int32,Cnc.Tool.Interop.TlGeometryImportExport.LevelParams)">
            <summary>
Exports the cutting and non-cutting boundaries for the specified lathe tool out to the specified level in the
current Mastercam part file.
</summary>
            <param name="latheTool">	The lathe tool. </param>
            <param name="level">		The level. </param>
            <param name="params">   	The level parameters. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportBoundariesToLevel(Cnc.Tool.Interop.TlToolAssemblyLatheDefView,System.Int32)">
            <summary> Exports the cutting and non-cutting boundaries for the specified specified 3D tool assembly lathe
		  definition out to the specified level in the current Mastercam part file. </summary>
            <param name="toolAssembly"> The 3D lathe tool assembly view of a specific lathe cutting definition. </param>
            <param name="level">	    The level. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportBoundariesToLevel(Cnc.Tool.Interop.TlToolLathe,System.Int32)">
            <summary> Exports the cutting and non-cutting boundaries for the specified 2D lathe tool out to the specified level
		  in the current Mastercam part file. </summary>
            <param name="latheTool"> The 2D lathe tool. </param>
            <param name="level">	 The level. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportBoundariesToMcamFile(System.Collections.Generic.IList`1{Cnc.Tool.Interop.ILTool},System.String)">
            <summary> Exports the cutting and non-cutting boundaries for the specified lathe tools out to the specified
		  Mastercam part file. </summary>
            <param name="latheTools"> The lathe tools. </param>
            <param name="filePath">   Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportBoundariesToMcamFile(Cnc.Tool.Interop.ILTool,System.String)">
            <summary> Exports the cutting and non-cutting boundaries for the specified lathe tool out to the specified
		  Mastercam part file. </summary>
            <param name="latheTool"> The lathe tool. </param>
            <param name="filePath">  Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportBoundariesToMcamFile(Cnc.Tool.Interop.TlToolAssemblyLatheDefView,System.String)">
            <summary> Exports the cutting and non-cutting boundaries for the specified 3D tool assembly lathe definition out to
		  the specified Mastercam part file. </summary>
            <param name="toolAssembly"> The 3D lathe tool assembly view of a specific lathe cutting definition. </param>
            <param name="filePath">	    Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportBoundariesToMcamFile(Cnc.Tool.Interop.TlToolLathe,System.String)">
            <summary> Exports the cutting and non-cutting boundaries fort he specified 2D lathe tool out to the specified
		  Mastercam part file. </summary>
            <param name="latheTool"> The 2D lathe tool. </param>
            <param name="filePath">  Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ImportBoundariesFromLevel(Cnc.Tool.Interop.TlToolLatheCustom,System.Int32)">
            <summary> Import the cutting and non-cutting boundaries from the specified level into the given 2D custom lathe
		  tool. Boundaries are expected to follow the defined 2D lathe custom tool boundary rules. </summary>
            <param name="latheTool"> The 2D custom lathe tool. </param>
            <param name="level">	 The level. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ImportBoundariesFromMcamFile(Cnc.Tool.Interop.TlToolLatheCustom,System.String)">
            <summary> Import the cutting and non-cutting boundaries from the specified file. Only valid for Mastercam file
		  formats. Boundaries are expected to follow the defined 2D lathe custom tool boundary rules. </summary>
            <param name="latheTool"> The 2D custom lathe tool. </param>
            <param name="filePath">  Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportProfileToLevel(Cnc.Tool.Interop.TlToolMill,System.Int32,Cnc.Tool.Interop.TlGeometryImportExport.LevelParams,System.Boolean)">
            <summary> Exports the profile of the given item to the specified level in the current part file. </summary>
            <param name="millTool">    The mill tool to export the profile geometry of. </param>
            <param name="level">	   The level to export to. </param>
            <param name="params">	   The level parameters. </param>
            <param name="linkToLevel"> True to link to the level. Linking to the level will mean that the tool will retrieve
						   the most up to date version of the profile from the specified level when accessed. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportProfileToLevel(Cnc.Tool.Interop.TlHolder,System.Int32,Cnc.Tool.Interop.TlGeometryImportExport.LevelParams)">
            <summary> Exports the profile of the given holder onto the specified level in the current part file. </summary>
            <param name="holder"> The holder to export the profile geometry of. </param>
            <param name="level">  The level to export to. </param>
            <param name="params"> The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ExportProfileToLevel(Cnc.Tool.Interop.TlAssembly,System.Int32,Cnc.Tool.Interop.TlGeometryImportExport.LevelParams)">
            <summary> Exports the profile of the given assembly onto the specified level in the current part file. </summary>
            <param name="assembly"> The mill assembly. </param>
            <param name="level">    The level. </param>
            <param name="params">   The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ImportProfileFromLevel(Cnc.Tool.Interop.TlToolMill,System.Int32,System.Boolean,System.Boolean)">
            <summary> Imports the profile for the given mill tool from the specified Mastercam level into the tool with the
		  option to link to the level and scale the profile based on tool diameter. </summary>
            <param name="millTool">			   The mill tool to import the profile geometry into. </param>
            <param name="level">			   The level to import from. </param>
            <param name="linkToLevel">		   True to link to the level. Linking to the level will mean that the
								   tool will retrieve the most up to date version of the profile from the
								   specified level when accessed. </param>
            <param name="scaleToToolDiameter"> True to scale the profile to the tool diameter. Supports legacy
								   profile formats that needed to be scaled such that the radius of the profile
								   was defined at 1 unit (in/mm). </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ImportProfileFromLevel(Cnc.Tool.Interop.TlHolder,System.Int32)">
            <summary> Imports the profile for the given mill tool holder from the specified Mastercam level into the holder as
		  its stored profile. </summary>
            <param name="holder"> The holder. </param>
            <param name="level">  The level to import from. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ImportProfileFromFile(Cnc.Tool.Interop.TlToolMill,System.String,System.Boolean,System.Boolean)">
            <summary> Imports the profile for the given mill tool from the specified file into the tool. </summary>
            <remarks> Geometry in Mastercam file formats is expected to be on the primary level in the Mastercam format, which
		  is starting at the origin and forming a half-profile in quadrant one that can be revolved around the
		  Y-axis. Geometry in DXF file formats is expected to conform to the ISO-13399 format, with boundaries
		  on CUT and NOCUT levels. STEP file formats should have the solid going down the Z-axis. </remarks>
            <param name="millTool">			   The mill tool. </param>
            <param name="filePath">			   Full pathname of the file to import from. </param>
            <param name="linkToFile">		   True if link to file if able. Linking to the file will mean that
								   the tool will retrieve the most up to date version of the profile from the
								   specified file when accessed. Only supported for Mastercam file formats. </param>
            <param name="scaleToToolDiameter"> True to scale the profile to the tool diameter. Supports legacy
								   profile formats that needed to be scaled such that the radius of the profile
								   was defined at 1 unit (in/mm). Only supported for Mastercam file formats. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGeometryImportExport.ImportProfileFromFile(Cnc.Tool.Interop.TlHolder,System.String)">
            <summary> Imports the profile for the given mill tool holder from the specified file into the holder as its stored
		  profile. </summary>
            <remarks> Geometry in Mastercam file formats is expected to be on the primary level in the Mastercam format, which
		  is starting at the origin and forming a half-profile in quadrant one that can be revolved around the
		  Y-axis. Geometry in DXF file formats is expected to conform to the ISO-13399 format, with a boundary
		  on the NOCUT level. STEP file formats should have the solid going down the Z-axis. </remarks>
            <param name="holder">   The holder. </param>
            <param name="filePath"> Full pathname of the file to import from. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.TlGeometryImportExport.LevelParams">
            <summary>	The level parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlGeometryImportExport">
            <summary> Functionality for tool/holder/insert geometry import export. </summary>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.RunMillSaveGeometryToMcamFileApp(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Executes the save geometry to Mastercam file application used to save mill assembly, tool, and/or holder
		  boundaries and solids to a Mastercam part file. </summary>
            <param name="itemsToSave"> The items to save. </param>
            <param name="pParent">	   (Optional) If non-null, the parent window. </param>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.RunSaveGeometryToMcamFileApp(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Executes the save geometry to Mastercam file application used to save tool, holder, and/or insert
		  boundaries and solids to a Mastercam part file. </summary>
            <param name="itemsToSave"> The items to save. </param>
            <param name="pParent">	   (Optional) If non-null, the parent window. </param>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportToolModels(Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlGeometryImportExport.ExportModelParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Exports the model data for the given lathe tool assembly. </summary>
            <param name="toolToExport"> The lathe tool assembly. </param>
            <param name="exportParams"> (Optional) Export model parameters. </param>
            <returns> The collection of exported models. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportToolModels(Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlGeometryImportExport.ExportModelParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Exports the model data for the given lathe tool. </summary>
            <param name="spToolToExport"> The lathe tool. </param>
            <param name="exportParams">   (Optional) Export model parameters. </param>
            <returns> The collection of exported models. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportToolModels(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlGeometryImportExport.ExportModelParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Exports the model data for the given lathe 3D tool assembly. </summary>
            <param name="toolToExport"> The lathe 3D tool assembly. </param>
            <param name="exportParams"> (Optional) Export model parameters. </param>
            <returns> The collection of exported models. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportToolModels(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,Cnc.Tool.TlGeometryImportExport.ExportModelParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Exports the model data for the tool assembly associated to the operation identified by the given
		  operation id. If there is an acceptable tool associated to the operation specified by the given id,
		  the solid model geometry representing the tool assembly will be exported as a tesselated triangle
		  data set.  The model data and cutting/noncutting state of this data will be filled out into the given
		  result vector. </summary>
            <param name="opId">				    Identifier for the operation. </param>
            <param name="includeOpAdjustments"> (Optional) True to include operation adjustments in the final orientation of
									the tool. </param>
            <param name="exportParams">		    (Optional) Export model parameters. </param>
            <returns> The collection of exported models. </returns>
        </member>
        <member name="T:Cnc.Tool.TlGeometryImportExport.ExportedModelData">
            <summary>	An exported model data. </summary>
        </member>
        <member name="T:Cnc.Tool.TlGeometryImportExport.TriangleData.TriangleIndexDef">
            <summary> Triangle data structure for mesh model. </summary>
        </member>
        <member name="T:Cnc.Tool.TlGeometryImportExport.TriangleData.VertexData">
            <summary> Triangle Vertex data structure. </summary>
        </member>
        <member name="T:Cnc.Tool.TlGeometryImportExport.TriangleData">
            <summary> Triangle data structure for mesh model. </summary>
        </member>
        <member name="T:Cnc.Tool.TlGeometryImportExport.ExportModelParams">
            <summary>	Parameters specifying the tessellation and transformation of the exported models. </summary>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportBoundariesAndSolidsToLevel(Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;)">
            <summary> Export the boundaries and solids defined for the given lathe tool onto the specified level. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="level">	    The level. </param>
            <param name="params">	    (Optional) The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportBoundariesAndSolidsToLevel(Cnc.Tool.TlToolAssemblyLatheDefView!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;)">
            <summary> Exports the boundaries and solid models stored within the specified lathe tool onto the specified level. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="level">	    The level. </param>
            <param name="params">	    (Optional) The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportProfilesAndSolidsToLevel(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;)">
            <summary> Export the mill holder profile and solids on to the specified level. </summary>
            <param name="holder">		  The mill holder. </param>
            <param name="level">		  The level. </param>
            <param name="params">		  (Optional) The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportProfilesAndSolidsToLevel(Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;)">
            <summary> Export the mill tool profile and solids on to the specified level. </summary>
            <param name="millTool">		  The mill tool. </param>
            <param name="level">		  The level. </param>
            <param name="params">		  (Optional) The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportProfilesAndSolidsToLevel(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;)">
            <summary> Export the mill assembly profile and solids on to the specified level. </summary>
            <param name="assembly">		  The mill tool assembly. </param>
            <param name="level">		  The level. </param>
            <param name="params">		  (Optional) The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Export the mill holder solids on to the specified level. </summary>
            <param name="holder">	    The mill holder. </param>
            <param name="level">	    The level. </param>
            <param name="params">	    (Optional) The level parameters. </param>
            <param name="projection">   (Optional) The projection to move the holder. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Export the mill tool solids on to the specified level. </summary>
            <param name="millTool">	    The mill tool. </param>
            <param name="level">	    The level. </param>
            <param name="params">	    (Optional) The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;)">
            <summary> Export the mill assembly solids on to the specified level. </summary>
            <param name="assembly">	    The mill tool assembly. </param>
            <param name="level">	    The level. </param>
            <param name="params">	    (Optional) The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;)">
            <summary> Exports the solid models stored within the specified lathe tool onto the specified level. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="level">	    The level. </param>
            <param name="params">	    (Optional) The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;)">
            <summary> Exports the solid models stored within the specified lathe tool onto the specified level. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="level">	    The level. </param>
            <param name="params">	    (Optional) The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.TlHolderAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;)">
            <summary>	Exports the solid models stored within the specified holder assembly onto the specified level. </summary>
            <param name="holderAssembly">	The holder assembly. </param>
            <param name="level">		 	The level. </param>
            <param name="params">		 	(Optional) The level parameters. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.TlAdaptiveItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Exports the solid models stored within the specified turn holder onto the specified level. </summary>
            <param name="adaptiveItem">	The adaptive item. </param>
            <param name="level">	   	The level. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.TlTurnHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Exports the solid models stored within the specified turn holder onto the specified level. </summary>
            <param name="holder"> The holder. </param>
            <param name="level">  The level. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToLevel(Cnc.Tool.TlInsert!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Exports the solid models stored within the specified insert onto the specified level. </summary>
            <param name="insert"> The insert. </param>
            <param name="level">  The level. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportBoundariesAndSolidsToMcamFile(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Exports boundaries and solids to the specified mcam file. Boundaries will be exported for all tools, but
		  solids will only be exported for 3d tool assemblies. </summary>
            <param name="toolAssemblies"> The tool assemblies. </param>
            <param name="filePath">		  Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportBoundariesAndSolidsToMcamFile(Cnc.Tool.I3dLTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Exports the boundaries and solids for the specified 3d tool assembly out to the specified Mastercam part
		  file. Only the specific boundaries for the specified view of the tool assembly will be exported. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="filePath">	    Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportBoundariesAndSolidsToMcamFile(Cnc.Tool.TlToolAssemblyLatheDefView!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Exports the boundaries and solids for the specified 3d tool assembly view out to the specified Mastercam
		  part file. Only the specific boundaries for the specified view of the tool assembly will be exported. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="filePath">	    Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToMcamFile(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Exports the solids for all 3d tools in the given collection of lathe tool assemblies to the specified
		  Mastercam part file. </summary>
            <param name="toolAssemblies"> The tool assemblies. </param>
            <param name="filePath">		  Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToMcamFile(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Export the solids for the specified mill holder out to the specified Mastercam part file. </summary>
            <param name="holder">   The mill holder. </param>
            <param name="filePath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToMcamFile(Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Export the solids for the specified mill tool out to the specified Mastercam part file. </summary>
            <param name="millTool"> The mill tool. </param>
            <param name="filePath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToMcamFile(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Export the solids for the specified mill assembly out to the specified Mastercam part file. </summary>
            <param name="assembly"> The assembly. </param>
            <param name="filePath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToMcamFile(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Export the solids for the specified 3d tool assembly out to the specified Mastercam part file. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="filePath">	    Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToMcamFile(Cnc.Tool.TlTurnHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Export the solids for the specified turn holder out to the specified Mastercam part file. </summary>
            <param name="holder">   The holder. </param>
            <param name="filePath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportSolidsToMcamFile(Cnc.Tool.TlInsert!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Export the solids for the specified insert  out to the specified Mastercam part file. </summary>
            <param name="insert">   The insert. </param>
            <param name="filePath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ImportSolidsFromStepFile(Cnc.Tool.TlTurnHolder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Imports solids for the specified turn holder from the specified step file into the holder. </summary>
            <param name="holder">   The holder. </param>
            <param name="filePath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ImportSolidsFromStepFile(Cnc.Tool.TlInsert*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Imports solids for the specified insert from the specified step file into the insert. </summary>
            <param name="insert">   The insert. </param>
            <param name="filePath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportAllBoundariesToLevel(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Exports all cutting and non-cutting boundaries for the specified lathe tool out to the specified level or levels
		  depending on the options in params, for the current Mastercam part file. </summary>
            <param name="toolAssembly"> The tool assembly. </param>
            <param name="level">	    The level. </param>
            <param name="params">	    The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportBoundariesToLevel(Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Exports the cutting and non-cutting boundaries for the specified lathe tool out to the specified level in
		  the current Mastercam part file. </summary>
            <param name="latheTool"> The lathe tool. </param>
            <param name="level">	 The level. </param>
            <param name="params">    The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportBoundariesToLevel(Cnc.Tool.TlToolAssemblyLatheDefView!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean)">
            <summary>
Exports the cutting and non-cutting boundaries for the specified specified 3D tool assembly lathe definition out
to the specified level in the current Mastercam part file.
</summary>
            <param name="toolAssembly">  	The 3D lathe tool assembly view of a specific lathe cutting definition. </param>
            <param name="level">		 	The level. </param>
            <param name="forSaveToLevel">	(Optional) True to for save to level. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportBoundariesToLevel(Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> Exports the cutting and non-cutting boundaries for the specified 2D lathe tool out to the specified level
		  in the current Mastercam part file. </summary>
            <param name="latheTool"> The 2D lathe tool. </param>
            <param name="level">	 The level. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportBoundariesToMcamFile(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Exports the cutting and non-cutting boundaries for the specified lathe tools out to the specified
		  Mastercam part file. </summary>
            <param name="latheTools"> The lathe tools. </param>
            <param name="filePath">   Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportBoundariesToMcamFile(Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Exports the cutting and non-cutting boundaries for the specified lathe tool out to the specified
		  Mastercam part file. </summary>
            <param name="latheTool"> The lathe tool. </param>
            <param name="filePath">  Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportBoundariesToMcamFile(Cnc.Tool.TlToolAssemblyLatheDefView!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Exports the cutting and non-cutting boundaries for the specified 3D tool assembly lathe definition out to
		  the specified Mastercam part file. </summary>
            <param name="toolAssembly"> The 3D lathe tool assembly view of a specific lathe cutting definition. </param>
            <param name="filePath">	    Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportBoundariesToMcamFile(Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Exports the cutting and non-cutting boundaries fort he specified 2D lathe tool out to the specified
		  Mastercam part file. </summary>
            <param name="latheTool"> The 2D lathe tool. </param>
            <param name="filePath">  Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ImportBoundariesFromLevel(Cnc.Tool.TlToolLatheCustom*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> Import the cutting and non-cutting boundaries from the specified level into the given 2D custom lathe
		  tool. Boundaries are expected to follow the defined 2D lathe custom tool boundary rules. </summary>
            <param name="latheTool"> The 2D custom lathe tool. </param>
            <param name="level">	 The level. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ImportBoundariesFromMcamFile(Cnc.Tool.TlToolLatheCustom*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Import the cutting and non-cutting boundaries from the specified file. Only valid for Mastercam file
		  formats. Boundaries are expected to follow the defined 2D lathe custom tool boundary rules. </summary>
            <param name="latheTool"> The 2D custom lathe tool. </param>
            <param name="filePath">  Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportProfileToLevel(Cnc.Tool.TlToolMill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Exports the profile of the given item to the specified level in the current part file. </summary>
            <param name="millTool">		  The mill tool to export the profile geometry of. </param>
            <param name="level">		  The level to export to. </param>
            <param name="params">		  (Optional) The level parameters. </param>
            <param name="linkToLevel">    (Optional) True to link to the level. Linking to the level will mean that the tool
							  will retrieve the most up to date version of the profile from the specified level
							  when accessed. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportProfileToLevel(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Exports the profile of the given holder onto the specified level in the current part file. </summary>
            <param name="holder">		  The holder to export the profile geometry of. </param>
            <param name="level">		  The level to export to. </param>
            <param name="params">		  (Optional) The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ExportProfileToLevel(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;Cnc.Tool.TlGeometryImportExport.LevelParams&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Export the mill assembly profile to the designated level. </summary>
            <param name="assembly">		  The mill assembly. </param>
            <param name="level">		  The level. </param>
            <param name="params">		  (Optional) The level parameters. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ImportProfileFromLevel(Cnc.Tool.TlToolMill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean)">
            <summary> Imports the profile for the given mill tool from the specified Mastercam level into the tool with the
		  option to link to the level and scale the profile based on tool diameter. </summary>
            <param name="millTool">			   The mill tool to import the profile geometry into. </param>
            <param name="level">			   The level to import from. </param>
            <param name="linkToLevel">		   (Optional) True to link to the level. Linking to the level will mean that the
								   tool will retrieve the most up to date version of the profile from the
								   specified level when accessed. </param>
            <param name="scaleToToolDiameter"> (Optional) True to scale the profile to the tool diameter. Supports legacy
								   profile formats that needed to be scaled such that the radius of the profile
								   was defined at 1 unit (in/mm). </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ImportProfileFromLevel(Cnc.Tool.TlHolder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> Imports the profile for the given mill tool holder from the specified Mastercam level into the holder as
		  its stored profile. </summary>
            <param name="holder"> The holder. </param>
            <param name="level">  The level to import from. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ImportProfileFromFile(Cnc.Tool.TlToolMill*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Boolean)">
            <summary> Imports the profile for the given mill tool from the specified file into the tool. </summary>
            <remarks> Geometry in Mastercam file formats is expected to be on the primary level in the Mastercam format, which
		  is starting at the origin and forming a half-profile in quadrant one that can be revolved around the
		  Y-axis. Geometry in DXF file formats is expected to conform to the ISO-13399 format, with boundaries
		  on CUT and NOCUT levels. STEP file formats should have the solid going down the Z-axis. </remarks>
            <param name="millTool">			   The mill tool. </param>
            <param name="filePath">			   Full pathname of the file to import from. </param>
            <param name="linkToFile">		   (Optional) True if link to file if able. Linking to the file will mean that
								   the tool will retrieve the most up to date version of the profile from the
								   specified file when accessed. Only supported for Mastercam file formats. </param>
            <param name="scaleToToolDiameter"> (Optional) True to scale the profile to the tool diameter. Supports legacy
								   profile formats that needed to be scaled such that the radius of the profile
								   was defined at 1 unit (in/mm). Only supported for Mastercam file formats. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGeometryImportExport.ImportProfileFromFile(Cnc.Tool.TlHolder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Imports the profile for the given mill tool holder from the specified file into the holder as its stored
		  profile. </summary>
            <remarks> Geometry in Mastercam file formats is expected to be on the primary level in the Mastercam format, which
		  is starting at the origin and forming a half-profile in quadrant one that can be revolved around the
		  Y-axis. Geometry in DXF file formats is expected to conform to the ISO-13399 format, with a boundary
		  on the NOCUT level. STEP file formats should have the solid going down the Z-axis. </remarks>
            <param name="holder">   The holder. </param>
            <param name="filePath"> Full pathname of the file to import from. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.TlGeometryImportExport.LevelParams">
            <summary>	The level parameters. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TransformationMatrixColumn.default(System.Int32)">
            <summary> Array indexer operator. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrixColumn.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>	Parameterized constructor. </summary>
            <param name="a">	The double to process. </param>
            <param name="b">	The double to process. </param>
            <param name="c">	The double to process. </param>
            <param name="d">	The double to process. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrixColumn.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrixColumn.CopyFrom(Cnc.Tool.Interop.TransformationMatrixColumn)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrixColumn.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrixColumn.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TransformationMatrixColumn">
            <summary> Defines the TransformationMatrixColumn tool class type. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAdaptiveItem.IsExtension">
            <summary> Gets or sets a value indicating whether this adaptive item is an extension </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAdaptiveItem.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAdaptiveItem.CopyFrom(Cnc.Tool.Interop.TlAdaptiveItem)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAdaptiveItem.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAdaptiveItem.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAdaptiveItem">
            <summary> Defines the TlAdaptiveItem tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.MoveComponent(System.Guid,System.Boolean)">
            <summary> Move the specified component to the next or previous connection on its parent. </summary>
            <param name="componentId"> Identifier for the component to move. </param>
            <param name="moveUp">	   True to move up, false to move down. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.CanMoveComponent(System.Guid,System.Boolean)">
            <summary> Determine if we can move the specified component. </summary>
            <param name="componentId"> Identifier for the component to investigate moving. </param>
            <param name="moveUp">	   True to check moving up, false for moving down. </param>
            <returns> True if we can move component, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetRootItemPtr">
            <summary> Gets the root item pointer. </summary>
            <returns> The root item pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetInsertItemIds">
            <summary> Gets insert item identifiers. </summary>
            <returns> The insert item identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetItemIds">
            <summary> Gets all identifiers of the assembly items contained within this component tree. </summary>
            <returns> The item identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetTurnHolders">
            <summary> Gets a collection of pointers to the turn holders defined on this tree. </summary>
            <returns> The turn holders. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.UpdateComponentItemProjectionLengthAdjustment(System.Guid,System.Double,System.Boolean)">
            <summary> Updates the projection length adjustment described by value. </summary>
            <param name="componentId">   Identifier for the component. </param>
            <param name="value">		 The value. </param>
            <param name="valueIsMetric"> True if value is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetComponentItemProjectionLengthAdjustment(System.Guid,System.Boolean)">
            <summary> Gets projection length adjustment. </summary>
            <param name="componentId">	    Identifier for the component. </param>
            <param name="getValueInMetric"> True to get value in metric. </param>
            <returns> The projection length adjustment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.UpdateComponentItemModelData(System.Guid,Cnc.Tool.Interop.TlGraphicsFile,System.String)">
            <summary> Updates the item model data. </summary>
            <param name="componentId">  Identifier for the component. </param>
            <param name="modelData">    Information describing the model. </param>
            <param name="geometryFile"> The name of the geometry file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.ApplyXformToParentConnection(System.Guid,System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Applies the given transform to the parent connection. </summary>
            <param name="componentId">   Identifier for the component. </param>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.ApplyXformToConnection(Cnc.Tool.Interop.TlConnection,System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Applies the given transform to the specified connection. </summary>
            <param name="connection">    The connection. </param>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.UpdateMachineSideConnectionXform(System.Guid,System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Updates the machine side connection transform. </summary>
            <param name="componentId">   Identifier for the component. </param>
            <param name="xform">		 The transform. </param>
            <param name="xformIsMetric"> True if transform is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.UpdateConnectionXform(Cnc.Tool.Interop.TlConnection,System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Updates the connection transform. </summary>
            <param name="connection">    The connection. </param>
            <param name="xform">		 The transform. </param>
            <param name="xformIsMetric"> True if transform is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.UpdateConnection(Cnc.Tool.Interop.TlConnection)">
            <summary> Updates the connection described by connection. </summary>
            <param name="connection"> The connection. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.RemoveWorkpieceSideConnection(System.Guid,System.Guid)">
            <summary> Removes the workpiece side connection. </summary>
            <param name="componentId">  Identifier for the component. </param>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.AddWorkpieceSideConnection(System.Guid,Cnc.Tool.Interop.TlConnection)">
            <summary> Adds a workpiece side connection to the component described by 'componentId'. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <param name="value">	   The connection. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetConnections">
            <summary> Gets the connections. </summary>
            <returns> The connections. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetComponentWorkpieceSideConnectionMapPtr(System.Guid)">
            <summary> Gets component workpiece side connection map pointer. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> Null if it fails, else the component workpiece side connection map pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetComponentMachineSideConnectionPtr(System.Guid)">
            <summary> Gets component machine side connection pointer. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> Null if it fails, else the component machine side connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetConnectionPtr(System.Guid)">
            <summary> Gets a const pointer to the connection described by connectionId. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> Null if it fails, else the connection. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetInsertConnectionPtr(System.Guid)">
            <summary>	Gets the connection for the insert described by insertId. </summary>
            <param name="insertId">	Identifier for the insert. </param>
            <returns>	Null if it fails, else the insert connection. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetInsertPtr(System.Guid)">
            <summary>	Gets a const pointer to the insert described by insertId. </summary>
            <param name="insertId">	Identifier for the insert. </param>
            <returns>	Null if it fails, else the insert. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetAssemblyInsertIds">
            <summary> Gets a sorted list of the identifiers of all assembly insert components currently in this tree. </summary>
            <returns> The sorted list of assembly insert identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetInserts">
            <summary> Gets a collection of const pointers to the inserts defined on this tree. </summary>
            <returns> The inserts. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.AddComponentOnConnection(System.Guid,Cnc.Tool.Interop.TlAssemblyComponent)">
            <summary> Attempts to add the given component onto the workpiece connection specified by the given identifier
		  provided that the specified connection exists and that there is not already a component on it. </summary>
            <param name="connectionId"> Identifier for the workpiece-side connection. </param>
            <param name="newComponent"> The new component. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.InsertComponentAbove(System.Guid,Cnc.Tool.Interop.TlAssemblyComponent)">
            <summary> Attempts to insert the given component in the tree above the component specified by the given identifier. </summary>
            <param name="componentId">  Identifier for the component to add above. </param>
            <param name="newComponent"> The new component to add. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.DuplicateComponent(System.Guid)">
            <summary>	Duplicates the component in the tree with the specified identifier. </summary>
            <param name="componentId">	Identifier for the component. </param>
            <returns>	The ID of the new component if successful, or GUID_NULL if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.DeleteComponentAndAllChildren(System.Guid)">
            <summary> Deletes the component and all children described by componentId. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.DeleteComponent(System.Guid)">
            <summary>	Deletes the component described by componentId. </summary>
            <param name="componentId">	Identifier for the component. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.UpdateComponentItem(System.Guid,Cnc.Tool.Interop.TlAssemblyItem)">
            <summary> Updates the item in the component in the tree described by componentId. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <param name="item">		   The item. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.UpdateComponent(Cnc.Tool.Interop.TlAssemblyComponent)">
            <summary>	Updates the component in the tree described by component. </summary>
            <param name="component">	The component. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetComponentPtrAttachedToConnection(System.Guid)">
            <summary> Gets a pointer to the component that is attached to the connection specified by the given identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> Null if it fails, else the component pointer attached to connection. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetComponentPtrOwningConnection(System.Guid)">
            <summary> Gets a pointer to the component that owns the connection specified by the given identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> Null if it fails, else the component pointer owning connection. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.HasComponentAtConnection(System.Guid)">
            <summary> Query if there is a component attached to the workpiece side connection specified by the given
		  identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> True if child component at connection, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetComponentItemId(System.Guid)">
            <summary> Gets component item identifier. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> The component item identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetComponentItemPtr(System.Guid)">
            <summary> Gets a pointer to the assembly item contained within the component described by the given identifier. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> Null if it fails, else the component item pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetComponentPtr(System.Guid)">
            <summary> Gets a pointer to the component described by the given identifier. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> Null if it fails, else the component pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetComponents">
            <summary> Gets the components in the tree. </summary>
            <returns> The components. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetMachineSideConnectionPtr">
            <summary> Gets a pointer to the machine side connection of the component tree. </summary>
            <returns> The machine side connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.SetAssemblyPtr(Cnc.Tool.Interop.TlToolAssembly)">
            <summary>	Sets the tool assembly pointer. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.GetAssemblyPtr">
            <summary>	Gets the tool assembly pointer. </summary>
            <returns>	The tool assembly pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.HasRoot">
            <summary> Tests if Root reference property is set. </summary>
            <returns> true if Root is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyComponentTree.Root">
            <summary> Gets or sets the root assembly component on this component tree. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.CopyFrom(Cnc.Tool.Interop.TlAssemblyComponentTree)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponentTree.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAssemblyComponentTree">
            <summary> Defines the TlAssemblyComponentTree tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlBoundaryGenerationParams.SetCalcHolderTol(System.Double,System.Boolean)">
            <summary> Sets CalcHolderTol property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlBoundaryGenerationParams.GetCalcHolderTol(System.Boolean)">
            <summary> Gets CalcHolderTol property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCalcHolderTol property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlBoundaryGenerationParams.CalcHolderTol">
            <summary> Holder Tolerance used in silhouette boundary calculation. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlBoundaryGenerationParams.SetCalcTol(System.Double,System.Boolean)">
            <summary> Sets CalcTol property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlBoundaryGenerationParams.GetCalcTol(System.Boolean)">
            <summary> Gets CalcTol property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCalcTol property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlBoundaryGenerationParams.CalcTol">
            <summary> Insert Tolerance used in silhouette boundary calculation. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlBoundaryGenerationParams.PlaneSense1">
            <summary> Direction of Plane 1 normal (true = cut plane normal, false = opposite).  Used only with OneCutPlaneSilhouette method/ </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlBoundaryGenerationParams.SetPlaneOffset2(System.Double,System.Boolean)">
            <summary> Sets PlaneOffset2 property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlBoundaryGenerationParams.GetPlaneOffset2(System.Boolean)">
            <summary> Gets PlaneOffset2 property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePlaneOffset2 property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlBoundaryGenerationParams.PlaneOffset2">
            <summary> Plane offset 2 </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlBoundaryGenerationParams.SetPlaneOffset1(System.Double,System.Boolean)">
            <summary> Sets PlaneOffset1 property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlBoundaryGenerationParams.GetPlaneOffset1(System.Boolean)">
            <summary> Gets PlaneOffset1 property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePlaneOffset1 property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlBoundaryGenerationParams.PlaneOffset1">
            <summary> Plane offset 1 </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlBoundaryGenerationParams.Method">
            <summary> Boundary generation method </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlBoundaryGenerationParams.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlBoundaryGenerationParams.CopyFrom(Cnc.Tool.Interop.TlBoundaryGenerationParams)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlBoundaryGenerationParams.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlBoundaryGenerationParams.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlBoundaryGenerationParams">
            <summary> Defines the TlBoundaryGenerationParams tool class type. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfiguration.MaterialFPTAdjust">
            <summary> Gets or sets the Material cutting speed percentage. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfiguration.MaterialSFMAdjust">
            <summary> Gets or sets the material feed per revolution percentage. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfiguration.SpindleSpeedUnits">
            <summary> Gets or sets the units of the spindle speed property. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfiguration.SpindleSpeed">
            <summary> Gets or sets the spindle speed for this configuration. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfiguration.PlungeRateUnits">
            <summary> Gets or sets the units of the plunge rate property. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfiguration.SetPlungeRate(System.Double,System.Boolean)">
            <summary> Sets PlungeRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfiguration.GetPlungeRate(System.Boolean)">
            <summary> Gets PlungeRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePlungeRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfiguration.PlungeRate">
            <summary> Gets or sets the plunge rate for this configuration. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfiguration.FeedRateUnits">
            <summary> Gets or sets the units of the feedrate property. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfiguration.SetFeedRate(System.Double,System.Boolean)">
            <summary> Sets FeedRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfiguration.GetFeedRate(System.Boolean)">
            <summary> Gets FeedRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFeedRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfiguration.FeedRate">
            <summary> Gets or sets the feed rate for this configuration. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfiguration.IndexMaterial">
            <summary> Gets or sets the cutting material index. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCuttingConfiguration.Coolant">
            <summary> Gets or sets the coolant for this configuration. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfiguration.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfiguration.CopyFrom(Cnc.Tool.Interop.TlCuttingConfiguration)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfiguration.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCuttingConfiguration.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlCuttingConfiguration">
            <summary> Defines the TlCuttingConfiguration tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.HasToolImage">
            <summary> Tests if ToolImage reference property is set. </summary>
            <returns> true if ToolImage is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.ToolImage">
            <summary> Gets or sets the tool image.  </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.HasCuttingConfiguration">
            <summary> Tests if CuttingConfiguration reference property is set. </summary>
            <returns> true if CuttingConfiguration is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.CuttingConfiguration">
            <summary> Gets or sets the cutting configuration.  </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.SetClearanceHeight(System.Double,System.Boolean)">
            <summary> Sets ClearanceHeight property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.GetClearanceHeight(System.Boolean)">
            <summary> Gets ClearanceHeight property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheClearanceHeight property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.ClearanceHeight">
            <summary> Gets or set the clearance height. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.SetClearanceWidth(System.Double,System.Boolean)">
            <summary> Sets ClearanceWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.GetClearanceWidth(System.Boolean)">
            <summary> Gets ClearanceWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheClearanceWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.ClearanceWidth">
            <summary> Gets or set the clearance width. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.ClearanceEndAngle">
            <summary> Gets or sets the clearance end angle. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.ClearanceSideAngle">
            <summary> Gets or sets the clearance side angle. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.SetCompRadius(System.Double,System.Boolean)">
            <summary> Sets CompRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.GetCompRadius(System.Boolean)">
            <summary> Gets CompRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCompRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.CompRadius">
            <summary> Gets or sets the compensation radius. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.CompQuadrant">
            <summary> Gets or sets the compensation quadrant.  </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.CompMethod">
            <summary> Gets or sets the compensation method. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.SetCompPointXlateY(System.Double,System.Boolean)">
            <summary> Sets CompPointXlateY property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.GetCompPointXlateY(System.Boolean)">
            <summary> Gets CompPointXlateY property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCompPointXlateY property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.CompPointXlateY">
            <summary> Gets or sets the Y portion of the compensation point translation. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.SetCompPointXlateX(System.Double,System.Boolean)">
            <summary> Sets CompPointXlateX property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.GetCompPointXlateX(System.Boolean)">
            <summary> Gets CompPointXlateX property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCompPointXlateX property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.CompPointXlateX">
            <summary> Gets or sets the X portion of the compensation point translation. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.IsFeedDirReversed">
            <summary> Gets or sets a value indicating whether the feed/plunge direction is reversed.  </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.SetHomePositionZ(System.Double,System.Boolean)">
            <summary> Sets HomePositionZ property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.GetHomePositionZ(System.Boolean)">
            <summary> Gets HomePositionZ property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheHomePositionZ property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.HomePositionZ">
            <summary> Gets or sets the home position Z value. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.SetHomePositionX(System.Double,System.Boolean)">
            <summary> Sets HomePositionX property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.GetHomePositionX(System.Boolean)">
            <summary> Gets HomePositionX property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheHomePositionX property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.HomePositionX">
            <summary> Gets or sets the home position X value. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.AssemblyInsertId">
            <summary> Gets or sets the assembly insert identifier. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.ToolBackOffset">
            <summary> Gets or sets the back offset value. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLatheDefinition.ToolOffset">
            <summary> Gets or sets the tool offset value. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.CopyFrom(Cnc.Tool.Interop.TlLatheDefinition)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLatheDefinition.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlLatheDefinition">
            <summary> Defines the TlLatheDefinition tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyConfiguration.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyConfiguration.CopyFrom(Cnc.Tool.Interop.TlAssemblyConfiguration)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyConfiguration.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyConfiguration.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAssemblyConfiguration">
            <summary> Defines the TlAssemblyConfiguration tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyTurnHolder.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyTurnHolder.CopyFrom(Cnc.Tool.Interop.TlAssemblyTurnHolder)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyTurnHolder.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyTurnHolder.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAssemblyTurnHolder">
            <summary> Defines the TlAssemblyTurnHolder tool class type. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTurnHolder.Type">
            <summary> The type of the holder </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTurnHolder.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTurnHolder.CopyFrom(Cnc.Tool.Interop.TlTurnHolder)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTurnHolder.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTurnHolder.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlTurnHolder">
            <summary> Defines the TlTurnHolder tool class type. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.CuttingSide">
            <summary> The handedness of the insert </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.Is3d">
            <summary> Gets or sets a value indicating whether the insert is a 3d insert </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.IsCustom">
            <summary> Is custom </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.MaterialName">
            <summary> Material name </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.IndexMaterial">
            <summary> Index material </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.IndexThickness">
            <summary> Index thickness </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.IndexCornerRadius">
            <summary> Index corner radius </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.IndexWidth">
            <summary> Width of the index </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.IndexICDiameter">
            <summary> Mastercam old-style lathe insert compatibility data </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.HasGrade">
            <summary> Tests if Grade reference property is set. </summary>
            <returns> true if Grade is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.Grade">
            <summary> The insert grade.  </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.SetThickness(System.Double,System.Boolean)">
            <summary> Sets Thickness property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.GetThickness(System.Boolean)">
            <summary> Gets Thickness property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheThickness property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.Thickness">
            <summary> Thickness </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.SetCornerRadius(System.Double,System.Boolean)">
            <summary> Sets CornerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.GetCornerRadius(System.Boolean)">
            <summary> Gets CornerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCornerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.CornerRadius">
            <summary> Corner radius </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.SetWidth(System.Double,System.Boolean)">
            <summary> Sets Width property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.GetWidth(System.Boolean)">
            <summary> Gets Width property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.Width">
            <summary> Width </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.SetLength(System.Double,System.Boolean)">
            <summary> Sets Length property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.GetLength(System.Boolean)">
            <summary> Gets Length property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.Length">
            <summary> Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.SetICDiameter(System.Double,System.Boolean)">
            <summary> Sets ICDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.GetICDiameter(System.Boolean)">
            <summary> Gets ICDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheICDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.ICDiameter">
            <summary> IC diameter </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlInsert.AnsiShapeCode">
            <summary> ANSI shape code </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.CopyFrom(Cnc.Tool.Interop.TlInsert)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlInsert.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlInsert">
            <summary> Defines the TlInsert tool class type. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolAssemblyComponentView.m_pNativeInstance">
            <summary>	The native pointer to the proxy containing the native shared pointer instance. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolAssemblyComponentView.m_IsDisposed">
            <summary>	Flag indicating whether this instance has been disposed. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.UpdateProjectionLengthAdjustment(System.Double,System.Boolean)">
            <summary>	Updates the projection length adjustment described by value. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	True if value is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.GetProjectionLengthAdjustment(System.Boolean)">
            <summary>	Gets projection length adjustment. </summary>
            <param name="getValueInMetric">	True to get value in metric. </param>
            <returns>	The projection length adjustment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.UpdateItemModelData(Cnc.Tool.Interop.TlGraphicsFile,System.String)">
            <summary> Updates the item model data. </summary>
            <param name="modelData">    Information describing the model. </param>
            <param name="geometryFile"> The name of the geometry file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.UpdateItem(Cnc.Tool.Interop.TlAssemblyItem)">
            <summary> Updates the underlying assembly item with the given value. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.GetItemPtr">
            <summary> Gets a pointer to the underlying assembly item. </summary>
            <returns> Null if it fails, else the item pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.UpdateComponent(Cnc.Tool.Interop.TlAssemblyComponent)">
            <summary> Updates the component described by value. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.GetComponentPtr">
            <summary> Gets component pointer. </summary>
            <returns> Null if it fails, else the component pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.ApplyXformToParentConnection(System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Applies the given transform to the parent connection. </summary>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.ApplyXformToConnection(Cnc.Tool.Interop.TlConnection,System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Applies the given transform to the specified connection. </summary>
            <param name="connection">    The connection. </param>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.UpdateMachineSideConnectionXform(System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary>	Updates the machine side connection transform described by xform. </summary>
            <param name="xform">			The updated transform. </param>
            <param name="xformIsMetric">	True if transform is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.UpdateConnectionXform(Cnc.Tool.Interop.TlConnection,System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Updates the connection transform. </summary>
            <param name="connection">    The connection. </param>
            <param name="xform">		 The transform. </param>
            <param name="xformIsMetric"> True if transform is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.HasChildComponentAtConnection(System.Guid)">
            <summary> Query if there is a child component attached to the workpiece side connection specified by the given
		  identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> True if child component at connection, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.RemoveWorkpieceSideConnection(System.Guid)">
            <summary> Removes the workpiece side connection described by value. </summary>
            <param name="connectionId"> The connection identifier. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.UpdateConnection(Cnc.Tool.Interop.TlConnection)">
            <summary>	Updates the connection described by value. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.AddWorkpieceSideConnection(Cnc.Tool.Interop.TlConnection)">
            <summary> Adds a workpiece side connection to this component. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.GetWorkpieceSideConnectionMapPtr">
            <summary> Gets a pointer to the map of workpiece side connections for this component. </summary>
            <returns> Null if it fails, else the workpiece side connections. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.GetParentConnectionPtr">
            <summary> Gets the parent connection pointer. </summary>
            <returns> Null if it fails, else the parent connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.GetMachineSideConnectionPtr">
            <summary> Gets machine side connection pointer. </summary>
            <returns> Null if it fails, else the machine side connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.GetItemId">
            <summary> Gets item identifier. </summary>
            <returns> The item identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.GetComponentId">
            <summary> Gets component identifier. </summary>
            <returns> The component identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.SetToolAssembly(Cnc.Tool.Interop.TlToolAssembly)">
            <summary>	Sets the assembly. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.GetToolAssembly">
            <summary>	Gets the assembly. </summary>
            <returns>	The assembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.GetNativeObjectPtr">
            <summary> Gets native object pointer. </summary>
            <returns> The native object pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.Finalize">
            <summary> Finaliser. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.#ctor(Cnc.Tool.Interop.TlToolAssembly,System.Guid)">
            <summary> Constructor to create a view of the 3D tool assembly for a specific assembly component. </summary>
            <param name="assembly">    The assembly. </param>
            <param name="componentId"> Identifier for the assembly component. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.#ctor(Cnc.Tool.Interop.TlToolAssembly)">
            <summary> Constructor to create a view of the 3D tool assembly in machine position. </summary>
            <param name="assembly"> The assembly. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyComponentView.#ctor(TlToolAssemblyComponentViewProxy*)">
            <summary> Constructor to create a view of the 3D tool assembly in machine position. </summary>
            <param name="pProxy"> An owning native pointer to a proxy wrapper around a shared pointer to a native instance. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolAssemblyComponentView">
            <summary> A specific assembly component view of a TlToolAssembly instance. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.m_pNativeInstance">
            <summary>	The native pointer to the proxy containing the native shared pointer instance. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.m_IsDisposed">
            <summary>	Flag indicating whether this instance has been disposed. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.CopyToolImageFromPrimaryDefinition">
            <summary>	Copies the tool image from primary definition. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.IsMultiDefinition">
            <summary>	Gets whether the tool is a multi definition tool. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.UpdateInsertType(Cnc.Tool.Interop.TlToolAssemblyType,System.Boolean)">
            <summary>	Updates the type of the insert and associated definition cutting parameters. </summary>
            <param name="type">				The type. </param>
            <param name="copyCutParams">	True to copy existing cut parameters, false to use defaults. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.UpdateCuttingPlaneXform(System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary>	Updates the cutting plane transform described by xform. </summary>
            <param name="xform">			The transform. </param>
            <param name="xformIsMetric">	True if transform is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.UpdateInsertConnectionXform(System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary>	Updates the insert connection transform described by xform. </summary>
            <param name="xform">			The transform. </param>
            <param name="xformIsMetric">	True if transform is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.UpdateMachineSideConnectionXform(System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary>	Updates the machine side connection transform described by xform. </summary>
            <param name="xform">			The updated transform. </param>
            <param name="xformIsMetric">	True if transform is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.UpdateCompPointTranslation(System.Windows.Point,System.Boolean)">
            <summary>	Updates the compensation point translation described by value. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	True if value is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetCompPointTranslation(System.Boolean)">
            <summary>	Gets compensation point translation. </summary>
            <param name="getValueInMetric">	True to get value in metric. </param>
            <returns>	The compensation point translation. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.SetToolAngle(System.Double)">
            <summary>	Sets tool angle as if from the point of view of the current definition. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetToolAngle">
            <summary>	Gets the tool angle from the point of view of the current definition. </summary>
            <returns>	The tool angle. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.SetCompQuadrant(Cnc.Tool.Interop.TlCompensationPositionState)">
            <summary>	Sets compensation quadrant. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetCompQuadrant">
            <summary>	Gets compensation quadrant. </summary>
            <returns>	The compensation quadrant. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.SetNonCutProfile(Cnc.Tool.Interop.TlProfile,System.Boolean,System.Windows.Point,System.Boolean)">
            <summary>	Sets the cutting profile. </summary>
            <param name="profile">			 	The profile, which is expected to be at the definition view position. </param>
            <param name="profileIsMetric">   	True if the profile is in metric units. Defaults to assuming
									system units. </param>
            <param name="extentsTranslation">	The extents translation to optionally remove from the profile. </param>
            <param name="ignoreToolAngle">  	True to ignore tool angle. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetNonCutProfile(System.Boolean,System.Windows.Point,System.Boolean)">
            <summary>	Gets the non cutting profile in the specified units. </summary>
            <param name="inMetric">			 	True to get the profile in metric. Defaults to retrieving the
									profile in system units. </param>
            <param name="extentsTranslation">	The extents translation to optionally apply to the result profile. </param>
            <param name="ignoreToolAngle">   	True to ignore tool angle. </param>
            <returns>	The cutting profile. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.SetCutProfile(Cnc.Tool.Interop.TlProfile,System.Boolean,System.Windows.Point,System.Boolean)">
            <summary>	Sets the cutting profile. </summary>
            <param name="profile">			 	The profile, which is expected to be at the definition view position. </param>
            <param name="profileIsMetric">   	True if the profile is in metric units. Defaults to assuming
									system units. </param>
            <param name="extentsTranslation">	The extents translation to optionally remove from the profile. </param>
            <param name="ignoreToolAngle">   	True to ignore tool angle. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetCutProfile(System.Boolean,System.Windows.Point,System.Boolean)">
            <summary>	Gets the cutting profile in the specified units. </summary>
            <param name="inMetric">			 	True to get the profile in metric. Defaults to retrieving the
									profile in system units. </param>
            <param name="extentsTranslation">	The extents translation to optionally apply to the result profile. </param>
            <param name="ignoreToolAngle">   	True to ignore tool angle. </param>
            <returns>	The cutting profile. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.UpdateCuttingParams(Cnc.Tool.Interop.TlCuttingConfiguration)">
            <summary>	Updates the cutting parameters described by value. </summary>
            <param name="value">	The value. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetCuttingParamsPtr">
            <summary>	Gets cutting parameters pointer. </summary>
            <returns>	Null if it fails, else the cutting parameters pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.UpdateDefinition(Cnc.Tool.Interop.TlLatheDefinition)">
            <summary> Updates the definition described by value. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetPrimaryInsertDefinition">
            <summary> Gets the primary insert definition. </summary>
            <returns> Null if it fails, else the primary insert definition. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetDefinitionPtr">
            <summary> Gets definition pointer. </summary>
            <returns> Null if it fails, else the definition pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.UpdateAssemblyHolder(Cnc.Tool.Interop.TlAssemblyTurnHolder)">
            <summary> Updates the assembly holder described by value. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetParentAssemblyHolderPtr">
            <summary>	Gets the parent assembly holder pointer. </summary>
            <returns>	Null if it fails, else the parent assembly holder pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.UpdateHolder(Cnc.Tool.Interop.TlTurnHolder)">
            <summary> Updates the holder described by value. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetHolderPtr">
            <summary> Gets holder pointer. </summary>
            <returns> Null if it fails, else the holder pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.UpdateAssemblyInsert(Cnc.Tool.Interop.TlAssemblyInsert)">
            <summary> Updates the insert described by value. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetAssemblyInsertPtr">
            <summary> Gets insert pointer. </summary>
            <returns> Null if it fails, else the insert pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.UpdateInsert(Cnc.Tool.Interop.TlInsert)">
            <summary> Updates the insert described by value. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetInsertPtr">
            <summary> Gets insert pointer. </summary>
            <returns> Null if it fails, else the insert pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.UpdateConnectionXform(Cnc.Tool.Interop.TlConnection,System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Updates the connection transform. </summary>
            <param name="connection">    The connection. </param>
            <param name="xform">		 The transform. </param>
            <param name="xformIsMetric"> True if transform is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.UpdateConnection(Cnc.Tool.Interop.TlConnection)">
            <summary> Updates the connection described by value. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetInsertConnectionPtr">
            <summary> Gets insert connection pointer. </summary>
            <returns> Null if it fails, else the insert connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetMachineSideConnectionPtr">
            <summary> Gets machine side connection pointer. </summary>
            <returns> Null if it fails, else the machine side connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.IsDefinitionUsingExistingToolOffsetNumber(System.Boolean,System.Boolean)">
            <summary> Checks if the definition's tool offset or back-offset number is equal to any other definition's tool
		  offset or back-offset number on the assembly. </summary>
            <param name="offsetUsed">	  True if offset used. </param>
            <param name="backOffsetUsed"> True if back offset used. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.IsPrimaryInsert">
            <summary> Query if this object is a view of a definition on the primary insert. </summary>
            <returns> True if primary insert, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.IsPrimaryInsertDefinition">
            <summary> Query if this object is a view of the primary lathe definition for the definition's insert. </summary>
            <returns> True if primary insert definition, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.IsPrimaryDefinition">
            <summary> Query if this object is a view of the primary lathe definition. </summary>
            <returns> True if primary definition, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.SetToolAssemblyWithNewSlots(Cnc.Tool.Interop.TlToolAssembly)">
            <summary> Specialized version of setting the assembly where slot changes are assumed and the definition view is
		  maintained if possible. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.SetToolAssembly(Cnc.Tool.Interop.TlToolAssembly)">
            <summary>	Sets the assembly. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetToolAssembly">
            <summary>	Gets the assembly. </summary>
            <returns>	The assembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetIsMetric">
            <summary>	Gets a value indicating whether the assembly is metric. </summary>
            <returns>	True if the assembly is defined in metric units, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.SetActiveDefinition(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Sets the active definition. </summary>
            <param name="slot">	The existing slot. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.SetSlot(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Sets the slot number for this definition view. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetSlot">
            <summary>	Gets the slot. </summary>
            <returns>	The slot. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetID">
            <summary>	Gets the identifier. </summary>
            <returns>	The identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetTlToolAssemblyType">
            <summary>	Gets the type. </summary>
            <returns>	The type. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.Clone">
            <summary>	Makes a deep copy of this object. </summary>
            <returns>	A copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.GetNativeObjectPtr">
            <summary> Gets native object pointer. </summary>
            <returns> The native object pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.op_Equality(Cnc.Tool.Interop.TlToolAssemblyLatheDefView)">
            <summary>	Equality operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.Finalize">
            <summary> Finaliser. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.#ctor(Cnc.Tool.Interop.TlToolAssembly,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Constructor to create a view of the 3D tool assembly for a specific lathe definition defined on it.
</summary>
            <param name="assembly">		 	The assembly. </param>
            <param name="definitionSlot">	The lathe definition slot. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.#ctor(Cnc.Tool.Interop.TlToolAssembly)">
            <summary>	Constructor to create a view of the 3D tool assembly in tool change position. </summary>
            <param name="assembly">	The assembly. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssemblyLatheDefView.#ctor(TlToolAssemblyLatheDefViewProxy*)">
            <summary> Constructor to create a view of the 3D tool assembly in tool change position. </summary>
            <param name="pProxy"> An owning native pointer to a proxy wrapper around a shared pointer to a native instance. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolAssemblyLatheDefView">
            <summary>	A lathe definition view of a TlToolAssembly instance. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnectionMap.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnectionMap.CopyFrom(Cnc.Tool.Interop.TlConnectionMap)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnectionMap.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnectionMap.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlConnectionMap">
            <summary> Defines the TlConnectionMap tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.GetHolderIDList">
            <summary> Gets the holder identifier list. </summary>
            <returns> The holder identifier list. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.ResetAllGuids">
            <summary> Resets all guids. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.BuildComposite">
            <summary>	Builds the composite. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.RetrieveHolderNode(System.Guid,Cnc.Tool.Interop.TlHolderTreeNode)">
            <summary> Retrieve a specific holder node pointer. </summary>
            <param name="id">   The identifier. </param>
            <param name="root"> The root. </param>
            <returns> . </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.GetHolderTreeRoot">
            <summary> Gets the holder tree root node. </summary>
            <returns> The holder tree root node. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.ModifyToolInsertion(System.Double)">
            <summary> The Assembly tool projection was changed, so modify the main holder's CScalar to account for that. </summary>
            <param name="insertion"> The insertion. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.AddSegment(System.Double,System.Double,System.Double)">
            <summary> Adds a holder segment. </summary>
            <param name="topWidth">    Width of the top. </param>
            <param name="bottomWidth"> Width of the bottom. </param>
            <param name="height">	   The height. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.GetHolderNodeList">
            <summary> Gets const holder node list. Order is from closest to the tool to the root. </summary>
            <returns> The holder node list. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.ReplaceChildHolder(System.Int32,Cnc.Tool.Interop.TlHolder)">
            <summary> Replaces an existing child holder. </summary>
            <param name="index">    Zero-based index of the children holders. The root is index 0. </param>
            <param name="newChild"> The new child. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.AddHolder(System.Guid,Cnc.Tool.Interop.TlHolder,Cnc.Tool.Interop.TransformationMatrix,Cnc.Tool.Interop.TransformationMatrix,Cnc.Tool.Interop.TransformationMatrix,System.Double)">
            <summary> Adds a holder. </summary>
            <param name="parentID">   Identifier for the parent. </param>
            <param name="holder">	  If non-null, the holder. </param>
            <param name="mTransform"> If non-null, the transform. </param>
            <param name="uTransform"> If non-null, the transform. </param>
            <param name="cTransform"> If non-null, the transform. </param>
            <param name="cScalar">    The scalar. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderComposite.MainHolderID">
            <summary> Main Holder Identifier </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.CopyFrom(Cnc.Tool.Interop.TlHolderComposite)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderComposite.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolderComposite">
            <summary> Defines the TlHolderComposite tool class type. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderTreeNode.m_children">
            <summary>	The children. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderTreeNode.m_Insertion">
            <summary>	The Insertion. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderTreeNode.m_cScalar">
            <summary>	The scalar. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderTreeNode.m_cTransformation">
            <summary>	The c transformation. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderTreeNode.m_uTransformation">
            <summary>	The u transformation. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderTreeNode.m_mTransformation">
            <summary>	The m transformation. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderTreeNode.m_holder">
            <summary>	The holder. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.InsertsOverChild">
            <summary> Determines if the holder inserts over its child. </summary>
            <returns> true if it inserts over its child, false if it inserts into its child. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.GetChildren">
            <summary> Gets the children of this item. </summary>
            <returns> The children. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.SetHolder(Cnc.Tool.Interop.TlHolder)">
            <summary> Sets a holder. </summary>
            <param name="holder"> The holder. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.GetHolder">
            <summary> Gets the holder. </summary>
            <returns> The holder. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.AddChild(Cnc.Tool.Interop.TlHolderTreeNode)">
            <summary> Adds a child. </summary>
            <param name="child"> The child. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.CopyFrom(Cnc.Tool.Interop.TlHolderTreeNode)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.#ctor(Cnc.Tool.Interop.TlHolderTreeNode!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="item"> [in,out] The item. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderTreeNode.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolderTreeNode">
            <summary> Defines a composite holder tree node. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TransformationMatrix.default(System.Int32)">
            <summary> Array indexer operator. </summary>
            <param name="i"> Zero-based index of the. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrix.#ctor(Cnc.Tool.Interop.TransformationMatrixColumn,Cnc.Tool.Interop.TransformationMatrixColumn,Cnc.Tool.Interop.TransformationMatrixColumn,Cnc.Tool.Interop.TransformationMatrixColumn)">
            <summary> Parameterized constructor. </summary>
            <param name="a"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="b"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="c"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="d"> The const TransformationMatrixColumn &amp; to process. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrix.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrix.CopyFrom(Cnc.Tool.Interop.TransformationMatrix)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrix.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TransformationMatrix.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TransformationMatrix">
            <summary> Defines the TransformationMatrix tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.SetWidth(System.Double,System.Boolean)">
            <summary> Sets Width property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.GetWidth(System.Boolean)">
            <summary> Gets Width property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlConnection.Width">
            <summary> Gets or sets the width of the connection. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.SetThickness(System.Double,System.Boolean)">
            <summary> Sets Thickness property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.GetThickness(System.Boolean)">
            <summary> Gets Thickness property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheThickness property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlConnection.Thickness">
            <summary> Gets or sets the thickness of the connection. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlConnection.IsRound">
            <summary> Gets or sets a value indicating whether the connection is round or square. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlConnection.Locator">
            <summary> Gets or sets the locator for the connection defined relative to the parent origin. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlConnection.Size">
            <summary> Gets or sets the connection size string. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlConnection.Type">
            <summary> Gets or sets the connection type string. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.CopyFrom(Cnc.Tool.Interop.TlConnection)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlConnection.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlConnection">
            <summary> Defines the TlConnection tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlWireframeGenerator.Generate(Cnc.Tool.Interop.I3dLTool)">
            <summary>	Generates wireframe for the tool. </summary>
            <param name="lTool">	The tool. </param>
            <returns>	A Result. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlWireframeGenerator.Generate(Cnc.Tool.Interop.TlToolAssemblyLatheDefView)">
            <summary>	Generates the wireframe for the lathe definition view. </summary>
            <param name="latheDefView">	The lathe definition view. </param>
            <returns>	A Result. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlWireframeGenerator.Generate(Cnc.Tool.Interop.TlToolAssembly)">
            <summary>	Generates the wireframe for the tool assembly. </summary>
            <param name="toolAssembly">	The tool assembly. </param>
            <returns>	A map container slot numbers and their wireframe results. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.TlWireframeGenerator">
            <summary> A wireframe generator for use with 3d tool assemblies. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlWireframeGeneratorResult.validationResultCode">
            <summary> The total boundary validation result code. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlWireframeGeneratorResult.nonCutResultCode">
            <summary> The non-cutting boundary result code. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlWireframeGeneratorResult.cutResultCode">
            <summary> The cutting boundary result code. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlWireframeGeneratorResult">
            <summary> Encapsulates the result of generating wireframe. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlWireframeGeneratorResultCode">
            <summary> Values that represent wireframe generator result codes. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlWireframeGeneratorResultCode.BoundariesDoNotTouch">
            <summary> An enum constant representing the boundaries do not touch option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlWireframeGeneratorResultCode.OffsetContourFailed">
            <summary> An enum constant representing a failure to generate an offset contour of the boundary. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlWireframeGeneratorResultCode.OuterBoundaryFailed">
            <summary> An enum constant representing a failure to find the outer boundary of the generated boundary. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlWireframeGeneratorResultCode.SilhouetteBndyFailed">
            <summary> An enum constant representing a failure to generate a silhouette boundary. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlWireframeGeneratorResultCode.CPlaneCreationFailed">
            <summary> An enum constant representing a failure to create a construction plane. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlWireframeGeneratorResultCode.NoSolids">
            <summary> An enum constant representing a failure because of there being no solids given to generate a boundary from. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlWireframeGeneratorResultCode.NoError">
            <summary> An enum constant representing the no error option. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAdaptiveItem.DoConvertUnits(System.Boolean)">
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlAdaptiveItem.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAdaptiveItem.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAdaptiveItem.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.UpdateProjectionLengthAdjustment(System.Double,System.Boolean)">
            <summary>	Updates the projection length adjustment described by value. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	(Optional) True if value is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.GetProjectionLengthAdjustment(System.Boolean)">
            <summary>	Gets projection length adjustment. </summary>
            <param name="getValueInMetric">	(Optional) True to get value in metric. </param>
            <returns>	The projection length adjustment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.UpdateItemModelData(Cnc.Tool.TlGraphicsFile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Updates the item model data. </summary>
            <param name="modelData">    Information describing the model. </param>
            <param name="geometryFile"> The name of the geometry file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.UpdateItem(Cnc.Tool.TlAssemblyItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the underlying assembly item with the given value. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.GetItemPtr">
            <summary> Gets a pointer to the underlying assembly item. </summary>
            <returns> Null if it fails, else the item pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.UpdateComponent(Cnc.Tool.TlAssemblyComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the component described by value. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.GetComponentPtr">
            <summary> Gets component pointer. </summary>
            <returns> Null if it fails, else the component pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.ApplyXformToParentConnection(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Applies the given transform to the parent connection. </summary>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> (Optional) True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.ApplyXformToConnection(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Applies the given transform to the specified connection. </summary>
            <param name="connection">    The connection. </param>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> (Optional) True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.UpdateMachineSideConnectionXform(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Updates the machine side connection transform. </summary>
            <param name="xform">		 The transform. </param>
            <param name="xformIsMetric"> (Optional) True if transform is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.UpdateConnectionXform(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Updates the connection transform. </summary>
            <param name="connection">   	The connection. </param>
            <param name="xform">			The transform. </param>
            <param name="xformIsMetric">	(Optional) True if transform is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.HasChildComponentAtConnection(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if there is a child component attached to the workpiece side connection specified by the given
		  identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> True if child component at connection, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.RemoveWorkpieceSideConnection(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Removes the workpiece side connection described by value. </summary>
            <param name="connectionId"> The connection identifier. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.UpdateConnection(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the connection described by value. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.AddWorkpieceSideConnection(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a workpiece side connection to this component. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.GetWorkpieceSideConnectionMapPtr">
            <summary> Gets a pointer to the map of workpiece side connections for this component. </summary>
            <returns> Null if it fails, else the workpiece side connections. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.GetParentConnectionPtr">
            <summary> Gets the parent connection pointer. </summary>
            <returns> Null if it fails, else the parent connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.GetMachineSideConnectionPtr">
            <summary> Gets machine side connection pointer. </summary>
            <returns> Null if it fails, else the machine side connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.GetItemId">
            <summary> Gets item identifier. </summary>
            <returns> The item identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.GetComponentId">
            <summary> Gets component identifier. </summary>
            <returns> The component identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.SetToolAssembly(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the assembly. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.GetToolAssembly">
            <summary>	Gets the assembly. </summary>
            <returns>	The assembly. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.#ctor(Cnc.Tool.TlToolAssembly,Cnc.Tool.TlID)">
            <summary> Constructor to create a view of the 3D tool assembly for a specific assembly component. </summary>
            <param name="assembly">    The assembly. </param>
            <param name="componentId"> Identifier for the assembly component. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyComponentView.#ctor(Cnc.Tool.TlToolAssembly)">
            <summary> Constructor to create a view of the 3D tool assembly in machine position. </summary>
            <param name="assembly"> The assembly. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.CopyToolImageFromPrimaryDefinition">
            <summary>	Copies the tool image from primary definition. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.IsMultiDefinition">
            <summary>	Gets whether the tool is a multi definition tool. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.UpdateInsertType(TlToolAssemblyType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Updates the type of the insert and associated definition cutting parameters. </summary>
            <param name="type">				The type. </param>
            <param name="copyCutParams">	(Optional) True to copy existing cut parameters, false to use defaults. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.UpdateCuttingPlaneXform(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Updates the cutting plane transform described by xform. </summary>
            <param name="xform">			The transform. </param>
            <param name="xformIsMetric">	(Optional) True if transform is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.UpdateInsertConnectionXform(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Updates the insert connection transform described by xform. </summary>
            <param name="xform">			The transform. </param>
            <param name="xformIsMetric">	(Optional) True if transform is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.UpdateMachineSideConnectionXform(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Updates the machine side connection transform described by xform. </summary>
            <param name="xform">			The updated transform. </param>
            <param name="xformIsMetric">	(Optional) True if transform is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.UpdateCompPointTranslation(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Updates the compensation point translation described by value. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	(Optional) True if value is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetCompPointTranslation(System.Boolean)">
            <summary>	Gets compensation point translation. </summary>
            <param name="getValueInMetric">	(Optional) True to get value in metric. </param>
            <returns>	The compensation point translation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.SetToolAngle(System.Double)">
            <summary>	Sets tool angle as if from the point of view of the current definition. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetToolAngle">
            <summary>	Gets the tool angle from the point of view of the current definition. </summary>
            <returns>	The tool angle. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.SetCompQuadrant(TlCompensationPositionState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets compensation quadrant. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetCompQuadrant">
            <summary>	Gets compensation quadrant. </summary>
            <returns>	The compensation quadrant. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.SetNonCutProfile(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Sets the cutting profile. </summary>
            <param name="profile">			 	The profile, which is expected to be at the definition view position. </param>
            <param name="profileIsMetric">   	(Optional) True if the profile is in metric units. Defaults to assuming
									system units. </param>
            <param name="extentsTranslation">	(Optional) The extents translation to optionally remove from the profile. </param>
            <param name="ignoreToolAngle">  	(Optional) True to ignore tool angle. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetNonCutProfile(System.Boolean,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Gets the non cutting profile in the specified units. </summary>
            <param name="inMetric">			 	(Optional) True to get the profile in metric. Defaults to retrieving the
									profile in system units. </param>
            <param name="extentsTranslation">	(Optional) The extents translation to optionally apply to the result profile. </param>
            <param name="ignoreToolAngle">   	(Optional) True to ignore tool angle. </param>
            <returns>	The cutting profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.SetCutProfile(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Sets the cutting profile. </summary>
            <param name="profile">			 	The profile, which is expected to be at the definition view position. </param>
            <param name="profileIsMetric">   	(Optional) True if the profile is in metric units. Defaults to assuming
									system units. </param>
            <param name="extentsTranslation">	(Optional) The extents translation to optionally remove from the profile. </param>
            <param name="ignoreToolAngle">   	(Optional) True to ignore tool angle. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetCutProfile(System.Boolean,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Gets the cutting profile in the specified units. </summary>
            <param name="inMetric">			 	(Optional) True to get the profile in metric. Defaults to retrieving the
									profile in system units. </param>
            <param name="extentsTranslation">	(Optional) The extents translation to optionally apply to the result profile. </param>
            <param name="ignoreToolAngle">   	(Optional) True to ignore tool angle. </param>
            <returns>	The cutting profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.UpdateCuttingParams(Cnc.Tool.TlCuttingConfiguration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the cutting parameters described by value. </summary>
            <param name="value">	The value. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetCuttingParamsPtr">
            <summary>	Gets cutting parameters pointer. </summary>
            <returns>	Null if it fails, else the cutting parameters pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.UpdateDefinition(Cnc.Tool.TlLatheDefinition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the definition described by value. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetPrimaryInsertDefinition">
            <summary>	Gets the primary insert definition. </summary>
            <returns>	Null if it fails, else the primary insert definition. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetDefinitionPtr">
            <summary>	Gets definition pointer. </summary>
            <returns>	Null if it fails, else the definition pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.UpdateAssemblyHolder(Cnc.Tool.TlAssemblyTurnHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the assembly holder described by value. </summary>
            <param name="value">	The value. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetParentAssemblyHolderPtr">
            <summary>	Gets the parent assembly holder pointer. </summary>
            <returns>	Null if it fails, else the parent assembly holder pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.UpdateHolder(Cnc.Tool.TlTurnHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the holder described by value. </summary>
            <param name="value">	The value. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetHolderPtr">
            <summary>	Gets the parent holder item pointer. </summary>
            <returns>	Null if it fails, else the parent holder item pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.UpdateAssemblyInsert(Cnc.Tool.TlAssemblyInsert!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the insert described by value. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetAssemblyInsertPtr">
            <summary>	Gets insert pointer. </summary>
            <returns>	Null if it fails, else the insert pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.UpdateInsert(Cnc.Tool.TlInsert!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the insert described by value. Adds the insert if it doesn't already exist. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetInsertPtr">
            <summary>	Gets insert pointer. </summary>
            <returns>	Null if it fails, else the insert pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.UpdateConnectionXform(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Updates the connection transform. </summary>
            <param name="connection">   	The connection. </param>
            <param name="xform">			The transform. </param>
            <param name="xformIsMetric">	(Optional) True if transform is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.UpdateConnection(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the connection described by value. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetInsertConnectionPtr">
            <summary>	Gets insert connection pointer. </summary>
            <returns>	Null if it fails, else the insert connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetMachineSideConnectionPtr">
            <summary>	Gets machine side connection pointer. </summary>
            <returns>	Null if it fails, else the machine side connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.IsDefinitionUsingExistingToolOffsetNumber(System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Checks if the definition's tool offset or back-offset number is equal to any other definition's tool offset or
back-offset number on the assembly.
</summary>
            <param name="offsetUsed">	 	True if offset used. </param>
            <param name="backOffsetUsed">	True if back offset used. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.IsPrimaryInsert">
            <summary>	Query if this object is a view of a definition on the primary insert. </summary>
            <returns>	True if primary insert, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.IsPrimaryInsertDefinition">
            <summary>	Query if this object is a view of the primary lathe definition for the definition's insert. </summary>
            <returns>	True if primary insert definition, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.IsPrimaryDefinition">
            <summary>	Query if this object is a view of the primary lathe definition. </summary>
            <returns>	True if primary definition, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.SetToolAssemblyWithNewSlots(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Specialized version of setting the assembly where slot changes are assumed and the definition view is maintained
if possible.
</summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.SetToolAssembly(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the assembly. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetToolAssembly">
            <summary>	Gets the assembly. </summary>
            <returns>	The assembly. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetIsMetric">
            <summary>	Gets a value indicating whether the assembly is metric. </summary>
            <returns>	True if the assembly is defined in metric units, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.SetActiveDefinition(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Sets the active definition. </summary>
            <param name="slot">	The existing slot. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.SetSlot(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Sets the slot number for this definition view. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetSlot">
            <summary>	Gets the slot. </summary>
            <returns>	The slot. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetID">
            <summary>	Gets the identifier. </summary>
            <returns>	The identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.GetType">
            <summary>	Gets the type. </summary>
            <returns>	The type. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.Clone">
            <summary>	Makes a deep copy of this object. </summary>
            <returns>	A copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.op_Equality(Cnc.Tool.TlToolAssemblyLatheDefView!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Equality operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.#ctor(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Constructor to create a view of the 3D tool assembly for a specific lathe definition defined on it.
</summary>
            <param name="assembly">		 	The assembly. </param>
            <param name="definitionSlot">	The lathe definition slot. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssemblyLatheDefView.#ctor(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Constructor to create a view of the 3D tool assembly in tool change position. </summary>
            <param name="assembly">	The assembly. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyTurnHolder.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyTurnHolder.GetHolderPtr">
            <summary>	Gets a const pointer to the holder. </summary>
            <returns>	The pointer to the holder, nullptr if invalid. </returns>
            <summary>	Gets a const pointer to the holder. </summary>
            <returns>	The pointer to the holder, nullptr if invalid. </returns>
        </member>
        <member name="T:Cnc.Tool.TlTurnHolder.TlTurnHolderDeserializationImpl">
            <summary>	A stationary component configuration deserialization implementation. </summary>
            <summary>	A stationary component configuration deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlTurnHolder.DoConvertUnits(System.Boolean)">
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlTurnHolder.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTurnHolder.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlTurnHolder.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlTurnHolder.#ctor">
            <summary>	Default constructor. </summary>
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlWireframeGenerator.Generate(Cnc.Tool.ILTool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Generates wireframe for the tool. </summary>
            <param name="lTool">	The tool. </param>
            <returns>	A Result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWireframeGenerator.Generate(Cnc.Tool.TlToolAssemblyLatheDefView*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Generates the wireframe for the lathe definition view. </summary>
            <param name="latheDefView">	The lathe definition view. </param>
            <returns>	A Result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlWireframeGenerator.Generate(Cnc.Tool.TlToolAssembly*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Generates the wireframe for the tool assembly. </summary>
            <param name="toolAssembly">	The tool assembly. </param>
            <returns>	A Result. </returns>
        </member>
        <member name="T:Cnc.Tool.TlWireframeGenerator.Result">
            <summary>	A result set. </summary>
        </member>
        <member name="T:Cnc.Tool.TlWireframeGenerator.ResultCode">
            <summary>	Values that represent result codes. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.MergeCompositeProfiles(std.shared_ptr&lt;Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary>	Merges composite node profiles. </summary>
            <param name="currentProfile">	The current profile. </param>
            <param name="currentNode">   	The current node. </param>
            <param name="insertion">	 	The insertion. </param>
            <returns>	A merged profile. </returns>
            <summary>	Merges composite node profiles. </summary>
            <param name="currentProfile">	The current profile. </param>
            <param name="currentNode">   	The current node. </param>
            <param name="insertion">	 	The insertion. </param>
            <returns>	A merged profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.MergeHolderProfiles(std.shared_ptr&lt;Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst,System.Double)">
            <summary>	Merges the given holder profiles. </summary>
            <param name="spRoot"> 	The root holder profile. </param>
            <param name="spChild">	The child holder profile. </param>
            <param name="cScalar">	The insertion depth. </param>
            <returns>	A merged profile. </returns>
            <summary>	Merges the given holder profiles. </summary>
            <param name="spRoot"> 	The root holder profile. </param>
            <param name="spChild">	The child holder profile. </param>
            <param name="cScalar">	The insertion depth. </param>
            <returns>	A merged profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.IsLinear(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if this object is linear. </summary>
            <param name="tree"> The tree. </param>
            <returns> true if linear, false if not. </returns>
            <summary> Query if this object is linear. </summary>
            <param name="tree"> The tree. </param>
            <returns> true if linear, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.RetrieveAllHolderNodes(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves all holder nodes. </summary>
            <param name="root">	    The root. </param>
            <param name="nodeList"> List of nodes. </param>
            <summary> Retrieves all holder nodes. </summary>
            <param name="root">	    The root. </param>
            <param name="nodeList"> List of nodes. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.RetrieveAllHolderNodesConst(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves all const holder nodes. </summary>
            <param name="root">	    The root. </param>
            <param name="nodeList"> List of nodes. </param>
            <summary> Retrieves all const holder nodes. </summary>
            <param name="root">	    The root. </param>
            <param name="nodeList"> List of nodes. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.RetrieveAllHolderIDs(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Cnc.Tool.TlID,std.allocator&lt;Cnc.Tool.TlID&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieves all holder i ds. </summary>
            <param name="root">   The root. </param>
            <param name="idList"> [out] List of identifiers. </param>
            <summary> Retrieves all holder i ds. </summary>
            <param name="root">   The root. </param>
            <param name="idList"> [out] List of identifiers. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.UpdateClosestToToolProperties">
            <summary> Updates the closest to tool properties. </summary>
            <summary> Updates the closest to tool properties. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.InsertHolderNode(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inserts a holder node. </summary>
            <param name="id">    The identifier. </param>
            <param name="root">  [in] The root. </param>
            <param name="child"> [in] The child. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Inserts a holder node. </summary>
            <param name="id">    The identifier. </param>
            <param name="root">  [in] The root. </param>
            <param name="child"> [in] The child. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.SetHolderIds(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets a holder identifiers. </summary>
            <param name="root">		 	The root. </param>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
            <summary>	Sets a holder identifiers. </summary>
            <param name="root">		 	The root. </param>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.ResetAllGuids">
            <summary> Resets all guids. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Resets all guids. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.UpdateIsCatalogItem(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Updates the is catalog item described by value. </summary>
            <param name="root"> 	The root. </param>
            <param name="value">	True to value. </param>
            <summary>	Updates the is catalog item described by value. </summary>
            <param name="root"> 	The root. </param>
            <param name="value">	True to value. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.BuildComposite">
            <summary>	Builds the composite. </summary>
            <summary>	Builds the composite. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.RetrieveHolderNode(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Retrieve a specific holder node pointer. </summary>
            <param name="id">   The identifier. </param>
            <param name="root"> The root. </param>
            <returns> . </returns>
            <summary> Retrieve a specific holder node pointer. </summary>
            <param name="id">   The identifier. </param>
            <param name="root"> The root. </param>
            <returns> . </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.GetHolderTreeRoot">
            <summary> Gets the holder tree root node. </summary>
            <returns> The holder tree root node. </returns>
            <summary> Gets the holder tree root node. </summary>
            <returns> The holder tree root node. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.ModifyToolInsertion(System.Double,System.Boolean)">
            <summary> The Assembly tool projection was changed, so modify the main holder's CScalar to account for that. </summary>
            <param name="value">		 The insertion value. </param>
            <param name="valueIsMetric"> (Optional) True if the value is metric. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> The Assembly tool projection was changed, so modify the main holder's CScalar to account for that. </summary>
            <param name="value">		 The insertion value. </param>
            <param name="valueIsMetric"> (Optional) True if the value is metric. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.AddSegment(System.Double,System.Double,System.Double)">
            <summary> Adds a holder segment. </summary>
            <param name="topWidth">    Width of the top. </param>
            <param name="bottomWidth"> Width of the bottom. </param>
            <param name="height">	   The height. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Adds a holder segment. </summary>
            <param name="topWidth">    Width of the top. </param>
            <param name="bottomWidth"> Width of the bottom. </param>
            <param name="height">	   The height. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.GetHolderNodeList">
            <summary> Gets holder node list. Order is from closest to the tool to the root. </summary>
            <returns> The holder node list. </returns>
            <summary> Gets holder node list. Order is from closest to the tool to the root. </summary>
            <returns> The holder node list. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.GetHolderNodeListConst">
            <summary> Gets const holder node list. Order is from closest to the tool to the root. </summary>
            <returns> The holder node list. </returns>
            <summary> Gets const holder node list. Order is from closest to the tool to the root. </summary>
            <returns> The holder node list. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.GetHolderIDList">
            <summary> Gets the holder identifier list. </summary>
            <returns> The holder identifier list. </returns>
            <summary> Gets the holder identifier list. </summary>
            <returns> The holder identifier list. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.ReplaceChildHolder(System.Int32,std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Replaces an existing child holder. </summary>
            <param name="index">    Zero-based index of the children holders. The root is index 0. </param>
            <param name="newChild"> The new child. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Replaces an existing child holder. </summary>
            <param name="index">    Zero-based index of the children holders. The root is index 0. </param>
            <param name="newChild"> The new child. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.DeleteHolder(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the holder described by holderID. If the delete operation results in a single holder,
		  it will be returned in the DeleteResult. </summary>
            <param name="holderID"> Identifier for the holder. </param>
            <returns> The DeleteResult. </returns>
            <summary> Deletes the holder described by holderID. If the delete operation results in a single holder,
		  it will be returned in the DeleteResult. </summary>
            <param name="holderID"> Identifier for the holder. </param>
            <returns> The DeleteResult. </returns>
        </member>
        <member name="T:Cnc.Tool.TlHolderComposite.DeleteResult">
            <summary> Encapsulates the result of deleting a holder. </summary>
            <summary> Encapsulates the result of deleting a holder. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.AddHolder(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst)">
            <summary> Adds a holder. If adding a holder into an occupied position, the holder will be inserted in place. </summary>
            <param name="parentID">   Identifier for the parent. </param>
            <param name="holder">	  The holder. </param>
            <param name="mTransform"> The transform. </param>
            <param name="uTransform"> The transform. </param>
            <param name="cTransform"> The transform. </param>
            <param name="cScalar">    The scalar. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Adds a holder. If adding a holder into an occupied position, the holder will be inserted in place. </summary>
            <param name="parentID">   Identifier for the parent. </param>
            <param name="holder">	  The holder. </param>
            <param name="mTransform"> The transform. </param>
            <param name="uTransform"> The transform. </param>
            <param name="cTransform"> The transform. </param>
            <param name="cScalar">    The scalar. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.op_Assign(Cnc.Tool.TlHolderComposite!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="x"> The const TlHolderComposite to process. </param>
            <returns> A shallow copy of this object. </returns>
            <summary> Assignment operator. </summary>
            <param name="x"> The const TlHolderComposite to process. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.IsLinear">
            <summary> Query if this object is linear. </summary>
            <returns> true if linear, false if not. </returns>
            <summary> Query if this object is linear. </summary>
            <returns> true if linear, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.#ctor(Cnc.Tool.TlHolderComposite!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="x"> The TlHolderComposite to process. </param>
            <summary> Copy constructor. </summary>
            <param name="x"> The TlHolderComposite to process. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderComposite.#ctor(System.Boolean)">
            <summary> Parameterized constructor. </summary>
            <param name="IsMetric"> true if this object is metric. </param>
            <summary> Parameterized constructor. </summary>
            <param name="IsMetric"> true if this object is metric. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.DoClone">
            <summary>	Executes the clone operation. </summary>
            <returns>	A TlObjectPtr. </returns>
            <summary>	Executes the clone operation. </summary>
            <returns>	A TlObjectPtr. </returns>
        </member>
        <member name="F:Cnc.Tool.TlHolderTreeNode.m_children">
            <summary>	The children. </summary>
            <summary>	The children. </summary>
        </member>
        <member name="F:Cnc.Tool.TlHolderTreeNode.m_cTransformation">
            <summary>	The transformation. </summary>
            <summary>	The transformation. </summary>
        </member>
        <member name="F:Cnc.Tool.TlHolderTreeNode.m_uTransformation">
            <summary>	The transformation. </summary>
            <summary>	The transformation. </summary>
        </member>
        <member name="F:Cnc.Tool.TlHolderTreeNode.m_mTransformation">
            <summary>	The transformation. </summary>
            <summary>	The transformation. </summary>
        </member>
        <member name="F:Cnc.Tool.TlHolderTreeNode.m_holder">
            <summary>	The holder. </summary>
            <summary>	The holder. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> MFC Serialization function. </summary>
            <param name="archive"> The archive. </param>
            <summary> MFC Serialization function. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.InsertsOverChild">
            <summary> Determines if the holder inserts over its child. </summary>
            <returns> true if it inserts over its child, false if it inserts into its child. </returns>
            <summary> Determines if the holder inserts over its child. </summary>
            <returns> true if it inserts over its child, false if it inserts into its child. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.GetChildren">
            <summary> Gets the children of this item. </summary>
            <returns> The children. </returns>
            <summary> Gets the children of this item. </summary>
            <returns> The children. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.GetIsMetric">
            <summary>	Gets a flag indicating whether this holder tree node is metric or not. </summary>
            <returns>	true if the node is in metric. </returns>
            <summary>	Gets a flag indicating whether this holder tree node is metric or not. </summary>
            <returns>	true if the node is in metric. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.SetHolder(std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a holder. </summary>
            <param name="holder"> The holder. </param>
            <summary> Sets a holder. </summary>
            <param name="holder"> The holder. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.GetHolder">
            <summary> Gets the holder. </summary>
            <returns> The holder. </returns>
            <summary> Gets the holder. </summary>
            <returns> The holder. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.ReplaceChild(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Replaces this node's child with the passed in child. </summary>
            <param name="spChild"> The child. </param>
            <summary> Replaces this node's child with the passed in child. </summary>
            <param name="spChild"> The child. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.AddChild(std.shared_ptr&lt;Cnc.Tool.TlHolderTreeNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a child. </summary>
            <param name="child"> The child. </param>
            <summary> Adds a child. </summary>
            <param name="child"> The child. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.op_Equality(Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are considered equivalent. </returns>
            <summary> Equality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.op_Assign(Cnc.Tool.TlHolderTreeNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.op_Assign(Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="x"> The const TlHolderTreeNode &amp; to process. </param>
            <returns> A shallow copy of this object. </returns>
            <summary> Assignment operator. </summary>
            <param name="x"> The const TlHolderTreeNode &amp; to process. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.AddChild(Cnc.Tool.TlHolderTreeNode)">
            <summary> Adds a child. </summary>
            <param name="child"> The child. </param>
            <summary> Adds a child. </summary>
            <param name="child"> The child. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.Clone">
            <summary> Clone Function. </summary>
            <returns> A pointer to a copy of this object. </returns>
            <summary> Clone Function. </summary>
            <returns> A pointer to a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.#ctor(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Parameterized constructor. </summary>
            <param name="holder">		   The holder. </param>
            <param name="mTransformation"> The transformation. </param>
            <param name="uTransformation"> The transformation. </param>
            <param name="cTransformation"> The transformation. </param>
            <param name="cScalar">		   The scalar. </param>
            <summary> Parameterized constructor. </summary>
            <param name="holder">		   The holder. </param>
            <param name="mTransformation"> The transformation. </param>
            <param name="uTransformation"> The transformation. </param>
            <param name="cTransformation"> The transformation. </param>
            <param name="cScalar">		   The scalar. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.#ctor(Cnc.Tool.TlHolderTreeNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move constructor. </summary>
            <param name="rhs">	The right hand side. </param>
            <summary>	Move constructor. </summary>
            <param name="rhs">	The right hand side. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderTreeNode.#ctor(Cnc.Tool.TlHolderTreeNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Parameterized constructor. </summary>
            <param name="node"> The node. </param>
            <summary> Parameterized constructor. </summary>
            <param name="node"> The node. </param>
        </member>
        <member name="F:Cnc.Tool.TransformationMatrix.m_matrix">
            <summary> The matrix. </summary>
            <summary> The matrix. </summary>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrix.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrix.op_Subscript(System.UInt32)">
            <summary> Array indexer operator. </summary>
            <param name="i"> Zero-based index of the. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator. </summary>
            <param name="i"> Zero-based index of the. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrix.#ctor(std.vector&lt;System.Double,std.allocator&lt;System.Double&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Parameterized constructor. </summary>
            <param name="matrix"> The matrix. </param>
            <summary> Parameterized constructor. </summary>
            <param name="matrix"> The matrix. </param>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrix.#ctor(Cnc.Tool.TransformationMatrixColumn!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrixColumn!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrixColumn!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TransformationMatrixColumn!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Parameterized constructor. </summary>
            <param name="a"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="b"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="c"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="d"> The const TransformationMatrixColumn &amp; to process. </param>
            <summary> Parameterized constructor. </summary>
            <param name="a"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="b"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="c"> The const TransformationMatrixColumn &amp; to process. </param>
            <param name="d"> The const TransformationMatrixColumn &amp; to process. </param>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrix.#ctor">
            <summary>	Default constructor. </summary>
            <summary>	Default constructor. </summary>
        </member>
        <member name="F:Cnc.Tool.TransformationMatrixColumn.m_data">
            <summary> The data. </summary>
            <summary> The data. </summary>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrixColumn.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrixColumn.op_Subscript(System.UInt32)">
            <summary> Array indexer operator. </summary>
            <param name="i"> Zero-based index of the. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator. </summary>
            <param name="i"> Zero-based index of the. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrixColumn.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>	Parameterized constructor. </summary>
            <param name="a">	The double to process. </param>
            <param name="b">	The double to process. </param>
            <param name="c">	The double to process. </param>
            <param name="d">	The double to process. </param>
            <summary>	Parameterized constructor. </summary>
            <param name="a">	The double to process. </param>
            <param name="b">	The double to process. </param>
            <param name="c">	The double to process. </param>
            <param name="d">	The double to process. </param>
        </member>
        <member name="M:Cnc.Tool.TransformationMatrixColumn.#ctor">
            <summary>	Default constructor. </summary>
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.RemoveTypeGroup(Cnc.Tool.Interop.TlToolType)">
            <summary>   Removes the type group described by group. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.AddToolTypeID(System.Guid)">
            <summary>   Adds a tool type identifier. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.AddToolTypeID(Cnc.Tool.Interop.TlToolType)">
            <summary>   Adds a tool type identifier. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.GetToolTypeIDs">
            <summary>   Gets the tool type ids. </summary>
            <returns>   The tool type ids. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolGroup.ImagePath">
            <summary> Image Path </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.CopyFrom(Cnc.Tool.Interop.TlToolGroup)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolGroup.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolGroup">
            <summary> Defines the TlToolGroup tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolGroup.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="F:Cnc.Tool.TlToolGroup.m_ToolTypeIDs">
            <summary>   The tool type ids. </summary>
            <summary>   The tool type ids. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolGroup.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolGroup.RemoveTypeGroup(Cnc.Tool.TlToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Removes the type group described by group. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Removes the type group described by group. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolGroup.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Adds a tool type identifier. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Adds a tool type identifier. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolGroup.AddToolTypeID(Cnc.Tool.TlToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Adds a tool type identifier. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Adds a tool type identifier. </summary>
            <param name="group">    The group. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolGroup.GetToolTypeIDs">
            <summary>   Gets the tool type ids. </summary>
            <returns>   The tool type ids. </returns>
            <summary>   Gets the tool type ids. </summary>
            <returns>   The tool type ids. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolType.ImagePath">
            <summary> Image File Path </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolType.GroupID">
            <summary> Group Identifier </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolType.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolType.CopyFrom(Cnc.Tool.Interop.TlToolType)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolType.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolType.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolType">
            <summary> Defines the TlToolType tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolType.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolType.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlMillingOpParams.StepoverFinishZ">
            <summary> Stepover Finish Z </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlMillingOpParams.StepoverFinishXY">
            <summary> Stepover Finish XY </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlMillingOpParams.StepoverRoughZ">
            <summary> Stepover Rough Z </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlMillingOpParams.StepoverRoughXY">
            <summary> Stepover Rough XY </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlMillingOpParams.IsFinishTool">
            <summary> Finish Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlMillingOpParams.IsRoughTool">
            <summary> Rough Flag </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMillingOpParams.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMillingOpParams.CopyFrom(Cnc.Tool.Interop.TlMillingOpParams)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMillingOpParams.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMillingOpParams.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlMillingOpParams">
            <summary> Defines the TlMillingOpParams tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Converts the given native instances into managed instances. </summary>
            <param name="nativeInstances">	The native instances. </param>
            <returns>	A list of converted instances. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Converts the given native instances into managed instances. </summary>
            <param name="nativeInstances">	The native instances. </param>
            <returns>	A list of converted instances. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Collections.Generic.List`1{Cnc.Tool.Interop.ILTool})">
            <summary>	Converts the given native instances into native instances. </summary>
            <param name="nativeInstances"> 	The native instances. </param>
            <param name="managedInstances">	The managed instances. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Collections.Generic.List`1{Cnc.Tool.Interop.ILTool})">
            <summary>	Converts the given native instances into native instances. </summary>
            <param name="nativeInstances"> 	The native instances. </param>
            <param name="managedInstances">	The managed instances. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(System.Collections.Generic.IList`1{Cnc.Tool.Interop.ILTool},std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Converts the given managed instances into native instances. </summary>
            <param name="managedInstances"> The managed instances. </param>
            <param name="nativeInstances">  The native instances. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(System.Collections.Generic.IList`1{Cnc.Tool.Interop.ILTool})">
            <summary>	Converts the given managed instances into native instances. </summary>
            <param name="managedInstances">	The managed instances. </param>
            <returns>	A list of converted instances. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>	Converts a native instance of the ILTool interface into a managed instance. </summary>
            <param name="spNativeInstance">	The native instance. </param>
            <returns>	Nullptr if it fails, else the given data converted to a managed instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(std.shared_ptr&lt;Cnc.Tool.ILTool&gt;)">
            <summary>	Converts a native instance of the ILTool interface into a managed instance. </summary>
            <param name="spNativeInstance">	The native instance. </param>
            <returns>	Nullptr if it fails, else the given data converted to a managed instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(Cnc.Tool.Interop.I3dLTool)">
            <summary>	Converts a managed instance of the I3dLTool interface into a native instance. </summary>
            <param name="managedInstance">	If non-null, the managed instance. </param>
            <returns>	The native instance of the I3dLTool interface. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(Cnc.Tool.Interop.ILTool)">
            <summary>	Converts a managed instance of the ILTool interface into a native instance. </summary>
            <param name="managedInstance">	If non-null, the managed instance. </param>
            <returns>	The native instance of the ILTool interface. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(std.shared_ptr&lt;Cnc.Tool.IMTool!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>	Converts a native instance of the ILTool interface into a managed instance. </summary>
            <param name="spNativeInstance">	The native instance. </param>
            <returns>	Nullptr if it fails, else the given data converted to a managed instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(std.shared_ptr&lt;Cnc.Tool.IMTool&gt;)">
            <summary>	Converts a native instance of the ILTool interface into a managed instance. </summary>
            <param name="spNativeInstance">	The native instance. </param>
            <returns>	Nullptr if it fails, else the given data converted to a managed instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(std.shared_ptr&lt;Cnc.Tool.ITool!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>	Converts a native instance of the ILTool interface into a managed instance. </summary>
            <param name="spNativeInstance">	The native instance. </param>
            <returns>	Nullptr if it fails, else the given data converted to a managed instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ToolInterfaceHelpers.Convert(std.shared_ptr&lt;Cnc.Tool.ITool&gt;)">
            <summary>	Converts a native instance of the ILTool interface into a managed instance. </summary>
            <param name="spNativeInstance">	The native instance. </param>
            <returns>	Nullptr if it fails, else the given data converted to a managed instance. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.ToolInterfaceHelpers">
            <summary>	Static helper methods for working with the tool interfaces. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.SetManufacturer(Cnc.Tool.Interop.TlManufacturer)">
            <summary>   Sets a manufacturer. </summary>
            <param name="manufacturer"> The manufacturer. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.SetWorkMaterial(Cnc.Tool.Interop.TlWorkMaterial)">
            <summary>   Sets a work material. </summary>
            <param name="material"> The material. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.SetOpType(Cnc.Tool.Interop.TlOpType)">
            <summary>   Sets an operation type. </summary>
            <param name="type"> The type. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.SetToolType(Cnc.Tool.Interop.TlToolType)">
            <summary>   Sets a tool type. </summary>
            <param name="type"> The type. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.SetGrade(Cnc.Tool.Interop.TlToolGrade)">
            <summary>   Sets a grade. </summary>
            <param name="grade">    The grade. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MachineName">
            <summary> Gets or sets the machine name. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.Manufacturer">
            <summary> Manufacturer </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.WorkMaterial">
            <summary> Work Material </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.OpType">
            <summary> Op Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.ToolType">
            <summary> Tool Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.Grade">
            <summary> Grade </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.CutSource">
            <summary> Cut Source </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.CutQuality">
            <summary> Cut Quality </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.IsProven">
            <summary> Proven Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.IsMetric">
            <summary> Metric Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.FeedFactor">
            <summary> Feed Factor </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MaxFPT">
            <summary> Maximum FPT </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MinFPT">
            <summary> Minimum FPT </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MaxCutSpeed">
            <summary> Maximum Cut Speed </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MinCutSpeed">
            <summary> Minimum Cut Speed </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.ToolLifeMinutes">
            <summary> Tool Life Minutes </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.ToolLifeLinear">
            <summary> Tool Life Linear </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.FinishAxialDoC">
            <summary> Gets or sets the finish axial depth of cut. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.FinishRadialDoC">
            <summary> Gets or sets the finish radial depth of cut. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.RoughAxialDoC">
            <summary> Gets or sets the rough axial depth of cut. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.RoughRadialDoC">
            <summary> Gets or sets the rough radial depth of cut. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.SurfaceFinish">
            <summary> Surface Finish </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.FPT">
            <summary> FPT </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.CutSpeed">
            <summary> Cut Speed </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MaxDiameter">
            <summary> Maximum Diameter </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCutParam.MinDiameter">
            <summary> Minimum Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.CopyFrom(Cnc.Tool.Interop.TlCutParam)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCutParam.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlCutParam">
            <summary> Defines the TlCutParam tool class type. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.Type">
            <summary> The type of the tool </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.GraphicsFileCollection">
            <summary> Gets or sets the graphics files associated to this tool assembly. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.AccessoryCollection">
            <summary> Gets or sets the accessory items for this tool assembly </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.LatheDefinitions">
            <summary> Gets or sets the lathe definitions. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.ComponentTree">
            <summary> Gets or sets the assembly component tree. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.ActiveTurret">
            <summary> Gets or sets the active turret that the tool is mounted on.  </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.ToolAngle">
            <summary> Gets or sets the angle of the tool in tool change position.  </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.IsInverted">
            <summary> Gets or sets a value indicating whether the tool is inverted in tool change position.  </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.IsVertical">
            <summary> Gets or sets a value indicating if the tool assembly is vertically oriented in tool change position.  </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.RequiresToolLocator">
            <summary> Gets or sets a value indicating whether or not the tool assembly requires a tool locator. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.MachineGroupId">
            <summary> Gets or sets the machine group that this tool assembly is part of. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.ToolStation">
            <summary> Gets or sets the tool station value for this tool assembly. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.ToolNumber">
            <summary> Gets or sets the tool number for this tool assembly. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolAssembly.IsMetric">
            <summary> Gets or sets the metric flag for this tool assembly. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssembly.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssembly.CopyFrom(Cnc.Tool.Interop.TlToolAssembly)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssembly.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolAssembly.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolAssembly">
            <summary> Defines the TlToolAssembly tool class type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlMgr.TlMgrDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.DoDelete(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Executes the delete operation with knowledge on whether the delete is a pure delete or for an update. </summary>
            <param name="id">		 The identifier. </param>
            <param name="forUpdate"> True if the operation is for an update. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Executes the delete operation with knowledge on whether the delete is a pure delete or for an update. </summary>
            <param name="id">		 The identifier. </param>
            <param name="forUpdate"> True if the operation is for an update. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindLTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Searches for the first lathe tool with a matching identifier. </summary>
            <param name="id">		The identifier. </param>
            <param name="strict">	If true, does not check for matching items in an assembly. </param>
            <returns>	The found lathe tool. </returns>
            <summary>	Searches for the first lathe tool with a matching identifier. </summary>
            <param name="id">		The identifier. </param>
            <param name="strict">	If true, does not check for matching items in an assembly. </param>
            <returns>	The found lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindMTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Searches for the first mill tool with a matching identifier. </summary>
            <param name="id">		The identifier. </param>
            <param name="strict">	If true, does not check for matching items in an assembly. </param>
            <returns>	The found mill tool. </returns>
            <summary>	Searches for the first mill tool with a matching identifier. </summary>
            <param name="id">		The identifier. </param>
            <param name="strict">	If true, does not check for matching items in an assembly. </param>
            <returns>	The found mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetLTools">
            <summary> Gets lathe tools. </summary>
            <returns> The lathe tools. </returns>
            <summary> Gets lathe tools. </summary>
            <returns> The lathe tools. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetMTools">
            <summary> Gets mill tools. </summary>
            <returns> The mill tools. </returns>
            <summary> Gets mill tools. </summary>
            <returns> The mill tools. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetLToolIds">
            <summary>	Gets lathe tool identifiers. </summary>
            <returns>	The lathe tool identifiers. </returns>
            <summary>	Gets lathe tool identifiers. </summary>
            <returns>	The lathe tool identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetMToolIds">
            <summary>	Gets mill tool identifiers. </summary>
            <returns>	The mill tool identifiers. </returns>
            <summary>	Gets mill tool identifiers. </summary>
            <returns>	The mill tool identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsLTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Query if the tool class instance corresponding to the given identifier is an ILTool type. </summary>
            <param name="id">	The identifier. </param>
            <returns>	True if ILTool, false if not. </returns>
            <summary>	Query if the tool class instance corresponding to the given identifier is an ILTool type. </summary>
            <param name="id">	The identifier. </param>
            <returns>	True if ILTool, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsMTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Query if the tool class instance corresponding to the given identifier is an IMTool type. </summary>
            <param name="id">	The identifier. </param>
            <returns>	True if IMTool, false if not. </returns>
            <summary>	Query if the tool class instance corresponding to the given identifier is an IMTool type. </summary>
            <param name="id">	The identifier. </param>
            <returns>	True if IMTool, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetIToolId(Cnc.Tool.ITool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets the identifier of the given tool instance. </summary>
            <param name="tool">	The tool. </param>
            <returns>	The i tool identifier. </returns>
            <summary>	Gets the identifier of the given tool instance. </summary>
            <param name="tool">	The tool. </param>
            <returns>	The i tool identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.CreateITool(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates an instance of the ITool interface. </summary>
            <param name="assembly">	The assembly. </param>
            <returns>	The new tool interface instance. </returns>
            <summary>	Creates an instance of the ITool interface. </summary>
            <param name="assembly">	The assembly. </param>
            <returns>	The new tool interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.CreateITool(Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates an instance of the ITool interface. </summary>
            <param name="assembly">	The assembly. </param>
            <returns>	The new tool interface instance. </returns>
            <summary>	Creates an instance of the ITool interface. </summary>
            <param name="assembly">	The assembly. </param>
            <returns>	The new tool interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.CreateITool(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates an instance of the ITool interface. </summary>
            <param name="assembly">	The assembly. </param>
            <returns>	The new tool interface instance. </returns>
            <summary>	Creates an instance of the ITool interface. </summary>
            <param name="assembly">	The assembly. </param>
            <returns>	The new tool interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetMachineGroupDisplayTools">
            <summary> Gets machine group display tools. </summary>
            <returns> The machine group display tools. </returns>
            <summary> Gets machine group display tools. </summary>
            <returns> The machine group display tools. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetMachineGroupDisplayTool(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets the machine group display tool. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> The machine group display tool. </returns>
            <summary> Gets the machine group display tool. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> The machine group display tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.SetAsMachineGroupDisplayTool(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the specified tool as the machine group display tool. </summary>
            <param name="groupId">  Identifier for the group. </param>
            <param name="lTool"> The lathe tool. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Sets the specified tool as the machine group display tool. </summary>
            <param name="groupId">  Identifier for the group. </param>
            <param name="lTool"> The lathe tool. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.SetAsMachineGroupDisplayTool(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the specified tool as the machine group display tool. </summary>
            <param name="groupId">  Identifier for the group. </param>
            <param name="assembly"> The assembly. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Sets the specified tool as the machine group display tool. </summary>
            <param name="groupId">  Identifier for the group. </param>
            <param name="assembly"> The assembly. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.DeleteAll">
            <summary> Removes all the items and deletes all the memory used by those items. </summary>
            <summary> Removes all the items and deletes all the memory used by those items. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetLatheTools">
            <summary> Gets lathe tools. </summary>
            <returns> The lathe tools. </returns>
            <summary> Gets lathe tools. </summary>
            <returns> The lathe tools. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetAssemblies">
            <summary> Gets the assemblies. </summary>
            <returns> The assemblies. </returns>
            <summary> Gets the assemblies. </summary>
            <returns> The assemblies. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetAll">
            <summary>	Gets all tool class objects in this manager. </summary>
            <returns>	All objects. </returns>
            <summary>	Gets all tool class objects in this manager. </summary>
            <returns>	All objects. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetLiveCenterIDs">
            <summary> Returns all the live center component IDs in the manager. </summary>
            <returns> A list of IDs of all the live center components in the mgr. </returns>
            <summary> Returns all the live center component IDs in the manager. </summary>
            <returns> A list of IDs of all the live center components in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetToolTypeIDs">
            <summary> Returns all the tool type IDs in the manager. </summary>
            <returns> A list of IDs of all the tool type in the mgr. </returns>
            <summary> Returns all the tool type IDs in the manager. </summary>
            <returns> A list of IDs of all the tool type in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetToolGroupIDs">
            <summary> Returns all the tool group IDs in the manager. </summary>
            <returns> A list of IDs of all the tool group in the mgr. </returns>
            <summary> Returns all the tool group IDs in the manager. </summary>
            <returns> A list of IDs of all the tool group in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetCutParamIDs">
            <summary> Returns all the cut params IDs in the manager. </summary>
            <returns> A list of IDs of all the cut params in the mgr. </returns>
            <summary> Returns all the cut params IDs in the manager. </summary>
            <returns> A list of IDs of all the cut params in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetOpTypeIDs">
            <summary> Returns all the op type IDs in the manager. </summary>
            <returns> A list of IDs of all the op types in the mgr. </returns>
            <summary> Returns all the op type IDs in the manager. </summary>
            <returns> A list of IDs of all the op types in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetOpGroupIDs">
            <summary> Returns all the op group IDs in the manager. </summary>
            <returns> A list of IDs of all the op groups in the mgr. </returns>
            <summary> Returns all the op group IDs in the manager. </summary>
            <returns> A list of IDs of all the op groups in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetWorkMaterialIDs">
            <summary> Returns all the work material IDs in the manager. </summary>
            <returns> A list of IDs of all the work materials in the mgr. </returns>
            <summary> Returns all the work material IDs in the manager. </summary>
            <returns> A list of IDs of all the work materials in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetHolderIDs">
            <summary> Returns all the holder IDs in the manager. </summary>
            <returns> A list of IDs of all the holders in the mgr. </returns>
            <summary> Returns all the holder IDs in the manager. </summary>
            <returns> A list of IDs of all the holders in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetLatheToolIDs">
            <summary> Returns all the tool IDs in the manager. </summary>
            <returns> A list of IDs of all the tools in the mgr. </returns>
            <summary> Returns all the tool IDs in the manager. </summary>
            <returns> A list of IDs of all the tools in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetToolIDs">
            <summary> Returns all the tool IDs in the manager. </summary>
            <returns> A list of IDs of all the tools in the mgr. </returns>
            <summary> Returns all the tool IDs in the manager. </summary>
            <returns> A list of IDs of all the tools in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetAssemblyIDs">
            <summary> Returns all the assembly IDs in the manager. </summary>
            <returns> A list of IDs of all the assemblies in the mgr. </returns>
            <summary> Returns all the assembly IDs in the manager. </summary>
            <returns> A list of IDs of all the assemblies in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.GetIDs">
            <summary> Returns all the IDs in the manager. </summary>
            <returns> A list of IDs of all the objects in the mgr. </returns>
            <summary> Returns all the IDs in the manager. </summary>
            <returns> A list of IDs of all the objects in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsLatheTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is a lathe tool, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a lathe tool, false otherwise. </returns>
            <summary> Returns true if the item is a lathe tool, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a lathe tool, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsWorkMaterial(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is a work material, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a work material, false otherwise. </returns>
            <summary> Returns true if the item is a work material, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a work material, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsHolder(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is a holder, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a holder, false otherwise. </returns>
            <summary> Returns true if the item is a holder, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a holder, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is a tool, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a tool, false otherwise. </returns>
            <summary> Returns true if the item is a tool, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a tool, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsAssembly(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns true if the item is an assembly, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies and assembly, false otherwise. </returns>
            <summary> Returns true if the item is an assembly, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies and assembly, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.RetrieveCorruptedAssemblyList">
            <summary> Retrieves the corrupted assembly list. </summary>
            <returns> List of corrupted TlIds. </returns>
            <summary> Retrieves the corrupted assembly list. </summary>
            <returns> List of corrupted TlIds. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.OpenSlotsOnObject(Cnc.Tool.TlObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Opens slots on the given object based on the type of object and current state of this manager. </summary>
            <param name="object">	The object to open slots on. </param>
            <summary>	Opens slots on the given object based on the type of object and current state of this manager. </summary>
            <param name="object">	The object to open slots on. </param>
        </member>
        <member name="M:Cnc.Tool.TlMgr.LatheSlotByID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the lathe tool slot corresponding to the ID in question. </summary>
            <param name="id"> The identifier. </param>
            <returns> Slot of the specified lathe tool. </returns>
            <summary> Find the lathe tool slot corresponding to the ID in question. </summary>
            <param name="id"> The identifier. </param>
            <returns> Slot of the specified lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.LatheIDBySlot(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Find the lathe tool ID corresponding to the slot in question. </summary>
            <param name="slot"> The slot. </param>
            <returns> Tlid of the lathe tool. </returns>
            <summary> Find the lathe tool ID corresponding to the slot in question. </summary>
            <param name="slot"> The slot. </param>
            <returns> Tlid of the lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.SlotByID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the mill tool slot corresponding to the ID in question. </summary>
            <param name="id"> The identifier. </param>
            <returns> Slot of the specified mill tool. </returns>
            <summary> Find the mill tool slot corresponding to the ID in question. </summary>
            <param name="id"> The identifier. </param>
            <returns> Slot of the specified mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IDBySlot(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary> Find the mill tool ID corresponding to the slot in question. </summary>
            <param name="slot"> The slot. </param>
            <returns> the corresponding TlID. </returns>
            <summary> Find the mill tool ID corresponding to the slot in question. </summary>
            <param name="slot"> The slot. </param>
            <returns> the corresponding TlID. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.CopyObjects(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID)">
            <summary> Copies an object from the other manager into this one. IF that object is an assembly, also copies all
		  associated AssemblyItems. </summary>
            <param name="otherManager"> Manager for other. </param>
            <param name="id">		    The id of the tool to look for. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Copies an object from the other manager into this one. IF that object is an assembly, also copies all
		  associated AssemblyItems. </summary>
            <param name="otherManager"> Manager for other. </param>
            <param name="id">		    The id of the tool to look for. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.RetrieveLatheSlotMap">
            <summary> Maps slots for use by wrapper lists when trying to open a slot. </summary>
            <returns> map of slots. </returns>
            <summary> Maps slots for use by wrapper lists when trying to open a slot. </summary>
            <returns> map of slots. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.RetrieveSlotMap">
            <summary> Retrieves the slot map. </summary>
            <returns> map of slots. </returns>
            <summary> Retrieves the slot map. </summary>
            <returns> map of slots. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.SaveAsTooldb(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Saves the current TlMgr as a tooldb file of the current .tooldb version. </summary>
            <param name="destinationFile"> The file name a path for the output .tooldb file. </param>
            <returns> true if the file is converted and saved correctly. </returns>
            <summary> Saves the current TlMgr as a tooldb file of the current .tooldb version. </summary>
            <param name="destinationFile"> The file name a path for the output .tooldb file. </param>
            <returns> true if the file is converted and saved correctly. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindId(Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Attempts to locate a similar lathe tool assembly to the input parameter "similarTool". </summary>
            <param name="similarTool">	    The similar tool. </param>
            <param name="machineGroupId">   Identifier for the machine group. </param>
            <param name="ignoreToolNumber"> true to ignore tool number. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Attempts to locate a similar lathe tool assembly to the input parameter "similarTool". </summary>
            <param name="similarTool">	    The similar tool. </param>
            <param name="machineGroupId">   Identifier for the machine group. </param>
            <param name="ignoreToolNumber"> true to ignore tool number. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindId(std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Attempts to locate a similar lathe tool assembly to the input parameter "similarTool". </summary>
            <param name="similarTool">	    The similar tool. </param>
            <param name="machineGroupId">   Identifier for the machine group. </param>
            <param name="ignoreToolNumber"> true to ignore tool number. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Attempts to locate a similar lathe tool assembly to the input parameter "similarTool". </summary>
            <param name="similarTool">	    The similar tool. </param>
            <param name="machineGroupId">   Identifier for the machine group. </param>
            <param name="ignoreToolNumber"> true to ignore tool number. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.FindId(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Attempts to locate a similar assembly to the input parameter "similarAssembly". </summary>
            <param name="similarAssembly"> The similar assembly. </param>
            <param name="machineGroupId">  Identifier for the machine group. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Attempts to locate a similar assembly to the input parameter "similarAssembly". </summary>
            <param name="similarAssembly"> The similar assembly. </param>
            <param name="machineGroupId">  Identifier for the machine group. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong,std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Searches for a lathe tool at the specified slot in the tool manager. 
</summary>
            <param name="slot">	   	The slot. </param>
            <param name="spResult">	The result tool. </param>
            <returns>	true if the item is found, false otherwise. </returns>
            <summary>
Searches for a lathe tool at the specified slot in the tool manager. 
</summary>
            <param name="slot">	   	The slot. </param>
            <param name="spResult">	The result tool. </param>
            <returns>	true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong,std.shared_ptr&lt;Cnc.Tool.IMTool!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Searches for a mill tool at the specified slot in the tool manager. 
</summary>
            <param name="slot">	   	The slot. </param>
            <param name="spResult">	The result tool. </param>
            <returns>	true if the item is found, false otherwise. </returns>
            <summary>
Searches for a mill tool at the specified slot in the tool manager. 
</summary>
            <param name="slot">	   	The slot. </param>
            <param name="spResult">	The result tool. </param>
            <returns>	true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong,std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="slot"> The slot. </param>
            <param name="tool"> The tool. </param>
            <returns> true if the item is found, false otherwise. </returns>
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="slot"> The slot. </param>
            <param name="tool"> The tool. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong,std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="slot">	    The slot. </param>
            <param name="assembly"> [out] The assembly. </param>
            <returns> true if the item is found, false otherwise. </returns>
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="slot">	    The slot. </param>
            <param name="assembly"> [out] The assembly. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Update(Cnc.Tool.ITool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Updates a tool in the tool manager.  The ID of the item is used to determine what item to update.
</summary>
            <param name="item">	The item to update.  The updated item is assigned to the old item. </param>
            <param name="add"> 	(Optional) If this parameter is true, then the function will update an existing item if one
					exists, or add if it does not.  If the parameter is false, then this function returns false
					if the item provided already exists in the manager. </param>
            <returns>	true if the item is updated, false otherwise. </returns>
            <summary>
Updates a tool in the tool manager.  The ID of the item is used to determine what item to update.
</summary>
            <param name="item">	The item to update.  The updated item is assigned to the old item. </param>
            <param name="add"> 	(Optional) If this parameter is true, then the function will update an existing item if one
					exists, or add if it does not.  If the parameter is false, then this function returns false
					if the item provided already exists in the manager. </param>
            <returns>	true if the item is updated, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Update(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Updates an item in the tool manager.  The item must be a TlObject.  The ID of the item is used to determine what
item to update.
</summary>
            <param name="item">	The item to update.  The updated item is assigned to the old item. </param>
            <param name="add"> 	(Optional) If this parameter is true, then the function will update an existing item if one
					exists, or add if it does not.  If the parameter is false, then this function returns false
					if the item provided already exists in the manager. </param>
            <returns>	true if the item is updated, false otherwise. </returns>
            <summary>
Updates an item in the tool manager.  The item must be a TlObject.  The ID of the item is used to determine what
item to update.
</summary>
            <param name="item">	The item to update.  The updated item is assigned to the old item. </param>
            <param name="add"> 	(Optional) If this parameter is true, then the function will update an existing item if one
					exists, or add if it does not.  If the parameter is false, then this function returns false
					if the item provided already exists in the manager. </param>
            <returns>	true if the item is updated, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Update(std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Updates an item in the tool manager.  The item must be a TlObject.  The ID of the item is used to determine what
item to update.
</summary>
            <param name="item">	The item to update.  The updated item is assigned to the old item. </param>
            <param name="add"> 	(Optional) If this parameter is true, then the function will update an existing item if one
					exists, or add if it does not.  If the parameter is false, then this function returns false
					if the item provided already exists in the manager. </param>
            <returns>	true if the item is updated, false otherwise. </returns>
            <summary>
Updates an item in the tool manager.  The item must be a TlObject.  The ID of the item is used to determine what
item to update.
</summary>
            <param name="item">	The item to update.  The updated item is assigned to the old item. </param>
            <param name="add"> 	(Optional) If this parameter is true, then the function will update an existing item if one
					exists, or add if it does not.  If the parameter is false, then this function returns false
					if the item provided already exists in the manager. </param>
            <returns>	true if the item is updated, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Add(std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Adds an item to the tool manager.  The item must be a TlObject. This function will create a new object copied
from the item parameter and store that copy.
</summary>
            <param name="item">			 	The item to add to the list.  A copy of the item will be created and added to the
								list, not the parameter itself. </param>
            <param name="updateExisting">	(Optional) If this parameter is true, then the function will update an existing
								item if one exists, or add if it does not.  If the parameter is false, then this
								function returns false if the item provided already exists in the manager. </param>
            <returns>	true if the item is added, false otherwise. </returns>
            <summary>
Adds an item to the tool manager.  The item must be a TlObject. This function will create a new object copied
from the item parameter and store that copy.
</summary>
            <param name="item">			 	The item to add to the list.  A copy of the item will be created and added to the
								list, not the parameter itself. </param>
            <param name="updateExisting">	(Optional) If this parameter is true, then the function will update an existing
								item if one exists, or add if it does not.  If the parameter is false, then this
								function returns false if the item provided already exists in the manager. </param>
            <returns>	true if the item is added, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Add(Cnc.Tool.ITool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Adds a tool to the tool manager.  This function will create a new object copied from the item parameter and
store that copy.
</summary>
            <param name="item">			 	The item to add to the list.  A copy of the item will be created and added to the
								list, not the parameter itself. </param>
            <param name="updateExisting">	(Optional) If this parameter is true, then the function will update an existing
								item if one exists, or add if it does not.  If the parameter is false, then this
								function returns false if the item provided already exists in the manager. </param>
            <returns>	true if the item is added, false otherwise. </returns>
            <summary>
Adds a tool to the tool manager.  This function will create a new object copied from the item parameter and
store that copy.
</summary>
            <param name="item">			 	The item to add to the list.  A copy of the item will be created and added to the
								list, not the parameter itself. </param>
            <param name="updateExisting">	(Optional) If this parameter is true, then the function will update an existing
								item if one exists, or add if it does not.  If the parameter is false, then this
								function returns false if the item provided already exists in the manager. </param>
            <returns>	true if the item is added, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Add(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Adds an item to the tool manager.  This function will create a new object copied from the item parameter and
store that copy.
</summary>
            <param name="item">			 	The item to add to the list.  A copy of the item will be created and added to the
								list, not the parameter itself. </param>
            <param name="updateExisting">	(Optional) If this parameter is true, then the function will update an existing
								item if one exists, or add if it does not.  If the parameter is false, then this
								function returns false if the item provided already exists in the manager. </param>
            <returns>	true if the item is added, false otherwise. </returns>
            <summary>
Adds an item to the tool manager.  This function will create a new object copied from the item parameter and
store that copy.
</summary>
            <param name="item">			 	The item to add to the list.  A copy of the item will be created and added to the
								list, not the parameter itself. </param>
            <param name="updateExisting">	(Optional) If this parameter is true, then the function will update an existing
								item if one exists, or add if it does not.  If the parameter is false, then this
								function returns false if the item provided already exists in the manager. </param>
            <returns>	true if the item is added, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Delete(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Deletes ALL tool records that contain the provided slot. </summary>
            <param name="slot"> The id of the tool to look for. </param>
            <param name="mill"> Flag indicating whether to remove the Mill tool associated at the provided slot, or the Lathe
					tool associated at the provided slot. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Deletes ALL tool records that contain the provided slot. </summary>
            <param name="slot"> The id of the tool to look for. </param>
            <param name="mill"> Flag indicating whether to remove the Mill tool associated at the provided slot, or the Lathe
					tool associated at the provided slot. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Delete(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the given ID. </summary>
            <param name="id"> The id of the tool to look for. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Deletes the given ID. </summary>
            <param name="id"> The id of the tool to look for. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.DoesObjectExist(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Determines if the specified item exists in this tool manager. </summary>
            <param name="id"> The id of the tool to look for. </param>
            <returns> true if the item exists, false otherwise. </returns>
            <summary> Determines if the specified item exists in this tool manager. </summary>
            <param name="id"> The id of the tool to look for. </param>
            <returns> true if the item exists, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.IsEmpty">
            <summary> Query if this object is empty. </summary>
            <returns> true if empty, false if not. </returns>
            <summary> Query if this object is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Size">
            <summary> Returns the number of items stored in the manager. </summary>
            <returns> The number of items stored in the tool manager. </returns>
            <summary> Returns the number of items stored in the manager. </summary>
            <returns> The number of items stored in the tool manager. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.op_Equality(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are considered equivalent. </returns>
            <summary> Equality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.op_Assign(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.op_Assign(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
            <summary> Assignment operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.Copy(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Copies the given TlMgr. </summary>
            <param name="other">    The other tlMgr. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Copies the given TlMgr. </summary>
            <param name="other">    The other tlMgr. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMgr.#ctor(Cnc.Tool.TlMgr*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlMgr.#ctor(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy Constructor.  Creates a copy tool manager. </summary>
            <param name="other"> The other tlMgr. </param>
            <summary> Copy Constructor.  Creates a copy tool manager. </summary>
            <param name="other"> The other tlMgr. </param>
        </member>
        <member name="T:Cnc.Tool.TlMgr.DefaultSlotValidator">
            <summary>	A default slot validator. </summary>
            <summary>	A default slot validator. </summary>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.SuspendOpMgrUpdate(std.shared_ptr&lt;EntityMap&gt;)">
            <summary> Suspend operation manager refresh until this is destroyed. </summary>
            <param name="spEntityMap"> (Optional) Pointer to updated EntityMap class to gather operation
						   info from, nullptr = we'll make one (expensive). </param>
            <returns> An operation manager refresh object that contains the operation IDs to refresh in the
		  main Operation Manager. </returns>
        </member>
        <member name="F:Cnc.Tool.TpPartOpList.m_spOpMgrSuspended">
            <summary> Pointer to operation info to use to refresh the main OpMgr.  If this exists it means
		  that DatabaseUpdate() will not call the OpMgr to update. </summary>
        </member>
        <member name="F:Cnc.Tool.TpPartOpList.OpMgrRefreshOpIds.m_RefOpMgrRefresher">
            <summary> Reference to an OpMgrRefreshMap that we'll use to update the main OpMgr when this
		  goes out of scope. </summary>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshOpIds.DisableRefresh(System.Boolean)">
            <summary> Disables the refresh. </summary>
            <param name="disable"> True to disable, false to enable. </param>
            <returns> Preturn previous value of m_RefreshDisabled. </returns>
        </member>
        <member name="F:Cnc.Tool.TpPartOpList.OpMgrRefreshOpIds.m_OpIds">
            <summary> map of operation ID's and the number of times TpPartOpList::DatabaseUpdate() was
		  called for each operation while the OpMgr update was suspended. </summary>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshOpIds.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshOpIds.#ctor(Cnc.Tool.TpPartOpList.OpMgrRefreshMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="refOpMgrRefresher"> [in,out] Reference to an OpMgrRefreshMap that we'll use to 
								 update the main OpMgr when this goes out of scope. </param>
        </member>
        <member name="T:Cnc.Tool.TpPartOpList.OpMgrRefreshOpIds">
            <summary> Class that contains operation information used to compare and see if the main OpMgr
		  requires an update. </summary>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.Replace(System.Int32!System.Runtime.CompilerServices.IsLong,std.shared_ptr&lt;EntityMap&gt;)">
            <summary> Replaces the operation with the given ID in the refresh map m_RefreshMap. </summary>
            <param name="opId">		   Identifier for the operation. </param>
            <param name="spEntityMap"> An EntityMap to use to count surface types for surface
						   operations. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.Remove(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Removes the operation with the given ID from the refresh map m_RefreshMap. </summary>
            <param name="opId"> The operation Identifier to remove. </param>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.Add(System.Int32!System.Runtime.CompilerServices.IsLong,std.shared_ptr&lt;EntityMap&gt;)">
            <summary> Adds the operation with the given ID to the refresh map m_RefreshMap. </summary>
            <param name="opId">		   Identifier for the operation. </param>
            <param name="spEntityMap"> An EntityMap to use to count surface types for surface
						   operations. </param>
            <returns> True if it succeeds, false if it fails or operation already exists in the map. </returns>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.#ctor(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,COpMgrTree*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TpPartOpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="fileName">  Name of our current file. </param>
            <param name="refOpMgr">  [in,out] Reference to main Operation Manager we'll be refreshing. </param>
            <param name="refOpList"> [in,out] Reference to operation list. </param>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.OpInfo.#ctor(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;EntityMap&gt;)">
            <summary> Constructor. </summary>
            <param name="theOp">	   The operation. </param>
            <param name="spEntityMap"> An EntityMap to use for counting the operation's surface types. </param>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.OpInfo.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.OpInfo.OpPrmDisplayed.op_Inequality(Cnc.Tool.TpPartOpList.OpMgrRefreshMap.OpInfo.OpPrmDisplayed!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.OpInfo.OpPrmDisplayed.op_Equality(Cnc.Tool.TpPartOpList.OpMgrRefreshMap.OpInfo.OpPrmDisplayed!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.OpInfo.OpPrmDisplayed.IsEqual(Cnc.Tool.TpPartOpList.OpMgrRefreshMap.OpInfo.OpPrmDisplayed!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal. </summary>
            <param name="obj"> The object. </param>
            <returns> True if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.OpInfo.OpPrmDisplayed.#ctor(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="theOp"> the operation. </param>
        </member>
        <member name="T:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.OpInfo.OpPrmDisplayed">
            <summary> A class containing all the operation parameters whose values
		  are displayed in the tree control. </summary>
        </member>
        <member name="T:Cnc.Tool.TpPartOpList.OpMgrRefreshMap.OpInfo">
            <summary> Information about the operation to compare when refreshing the OpMgr. </summary>
        </member>
        <member name="T:Cnc.Tool.TpPartOpList.OpMgrRefreshMap">
            <summary> Class to keep track of which operations need to be refreshed in the OpMgr when the
		  OpMgr's updates are temporarily suspend. </summary>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.FirstOpIndexUsing3DTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	First operation index using the 3D tool specified by the given identifier. </summary>
            <param name="toolId">	  	Identifier for the tool. </param>
            <param name="excludeOpId">	(Optional) Identifier for an operation to exclude. </param>
            <returns>	An INT_PTR to the first operation using the 3D tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.FirstOpUsing3DTool(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	First operation using the 3D tool specified by the given identifier. </summary>
            <param name="toolId">	  	Identifier for the tool. </param>
            <param name="excludeOpId">	(Optional) Identifier for an operation to exclude. </param>
            <returns>	Null if it fails, else a pointer to the first operation using the 3D tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.SortIDs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sort the given IDs by container order. </summary>
            <param name="opIDs"> The operation IDs to sort. </param>
            <returns> std::vector of sorted operation IDs. </returns>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.UpdateListAndDB(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,std.shared_ptr&lt;IInterrogateMastercamFile&gt;)">
            <summary> Updates the list and database. </summary>
            <param name="OperationEntity"> The operation entity. </param>
            <param name="UpdateTimeStamp"> True to update time stamp. </param>
            <param name="UpdateXForm">	   (Optional) True to update x coordinate form. </param>
            <param name="spInFile">		   (Optional) The spInFile. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TpPartOpList.DatabaseUpdate(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,std.shared_ptr&lt;IInterrogateMastercamFile&gt;)">
            <summary> Database update. </summary>
            <param name="OperationEntity">  The operation entity. </param>
            <param name="UpdateTimeStamp">  True to update time stamp. </param>
            <param name="UpdateDependents"> (Optional) True to update dependents. </param>
            <param name="spInFile">		    The spInFile. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpOpList.SortBySlotNumber">
            <summary> Sort ascending by operation.slot number. </summary>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpOpList.SortOperationPointers(std.vector&lt;operation**,std.allocator&lt;operation**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;,operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.Compil">
            <summary> Sort a vector of operation pointers. </summary>
            <param name="opPtrs">			   [in,out] [in,out] If non-null, the operation ptrs. </param>
            <param name="lessThanFunction">    The sorting less-than function. </param>
            <param name="includeMaskFunction"> The include mask function. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpOpList.GetNextAbsoluteLongValue(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the next available absolute value frome the given list of long values. </summary>
            <param name="usedIds"> List of used operation IDs. </param>
            <returns> The next absolute long value. </returns>
        </member>
        <member name="M:SurfaceOpEntityCounts.DbIsReady">
            <summary> Determines if we're not in the middle of startup or reading a file. </summary>
            <returns> True if all is okay to proceed. </returns>
        </member>
        <member name="M:SurfaceOpEntityCounts.CountSurfaces(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Count surfaces for the given operation, add to m_SurfaceCounts map. </summary>
            <param name="opId"> Identifier for the operation. </param>
            <returns> Return surface counts. </returns>
        </member>
        <member name="M:SurfaceOpEntityCounts.CreateEntityMap(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates an entity map for all operation types that can contain surface branches in
		  the OpMgr. </summary>
            <param name="surfOpIds"> [in,out] List of identifiers for the operations, empty = all surface
						 operations that require geometry branches in the Operation Manager. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:SurfaceOpEntityCounts.GetSurfaceCountMap">
            <summary> Returns a const std::shared_ptr to m_spEntityMap. </summary>
            <returns> A const std::shared_ptr to m_spEntityMap. </returns>
        </member>
        <member name="M:SurfaceOpEntityCounts.GetEntityMap">
            <summary> Returns a const std::shared_ptr to m_spEntityMap. </summary>
            <returns> A const std::shared_ptr to m_spEntityMap. </returns>
        </member>
        <member name="M:SurfaceOpEntityCounts.CountSurfaces(System.Int32!System.Runtime.CompilerServices.IsLong,TP_OPCODE,std.shared_ptr&lt;EntityMap&gt;)">
            <summary> Find out how many and of what kind of surface toolpath entities are contained in the
		  operation. Note: CM3-229:: PolygonalMesh (STL) - PMESH_ID are included in the
		  '*_surfs' counts. </summary>
            <param name="opId">		   Identifier for the operation. </param>
            <param name="opCode">	   Operation's opcode. </param>
            <param name="spEntityMap"> Pointer to an EntityMap to count entities, nullptr to use our
						   m_spEntityMap. </param>
            <returns> Pointer to the op's surface counts. </returns>
        </member>
        <member name="M:SurfaceOpEntityCounts.OpTypeHasVariableNumBranches(TP_OPCODE)">
            <summary> Test opcode to see if surface operation code requires geometry branches in the
		  Operation Manager. </summary>
            <param name="opCode"> The operation code to test. </param>
            <returns> True if operation type requires geometry branches in the OpMgr. </returns>
        </member>
        <member name="M:SurfaceOpEntityCounts.#ctor(System.Boolean,std.shared_ptr&lt;EntityMap&gt;)">
            <summary> Constructor. </summary>
            <param name="countSurfaces"> true = count the surfaces of ALL the operations on instantiation,
							 build m_SurfaceCounts, false = count on demand when
							 CountSurfaces() is called, add to m_SurfaceCounts. </param>
            <param name="spEntityMap">   (Optional) If non-null, an EntityMap to read thru for surface
							 counts, nullptr = create an EntityMap with all your current
							 surface operations. </param>
        </member>
        <member name="M:SurfaceOpEntityCounts.EntityCounts.IsEmpty">
            <summary> Query if all counts are zero. </summary>
            <returns> True if empty, false if not. </returns>
        </member>
        <member name="M:SurfaceOpEntityCounts.EntityCounts.IsEqual(SurfaceOpEntityCounts.EntityCounts!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Query if 'obj' is equal. </summary>
            <param name="obj"> The object. </param>
            <returns> True if equal, false if not. </returns>
        </member>
        <member name="T:SurfaceOpEntityCounts.EntityCounts">
            <summary> List of surface-entity-type counts. </summary>
        </member>
        <member name="T:SurfaceOpEntityCounts">
            <summary> A class to pass to GetSurfaceEntityCounts() to collect surface entity counts. </summary>
        </member>
        <member name="T:RefPtBits">
@defgroup  assocvar_ch44 spindle direction 
@{ 
@} 
@defgroup  assocvar_ch45 drill pt initial values 
@{ 
@} 
@defgroup  assocvar_ch47 TP_CHN types 
@{ 
@} 
@defgroup  assocvar_ch62 1013 nci line opcodes - LATHE 
@{ 
@} 
@defgroup  assocvar_ch63 3D HMM Toolpath types 
@{ 
@} 
@defgroup  assocvar_ch64 2D HMM Toolpath styles 
@{ 
@} 
@defgroup  assocvar_ch65 Wirepath types 
@{ 
@} 
@defgroup  assocvar_ch66 Agie machine model and control limits 
@{ 
@} 
reference point bits, used with ref_pt_state 
</member>
        <member name="D:eLatheSpindles">
@} 
@defgroup  assocvar_ch41 material type constants 
@{ 
@} 
@defgroup  assocvar_ch42 tool active head/turret and axis motion constants 
@{ 
</member>
        <member name="T:CutterCompDirection">
@defgroup assocvar_ch2 Toolpath Regeneration Error Codes 
@{
@}
@defgroup assocvar_ch4 rotary axis (stored in bnci) 
@{ 
@} 
@defgroup assocvar_ch10 contour-pocket change at point codes 
@{ 
@} 
@defgroup assocvar_ch11 Wire change at point codes 
@{ 
@} 
@defgroup assocvar_ch12 Wire control setting codes 
@{ 
@} 
@defgroup assocvar_ch13 Wire control flag codes 
@{ 
@} 
@defgroup assocvar_ch14 maximum number of parameters on an NCI line 
@{ 
@} 
@defgroup assocvar_ch25 coolant states 
@{ 
@} 
@defgroup  assocvar_ch37 transform operation types
 *	@warning  make sure you update sizeof_operation() in assocnci.c with any new opcodes 
@{ 
@} 
@defgroup  assocvar_ch38 1013 nci line opcodes - Wire 
@{ 
@} 
@defgroup  assocvar_ch39 cutter compensation constants 
@{ 
<summary> Cutter compensation direction. </summary></member>
        <member name="M:Cnc.Globals.Database.CurrentVersion">
            <summary> Gets a reference to the global variable 'current_version' representing the version of the current
		  Mastercam session. </summary>
            <returns> The version of the current Mastercam session. </returns>
        </member>
        <member name="M:Cnc.Globals.Database.NciBinFileClass">
            <summary> Gets a reference to the global variable 'pNciBinFileClass' representing the pointer to the file class for
		  binary nci. </summary>
            <remarks> All of the bnci functions are implemented to use pNciBinFileClass and will also swap with pointers to
		  other instances of the SysFile class. pNciBinFileClass replaces what used to be fnci_bin. </remarks>
            <returns> The pointer to file class for binary nci. </returns>
        </member>
        <member name="M:Cnc.Globals.Database.MainOpMgr">
            <summary> Gets a reference to the global variable 'TpMainOpMgr' representing the main operations list manager. </summary>
            <returns> The main operations list manager. </returns>
        </member>
        <member name="M:Cnc.Globals.Database.MainGrpMgr">
            <summary> Gets a reference to the global variable 'TpMainGrpMgr' representing the main groups list manager. </summary>
            <returns> The main groups list manager. </returns>
        </member>
        <member name="M:Cnc.Globals.Database.MainMatMgr">
            <summary> Gets a reference to the global variable 'TpMainMatMgr' representing the main materials list manager. </summary>
            <returns> The main materials list manager. </returns>
        </member>
        <member name="M:Cnc.Globals.Database.DbEnd">
            <summary> Gets a reference to the global variable 'db_end' representing the ending address of the database linked
		  list. </summary>
            <returns> The ending address of the database linked list. </returns>
        </member>
        <member name="M:Cnc.Globals.Database.DbStart">
            <summary> Gets a reference to the global variable 'db_start' representing the starting address of the database
		  linked list. </summary>
            <returns> The starting address of the database linked list. </returns>
        </member>
        <member name="M:TpOpMgr.PopListStacks">
 @par Purpose:
		This virtual method override pops list objects off of the list stacks.

 @return		Returns true if the list objects were popped off the stacks correctly and false if not.

</member>
        <member name="M:TpOpMgr.PushListStacks">
 @par Purpose:
		This virtual method override pushes new list objects onto the list stacks.

 @return		Returns true if new list objects were pushed onto the stacks correctly and false if not.

</member>
        <member name="M:TpOpMgr.Dispose">
 @par Purpose:
		This is the default TpOpMgr destructor. It empties all of the list stacks upon destruction.

</member>
        <member name="M:TpOpMgr.#ctor">
 @par Purpose:
		This is the default TpOpMgr constructor. It initializes the list stacks upon creation.

</member>
        <member name="M:TpOpMgr.EmptyAllListStacks">
 @par Purpose:
		This virtual method empties all of the list stacks. This method is marked as private because
	the list stacks should only be emptied when the manager gets destructed.

 @return	A boolean value indicating whether the emptying of the lists stacks was successful or not.

</member>
        <member name="F:TpOpMgr.m_MainOpListStack">
This is the manager class's main operation list stack. This is where instances of our main operation lists get stored.
</member>
        <member name="T:TpOpMgr">
@par Purpose:
	This class's purpose is to hold and work with instances of the op manager operation list classes for the life
of a given Mastercam app execution. It also houses the operation list stacks themselves, which we use to manage
temporary list creation situations (see base TpMgr class declaration for more details).

</member>
        <member name="M:TpGrpMgr.CheckForMachineGroup(TpGrpList*)">
 @par Purpose:
		This method checks a group list for a machine group. If none is found, one is created. If bad group
	pointers are found, they are fixed and reset to valid groups.

 @param[in]	g			The group list object to validate a machine group in.

</member>
        <member name="M:TpGrpMgr.SetGroupViews(op_group*,System.Boolean,CoordinateDisplayType)">
 @par Purpose:
		This method sets the current views based on the saved view information stored in a group structure.

 @param[in]	Group		The group data that should be used to reset the current view information.
 @param[in]	setActivePlanes	true = set the active planes (Cplane, Tplane, WCS) as well
 @param[in]	coordinateDisplay	MILL_COORD, LATHE_COORD_X, LATHE_COORD_D or -1 to extract from given machine group.

</member>
        <member name="M:TpGrpMgr.PopListStacks">
 @par Purpose:
		This virtual method override pops list objects off of the list stacks.

 @return		Returns true if the list objects were popped off the stacks correctly and false if not.

</member>
        <member name="M:TpGrpMgr.PushListStacks">
 @par Purpose:
		This virtual method override pushes new list objects onto the list stacks.

 @return		Returns true if new list objects were pushed onto the stacks correctly and false if not.

</member>
        <member name="M:TpGrpMgr.Dispose">
 @par Purpose:
		This is the default TpGrpMgr destructor. It empties all of the list stacks upon destruction.

</member>
        <member name="M:TpGrpMgr.#ctor">
 @par Purpose:
		This is the default TpGrpMgr constructor. It initializes the list stacks upon creation.

</member>
        <member name="M:TpGrpMgr.EmptyAllListStacks">
 @par Purpose:
		This virtual method empties all of the list stacks. This method is marked as private because
	the list stacks should only be emptied when the manager gets destructed.

 @return	A boolean value indicating whether the emptying of the lists stacks was successful or not.

</member>
        <member name="F:TpGrpMgr.m_ReadGrpListStack">
This is the manager class's file read group list stack. This is where instances of our file read group lists get stored.
</member>
        <member name="F:TpGrpMgr.m_MainGrpListStack">
This is the manager class's main group list stack. This is where instances of our main group lists get stored.
</member>
        <member name="T:TpGrpMgr">
@par Purpose:
	This class's purpose is to hold and work with instances of the op manager group list classes for the life
of a given Mastercam app execution. It also houses the group list stacks themselves, which we use to manage
temporary list creation situations (see base TpMgr class declaration for more details). Finally, it holds
some utility functions for managing global group related states and for searching lists for machine groups.

</member>
        <member name="F:TpGrpList.m_DisableLookupMap">
            <summary> True to disable regeneration of m_LookupMap in Delete(), false to enable. </summary>
        </member>
        <member name="F:TpGrpList.m_LookupMap">
This is the list class's ID lookup map. When enabled, this map serves to map IDs to their indices within the list.
</member>
        <member name="F:TpGrpList.m_MainArray">
This is the list class's main array object where all of the op_groups are stored.
</member>
        <member name="M:TpGrpList.CheckForIncompatibleTypeDependencies(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Check and correct if toolpath groups reference geometry groups as their parent (or vice versa). </summary>
            <param name="groupList"> List of groups to chack and correct. </param>
            <returns> A list of group IDs corrected. </returns>
        </member>
        <member name="M:TpGrpList.op_Assign(std.vector&lt;op_group,std.allocator&lt;op_group&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy a list of groups. </summary>
            <param name="opGroups"> [in,out] List of groups to copy, will be sorted and maybe IDs will be
						renumbered. </param>
        </member>
        <member name="M:TpGrpList.AddFileGroup(op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,std.less&lt;ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;&gt;,std.allocator&lt;ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a group freshly read from a file to 'pCurrentGroupList'. </summary>
            <param name="newGroup">   Group to add. </param>
            <param name="groupList">  If non-null, the current group list. </param>
            <param name="groupNames"> List of existing names to prevent duplicates. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpGrpList.DisableLookupMap(System.Boolean)">
            <summary> Disables rebuilding of m_LookupMap in DeleteGroupNode(). </summary>
            <param name="disable"> True to disable, false to enable. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpGrpList.IsGlobal">
            <summary> Query if this object is the global TpGrpList. </summary>
            <returns> True if global, false if not. </returns>
        </member>
        <member name="M:TpGrpList.RegenerateMap">
            <summary> Regenerate m_LookupMap. </summary>
        </member>
        <member name="M:TpGrpList.DeallocateItem(op_group*)">
            <summary> Free memory at the given pointer. </summary>
            <param name="pGroup"> [in,out] If non-null, the group to free. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpGrpList.AllocateItem(op_group!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Allocate op_group to store in m_MainArray. </summary>
            <param name="opGroup"> group to copy into allocated group. </param>
            <returns> nullptr if it fails, else a pointer to an op_group. </returns>
        </member>
        <member name="M:TpGrpList.RemoveNullPtrs">
            <summary> Removes any null ptrs from m_MainArray and rebuilds m_LookupMap. </summary>
            <returns> Return number of nullptr entries removed from m_MainArray. </returns>
        </member>
        <member name="M:TpGrpList.GetLookupMap">
            <summary> Gets a reference to the underlying lookup map. </summary>
            <returns> A reference to the underlying lookup map. </returns>
        </member>
        <member name="M:TpGrpList.Add(op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Allocates for and adds a copy of the given op_group to m_MainArray. </summary>
            <param name="opGroup"> [in,out] The op_group to add. </param>
            <returns> Null if it fails, else a pointer to the copy of the op_group. </returns>
        </member>
        <member name="M:TpGrpList.DeleteAllGroups(Cnc.OpMgr.OpGroupsAPI.DeleteMachineGroupsExtraDataPrm!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes all groups. </summary>
            <param name="delPrm"> The machine group deletion parameters, ignored if not a machine group. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpGrpList.DeleteGroup(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,Cnc.OpMgr.OpGroupsAPI.DeleteMachineGroupsExtraDataPrm!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the group and all it's child groups with the given ID. </summary>
            <param name="GroupID">		  Identifier for the group to delete. </param>
            <param name="ignoreChildren"> True to ignore children, false = delete the child groups. </param>
            <param name="delPrm">		  The machine group deletion parameters, ignored if not a machine group. </param>
            <returns> A list of group IDs of deleted groups. </returns>
        </member>
        <member name="M:TpGrpList.DeleteExtraData(op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.OpMgr.OpGroupsAPI.DeleteMachineGroupsExtraDataPrm!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the extra data hanging off machine groups which shouldn't be there in the
		  first place. </summary>
            <param name="opGroup"> [in,out] The group to check. </param>
            <param name="delPrm">  If opGroup is a machine group, use these deletion parameters for the
					   extra data hanging off the machine group. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpGrpList.GetIds">
            <summary> Gets the identifiers for all the groups. </summary>
            <returns> The group IDs in m_MainArray order. </returns>
        </member>
        <member name="M:TpGrpList.ValidIndex(System.Int64)">
            <summary> Return true if index is within range of m_MainArray. </summary>
            <param name="index"> Zero-based index into m_MainArray. </param>
            <returns> Return true if index is within range of m_MainArray. </returns>
        </member>
        <member name="M:TpGrpList.SetDefaultOperationGroup(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets the active operation group in the main Operation Manager )moves the red insert
		  arrow).  Will also create a machine group and/or a toolpath if none exists. </summary>
            <param name="GroupID"> Identifier for the group to set as active. </param>
            <returns> A group ID of the group set as the active operation group. </returns>
        </member>
        <member name="M:TpGrpList.WriteFileGroups(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Writes our groups to the given file. </summary>
            <param name="File">					  [in,out] The file to write to. </param>
            <param name="DoNotWriteToolpathData"> True = only write geometry groups, not toolpath groups. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpGrpList.ReadFileGroups(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,TpGrpList*)">
            <summary> Reads groups from a file into given TpGrpList. </summary>
            <param name="File">			    [in,out] The file to read groups from. </param>
            <param name="CurrentGroupList"> [in,out] If non-null, a TpGrpList to store groups. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:TpGrpList.TransferFrom(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transfer the contents of source into our m_MainArray. </summary>
            <param name="source"> [in,out] Source to move into out m_MainArray. </param>
            <returns> ListReturnCode::ListOperationOK, ListOperationFailed or ListIndexNotFound. </returns>
        </member>
        <member name="M:TpGrpList.TransferTo(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transfer the contents of m_MainArray to the given target. </summary>
            <param name="target"> [in,out] Target for m_MainArray contents. </param>
            <returns> ListReturnCode::ListOperationOK, ListOperationFailed or ListIndexNotFound. </returns>
        </member>
        <member name="M:TpGrpList.IsEmpty">
            <summary> Query if this object is empty. </summary>
            <returns> True if empty, false if not. </returns>
        </member>
        <member name="M:TpGrpList.GetSize">
            <summary> Gets the size of m_MainArray. </summary>
            <returns> The size of m_MainArray. </returns>
        </member>
        <member name="M:TpGrpList.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:TpGrpList.#ctor(System.Int64)">
            <summary> Constructor. </summary>
            <param name="InitialSize"> Initial size of the underlying container. </param>
        </member>
        <member name="M:TpGrpList.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.InitGlobalInfo(op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Zero-out machine and job setup values in the given group. </summary>
            <param name="opGroup"> [in,out] The group to initalize. </param>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.Dump(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Dumps all the groups to the given file. </summary>
            <param name="groupIDs">		  The IDs of the groups to dump, empty = dump all groups. </param>
            <param name="outputFilename"> The file name to write to. </param>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.DumpGroupsATF(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Dumps all the groups to the given file. </summary>
            <param name="outputFilename"> The file name to write to. </param>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.DumpXml(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Dumps all the groups to the given file. </summary>
            <param name="groupIDs">		  The IDs of the groups to dump, empty = dump all groups. </param>
            <param name="outputFilename"> The file name to write to. </param>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.DumpGroup(op_group!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityMap!System.Runtime.CompilerServices.IsConst*,CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Dumps a group in detail. </summary>
            <param name="theGroup">   The group to dump. </param>
            <param name="pEntityMap"> If non-null, the entity map, nullptr = make new map. </param>
            <param name="strArray">   [in,out] The array of strings to fill in. </param>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.DumpGroup(op_group!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns a string of group info with minimal other details. </summary>
            <param name="theGroup"> The group to dump. </param>
            <returns> A string of group info with minimal other details. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroupTypeDescription(MCGroupType)">
            <summary> Gets a description for the given group type. </summary>
            <param name="groupType"> Type of the group. </param>
            <returns> The group type description. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.IsGeometryGroupType(MCGroupType)">
            <summary> Check for geometry group type. </summary>
            <param name="groupType"> Type of the group. </param>
            <param name="warn">		 (Optional) True to warn. </param>
            <returns> True if geometry group type, false if not. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.DeleteMachineInfo(CCNCMachine!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes the machine information in all groups that reference the given machine data. </summary>
            <param name="pMachine">		 Machine pointer to match. </param>
            <param name="machineEntIdn"> The machine entity's ent.ent_idn to match. </param>
            <returns> Returns list of IDs of the updated groups. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetFirstGroup(System.Boolean)">
            <summary> Gets a pointer to the the first toolpath-type group. </summary>
            <param name="machineGroup"> true = get ptr to first machine group, false = get ptr to first
							operation group. </param>
            <returns> A pointer to the the first toolpath-type group, nullptr if none found. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetOperationIdsFromGroup(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Gets a list of operation IDs owned by the group with the given ID. </summary>
            <param name="groupId">		 Identifier for the group. </param>
            <param name="doChildGroups"> True to also check child groups. </param>
            <returns> A list of operation IDs owned by the group with the given ID. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetOpMgrPositions">
            <summary> Builds and returns a map of group IDs and their 0-based positions in the main OpMgr. </summary>
            <returns> The map of group IDs and their list positions. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.SetSlotNumbers(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the op_group.slot value in each group based on their position in the given list
		  of group IDs. </summary>
            <param name="groupIdsInOrder"> A list of group IDs in tree control order. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.SortGroupsByHierarchy(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sort the underlying container in grpList by parent-child hierarchy, reset slot
		  numbers (op_group.slot). </summary>
            <param name="grpList"> [in,out] List of groups to sort. </param>
            <returns> first = true if group sort order is valid, second = true if sort order was updated,
		  third = true if slot numbers were updated. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.SortGroupsBySlotNumber(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sort the underlying container in grpList by slot number (op_group.slot). </summary>
            <param name="grpList"> [in,out] List of groups to sort. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.UpdateGroup(op_group!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Replaces the given group in our container. </summary>
            <param name="opGroup"> The group to replace. </param>
            <returns> Null if it fails (or doesn't exist), else a pointer to a const op_group. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.ImportGroups(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Import toolpath groups (excluding machine groups) from an external Mastercam file. </summary>
            <param name="sourceFileName"> Filename of the Mastercam file. </param>
            <param name="sourceGroupIds"> List of group IDs in the source file to import. </param>
            <param name="parentGroupId">  Parent group ID from your current file to be assigned as the parent of the imported
							  groups. </param>
            <param name="updateOpMgr">    True = update global Operation Manager, false = just add to container. </param>
            <returns> A map of old group IDs from the source file and their new group IDs in your current file. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetExternalGroups(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MCGroupType,System.Boolean)">
            <summary> Get a list of groups from external file. </summary>
            <param name="mastercamSourceFile"> The Mastercam source file to read from. </param>
            <param name="groupType">		   Type of the groups to return (GROUP_ALL, GROUP_OPERATIONS, etc). </param>
            <param name="warnIfEmpty">		   (Optional) True to display debug warning if no groups are found. </param>
            <returns> List of groups. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetProductCodes(System.Boolean)">
            <summary> Gets pairs of product codes and machine group pointers from the group list. </summary>
            <param name="unique"> True = return unique pairs in std::vector, false = return all groups. </param>
            <returns> The product codes. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetProductMask">
            <summary> Gets the product mask combined from all our machine groups. </summary>
            <returns> The product mask. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.SortByTypeForPreviousVersionFiles(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sort the underlying vector in a TpGrpList by group types (geometry groups, toolpath
		  groups, etc) for 2022 and earlier version files. </summary>
            <param name="grpList"> [in,out] List of groups to sort. </param>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroupNames(std.vector&lt;op_group!System.Runtime.CompilerServices.IsConst**,std.allocator&lt;op_group!System.Runtime.CompilerServices.IsConst**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets group names from a vector of group ptrs. </summary>
            <param name="opGroupPtrs"> The group ptrs. </param>
            <returns> The group names. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.MakeGroupName(System.Boolean,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;,std.less&lt;ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;&gt;,std.allocator&lt;ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes group name. </summary>
            <param name="isMachineGroup"> True if is machine group, false if not. </param>
            <param name="requestedName">  Name of the requested. </param>
            <param name="groupNames">	  List of existing group names to prevent duplicates. </param>
            <returns> A CString. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.MakeGroupName(System.Boolean,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;op_group!System.Runtime.CompilerServices.IsConst**,std.allocator&lt;op_group!System.Runtime.CompilerServices.IsConst**&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Makes a unique, unused group name. </summary>
            <param name="isMachineGroup"> True if is machine group, false if not. </param>
            <param name="requestedName">  If not empty, the name we'd like to use if not already used. </param>
            <param name="pOpGroupPtrs">   (Optional) List of group pointers to check for an existing name,
							  nullptr = check global group list. </param>
            <returns> The next available group name. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GroupIsEmpty(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Queries if a group with the given ID is a parent of a subgroup or toolpath operations. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> True if group is a parent of another or a toolpath operation, false if not. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GroupIsLocked(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean)">
            <summary> Query if the group with the given ID or any of its parent groups are locked. </summary>
            <param name="groupId">		 Identifier for the group. </param>
            <param name="checkParents">  True - check if any parent groups are locked, false - just check the subject group. </param>
            <param name="checkChildren"> (Optional) True - check if any child groups are locked, false - just check the
							 subject group. </param>
            <returns> Return group ID of locked group (the subject ID or its locked parent), 0 = not locked. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GroupIsHidden(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Query if the group with the given ID or any of its parent groups are considered
		  'hidden'. </summary>
            <param name="groupId">	    Identifier for the group. </param>
            <param name="checkParents"> (Optional) true - check if any parent groups are hidden, false -
							just check the subject group. </param>
            <returns> Return group ID of hidden group (the subject ID or its hidden parent), 0 = not hidden. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetHiddenGroupAndOperationIds">
            <summary> Collect and return IDs from hidden toolpath groups and operations. </summary>
            <returns> first = the hidden group IDs, second = operation IDs owned by the hidden groups. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetHiddenGroupAndOperationIds(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,TpOpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Collect and return IDs from hidden toolpath groups and operations. </summary>
            <param name="grpList"> List of groups to look in. </param>
            <param name="opList">  List of operations to look in. </param>
            <returns> first = the hidden group IDs, second = operation IDs owned by the hidden groups. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetChildGroupIds(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Gets all the IDs of parent groups for the group with the given ID. </summary>
            <param name="grpList">		 [in,out] List of groups. </param>
            <param name="parentGroupId"> Identifier for the group. </param>
            <param name="deletionOrder"> false = return list in parent-child order, true = return list in
							 proper deletion-order (child-parent order). </param>
            <returns> List of parent group IDs for the group with the given ID. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetChildGroupIds(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Gets all the IDs of child groups for the group with the given ID. </summary>
            <param name="parentId">		 Identifier for the group. </param>
            <param name="deletionOrder"> false = return list in parent-&gt;child order, true = return list in
							 proper deletion-order (child-&gt;parent order). </param>
            <returns> List of parent group IDs for the group with the given ID. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetParentGroupIds(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Gets all the IDs of parent groups for the group with the given ID. </summary>
            <param name="grpList">		 [in,out] List of groups. </param>
            <param name="childId">		 Identifier for the group. </param>
            <param name="deletionOrder"> false = return list in parent-child order, true = return list in
							 proper deletion-order (child-parent order). </param>
            <returns> List of parent group IDs for the group with the given ID. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetParentGroupIds(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Gets all the IDs of parent groups for the group with the given ID. </summary>
            <param name="childId">		 Identifier for the group. </param>
            <param name="deletionOrder"> false = return list in parent-child order, true = return list in
							 proper deletion-order (child-parent order). </param>
            <returns> List of parent group IDs for the group with the given ID. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.IsParentGroupId(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if group ID of 'suspectedParentId' is a parent of 'childId'. </summary>
            <param name="suspectedParentId"> Identifier for the suspected parent group. </param>
            <param name="childId">			 Identifier for the child group. </param>
            <returns> True if suspectedParentId is a parent of childId, false if not. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetHierarchy(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.OpMgr.OpGroupsAPI.HierarchyDirection,System.Boolean)">
            <summary> Gets a list of group IDs for the given parents or children hierarchy. </summary>
            <param name="grpList">		 [in,out] List of groups to look through. </param>
            <param name="groupId">		 Identifier for the subject group. </param>
            <param name="hDir">			 HierarchyDirection::Parents to collect IDs of parent groups,
							 HierarchyDirection::Children to collect IDs of child groups. </param>
            <param name="deletionOrder"> false = return list in parent-&gt;child order, true = return list in
							 proper deletion-order (child-&gt;parent order). </param>
            <returns> List of group IDs in hierarchy order. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetHierarchy(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.OpMgr.OpGroupsAPI.HierarchyDirection,System.Boolean)">
            <summary> Gets a list of group IDs for the given parents or children hierarchy. </summary>
            <param name="groupId">		 Identifier for the subject group. </param>
            <param name="hDir">			 HierarchyDirection::Parents to collect IDs of parent groups,
							 HierarchyDirection::Children to collect IDs of child groups. </param>
            <param name="deletionOrder"> false = return list in parent-&gt;child order, true = return list in
							 proper deletion-order (child-&gt;parent order). </param>
            <returns> List of group IDs in hierarchy order. </returns>
        </member>
        <member name="T:Cnc.OpMgr.OpGroupsAPI.HierarchyDirection">
            <summary> Values that represent hierarchy directions for use in calls to GetHierarchy (). </summary>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.CopyGroups(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;op_group,std.allocator&lt;op_group&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Copies groups from source to target.  Groups IDs may be reassigned if they conflict
		  with existing groups in the target list. </summary>
            <param name="target">		    [in,out] TpGrpList to copy to. </param>
            <param name="source">		    Source list of groups to copy. </param>
            <param name="sortBySlotNumber"> True to sort underlying container by slot number
								(op_group.slot) after copying. </param>
            <returns> List of pairs (pointer to the newly added group, old group ID as its value may have
		  been reassigned as to not conflict with any existing groups. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.CopyGroups(std.vector&lt;op_group,std.allocator&lt;op_group&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Copies groups from source to target.  Groups IDs may be reassigned if they conflict
		  with existing groups in the target list. </summary>
            <param name="source">		    Source list of groups to copy. </param>
            <param name="sortBySlotNumber"> True to sort underlying container by slot number
								(op_group.slot) after copying. </param>
            <returns> List of pairs (pointer to the newly added group, old group ID as its value may have
		  been reassigned as to not conflict with any existing groups. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetNextGroupId(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the next unused, unique group ID. </summary>
            <param name="grpList"> List of groups to look through. </param>
            <returns> The next unused, unique group ID. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetNextGroupId">
            <summary> Gets the next unused, unique group ID. </summary>
            <returns> The next unused, unique group ID. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.IsCollectionGroup(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if group with the given ID is the kind that contains a collection of operations that cannot be
		  deleted, edited or added to. </summary>
            <param name="groupId"> The ID of the group to check. </param>
            <returns> True if the group is a 'collection' group, false if not. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.IsLastRemainingGroup(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if group with the given ID is the last remaining machine or toolpath group. </summary>
            <param name="grpList"> List of groups. </param>
            <param name="groupId"> The ID of the group to check. </param>
            <returns> True if last group, false if not. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.IsToolpathGroup(op_group!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'opGroup' is toolpath group (i.e. subgroup of a machine group). </summary>
            <param name="opGroup"> The toolpath group to check. </param>
            <returns> True if a toolpath group, false if not. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.IsMachineGroup(op_group!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Query if 'opGroup' is machine group. </summary>
            <param name="opGroup">		   The machine group to check. </param>
            <param name="checkMachinePtr"> True to check if machine pointer is not null. </param>
            <returns> True if machine group, false if not. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.IsEmpty(TpGrpList!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'grpList' is empty. </summary>
            <param name="grpList"> List of groups. </param>
            <returns> True if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.IsEmpty">
            <summary> Query if this object is empty. </summary>
            <returns> True if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroupCount">
            <summary> Gets the number of groups. </summary>
            <returns> The number of groups. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroupIdsUsedInOperations">
            <summary> Builds a map of group IDs and the IDs of operations that reference them. </summary>
            <returns> A map of group IDs and the IDs of operations that reference them. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroupIds(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a list of group IDs in slot number order. </summary>
            <param name="grpList"> The list of groups to look through. </param>
            <returns> A list of group IDs in slot number order. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroupIds">
            <summary> Gets a set of group identifiers. </summary>
            <returns> A set of group identifiers. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.DeleteAllGroups(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,Cnc.OpMgr.OpGroupsAPI.DeleteMachineGroupsExtraDataPrm!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes all toolpath groups. </summary>
            <param name="grpList">   [in,out] List of groups to delete. </param>
            <param name="onlyEmpty"> true = only delete groups that are not referenced by toolpath
						 operations, false = delete all
						 . </param>
            <param name="delPrm">    Deletion parameters (delete machines attached to machine groups,
						 etc). </param>
            <returns> A set of group and subgroup IDs deleted. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.DeleteAllGroups(System.Boolean,Cnc.OpMgr.OpGroupsAPI.DeleteMachineGroupsExtraDataPrm!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes all toolpath groups. </summary>
            <param name="onlyEmpty"> true = only delete groups that are not referenced by toolpath
						 operations, false = delete all
						 . </param>
            <param name="delPrm">    Deletion parameters (delete machines attached to machine groups,
						 etc). </param>
            <returns> A set of group and subgroup IDs deleted. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.DeleteGroup(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,Cnc.OpMgr.OpGroupsAPI.DeleteMachineGroupsExtraDataPrm!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the group with the given ID. </summary>
            <param name="grpList">   [in,out] List of groups. </param>
            <param name="groupId">   Identifier for the group. </param>
            <param name="onlyEmpty"> true = only delete groups that are not referenced by toolpath
						 operations, false = delete all
						 . </param>
            <param name="delPrm">    Deletion parameters (delete machines attached to machine groups,
						 etc). </param>
            <returns> A set of group and subgroup IDs deleted. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.DeleteGroup(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,Cnc.OpMgr.OpGroupsAPI.DeleteMachineGroupsExtraDataPrm!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the group with the given ID. </summary>
            <param name="groupId">   Identifier for the group. </param>
            <param name="onlyEmpty"> true = only delete groups that are not referenced by toolpath
						 operations, false = delete all
						 . </param>
            <param name="delPrm">    Deletion parameters (delete machines attached to machine groups,
						 etc). </param>
            <returns> A set of group and subgroup IDs deleted. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.AddGroups(std.vector&lt;op_group,std.allocator&lt;op_group&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Adds a group to the given list. </summary>
            <param name="opGroups">    List of groups to add.  Group IDs may be reassigned if they conflict with an existing
						   group. </param>
            <param name="newParentId"> (Optional) &gt;0 = new parent group id OpMgr, else use op_group.parent_grp_idn. </param>
            <returns> List of pairs (pointer to the newly added group, old group ID as its value may have been reassigned as to
		  not conflict with any existing groups. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.AddGroups(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;op_group,std.allocator&lt;op_group&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Adds a group to the given list. </summary>
            <param name="grpList">	   TpGrpList class to add groups to. </param>
            <param name="opGroups">    List of groups to add.  Group IDs may be reassigned if they conflicts with exiting
						   groups in grpList. </param>
            <param name="newParentId"> (Optional) &gt;0 = new parent group id OpMgr, else use op_group.parent_grp_idn. </param>
            <returns> List of pairs (pointer to the newly added group, old group ID as its value may have been reassigned as to
		  not conflict with any existing groups. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetActiveGroupPtr(System.Boolean)">
            <summary> Searches for the group considered 'active' in the OpMgr's tree control. </summary>
            <param name="createNew"> True to create a new machine and toolpath group if none found. </param>
            <returns> Pointer to the active group. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetRootGroupPtr(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets a point to the root group of the group with the given ID. </summary>
            <param name="grpList"> [in,out] List of groups to look through. </param>
            <param name="groupId"> Identifier for the group. </param>
            <returns> Pointer to the root group, nullptr if group not found. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetRootGroupPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets a point to the root group of the group with the given ID. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> Pointer to the root group, nullptr if group not found. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroups(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.OpMgr.GroupSortMethod)">
            <summary> Gets copies of all the groups. </summary>
            <param name="grpList">    [in,out] List of groups to look through. </param>
            <param name="sortMethod"> (Optional) The sorting method. </param>
            <returns> vector of groups. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroups(Cnc.OpMgr.GroupSortMethod)">
            <summary> Gets copies of all the groups. </summary>
            <param name="sortMethod"> (Optional) The sorting method. </param>
            <returns> vector of groups. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroupPtrs(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.OpMgr.GroupSortMethod)">
            <summary> Builds and returns a list of const op_group * to all our groups. </summary>
            <param name="grpList">    [in,out] List of groups. </param>
            <param name="sortMethod"> (Optional) The sorting method. </param>
            <returns> A list of const op_group * to all our groups. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroupPtrs(Cnc.OpMgr.GroupSortMethod)">
            <summary> Builds and returns a list of const op_group * to all our groups. </summary>
            <param name="sortMethod"> (Optional) The sorting method. </param>
            <returns> A list of const op_group * to all our groups. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroupPtrs(std.function&lt;(op_group!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(op_group!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.OpMgr.GroupSortMethod)">
            <summary> Gets group pointers that pass the mask function. </summary>
            <param name="includeMaskFunction"> The mask function. </param>
            <param name="sortMethod">		   (Optional) The sorting method. </param>
            <returns> vector of group pointers. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetMachineGroupPtrs(System.Boolean)">
            <summary> Returns a list of machine (root) group ptrs. </summary>
            <param name="checkMachinePtr"> true = check if machine pointer in group is valid. </param>
            <returns> A list of machine (root) group ptrs. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroupPtr(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a point to the group with the given name in the given list (NOT case sensitive). </summary>
            <param name="grpList"> [in,out] List of groups to look through. </param>
            <param name="name">    Name of the group. </param>
            <returns> Pointer to the group, nullptr if group not found. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroupPtr(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a point to the group with the given name (NOT case sensitive). </summary>
            <param name="name"> Name of the group. </param>
            <returns> Pointer to the group, nullptr if group not found. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroupPtr(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets a point to the group with the given ID in the given list. </summary>
            <param name="grpList"> [in,out] List of groups to look through. </param>
            <param name="groupId"> Identifier for the group. </param>
            <returns> Pointer to the group, nullptr if group not found. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.GetGroupPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets a point to the group with the given ID. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> Pointer to the group, nullptr if group not found. </returns>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.DeleteMachineGroupsExtraDataPrm.#ctor(System.Boolean)">
            <summary> Constructor. </summary>
            <param name="allOn"> True to enable all, false to disable all. </param>
        </member>
        <member name="M:Cnc.OpMgr.OpGroupsAPI.DeleteMachineGroupsExtraDataPrm.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Cnc.OpMgr.OpGroupsAPI.DeleteMachineGroupsExtraDataPrm">
            <summary> Class for passing deletion parameters to DeleteExtraData() </summary>
        </member>
        <member name="T:Cnc.OpMgr.GroupSortMethod">
            <summary> Values that represent group sorting methods. </summary>
        </member>
        <member name="M:TpMatMgr.PopListStacks">
 @par Purpose:
		This virtual method override pops list objects off of the list stacks.

 @return		Returns true if the list objects were popped off the stacks correctly and false if not.

</member>
        <member name="M:TpMatMgr.PushListStacks">
 @par Purpose:
		This virtual method override pushes new list objects onto the list stacks.

 @return		Returns true if new list objects were pushed onto the stacks correctly and false if not.

</member>
        <member name="M:TpMatMgr.Dispose">
 @par Purpose:
		This is the default TpMatMgr destructor. It empties all of the list stacks upon destruction.

</member>
        <member name="M:TpMatMgr.#ctor">
 @par Purpose:
		This is the default TpMatMgr constructor. It initializes the list stacks upon creation.

</member>
        <member name="M:TpMatMgr.EmptyAllListStacks">
 @par Purpose:
		This virtual method empties all of the list stacks. This method is marked as private because
	the list stacks should only be emptied when the manager gets destructed.

 @return	A boolean value indicating whether the emptying of the lists stacks was successful or not.

</member>
        <member name="F:TpMatMgr.m_MatListStack">
This is the manager class's main material list stack. This is where instances of our main material lists get stored.
</member>
        <member name="T:TpMatMgr">
@par Purpose:
	This class's purpose is to hold and work with instances of the op manager material list classes for the life
of a given Mastercam app execution. It also houses the material list stacks themselves, which we use to manage
temporary list creation situations (see base TpMgr class declaration for more details).


@defgroup assocvar_ch15 nci line types 
@{ 
@} 
</member>
        <member name="T:ListReturnCode">
List Return Code types
</member>
        <member name="M:TpMgr.PopListStacks">
 @par Purpose:
		This virtual method needs to be overridden in order to pop list objects off of the list stacks.
	This needs to be handled in the derived classes because the base classes have no idea which list
	stacks exist in the derived classes.

 @return		Should return true if the list objects were popped off the stacks correctly and false if not.

</member>
        <member name="M:TpMgr.PushListStacks">
 @par Purpose:
		This virtual method needs to be overridden in order to push new list objects onto the list stacks.
	This needs to be handled in the derived classes because the base classes have no idea which list
	stacks exist in the derived classes.

 @return		Should return true if new list objects were pushed onto the stacks correctly and false if not.

</member>
        <member name="M:TpMgr.GetStackDepth">
 @par Purpose:
		This method returns the number of lists in each list stack.

 @return	The return value is the number of lists in the each list stack.

</member>
        <member name="M:TpMgr.#ctor">
 @par Purpose:
		This is the basic TpMgr constructor. Note that the stack depth initializes to zero.

</member>
        <member name="M:TpMgr.EmptyAllListStacks">
 @par Purpose:
		This virtual method needs to be overridden in order to empty out all of the list stacks. Since
	only the derived classes actually know which lists exist in their class, that cleanup has to be
	done on their end.

 @return		Should return true if the list stacks were emptied correctly and false if not.

</member>
        <member name="F:TpMgr.m_StackDepth">
This is a running tally of how many lists are on the stacks at any given time.
</member>
        <member name="T:TpMgr">
@par Purpose:
	This class's purpose is to set up an interface for the managing of Mastercam's internal Op Manager lists.
The list objects are managed in stacks, which gives Mastercam some flexibility when it has to create new 'main'
lists for temporary purposes (temporary databases, file I/O, etc.). In those situations, the list stacks allow
us to push new, temporary list objects onto the stacks for use during the duration of the temporary situation.
Once no longer needed, we can then pop those temporary lists off the stacks and still be left with our original
lists still completely intact. This architecture removes the need to swap memory in and out for temporary lists
and still easily accomodates nested temporary list creation situations.

</member>
        <member name="M:Cnc.Tool.TlCutParam.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCutParam.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlCutParam.SetManufacturer(Cnc.Tool.TlManufacturer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets a manufacturer. </summary>
            <param name="manufacturer"> The manufacturer. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Sets a manufacturer. </summary>
            <param name="manufacturer"> The manufacturer. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCutParam.SetWorkMaterial(Cnc.Tool.TlWorkMaterial!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets a work material. </summary>
            <param name="material"> The material. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Sets a work material. </summary>
            <param name="material"> The material. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCutParam.SetOpType(Cnc.Tool.TlOpType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets an operation type. </summary>
            <param name="type"> The type. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Sets an operation type. </summary>
            <param name="type"> The type. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCutParam.SetToolType(Cnc.Tool.TlToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets a tool type. </summary>
            <param name="type"> The type. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Sets a tool type. </summary>
            <param name="type"> The type. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCutParam.SetGrade(Cnc.Tool.TlToolGrade!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets a grade. </summary>
            <param name="grade">    The grade. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
            <summary>   Sets a grade. </summary>
            <param name="grade">    The grade. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderCompare(tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two holders, returns two if they are identical, false otherwise. </summary>
            <param name="holderA"> A reference to the first holder. </param>
            <param name="holderB"> A reference to the second holder. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Given two holders, returns two if they are identical, false otherwise. </summary>
            <param name="holderA"> A reference to the first holder. </param>
            <param name="holderB"> A reference to the second holder. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderUpdateData(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given new data to store in the holder, attaches all the data and setups up the holder correctly. </summary>
            <param name="holderIDN"> The IDN of the holder to modify. </param>
            <param name="source">    Source for the holder data. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Given new data to store in the holder, attaches all the data and setups up the holder correctly. </summary>
            <param name="holderIDN"> The IDN of the holder to modify. </param>
            <param name="source">    Source for the holder data. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderUpdateData(System.Int32!System.Runtime.CompilerServices.IsLong,System.Double!System.Runtime.CompilerServices.IsConst*,System.UInt64,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt64,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
            <summary> Given new data to store in the holder, attaches all the data and setups up the holder correctly. </summary>
            <param name="holderIDN">	   The IDN of the holder to modify. </param>
            <param name="holderData">	   Pointer to the segment data for the holder. </param>
            <param name="holderDataSize">  The total size of holderData. </param>
            <param name="libraryName">	   Pointer to the library name. </param>
            <param name="libraryNameSize"> The number of characters in the library name. </param>
            <param name="holderName">	   Pointer to the holder name. </param>
            <param name="holderNameSize">  The number of characters in the holder name. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Given new data to store in the holder, attaches all the data and setups up the holder correctly. </summary>
            <param name="holderIDN">	   The IDN of the holder to modify. </param>
            <param name="holderData">	   Pointer to the segment data for the holder. </param>
            <param name="holderDataSize">  The total size of holderData. </param>
            <param name="libraryName">	   Pointer to the library name. </param>
            <param name="libraryNameSize"> The number of characters in the library name. </param>
            <param name="holderName">	   Pointer to the holder name. </param>
            <param name="holderNameSize">  The number of characters in the holder name. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderExists(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Given an ent_idn, returns true if the holder exists, false otherwise. </summary>
            <param name="holderIDN"> The holder idn. </param>
            <returns> true is the holder exists, false otherwise. </returns>
            <summary> Given an ent_idn, returns true if the holder exists, false otherwise. </summary>
            <param name="holderIDN"> The holder idn. </param>
            <returns> true is the holder exists, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderGetHolder(System.Int32!System.Runtime.CompilerServices.IsLong,tp_holder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given a ent_idn, retrieves the tp_holder for this holder. </summary>
            <remarks> For more details on the holder profile (holder data), read information at the top of TlHolder_CH.h (in
		  particular about holderEntity.u.holder.holder_ptr_numsegs and triplets at
		  holderEntity.u.holder.holder_ptr) </remarks>
            <param name="holderIDN"> The holder idn. </param>
            <param name="holder">    The holder. </param>
            <returns> true if a matching holder entity was found, false otherwise. </returns>
            <summary> Given a ent_idn, retrieves the tp_holder for this holder. </summary>
            <remarks> For more details on the holder profile (holder data), read information at the top of TlHolder_CH.h (in
		  particular about holderEntity.u.holder.holder_ptr_numsegs and triplets at
		  holderEntity.u.holder.holder_ptr) </remarks>
            <param name="holderIDN"> The holder idn. </param>
            <param name="holder">    The holder. </param>
            <returns> true if a matching holder entity was found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderGetEnt(System.Int32!System.Runtime.CompilerServices.IsLong,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given a ent_idn, retrieves the entity for this holder. </summary>
            <remarks> For more details on the holder profile (holder data), read information at the top of TlHolder_CH.h (in
		  particular about holderEntity.u.holder.holder_ptr_numsegs and triplets at
		  holderEntity.u.holder.holder_ptr) </remarks>
            <param name="holderIDN">    The holder idn. </param>
            <param name="holderEntity"> The holder entity. </param>
            <returns> true if a matching holder entity was found, false otherwise. </returns>
            <summary> Given a ent_idn, retrieves the entity for this holder. </summary>
            <remarks> For more details on the holder profile (holder data), read information at the top of TlHolder_CH.h (in
		  particular about holderEntity.u.holder.holder_ptr_numsegs and triplets at
		  holderEntity.u.holder.holder_ptr) </remarks>
            <param name="holderIDN">    The holder idn. </param>
            <param name="holderEntity"> The holder entity. </param>
            <returns> true if a matching holder entity was found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderCreateEnt(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new holder entity and stores it in the database. </summary>
            <param name="source"> Source for the holder data. </param>
            <returns> The ent_idn of the newly-created holder. </returns>
            <summary> Creates a new holder entity and stores it in the database. </summary>
            <param name="source"> Source for the holder data. </param>
            <returns> The ent_idn of the newly-created holder. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderCreateEnt(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new holder entity and stores it in the database. </summary>
            <param name="source"> Source for the holder data. </param>
            <returns> The ent_idn of the newly-created holder. </returns>
            <summary> Creates a new holder entity and stores it in the database. </summary>
            <param name="source"> Source for the holder data. </param>
            <returns> The ent_idn of the newly-created holder. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderCreateEnt">
            <summary>Creates a new holder entity and stores it in the database.</summary>
            <returns>The ent_idn of the newly-created holder.</returns>
            <summary>Creates a new holder entity and stores it in the database.</summary>
            <returns>The ent_idn of the newly-created holder.</returns>
        </member>
        <member name="M:Cnc.Tool.HolderCreateEnt(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt64,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
            <summary> Creates a new holder entity and stores it in the database. </summary>
            <param name="holder_lib">	    The library name to initialize this holder with. </param>
            <param name="holder_lib_size">  The length of the holder_lib string. </param>
            <param name="holder_name">	    The name of the holder. </param>
            <param name="holder_name_size"> The length of the holder_name string. </param>
            <returns> The ent_idn of the newly-created holder. </returns>
            <summary> Creates a new holder entity and stores it in the database. </summary>
            <param name="holder_lib">	    The library name to initialize this holder with. </param>
            <param name="holder_lib_size">  The length of the holder_lib string. </param>
            <param name="holder_name">	    The name of the holder. </param>
            <param name="holder_name_size"> The length of the holder_name string. </param>
            <returns> The ent_idn of the newly-created holder. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderSetSegmentCount(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt64)">
            <summary> Sets the number of segements for the holder and creates the needed memory to store the segments. </summary>
            <remarks> This function clears out the currently allocated memory. </remarks>
            <param name="holderIDN">    The ent_idn of the holder to modify. </param>
            <param name="segmentCount"> The number of segments this holder has. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Sets the number of segements for the holder and creates the needed memory to store the segments. </summary>
            <remarks> This function clears out the currently allocated memory. </remarks>
            <param name="holderIDN">    The ent_idn of the holder to modify. </param>
            <param name="segmentCount"> The number of segments this holder has. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderSetHolderName(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets the holder name for the holder. </summary>
            <remarks> This function clears out the currently allocated memory. </remarks>
            <param name="holderIDN">  The ent_idn of the holder to modify. </param>
            <param name="holderName"> The new holder name as a CString. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Sets the holder name for the holder. </summary>
            <remarks> This function clears out the currently allocated memory. </remarks>
            <param name="holderIDN">  The ent_idn of the holder to modify. </param>
            <param name="holderName"> The new holder name as a CString. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderSetHolderName(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
            <summary> Sets the holder name for the holder. </summary>
            <remarks> This function clears out the currently allocated memory. </remarks>
            <param name="holderIDN">	    The ent_idn of the holder to modify. </param>
            <param name="libraryName">	    A pointer to the buffer holding the new holder name. </param>
            <param name="holderNameLength"> The number of characters in the holder name. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Sets the holder name for the holder. </summary>
            <remarks> This function clears out the currently allocated memory. </remarks>
            <param name="holderIDN">	    The ent_idn of the holder to modify. </param>
            <param name="libraryName">	    A pointer to the buffer holding the new holder name. </param>
            <param name="holderNameLength"> The number of characters in the holder name. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderSetLibraryName(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets the holder name for the holder. </summary>
            <remarks> This function clears out the currently allocated memory. </remarks>
            <param name="holderIDN">   The ent_idn of the holder to modify. </param>
            <param name="libraryName"> The library name as a CString. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Sets the holder name for the holder. </summary>
            <remarks> This function clears out the currently allocated memory. </remarks>
            <param name="holderIDN">   The ent_idn of the holder to modify. </param>
            <param name="libraryName"> The library name as a CString. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderSetLibraryName(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
            <summary> Sets the library name for the holder. </summary>
            <remarks> This function clears out the currently allocated memory. </remarks>
            <param name="holderIDN">		 The ent_idn of the holder to modify. </param>
            <param name="libraryName">		 A pointer to the buffer holding the new library name. </param>
            <param name="libraryNameLength"> The number of characters in the library name. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Sets the library name for the holder. </summary>
            <remarks> This function clears out the currently allocated memory. </remarks>
            <param name="holderIDN">		 The ent_idn of the holder to modify. </param>
            <param name="libraryName">		 A pointer to the buffer holding the new library name. </param>
            <param name="libraryNameLength"> The number of characters in the library name. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderCreateLocalCopy(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Creates a local copy of the holder entity at the specified IDN. </summary>
            <param name="holderIDN"> The holder idn. </param>
            <returns> A holder allocation that cleans itself up on destruction or std::nullopt if there is no database holder. </returns>
            <summary> Creates a local copy of the holder entity at the specified IDN. </summary>
            <param name="holderIDN"> The holder idn. </param>
            <returns> A holder allocation that cleans itself up on destruction or std::nullopt if there is no database holder. </returns>
        </member>
        <member name="M:Cnc.Tool.HolderCopyHolder(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Creates a new holder with COPIES of the old holder data in the database. </summary>
            <param name="holderIDN"> The IDN of the database holder to copy. </param>
            <returns> The new entity IDN in the database. </returns>
            <summary> Creates a new holder with COPIES of the old holder data in the database. </summary>
            <param name="holderIDN"> The IDN of the database holder to copy. </param>
            <returns> The new entity IDN in the database. </returns>
        </member>
        <member name="M:Cnc.Tool.TpHolderUtils.CreateAllocation(std.vector&lt;Cnc.Tool.TlHolderSegment,std.allocator&lt;Cnc.Tool.TlHolderSegment&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Creates a legacy tp_holder allocation from the given holder segments, library name, and holder name. </summary>
            <param name="segments">    The segments. </param>
            <param name="libraryName"> Name of the library. </param>
            <param name="holderName">  Name of the holder. </param>
            <returns> The new holder allocation. </returns>
        </member>
        <member name="M:Cnc.Tool.TpHolderUtils.CreateCopyWithUpdatedData(tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*,System.UInt64,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt64,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
            <summary> Creates a copy of the specified holder. </summary>
            <param name="other">		   The holder to copy. </param>
            <param name="pSegmentData">    Information describing the segment. </param>
            <param name="segmentDataSize"> Size of the segment data. </param>
            <param name="libraryName">	   Name of the library. </param>
            <param name="libraryNameSize"> Size of the library name. </param>
            <param name="holderName">	   Name of the holder. </param>
            <param name="holderNameSize">  Size of the holder name. </param>
            <returns> The new holder allocation copy. </returns>
        </member>
        <member name="M:Cnc.Tool.TpHolderUtils.CreateCopy(tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a copy of the specified holder. </summary>
            <param name="other"> The holder to copy. </param>
            <returns> The new holder allocation copy. </returns>
        </member>
        <member name="M:Cnc.Tool.TpHolderUtils.AllocateNewMemory(tp_holder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt64,std.function&lt;(System.UInt64)*(System.UInt64)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Allocate new memory for the given holder. </summary>
            <param name="holder">	  The holder. </param>
            <param name="bufferSize"> Size of the buffer. </param>
            <param name="allocator">  The allocator. </param>
        </member>
        <member name="M:Cnc.Tool.TpHolderUtils.AllocateNewMemory(tp_holder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;(System.UInt64)*(System.UInt64)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Allocate new memory for the given holder. </summary>
            <param name="holder">    The holder. </param>
            <param name="allocator"> The allocator. </param>
        </member>
        <member name="M:Cnc.Tool.TpHolderUtils.GetBufferSize(tp_holder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets buffer size for the specified holder instance. </summary>
            <param name="holder"> The holder. </param>
            <returns> The buffer size. </returns>
        </member>
        <member name="T:Cnc.Tool.TpHolderUtils.HolderAllocation">
            <summary> A tp_holder allocation for use in managing legacy tool holders and their variable length memory. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolAssembly.TlToolAssemblyDeserializationImpl">
            <summary>	A tool assembly deserialization implementation. </summary>
            <summary>	A tool assembly deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.UpdateMemberPointers">
            <summary>	Sets the various member TlToolAssembly pointers to this instance. </summary>
            <summary>	Sets the various member TlToolAssembly pointers to this instance. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the reset ids operation. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
            <summary>	Executes the reset ids operation. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.MoveComponent(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Move the specified component on the tree to the next or previous connection on its parent. If a component
		  already exists on that parent connection, the existing component is moved in a swap operation. </summary>
            <remarks> If a swap takes place and the action affects which insert is the primary insert, definitions will get
		  reordered to reflect the new tree order. </remarks>
            <param name="componentId"> Identifier for the component. </param>
            <param name="moveUp">	   True to move up, false to move down. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Move the specified component on the tree to the next or previous connection on its parent. If a component
		  already exists on that parent connection, the existing component is moved in a swap operation. </summary>
            <remarks> If a swap takes place and the action affects which insert is the primary insert, definitions will get
		  reordered to reflect the new tree order. </remarks>
            <param name="componentId"> Identifier for the component. </param>
            <param name="moveUp">	   True to move up, false to move down. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.DeleteComponent(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the component described by the given identifier. </summary>
            <remarks> If the component is an insert, all definitions that reference it will be deleted. If the component is a
		  holder, all inserts and definitions beneath it will be deleted. If the component is an adaptive item,
		  deletion will only succeed if there is at most one child, and that child will take the place of the
		  deleted item in the component tree. </remarks>
            <param name="id"> The identifier. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Deletes the component described by the given identifier. </summary>
            <remarks> If the component is an insert, all definitions that reference it will be deleted. If the component is a
		  holder, all inserts and definitions beneath it will be deleted. If the component is an adaptive item,
		  deletion will only succeed if there is at most one child, and that child will take the place of the
		  deleted item in the component tree. </remarks>
            <param name="id"> The identifier. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.UpdateInsert(Cnc.Tool.TlAssemblyInsert!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the insert described by value. </summary>
            <param name="value">	The value. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Updates the insert described by value. </summary>
            <param name="value">	The value. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.GetInsertPtrForDefinitionId(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets insert pointer for the given lathe definition identifier. </summary>
            <param name="definitionId">	Identifier for the lathe definition. </param>
            <returns>	Null if it fails, else the insert pointer for definition identifier. </returns>
            <summary>	Gets insert pointer for the given lathe definition identifier. </summary>
            <param name="definitionId">	Identifier for the lathe definition. </param>
            <returns>	Null if it fails, else the insert pointer for definition identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.GetInsertForSlotPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Gets insert associated to the lathe definition at the specified slot. </summary>
            <param name="slot">	The slot. </param>
            <returns>	Null if it fails, else the insert for slot. </returns>
            <summary>	Gets insert associated to the lathe definition at the specified slot. </summary>
            <param name="slot">	The slot. </param>
            <returns>	Null if it fails, else the insert for slot. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.GetPrimaryInsertPtr">
            <summary>	Gets insert associated to the primary lathe definition. </summary>
            <returns>	Null if it fails, else the insert. </returns>
            <summary>	Gets insert associated to the primary lathe definition. </summary>
            <returns>	Null if it fails, else the insert. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.DuplicateInsertAndLatheDefinitions(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Duplicates the insert described by the given ID and all definitions associated to the insert. </summary>
            <param name="id">	The identifier. </param>
            <returns>	The ID of the new insert if successful, or GUID_NULL if not. </returns>
            <summary>	Duplicates the insert described by the given ID and all definitions associated to the insert. </summary>
            <param name="id">	The identifier. </param>
            <returns>	The ID of the new insert if successful, or GUID_NULL if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.DuplicateLatheDefinitionToInsert(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Duplicates the lathe definition to the specified insert. </summary>
            <param name="definitionId"> Identifier for the definition to duplicate. </param>
            <param name="insertId">	    Identifier for the insert to duplicate to. </param>
            <returns> The ID of the new definition if successful, or GUID_NULL if not. </returns>
            <summary> Duplicates the lathe definition to the specified insert. </summary>
            <param name="definitionId"> Identifier for the definition to duplicate. </param>
            <param name="insertId">	    Identifier for the insert to duplicate to. </param>
            <returns> The ID of the new definition if successful, or GUID_NULL if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.DuplicateLatheDefinition(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Duplicates the lathe definition described by the given ID. </summary>
            <param name="id">	The identifier of the definition to duplciate. </param>
            <returns>	The ID of the new definition if successful, or GUID_NULL if not. </returns>
            <summary>	Duplicates the lathe definition described by the given ID. </summary>
            <param name="id">	The identifier of the definition to duplciate. </param>
            <returns>	The ID of the new definition if successful, or GUID_NULL if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.DeleteLatheDefinition(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Deletes the lathe definition described by ID. </summary>
            <param name="id">	The identifier. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Deletes the lathe definition described by ID. </summary>
            <param name="id">	The identifier. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.UpdateLatheDefinition(Cnc.Tool.TlLatheDefinition!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the lathe definition described by value. </summary>
            <param name="value">	The value. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Updates the lathe definition described by value. </summary>
            <param name="value">	The value. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.GetInsertPrimaryDefinitionPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets the primary definition pointer for the specified assembly insert. </summary>
            <param name="insertId">	Identifier for the assembly insert. </param>
            <returns>	Null if it fails, else the insert primary definition pointer. </returns>
            <summary>	Gets the primary definition pointer for the specified assembly insert. </summary>
            <param name="insertId">	Identifier for the assembly insert. </param>
            <returns>	Null if it fails, else the insert primary definition pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.AnyDefinitionsUsingInsert(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Query if any definitions using the insert described by insertId. </summary>
            <param name="insertId">	Identifier for the insert. </param>
            <returns>	True if any definitions are using the insert, false if not. </returns>
            <summary>	Query if any definitions using the insert described by insertId. </summary>
            <param name="insertId">	Identifier for the insert. </param>
            <returns>	True if any definitions are using the insert, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.GetLatheDefinitionAtIdPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets the lathe definition with the specified identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	Null if it fails, else the lathe definition with the specified identifier. </returns>
            <summary>	Gets the lathe definition with the specified identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	Null if it fails, else the lathe definition with the specified identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.GetLatheDefinitionAtSlotPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Gets the lathe definition at the specified slot. </summary>
            <param name="slot">	The slot. </param>
            <returns>	Null if it fails, else the lathe definition at slot. </returns>
            <summary>	Gets the lathe definition at the specified slot. </summary>
            <param name="slot">	The slot. </param>
            <returns>	Null if it fails, else the lathe definition at slot. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.IsLatheDefinitionOnPrimaryInsert(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Query if 'slot' is the slot of a definition on the primary insert. </summary>
            <param name="slot">	The slot. </param>
            <returns>	True if lathe definition primary insert, false if not. </returns>
            <summary>	Query if 'slot' is the slot of a definition on the primary insert. </summary>
            <param name="slot">	The slot. </param>
            <returns>	True if lathe definition primary insert, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.IsPrimaryInsertLatheDefinition(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Query if 'slot' is the slot of the primary lathe definition on the insert it is associated to. </summary>
            <param name="slot">	The slot. </param>
            <returns>	True if primary insert definition, false if not. </returns>
            <summary>	Query if 'slot' is the slot of the primary lathe definition on the insert it is associated to. </summary>
            <param name="slot">	The slot. </param>
            <returns>	True if primary insert definition, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.IsPrimaryLatheDefinition(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Query if 'slot' is the slot of the primary lathe definition on this tool assembly. </summary>
            <param name="slot">	The slot. </param>
            <returns>	True if primary lathe definition, false if not. </returns>
            <summary>	Query if 'slot' is the slot of the primary lathe definition on this tool assembly. </summary>
            <param name="slot">	The slot. </param>
            <returns>	True if primary lathe definition, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.HasLatheDefinitionAtSlot(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Query if this tool assembly has a lathe definition at the specified slot. </summary>
            <param name="slot">	The slot. </param>
            <returns>	True if there's a contained lathe definition at the given slot, false if not. </returns>
            <summary>	Query if this tool assembly has a lathe definition at the specified slot. </summary>
            <param name="slot">	The slot. </param>
            <returns>	True if there's a contained lathe definition at the given slot, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.GetOverallLength(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Gets overall length. </summary>
            <param name="slot">	The slot. </param>
            <returns>	The overall length. </returns>
            <summary>	Gets overall length. </summary>
            <param name="slot">	The slot. </param>
            <returns>	The overall length. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.HasMultipleInserts">
            <summary> Query if there are multiple inserts defined for this tool assembly. </summary>
            <returns> True if there are multiple inserts defined for this tool, false if not. </returns>
            <summary> Query if there are multiple inserts defined for this tool assembly. </summary>
            <returns> True if there are multiple inserts defined for this tool, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.GetPrimaryLatheDefinitionPtr">
            <summary>	Gets the primary lathe definition that represents the tool at tool change position. </summary>
            <returns>	Null if it fails, else the primary lathe definition. </returns>
            <summary>	Gets the primary lathe definition that represents the tool at tool change position. </summary>
            <returns>	Null if it fails, else the primary lathe definition. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.UpdateHolder(Cnc.Tool.TlTurnHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the holder described by updatedHolder. </summary>
            <param name="updatedHolder">	The updated holder. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Updates the holder described by updatedHolder. </summary>
            <param name="updatedHolder">	The updated holder. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.GetHolderPtr">
            <summary>	Gets a pointer to the main holder of this 3D tool assembly. </summary>
            <returns>	Null if it fails, else the holder pointer. </returns>
            <summary>	Gets a pointer to the main holder of this 3D tool assembly. </summary>
            <returns>	Null if it fails, else the holder pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.UpdateComponent(Cnc.Tool.TlAssemblyComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the component described by value. </summary>
            <param name="component">	The value. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Updates the component described by value. </summary>
            <param name="component">	The value. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.UpdateConnection(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the connection described by connection. </summary>
            <param name="connection">	The connection. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Updates the connection described by connection. </summary>
            <param name="connection">	The connection. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.GetMachineSideConnectionPtr">
            <summary>	Gets machine side connection pointer. </summary>
            <returns>	Null if it fails, else the machine side connection pointer. </returns>
            <summary>	Gets machine side connection pointer. </summary>
            <returns>	Null if it fails, else the machine side connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.GetOpenLatheDefinitionSlot">
            <summary>	Gets the next open lathe definition slot. </summary>
            <returns>	The open lathe definition slot. </returns>
            <summary>	Gets the next open lathe definition slot. </summary>
            <returns>	The open lathe definition slot. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.GetLatheDefinitionSlots">
            <summary>	Gets a collection of slots used by the contained lathe definitions. </summary>
            <returns>	The lathe definition slots. </returns>
            <summary>	Gets a collection of slots used by the contained lathe definitions. </summary>
            <returns>	The lathe definition slots. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.op_Assign(Cnc.Tool.TlToolAssembly*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.op_Assign(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
            <summary>	Assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.#ctor(Cnc.Tool.TlToolAssembly*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move constructor. </summary>
            <param name="other">	The other tool assembly to move from. </param>
            <summary>	Move constructor. </summary>
            <param name="other">	The other tool assembly to move from. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.#ctor(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Copy constructor. </summary>
            <param name="other">	The other tool assembly. </param>
            <summary>	Copy constructor. </summary>
            <param name="other">	The other tool assembly. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolAssembly.#ctor">
            <summary> Default constructor. </summary>
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlLatheDefinition.DoSetAssemblyPtr(Cnc.Tool.TlToolAssembly*)">
            <summary>	Executes the set assembly pointer operation. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
            <summary>	Executes the set assembly pointer operation. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
        </member>
        <member name="M:Cnc.Tool.TlLatheDefinition.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlLatheDefinition.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlLatheDefinition.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlLatheDefinition.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlLatheDefinition.GetAssemblyInsertPtr">
            <summary>	Gets assembly insert pointer.  </summary>
            <returns>	Null if it fails, else the assembly insert pointer. </returns>
            <summary>	Gets assembly insert pointer.  </summary>
            <returns>	Null if it fails, else the assembly insert pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfiguration.DoConvertUnits(System.Boolean)">
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfiguration.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the reset ids operation. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
            <summary>	Executes the reset ids operation. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfiguration.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfiguration.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlCuttingConfiguration.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyConfiguration.DoSetAssemblyPtr(Cnc.Tool.TlToolAssembly*)">
            <summary>	Executes the set assembly pointer operation. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
            <summary>	Executes the set assembly pointer operation. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyConfiguration.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyConfiguration.GetIsMetric">
            <summary>	Query if this object is metric. </summary>
            <returns>	True if metric, false if not. </returns>
            <summary>	Query if this object is metric. </summary>
            <returns>	True if metric, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyConfiguration.SetAssemblyPtr(Cnc.Tool.TlToolAssembly*)">
            <summary>	Sets the tool assembly pointer. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
            <summary>	Sets the tool assembly pointer. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyConfiguration.GetAssemblyPtr">
            <summary>	Gets the tool assembly pointer. </summary>
            <returns>	The tool assembly pointer. </returns>
            <summary>	Gets the tool assembly pointer. </summary>
            <returns>	The tool assembly pointer. </returns>
            <summary>	Gets the tool assembly pointer. </summary>
            <returns>	The tool assembly pointer. </returns>
            <summary>	Gets the tool assembly pointer. </summary>
            <returns>	The tool assembly pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsIDValidMaterialID(System.Guid)">
            <summary> Query if 'testID' is a valid material identifier. </summary>
            <param name="testID"> Identifier for the test. </param>
            <returns> true if identifier a valid material identifier, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsUser2">
            <summary> Query if this object is user 2. </summary>
            <returns> true if user 2, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsUser1">
            <summary> Query if this object is user 1. </summary>
            <returns> true if user 1, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsCeramic">
            <summary> Query if this object is ceramic. </summary>
            <returns> true if ceramic, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsTinCoated">
            <summary> Query if this object is tin coated. </summary>
            <returns> true if tin coated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsCarbide">
            <summary> Query if this object is carbide. </summary>
            <returns> true if carbide, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsHighSpeedSteel">
            <summary> Query if this object is high speed steel. </summary>
            <returns> true if high speed steel, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsDefinedMaterial">
            <summary> Query if this object is defined material. </summary>
            <returns> true if defined material, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.IsKnownMaterial">
            <summary> Query if this object is known material. </summary>
            <returns> true if known material, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMaterial.ToolMaterialCode">
            <summary> Tool Material Code </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.CopyFrom(Cnc.Tool.Interop.TlToolMaterial)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMaterial.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolMaterial">
            <summary> Defines the TlToolMaterial tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlOpGroup.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlOpGroup.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlOpGroup.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Adds an operation type identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Adds an operation type identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlOpGroup.AddOpTypeID(Cnc.Tool.TlOpType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Adds an operation type identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Adds an operation type identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlOpGroup.GetOpTypeIDs">
            <summary>	Gets the operation type ids. </summary>
            <returns>	The operation type ids. </returns>
            <summary>	Gets the operation type ids. </summary>
            <returns>	The operation type ids. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyInsert.IsInverted">
            <summary> Gets or sets a value indicating whether the tool's IsInverted flag should be negated for this insert. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyInsert.IsInsertUp">
            <summary> Gets or sets a value indicating whether the insert is pointed up in its position on the assembly. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyInsert.ActiveSpindle">
            <summary> Gets or sets the active spindle used with this assembly insert. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyInsert.CuttingSide">
            <summary> Gets or sets the cutting side. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyInsert.BoundaryGenParams">
            <summary> Gets or sets the boundary generation parameters. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyInsert.CutPlaneLocator">
            <summary> Gets or sets the cutting plane locator. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyInsert.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyInsert.CopyFrom(Cnc.Tool.Interop.TlAssemblyInsert)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyInsert.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyInsert.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAssemblyInsert">
            <summary> Defines the TlAssemblyInsert tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.MoveComponent(System.Guid,System.Boolean)">
            <summary> Move the specified component to the next or previous connection on its parent. </summary>
            <param name="componentId"> Identifier for the component to move. </param>
            <param name="moveUp">	   True to move up, false to move down. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.CanMoveComponent(System.Guid,System.Boolean)">
            <summary> Determine if we can move the specified component. </summary>
            <param name="componentId"> Identifier for the component to investigate moving. </param>
            <param name="moveUp">	   True to check moving up, false for moving down. </param>
            <returns> True if we can move component, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.UpdateProjectionLengthAdjustment(System.Double,System.Boolean)">
            <summary> Updates the projection length adjustment described by value. </summary>
            <param name="value">		 The value. </param>
            <param name="valueIsMetric"> True if value is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetProjectionLengthAdjustment(System.Boolean)">
            <summary>	Gets projection length adjustment. </summary>
            <param name="getValueInMetric">	True to get value in metric. </param>
            <returns>	The projection length adjustment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.UpdateItemModelData(Cnc.Tool.Interop.TlGraphicsFile,System.String)">
            <summary> Updates the item model data. </summary>
            <param name="modelData">    Information describing the model. </param>
            <param name="geometryFile"> The name of the geometry file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetChildItemIds">
            <summary> Gets the identifiers of the assembly items contained within this component's child and all its children. </summary>
            <returns> The item identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetItemIds">
            <summary> Gets the identifiers of the assembly items contained within this component and all its children. </summary>
            <returns> The item identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.ApplyXformToParentConnection(System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Applies the given transform to the parent connection. </summary>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.ApplyXformToConnection(Cnc.Tool.Interop.TlConnection,System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Applies the given transform to the specified connection. </summary>
            <param name="connection">    The connection. </param>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.UpdateMachineSideConnectionXform(System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Updates the machine side connection transform. </summary>
            <param name="xform">		 The transform. </param>
            <param name="xformIsMetric"> True if transform is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.UpdateConnectionXform(Cnc.Tool.Interop.TlConnection,System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Updates the connection transform. </summary>
            <param name="connection">    The connection. </param>
            <param name="xform">		 The transform. </param>
            <param name="xformIsMetric"> True if transform is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.UpdateConnection(Cnc.Tool.Interop.TlConnection)">
            <summary> Updates the connection described by connection. </summary>
            <param name="connection"> The connection. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetConnectionPtr(System.Guid)">
            <summary>	Gets a const pointer to the connection described by connectionId </summary>
            <param name="connectionId">	Identifier for the connection. </param>
            <returns>	Null if it fails, else the connection. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetChildConnectionPtr(System.Guid)">
            <summary>	Gets the connection for the child component described by childId. </summary>
            <param name="childId">	Identifier for the child. </param>
            <returns>	Null if it fails, else the child connection. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.InsertComponentAboveChild(System.Guid,Cnc.Tool.Interop.TlAssemblyComponent)">
            <summary> Inserts the given component above the child component specified by the given identifier. </summary>
            <param name="childId">	    Identifier for the child. </param>
            <param name="newComponent"> The new component to insert above a specific child. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.DuplicateChild(System.Guid)">
            <summary>
Duplicates the child component described by childId. Searches down the tree from this component should the child
to duplicate not directly exist on this component.
</summary>
            <param name="childId">	Identifier for the child. </param>
            <returns>	The ID of the new component if successful, or GUID_NULL if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.DeleteChildAndAllChildren(System.Guid)">
            <summary> Deletes the child and all children described by childId. </summary>
            <param name="childId"> Identifier for the child. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.DeleteChild(System.Guid)">
            <summary>
Deletes the child component described by childId. Searches down the tree from this component should the child to
delete not directly exist on this component.
</summary>
            <param name="childId">	Identifier for the child. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.UpdateChild(Cnc.Tool.Interop.TlAssemblyComponent)">
            <summary>
Updates the child component described by child. Searches down the tree from this component should the child to
update not directly exist on this component.
</summary>
            <param name="child">	The child. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetComponentPtrOwningConnection(System.Guid)">
            <summary> Gets a pointer to the component that owns the connection specified by the given identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> Null if it fails, else the component pointer owning connection. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetChildPtrAttachedToConnection(System.Guid)">
            <summary> Gets the child component attached to the workpiece side connection specified by the given identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> Null if it fails, else the child attached to connection. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.HasChildComponentAtConnection(System.Guid)">
            <summary> Query if there is a child component attached to the workpiece side connection specified by the given
		  identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> True if child component at connection, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetChildPtr(System.Guid)">
            <summary>
Gets a const pointer to the child described by childId. Searches down the tree from this component should the
child not directly exist on this component.
</summary>
            <param name="childId">	Identifier for the child component. </param>
            <returns>	Null if it fails, else the child. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.AddChild(Cnc.Tool.Interop.TlAssemblyComponent,System.Boolean)">
            <summary> Adds a child component to this component. </summary>
            <param name="child">					   The child component. </param>
            <param name="copyExistingTypeSizeToChild"> True if the child component should get the existing parent workpiece
										   side connection's type and size. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.AddChild(Cnc.Tool.Interop.TlAssemblyComponent)">
            <summary>	Adds a child component to this component. </summary>
            <summary>	Adds a child component to this component. </summary>
            <param name="child">	The child component. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetChildInserts">
            <summary> Gets the set of inserts beneath this component. </summary>
            <returns> The children insert components. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetChildIds">
            <summary> Gets the identifiers of all children of this component </summary>
            <returns> The child identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetChildren(System.Boolean)">
            <summary>	Gets the set of child components. </summary>
            <param name="includeChildrenOfChildren"> True to include, false to exclude the children of children. </param>
            <returns>	The children components. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetChildren">
            <summary>	Gets the set of child components. </summary>
            <returns>	The children components. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.RemoveWorkpieceSideConnection(System.Guid)">
            <summary> Removes the workpiece side connection described by value. </summary>
            <param name="connectionId"> The connection identifier. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.AddWorkpieceSideConnection(Cnc.Tool.Interop.TlConnection)">
            <summary> Adds a workpiece side connection to this component. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetNextParentConnectionPtr">
            <summary> Gets the next parent connection pointer. </summary>
            <returns> Null if it fails, else the next parent connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetPreviousParentConnectionPtr">
            <summary> Gets the previous parent connection pointer. </summary>
            <returns> Null if it fails, else the previous parent connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetParentConnectionPtr">
            <summary>	Gets the parent connection pointer. </summary>
            <returns>	The parent connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetMachineSideConnectionPtr">
            <summary>	Gets machine side connection pointer. </summary>
            <returns>	The machine side connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetParentPtr">
            <summary>	Gets the parent pointer. </summary>
            <returns>	The parent pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.SetAssemblyPtr(Cnc.Tool.Interop.TlToolAssembly)">
            <summary>	Sets the tool assembly pointer. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.GetAssemblyPtr">
            <summary>	Gets the tool assembly pointer. </summary>
            <returns>	The tool assembly pointer. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyComponent.ParentConnectionId">
            <summary> Gets or sets the ID of the parent component's connection that defines how to locate this component.  </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.HasItem">
            <summary> Tests if Item reference property is set. </summary>
            <returns> true if Item is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyComponent.Item">
            <summary> Gets or sets the item associated to this component. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.CopyFrom(Cnc.Tool.Interop.TlAssemblyComponent)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyComponent.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAssemblyComponent">
            <summary> Defines the TlAssemblyComponent tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyInsert.DoConvertUnits(System.Boolean)">
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyInsert.DoSetAssemblyPtr(Cnc.Tool.TlToolAssembly*)">
            <summary>	Executes the set assembly pointer operation. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
            <summary>	Executes the set assembly pointer operation. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyInsert.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the reset ids operation. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
            <summary>	Executes the reset ids operation. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyInsert.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyInsert.GetType">
            <summary>	Gets the type of the insert. </summary>
            <returns>	The type. </returns>
            <summary>	Gets the type of the insert. </summary>
            <returns>	The type. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyInsert.SetNonCutProfile(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Sets the non cutting profile. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	(Optional) True if the value is metric. Defaults to assuming system units. </param>
            <summary>	Sets the non cutting profile. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	(Optional) True if the value is metric. Defaults to assuming system units. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyInsert.GetNonCutProfile(System.Boolean)">
            <summary>	Gets the non cutting profile in the specified units. </summary>
            <param name="inMetric">	(Optional) True to get the profile in metric. Defaults to retrieving the profile in
						system units. </param>
            <returns>	The cutting profile. </returns>
            <summary>	Gets the non cutting profile in the specified units. </summary>
            <param name="inMetric">	(Optional) True to get the profile in metric. Defaults to retrieving the profile in
						system units. </param>
            <returns>	The cutting profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyInsert.SetCutProfile(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Sets the cutting profile. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	(Optional) True if the value is metric. Defaults to assuming system units. </param>
            <summary>	Sets the cutting profile. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	(Optional) True if the value is metric. Defaults to assuming system units. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyInsert.GetCutProfile(System.Boolean)">
            <summary>	Gets the cutting profile in the specified units. </summary>
            <param name="inMetric">	(Optional) True to get the profile in metric. Defaults to retrieving the profile in
						system units. </param>
            <returns>	The cutting profile. </returns>
            <summary>	Gets the cutting profile in the specified units. </summary>
            <param name="inMetric">	(Optional) True to get the profile in metric. Defaults to retrieving the profile in
						system units. </param>
            <returns>	The cutting profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyInsert.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyInsert.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyInsert.GetInsertPtr">
            <summary>	Gets a const pointer to the insert. </summary>
            <returns>	The pointer to the insert, or nullptr if not valid. </returns>
            <summary>	Gets a const pointer to the insert. </summary>
            <returns>	The pointer to the insert, or nullptr if not valid. </returns>
        </member>
        <member name="T:Cnc.Tool.TlBoundaryGenerationParams.TlBoundaryGenerationParamsDeserializationImpl">
            <summary>	A stationary component configuration deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlBoundaryGenerationParams.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlBoundaryGenerationParams.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlBoundaryGenerationParams.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlBoundaryGenerationParams.SetAssemblyPtr(Cnc.Tool.TlToolAssembly*)">
            <summary>	Sets the tool assembly pointer. </summary>
            <param name="pToolAssembly">	If non-null, the assembly. </param>
        </member>
        <member name="M:Cnc.Tool.TlBoundaryGenerationParams.GetIsMetric">
            <summary>	Gets a value indicating whether the scalar values in this connection are metric. </summary>
            <returns>	True if metric, false if inch. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.GetHolemakingOpParams">
            <summary> Gets holemaking operation parameters. </summary>
            <returns> The holemaking operation parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.SetChamferLength(System.Double,System.Boolean)">
            <summary> Sets ChamferLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.GetChamferLength(System.Boolean)">
            <summary> Gets ChamferLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheChamferLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolReamer.ChamferLength">
            <summary> Chamfer Length </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolReamer.TipAngle">
            <summary> Tip Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.CopyFrom(Cnc.Tool.Interop.TlToolReamer)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolReamer.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolReamer">
            <summary> Defines the TlToolReamer tool class type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolReamer.TlToolReamerDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolReamer.DoSetProfileParams(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolReamer.DoGetProfileParams(Cnc.Tool.MillToolProfileParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolReamer.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolReamer.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolReamer.GetHolemakingOpParams">
            <summary> Gets holemaking operation parameters. </summary>
            <returns> The holemaking operation parameters. </returns>
            <summary> Gets holemaking operation parameters. </summary>
            <returns> The holemaking operation parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolReamer.#ctor">
            <summary>	Default constructor. </summary>
            <summary>	Default constructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolemakingOpParams.Dwell">
            <summary> Gets or sets the Dwell measured in seconds. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolemakingOpParams.ChipBreak">
            <summary> Gets or sets the Chip Break measured as a percentage of the tool diameter. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolemakingOpParams.PeckClear">
            <summary> Gets or sets the Peck Clear measured as a percentage. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolemakingOpParams.Peck2">
            <summary> Gets or sets the Peck 2 measured as a percentage of the tool diameter. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolemakingOpParams.Peck1">
            <summary> Gets or sets the Peck 1 measured as a percentage of the tool diameter. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolemakingOpParams.CannedCycleType">
            <summary> Canned Cycle Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolemakingOpParams.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolemakingOpParams.CopyFrom(Cnc.Tool.Interop.TlHolemakingOpParams)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolemakingOpParams.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolemakingOpParams.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolemakingOpParams">
            <summary> Defines the TlHolemakingOpParams tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.HasCoolant">
            <summary> Tests if Coolant reference property is set. </summary>
            <returns> true if Coolant is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.Coolant">
            <summary> Gets or sets the tool coolant parameters. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.SetPlungeRate(System.Double,System.Boolean)">
            <summary> Sets PlungeRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.GetPlungeRate(System.Boolean)">
            <summary> Gets PlungeRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePlungeRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.PlungeRate">
            <summary> Plunge Rate </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.SetRetractRate(System.Double,System.Boolean)">
            <summary> Sets RetractRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.GetRetractRate(System.Boolean)">
            <summary> Gets RetractRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRetractRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.RetractRate">
            <summary> Retract Rate </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.SetFeedRate(System.Double,System.Boolean)">
            <summary> Sets FeedRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.GetFeedRate(System.Boolean)">
            <summary> Gets FeedRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFeedRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.FeedRate">
            <summary> Feed Rate </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.IsMetric">
            <summary> Metric Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.SpindleSpeed">
            <summary> Spindle Speed </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.MaterialFPTAdjust">
            <summary> Material FPT Adjust </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlOpParams.MaterialSFMAdjust">
            <summary> Material SFM Adjust </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.CopyFrom(Cnc.Tool.Interop.TlOpParams)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpParams.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlOpParams">
            <summary> Defines the TlOpParams tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolemakingOpParams.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolemakingOpParams.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolGrooveCutParamsAdapter.Finalize">
            <summary>	Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolGrooveCutParamsAdapter.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolGrooveCutParamsAdapter.#ctor(Cnc.Tool.ILToolGrooveCutParams*)">
            <summary>	Constructor. </summary>
            <param name="pNativeInstance">	The native instance to adapt. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.ILToolGrooveCutParamsAdapter">
            <summary>	An adapter class for the ILToolGrooveCutParams interface. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolGrooveCutParams.SetFinishDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets the FinishDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolGrooveCutParams.GetFinishDepthOfCut(System.Boolean)">
            <summary> Gets the FinishDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The FinishDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolGrooveCutParams.FinishDepthOfCut">
            <summary>	Gets or sets the finish depth of cut. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolGrooveCutParams.SetRoughDepthOfCut(System.Double,System.Boolean)">
            <summary> Sets the RoughDepthOfCut property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolGrooveCutParams.GetRoughDepthOfCut(System.Boolean)">
            <summary> Gets the RoughDepthOfCut property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The RoughDepthOfCut property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolGrooveCutParams.RoughDepthOfCut">
            <summary>	Gets or sets the rough depth of cut. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolGrooveCutParams.BackoffPercent">
            <summary>	Gets or sets the backoff percentage. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolGrooveCutParams.SetStockClearance(System.Double,System.Boolean)">
            <summary> Sets the StockClearance property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolGrooveCutParams.GetStockClearance(System.Boolean)">
            <summary> Gets the StockClearance property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The StockClearance property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolGrooveCutParams.StockClearance">
            <summary>	Gets or sets the stock clearance. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ILToolGrooveCutParams">
            <summary>	An interface representing lathe grooving tool cutting parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.ILToolCutParams.SpindleSpeedUnits">
            <summary>	Values that represent spindle speed units. </summary>
        </member>
        <member name="T:Cnc.Tool.ILToolCutParams.FeedRateUnits">
            <summary>	Values that represent feed rate units. </summary>
        </member>
        <member name="T:Cnc.Tool.ILToolCutParams.Material">
            <summary>	Values that represent materials. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_US_Union_Tool">
            <summary>   The us union tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_HPI">
            <summary>   The hpi id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_MariTool">
            <summary>   The mari tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Lyndex_Nikken">
            <summary>   The lyndex nikken id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_YG_1">
            <summary>   The yg id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Fraisa">
            <summary>   The fraisa id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Redline">
            <summary>   The redline id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Micro100">
            <summary>   The micro 100 id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Harvey_Tool">
            <summary>   The harvey tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Garr">
            <summary>   The garr id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Everede">
            <summary>   The everede id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_MA_Ford">
            <summary>   The ma ford id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Emuge">
            <summary>   The emuge id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_OSG">
            <summary>   The osg id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Mitsubishi">
            <summary>   The mitsubishi id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Helical_Solutions">
            <summary>   The Helical ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Holex_Hoffman_Group">
            <summary>   The Holex - Hoffman Group ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Garant_Hoffman_Group">
            <summary>   The Garant - Hoffman Group ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Sumitomo">
            <summary>   The Sumitomo ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Onsrud">
            <summary>   The Onsrud ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Harvey">
            <summary>   The Harvey ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Greenleaf">
            <summary>   The Greenleaf ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Vortex">
            <summary>   The Vortex ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Widia_Valenite">
            <summary>   The Widia - Valenite ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Widia_Hanita">
            <summary>   The Widia-Hanita ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Seco">
            <summary>   The Seco ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Dapra">
            <summary>   The Dapra ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Duramill">
            <summary>   The Duramill ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Niagara">
            <summary>   The Niagara ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Dataflute">
            <summary>   The Dataflute ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_MillStar">
            <summary>   The Millstar ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Intersoll">
            <summary>   The Intersoll ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Robbjack">
            <summary>   The Robbjack ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Sandvik">
            <summary> The Sandvik ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Kennametal">
            <summary>   The Kennemetal ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Command_Tool">
            <summary>   The Command Tool ID. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Mastercam">
            <summary>   The mastercam id. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlManufacturer.s_Iscar">
            <summary>   The iscar id. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlManufacturer.#cctor">
            <summary> Static Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlManufacturer.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlManufacturer.CopyFrom(Cnc.Tool.Interop.TlManufacturer)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlManufacturer.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlManufacturer.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlManufacturer">
            <summary> Defines the TlManufacturer tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileBuilderDXF.CalcHolderProfile(Cnc.Tool.Interop.DXFProfileParams)">
            <summary> Calculates the holder profile. </summary>
            <param name="profileParams"> The code. </param>
            <returns> The Profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileBuilderDXF.CalcToolProfile(Cnc.Tool.Interop.DXFProfileParams,System.Double@,System.Double@,System.Double@)">
            <summary> Calculates the dxf profile and outputs additional data. </summary>
            <param name="profileParams"> The profile parameters. </param>
            <param name="maxDia">		 [out] The maximum dia. </param>
            <param name="maxLen">		 [out] Length of the maximum. </param>
            <param name="cutDepth">		 [out] Depth of the cut. </param>
            <returns> The Profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileBuilderDXF.CalcProfile(Cnc.Tool.Interop.DXFProfileParams)">
            <summary> Calculates the profile. </summary>
            <param name="profileParams"> The profile calculation parameters. </param>
            <returns> The Profile result. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileBuilderDXF">
            <summary> Service class providing functionality to build custom 2D profiles from DXF files for mill tools and
		  holders. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.DXFProfileParams.scale">
            <summary> The profile scale. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.DXFProfileParams.isMetric">
            <summary> True if the destination tool or holder is metric. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.DXFProfileParams.dllPath">
            <summary> Full pathname of the DLL file. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.DXFProfileParams.installDir">
            <summary> The install directory. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.DXFProfileParams.fileName">
            <summary> Filename of the file. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.DXFProfileParams">
            <summary> A set of parameters required for building tool component profiles from DXF files. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlProfileBuilder`1.CalcProfile(`0)">
            <summary> Calculates the profile. </summary>
            <param name="profileParams"> The profile calculation parameters. </param>
            <returns> The profile result. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlProfileBuilder`1">
            <summary> Tl profile builder interface class. </summary>
            <typeparam name="TParams"> The type of profile parameters required to calculate a profile. </typeparam>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResult.errorMessage">
            <summary> A localized error message describing the error if the result is not valid.. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResult.profile">
            <summary> The profile. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResult.resultCode">
            <summary> The result code. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileResult">
            <summary> Encapsulates the result of the construction of a profile. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileResultCode">
            <summary> Values that represent possible profile calculation result states. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.UnknownError">
            <summary> An enum constant representing the unknown error option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.IllegalChamferDistance">
            <summary> An enum constant representing the illegal chamfer distance option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileLineOnYAxis">
            <summary> An enum constant representing the custom tool file line on Y axis error option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileAllocationError">
            <summary> An enum constant representing the custom tool file allocation error option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileMultipleBoundaries">
            <summary> An enum constant representing the custom tool file multiple boundaries option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileItemsNotProcessed">
            <summary> An enum constant representing the custom tool file items not processed option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileUnableToBreakArc">
            <summary> An enum constant representing the custom tool file unable to break arc option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileLinesAndArcsOnly">
            <summary> An enum constant representing the custom tool file lines and arcs only option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileArcTooSmall">
            <summary> An enum constant representing the custom tool file arc too small option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileLineTooSmall">
            <summary> An enum constant representing the custom tool file line too small option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileArcNotInViewOne">
            <summary> An enum constant representing the custom tool file arc not in view one option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileLineNotInViewOne">
            <summary> An enum constant representing the custom tool file line not in view one option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFilePockBoundsNotClosed">
            <summary> An enum constant representing the custom tool file pocket boundaries not closed option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileCutNoCutLevelsEqual">
            <summary> An enum constant representing the custom tool file cut no cut levels equal option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileNoCutLevelNotFound">
            <summary> An enum constant representing the custom tool file no cut level not found option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileCutLevelNotFound">
            <summary> An enum constant representing the custom tool file cut level not found option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolFileNoProfileEnts">
            <summary> An enum constant representing the custom tool file no profile entities option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CustomToolProblemWithFileOrData">
            <summary> An enum constant representing the custom tool problem with file or data option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.IllegalThicknessShoulderLengths">
            <summary> An enum constant representing the illegal thickness shoulder lengths option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.IllegalThickness">
            <summary> An enum constant representing the illegal thickness option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.EdgeBreakDistanceTooLargeForDiameter">
            <summary> An enum constant representing the edge break distance too large for diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ReliefAngleNonZeroWithInvalidDiameters">
            <summary> An enum constant representing the relief angle non zero with invalid diameters option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.InvalidReliefTaperAngle">
            <summary> An enum constant representing the invalid relief taper angle option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.InvalidUpperTaperAngle">
            <summary> An enum constant representing the invalid upper taper angle option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.InvalidLowerTaperAngle">
            <summary> An enum constant representing the invalid lower taper angle option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.UpperRadiusTooLarge">
            <summary> An enum constant representing the upper radius too large option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.LowerRadiusTooLarge">
            <summary> An enum constant representing the lower radius too large option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ProfileRadiusTooLarge">
            <summary> An enum constant representing the profile radius too large option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ProfileRadiusTooSmall">
            <summary> An enum constant representing the profile radius too small option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ChamferDistanceTooLargeForDiameter">
            <summary> An enum constant representing the chamfer distance too large for diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ThreadPitchTooLargeForDiameter">
            <summary> An enum constant representing the thread pitch too large for diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ShoulderDiameterLargerThanToolDiameter">
            <summary> An enum constant representing the shoulder diameter larger than tool diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.LowerRadiusLargerThanProfileRadius">
            <summary> An enum constant representing the lower radius larger than profile radius option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.NoNeckLength">
            <summary> An enum constant representing the no neck length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ReducedNeckLargerThanShoulderShank">
            <summary> An enum constant representing the reduced neck larger than shoulder shank option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.IllegalReducedNeckRadius">
            <summary> An enum constant representing the illegal reduced neck radius option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.TaperZeroShankAndShoulderDifferent">
            <summary> An enum constant representing the taper zero shank and shoulder different option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ShoulderDiameterLargerThanShank">
            <summary> An enum constant representing the shoulder diameter larger than shank option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ShoulderDiameterCantBeZero">
            <summary> An enum constant representing the shoulder diameter cant be zero option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.TaperedSectionZeroLengthOnTaperedTool">
            <summary> An enum constant representing the tapered section zero length on tapered tool option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ToolShorterThanSumOfComponents">
            <summary> An enum constant representing the tool shorter than sum of components option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ShoulderDiameterLargerThanArbor">
            <summary> An enum constant representing the shoulder diameter larger than arbor option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CheckTaperAngle">
            <summary> An enum constant representing the check taper angle option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.TaperAngleOrFluteLengthError">
            <summary> An enum constant representing the taper angle or flute length error option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ToolLengthTooShort">
            <summary> An enum constant representing the tool length too short option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CheckCornerRadiusArborDiameter">
            <summary> An enum constant representing the check corner radius arbor diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.NoTipAngleAllowed">
            <summary> An enum constant representing the no tip angle allowed option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ToolDiameterEqualsArborDiameter">
            <summary> An enum constant representing the tool diameter equals arbor diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CheckCornerRadius">
            <summary> An enum constant representing the check corner radius option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.TipDiameterExceedsToolDiameter">
            <summary> An enum constant representing the tip diameter exceeds tool diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ShoulderLengthTooShortForDiameter">
            <summary> An enum constant representing the shoulder length too short for diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ToolLengthTooShortForDiameter">
            <summary> An enum constant representing the tool length too short for diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ShoulderAngleTooSteep">
            <summary> An enum constant representing the shoulder angle too steep option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.TipAngleTooSteep">
            <summary> An enum constant representing the tip angle too steep option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CornerRadiusOrFluteLengthError">
            <summary> An enum constant representing the corner radius or flute length error option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ArborDiameterTooLarge">
            <summary> An enum constant representing the arbor diameter too large option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.TipToolDiameterIntersectionError">
            <summary> An enum constant representing the tip tool diameter intersection error option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ArborRadiusExceedsToolRadius">
            <summary> An enum constant representing the arbor radius exceeds tool radius option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.IllegalCornerRadius">
            <summary> An enum constant representing the illegal corner radius option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.CornerRadiusTooLargeForRadius">
            <summary> An enum constant representing the corner radius too large for radius option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ShoulderLengthCornerRadError">
            <summary> An enum constant representing the shoulder length corner radians error option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.ToolLengthCornerRadError">
            <summary> An enum constant representing the tool length corner radians error option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.IllegalFluteShoulderLengths">
            <summary> An enum constant representing the illegal flute shoulder lengths option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.IllegalArborDiameter">
            <summary> An enum constant representing the illegal arbor diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.IllegalFluteLength">
            <summary> An enum constant representing the illegal flute length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.IllegalShoulderLength">
            <summary> An enum constant representing the illegal shoulder length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.IllegalToolLength">
            <summary> An enum constant representing the illegal tool length option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.IllegalToolDiameter">
            <summary> An enum constant representing the illegal tool diameter option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileResultCode.NoError">
            <summary> An enum constant representing the no error option. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.PerformActionOnDXFImportModule(std.function&lt;(HINSTANCE__*,Cnc.Tool.DXFProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(HINSTANCE__**,Cnc.Tool.DXFProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.DXFProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Performs an action on a loaded DXF Import module. </summary>
            <param name="action">		 The action. </param>
            <param name="profileParams"> Options for controlling the profile. </param>
            <returns> Profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.FindChainMaxX(std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for the first chain maximum x coordinate. </summary>
            <param name="profile"> [in] The profile. </param>
            <returns> The found chain maximum x coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.FindChainMaxY(std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for the first chain maximum y coordinate. </summary>
            <param name="profile"> [in] The profile. </param>
            <returns> The found chain maximum y coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.ScaleProfile(std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Scale profile. </summary>
            <param name="profile"> [in] The profile. </param>
            <param name="scale">   The scale. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.OrientProfile(std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Orient profile. </summary>
            <param name="profile"> [in] The cut profile. </param>
            <param name="maxX">    The maximum x coordinate. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.CalcHolderProfile(Cnc.Tool.DXFProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculates the holder profile. </summary>
            <param name="profileParams"> The code. </param>
            <returns> The Profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.CalcToolProfile(Cnc.Tool.DXFProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculates the dxf profile and outputs additional data. </summary>
            <param name="profileParams"> The profile parameters. </param>
            <param name="maxDia">		 [out] The maximum dia. </param>
            <param name="maxLen">		 [out] Length of the maximum. </param>
            <param name="cutDepth">		 [out] Depth of the cut. </param>
            <returns> The Profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileBuilderDXF.CalcProfile(Cnc.Tool.DXFProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculates the profile. </summary>
            <param name="profileParams"> The profile calculation parameters. </param>
            <returns> The Profile result. </returns>
        </member>
        <member name="T:Cnc.Tool.TlProfileBuilderDXF">
            <summary> Service class providing functionality to build custom 2D profiles from DXF files for mill tools and
		  holders. </summary>
        </member>
        <member name="T:Cnc.Tool.DXFProfileParams">
            <summary> A set of parameters required for building tool component profiles from DXF files. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileResult">
            <summary> Encapsulates the result of the construction of a profile. </summary>
            <summary> Encapsulates the result of the construction of a profile. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileResultCode">
            <summary> Values that represent possible profile calculation result states. </summary>
            <summary> Values that represent possible profile calculation result states. </summary>
        </member>
        <member name="M:Cnc.Tool.CompareLatheTools(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two old lathe tools, compare them to find if they are equal. </summary>
            <param name="left">  The first lathe tool. </param>
            <param name="right"> The second lathe tool. </param>
            <returns> true if the lathe tools are equal. </returns>
        </member>
        <member name="M:Cnc.Tool.CompareInserts(Cnc.Tool.INSERT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.INSERT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two old inserts, compare them to find if they are equal. </summary>
            <param name="left">  The first insert. </param>
            <param name="right"> The second insert. </param>
            <returns> true if the inserts are equal. </returns>
        </member>
        <member name="M:Cnc.Tool.CompareHolders(Cnc.Tool.LHOLDER!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.LHOLDER!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given two old holders, compare them to find if they are equal. </summary>
            <param name="left">  The first holder. </param>
            <param name="right"> The second holder. </param>
            <returns> true if the holders are equal. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.Interop.IMappedToolDataTranslatorAdapter.Translate(Cnc.Tool.Import.Interop.MappedToolAssembly,Cnc.Tool.Import.Interop.Log)">
            <summary> Translates the given mapped tool assembly into a TlAssembly instance. </summary>
            <param name="toolAssembly"> The tool assembly to translate. </param>
            <param name="log">		    The log to output messages to if things go wrong during the process. </param>
            <returns> A TlAssembly instance if successful, or nullptr if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.Interop.IMappedToolDataTranslatorAdapter.Translate(Cnc.Tool.Import.Interop.MappedToolAssembly)">
            <summary> Translates the given mapped tool assembly into a TlAssembly instance. </summary>
            <param name="toolAssembly"> The tool assembly to translate. </param>
            <returns> A TlAssembly instance if successful, or nullptr if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.Interop.IMappedToolDataTranslatorAdapter.Translate(Cnc.Tool.Import.Interop.MappedToolItem,Cnc.Tool.Import.Interop.Log)">
            <summary> Translates the given mapped tool item into a TlAssemblyItem instance. </summary>
            <param name="toolItem"> The tool item to translate. </param>
            <param name="log">	    The log to output messages to if things go wrong during the process. </param>
            <returns> A TlAssemblyItem instance if successful, or nullptr if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.Interop.IMappedToolDataTranslatorAdapter.Translate(Cnc.Tool.Import.Interop.MappedToolItem)">
            <summary> Translates the given mapped tool item into a TlAssemblyItem instance. </summary>
            <param name="toolItem"> The tool item to translate. </param>
            <returns> A TlAssemblyItem instance if successful, or nullptr if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.Interop.IMappedToolDataTranslatorAdapter.#ctor(std.unique_ptr&lt;Cnc.Tool.Import.IMappedToolDataTranslator,std.default_delete&lt;Cnc.Tool.Import.IMappedToolDataTranslator&gt;&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeInstance"> The native instance. </param>
        </member>
        <member name="T:Cnc.Tool.Import.Interop.IMappedToolDataTranslatorAdapter">
            <summary> A mapped tool data translator adapter. </summary>
        </member>
        <member name="M:Cnc.Tool.Import.Interop.IMappedToolDataTranslator.Translate(Cnc.Tool.Import.Interop.MappedToolAssembly,Cnc.Tool.Import.Interop.Log)">
            <summary> Translates the given mapped tool assembly into a TlAssembly instance. </summary>
            <param name="toolAssembly"> The tool assembly to translate. </param>
            <param name="log">		    The log to output messages to if things go wrong during the process. </param>
            <returns> A TlAssembly instance if successful, or nullptr if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.Interop.IMappedToolDataTranslator.Translate(Cnc.Tool.Import.Interop.MappedToolAssembly)">
            <summary> Translates the given mapped tool assembly into a TlAssembly instance. </summary>
            <param name="toolAssembly"> The tool assembly to translate. </param>
            <returns> A TlAssembly instance if successful, or nullptr if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.Interop.IMappedToolDataTranslator.Translate(Cnc.Tool.Import.Interop.MappedToolItem,Cnc.Tool.Import.Interop.Log)">
            <summary> Translates the given mapped tool item into a TlAssemblyItem instance. </summary>
            <param name="toolItem"> The tool item to translate. </param>
            <param name="log">	    The log to output messages to if things go wrong during the process. </param>
            <returns> A TlAssemblyItem instance if successful, or nullptr if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.Interop.IMappedToolDataTranslator.Translate(Cnc.Tool.Import.Interop.MappedToolItem)">
            <summary> Translates the given mapped tool item into a TlAssemblyItem instance. </summary>
            <param name="toolItem"> The tool item to translate. </param>
            <returns> A TlAssemblyItem instance if successful, or nullptr if not. </returns>
        </member>
        <member name="T:Cnc.Tool.Import.Interop.IMappedToolDataTranslator">
            <summary> An interface to a service providing functionality to translate a mapped tool item or tool assembly into a
		  Mastercam tool item or tool assembly. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataValidatorAdapter.Validate(Cnc.Tool.Interop.TlAssembly,System.Collections.Generic.IList`1{System.String})">
            <summary> Validates the given item for compability with internal processes. </summary>
            <param name="item">			    The item to validate. </param>
            <param name="validationErrors"> The list of validation errors to output to if validation issues are found. </param>
            <returns> True if the item is considered to be in a valid state, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataValidatorAdapter.Validate(Cnc.Tool.Interop.TlAssembly)">
            <summary> Validates the given item for compability with internal processes. </summary>
            <param name="item"> The item to validate. </param>
            <returns> True if the item is considered to be in a valid state, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataValidatorAdapter.Validate(Cnc.Tool.Interop.TlAssemblyItem,System.Collections.Generic.IList`1{System.String})">
            <summary> Validates the given item for compability with internal processes. </summary>
            <param name="item">			    The item to validate. </param>
            <param name="validationErrors"> The list of validation errors to output to if validation issues are found. </param>
            <returns> True if the item is considered to be in a valid state, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataValidatorAdapter.Validate(Cnc.Tool.Interop.TlAssemblyItem)">
            <summary> Validates the given item for compability with internal processes. </summary>
            <param name="item"> The item to validate. </param>
            <returns> True if the item is considered to be in a valid state, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataValidatorAdapter.#ctor(std.unique_ptr&lt;Cnc.Tool.IToolDataValidator,std.default_delete&lt;Cnc.Tool.IToolDataValidator&gt;&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeInstance"> The native instance. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataValidatorAdapter">
            <summary> A tool data validator adapter. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataValidator.Validate(Cnc.Tool.Interop.TlAssembly,System.Collections.Generic.IList`1{System.String})">
            <summary> Validates the given item for compability with internal processes. </summary>
            <param name="item">			    The item to validate. </param>
            <param name="validationErrors"> The list of validation errors to output to if validation issues are found. </param>
            <returns> True if the item is considered to be in a valid state, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataValidator.Validate(Cnc.Tool.Interop.TlAssembly)">
            <summary> Validates the given item for compability with internal processes. </summary>
            <param name="item"> The item to validate. </param>
            <returns> True if the item is considered to be in a valid state, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataValidator.Validate(Cnc.Tool.Interop.TlAssemblyItem,System.Collections.Generic.IList`1{System.String})">
            <summary> Validates the given item for compability with internal processes. </summary>
            <param name="item">			    The item to validate. </param>
            <param name="validationErrors"> The list of validation errors to output to if validation issues are found. </param>
            <returns> True if the item is considered to be in a valid state, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataValidator.Validate(Cnc.Tool.Interop.TlAssemblyItem)">
            <summary> Validates the given item for compability with internal processes. </summary>
            <param name="item"> The item to validate. </param>
            <returns> True if the item is considered to be in a valid state, false if not. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataValidator">
            <summary> Interface for a validator to run on imported tooling data. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetNativeTlObjectPointer">
            <summary> Gets native tl object pointer. </summary>
            <returns> The native tl object pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetMachineGroupDisplayTools">
            <summary> Gets machine group display tools. </summary>
            <returns> The machine group display tools. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetMachineGroupDisplayTool(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets the machine group display tool. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> The machine group display tool. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.SetAsMachineGroupDisplayTool(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.Tool.Interop.ILTool)">
            <summary> Sets the specified tool as the machine group display tool. </summary>
            <param name="groupId">  Identifier for the group. </param>
            <param name="lTool"> The lathe tool. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.SetAsMachineGroupDisplayTool(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.Tool.Interop.TlAssembly)">
            <summary> Sets the specified tool as the machine group display tool. </summary>
            <param name="groupId">  Identifier for the group. </param>
            <param name="assembly"> The assembly. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.DeleteAll">
            <summary> Removes all the items and deletes all the memory used by those items. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetLTools">
            <summary> Gets lathe tools. </summary>
            <returns> The lathe tools. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Get3dTools">
            <summary> Gets 3d tools. </summary>
            <returns> The 3d tools. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetLatheTools">
            <summary> Gets lathe tools. </summary>
            <returns> The lathe tools. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetAssemblies">
            <summary> Gets the assemblies. </summary>
            <returns> The assemblies. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetAll">
            <summary>	Gets the objects. </summary>
            <returns>	nullptr if it fails, else the objects. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetLiveCenterIDs">
            <summary> Returns all the live center component IDs in the manager. </summary>
            <returns> A list of IDs of all the live center components in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetToolTypeIDs">
            <summary> Returns all the tool type IDs in the manager. </summary>
            <returns> A list of IDs of all the tool type in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetToolGroupIDs">
            <summary> Returns all the tool group IDs in the manager. </summary>
            <returns> A list of IDs of all the tool group in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetCutParamIDs">
            <summary> Returns all the cut params IDs in the manager. </summary>
            <returns> A list of IDs of all the cut params in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetOpTypeIDs">
            <summary> Returns all the op type IDs in the manager. </summary>
            <returns> A list of IDs of all the op types in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetOpGroupIDs">
            <summary> Returns all the op group IDs in the manager. </summary>
            <returns> A list of IDs of all the op groups in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetWorkMaterialIDs">
            <summary> Returns all the work material IDs in the manager. </summary>
            <returns> A list of IDs of all the work materials in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetHolderIDs">
            <summary> Returns all the holder IDs in the manager. </summary>
            <returns> A list of IDs of all the holders in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetLatheToolIDs">
            <summary> Returns all the tool IDs in the manager. </summary>
            <returns> A list of IDs of all the tools in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetToolIDs">
            <summary> Returns all the tool IDs in the manager. </summary>
            <returns> A list of IDs of all the tools in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetAssemblyIDs">
            <summary> Returns all the assembly IDs in the manager. </summary>
            <returns> A list of IDs of all the assemblies in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.GetIDs">
            <summary> Returns all the IDs in the manager. </summary>
            <returns> A list of IDs of all the objects in the mgr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IsLatheTool(System.Guid)">
            <summary> Returns true if the item is a lathe tool, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a lathe tool, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IsWorkMaterial(System.Guid)">
            <summary> Returns true if the item is a work material, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a work material, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IsHolder(System.Guid)">
            <summary> Returns true if the item is a holder, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a holder, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IsTool(System.Guid)">
            <summary> Returns true if the item is a tool, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies a tool, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IsAssembly(System.Guid)">
            <summary> Returns true if the item is an assembly, false otherwise. </summary>
            <param name="id"> The id to check. </param>
            <returns> true if the id identifies and assembly, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.LatheSlotByID(System.Guid)">
            <summary> Find the lathe tool slot corresponding to the ID in question. </summary>
            <param name="id"> The identifier. </param>
            <returns> Slot of the specified lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.LatheIDBySlot(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Find the lathe tool ID corresponding to the slot in question. </summary>
            <param name="slot"> The slot. </param>
            <returns> Tlid of the lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.SlotByID(System.Guid)">
            <summary> Find the mill tool slot corresponding to the ID in question. </summary>
            <param name="id"> The identifier. </param>
            <returns> Slot of the specified mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IDBySlot(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Find the mill tool ID corresponding to the slot in question. </summary>
            <param name="slot"> The slot. </param>
            <returns> the corresponding TlID. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.CopyObjects(Cnc.Tool.Interop.TlMgr,System.Guid)">
            <summary> Copies an object from the other manager into this one. IF that object is an assembly, also copies all
		  associated AssemblyItems. </summary>
            <param name="otherManager"> Manager for other. </param>
            <param name="toolId">		    The id of the tool to look for. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.SaveAsTooldb(System.String)">
            <summary> Saves the current TlMgr as a tooldb file of the current .tooldb version. </summary>
            <param name="destinationFile"> The file name a path for the output .tooldb file. </param>
            <returns> true if the file is converted and saved correctly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.FindId(Cnc.Tool.Interop.ILTool,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Attempts to locate a similar lathe tool assembly to the input parameter "similarTool". </summary>
            <param name="similarTool">	    The similar tool. </param>
            <param name="machineGroupId">   Identifier for the machine group. </param>
            <param name="ignoreToolNumber"> true to ignore tool number. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.FindId(Cnc.Tool.Interop.TlToolLathe,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Attempts to locate a similar lathe tool assembly to the input parameter "similarTool". </summary>
            <param name="similarTool">	    The similar tool. </param>
            <param name="machineGroupId">   Identifier for the machine group. </param>
            <param name="ignoreToolNumber"> true to ignore tool number. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.FindId(Cnc.Tool.Interop.TlAssembly,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Attempts to locate a similar assembly to the input parameter "similarAssembly". </summary>
            <param name="similarAssembly"> The similar assembly. </param>
            <param name="machineGroupId">  Identifier for the machine group. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.Tool.Interop.ILTool@)">
            <summary> Searches for a lathe tool at the specified slot in the tool manager. </summary>
            <param name="slot"> The slot. </param>
            <param name="tool"> The result tool. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.Tool.Interop.IMTool@)">
            <summary> Searches for a mill tool at the specified slot in the tool manager. </summary>
            <param name="slot"> The slot. </param>
            <param name="tool"> The result tool. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="slot"> The slot. </param>
            <param name="tool"> The tool. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.Tool.Interop.TlAssembly@)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="slot">	    The slot. </param>
            <param name="assembly"> [out] The assembly. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Guid,Cnc.Tool.Interop.ILTool@)">
            <summary>	Searches for the first match. </summary>
            <param name="id">  	The identifier. </param>
            <param name="tool">	The tool. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Guid,Cnc.Tool.Interop.IMTool@)">
            <summary>	Searches for the first match. </summary>
            <param name="id">  	The identifier. </param>
            <param name="tool">	The tool. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Guid,Cnc.Tool.Interop.ITool@)">
            <summary>	Searches for the first match. </summary>
            <param name="id">  	The identifier. </param>
            <param name="tool">	The tool. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Guid,Cnc.Tool.Interop.TlToolAssembly@)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="id"> The id of the item to search for. </param>
            <param name="tool"> The tool. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Guid,Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="id"> The id of the item to search for. </param>
            <param name="tool"> The tool. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Find(System.Guid,Cnc.Tool.Interop.TlAssembly@)">
            <summary> Searches for an item in the tool manager.  If an item with the provided ID is found, and it castable to
		  the TYPE of the item parameter, the function copies the data from the tool manager into the provided
		  item reference.  In addition, if a matching ID/TYPE is not found, the tool manager will search for an
		  assembly that matches the ID, and return the main tool if the item TYPE is castable into a TlTool, or
		  the main holder if the item TYPE is castable into a TlHolder. </summary>
            <param name="id"> The id of the item to search for. </param>
            <param name="assembly"> [out] The assembly. </param>
            <returns> true if the item is found, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Add(Cnc.Tool.Interop.TlObject)">
            <summary> Adds an item to the tool manager.  The item must be a TlObject. This is a templated function which
		  determines its type based on the type of the first parameter.  This function will create a new object
		  copied from the item parameter and store that copy. </summary>
            <param name="item"> The item to add to the list.  A copy of the item will be created and added to the list, not
					the parameter itself. </param>
            <returns> true if the item is added, false otherwise. </returns>

### <typeparam name="TYPE"> Type of the type. </typeparam></member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Add(Cnc.Tool.Interop.TlObject,System.Boolean)">
            <summary> Adds an item to the tool manager.  The item must be a TlObject. This is a templated function which
		  determines its type based on the type of the first parameter.  This function will create a new object
		  copied from the item parameter and store that copy. </summary>
            <param name="item">			  The item to add to the list.  A copy of the item will be created and added to the
							  list, not the parameter itself. </param>
            <param name="updateExisting"> (Optional, defaults to false)
							  If this parameter is true, then the function will update an existing item if one
							  exists, or add if it does not.  If the parameter is false, then this function
							  returns false if the item provided already exists in the manager. </param>
            <returns> true if the item is added, false otherwise. </returns>

### <typeparam name="TYPE"> Type of the type. </typeparam></member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Delete(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Deletes ALL tool records that contain the provided slot. </summary>
            <param name="slot"> The id of the tool to look for. </param>
            <param name="mill"> Flag indicating whether to remove the Mill tool associated at the provided slot, or the Lathe
					tool associated at the provided slot. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Delete(System.Guid)">
            <summary> Deletes the given ID. </summary>
            <param name="id"> The id of the tool to look for. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.DoesObjectExist(System.Guid)">
            <summary> Determines if the specified item exists in this tool manager. </summary>
            <param name="id"> The id of the tool to look for. </param>
            <returns> true if the item exists, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.IsEmpty">
            <summary> Query if this object is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Size">
            <summary> Returns the number of items stored in the manager. </summary>
            <returns> The number of items stored in the tool manager. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.op_Equality(Cnc.Tool.Interop.TlMgr)">
            <summary> Equality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.op_Assign(Cnc.Tool.Interop.TlMgr)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Finalize">
            <summary> Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Dispose">
            <summary>Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.Copy(Cnc.Tool.Interop.TlMgr)">
            <summary>   Copies the given TlMgr. </summary>
            <param name="other">    The other tlMgr. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.#ctor(Cnc.Tool.Interop.TlMgr)">
            <summary> Copy Constructor.  Creates a copy tool manager. </summary>
            <param name="other"> The other tlMgr. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.#ctor(Cnc.Tool.TlMgr*)">
            <summary> Constructor. </summary>
            <param name="pNativeInstance"> If non-null, the native instance to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMgr.#ctor">
            <summary> Default Constructor.  Creates a copy tool manager. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlMgr">
            <summary> Class to maintain a list of tool items.  Can be added to the database to store a file tool item list, or
		  can be kept unattached to function as a "local" tool item list. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManagerAdapter.RestoreManufacturerCatalogDefaults">
            <summary>	Restores the manufacturer catalog defaults. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManagerAdapter.Delete(Cnc.Tool.Interop.TlToolGrade)">
            <summary>	Deletes the given grade from the catalog list. </summary>
            <param name="grade">	The grade to delete. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManagerAdapter.Delete(Cnc.Tool.Interop.TlManufacturer)">
            <summary>	Deletes the given manufacturer from the catalog list. </summary>
            <param name="manufacturer">	The manufacturer to delete. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManagerAdapter.Update(Cnc.Tool.Interop.TlToolGrade)">
            <summary>	Updates the given grade in the catalog list. </summary>
            <param name="grade">	The grade. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManagerAdapter.Update(Cnc.Tool.Interop.TlManufacturer)">
            <summary>	Updates the given manufacturer in the catalog list. </summary>
            <param name="manufacturer">	The manufacturer. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManagerAdapter.Add(Cnc.Tool.Interop.TlToolGrade)">
            <summary>	Adds the given grade to the catalog list. </summary>
            <param name="grade">	The grade to add. </param>
            <returns>	The identifier of the added item. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManagerAdapter.Add(Cnc.Tool.Interop.TlManufacturer)">
            <summary>	Adds the given manufacturer to the catalog list. </summary>
            <param name="manufacturer">	The manufacturer to add. </param>
            <returns>	The identifier of the added item. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManagerAdapter.GetTools">
            <summary> Gets the catalog tools. </summary>
            <returns> The catalog tools. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManagerAdapter.GetGrades">
            <summary>	Gets the grades. </summary>
            <returns>	The grades. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManagerAdapter.GetManufacturers">
            <summary>	Gets the manufacturers. </summary>
            <returns>	The manufacturers. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManagerAdapter.#ctor(std.shared_ptr&lt;Cnc.Tool.ICatalogDataManager&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeInstance"> If non-null, the native instance. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.ICatalogDataManagerAdapter">
            <summary> Interface into the Mastercam Catalog DataManager. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManager.RestoreManufacturerCatalogDefaults">
            <summary>	Restores the manufacturer catalog defaults. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManager.Delete(Cnc.Tool.Interop.TlToolGrade)">
            <summary>	Deletes the given grade from the catalog list. </summary>
            <param name="grade">	The grade to delete. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManager.Delete(Cnc.Tool.Interop.TlManufacturer)">
            <summary>	Deletes the given manufacturer from the catalog list. </summary>
            <param name="manufacturer">	The manufacturer to delete. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManager.Update(Cnc.Tool.Interop.TlToolGrade)">
            <summary>	Updates the given grade in the catalog list. </summary>
            <param name="grade">	The grade. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManager.Update(Cnc.Tool.Interop.TlManufacturer)">
            <summary>	Updates the given manufacturer in the catalog list. </summary>
            <param name="manufacturer">	The manufacturer. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManager.Add(Cnc.Tool.Interop.TlToolGrade)">
            <summary>	Adds the given grade to the catalog list. </summary>
            <param name="grade">	The grade to add. </param>
            <returns>	The identifier of the added item. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManager.Add(Cnc.Tool.Interop.TlManufacturer)">
            <summary>	Adds the given manufacturer to the catalog list. </summary>
            <param name="manufacturer">	The manufacturer to add. </param>
            <returns>	The identifier of the added item. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManager.GetTools">
            <summary> Gets the catalog tools. </summary>
            <returns> The catalog tools. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManager.GetGrades">
            <summary>	Gets the grades. </summary>
            <returns>	The grades. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ICatalogDataManager.GetManufacturers">
            <summary>	Gets the manufacturers. </summary>
            <returns>	The manufacturers. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.ICatalogDataManager">
            <summary> Interface into the Mastercam Catalog DataManager. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyFactory.Create(Cnc.Tool.Interop.TlToolMill)">
            <summary> Creates a new TlAssemblyPtr from the given tool. </summary>
            <param name="spTool"> The tool. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyFactory.Create(Cnc.Tool.Interop.MCToolType,System.Boolean)">
            <summary> Creates a new TlAssemblyPtr based on the tool type and metric flag. </summary>
            <param name="toolType"> Type of the tool. </param>
            <param name="isMetric"> true if this object is metric. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyFactory.#ctor(std.shared_ptr&lt;Cnc.Tool.ITlAssemblyFactory&gt;)">
            <summary> Constructor. </summary>
            <param name="spNativeInstance"> The native instance. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAssemblyFactory">
            <summary> Implementation of the main Mastercam tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlAssemblyFactory.Create(Cnc.Tool.Interop.TlToolMill)">
            <summary> Creates a new TlAssemblyPtr from the given tool. </summary>
            <param name="spTool"> The tool. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlAssemblyFactory.Create(Cnc.Tool.Interop.MCToolType,System.Boolean)">
            <summary> Creates a new TlAssemblyPtr based on the tool type and metric flag. </summary>
            <param name="toolType"> Type of the tool. </param>
            <param name="isMetric"> true if this object is metric. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlAssemblyFactory">
            <summary> Factory service class providing functionality for creating instances of class TlAssembly. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItemFactory.CreateMillHolder(System.Boolean)">
            <summary> Creates a mill holder based on the input metric flag. </summary>
            <param name="metric"> True for the created holder to have metric values. </param>
            <returns> The new mill holder. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItemFactory.CreateMillTool(Cnc.Tool.Interop.MCToolType,System.Boolean)">
            <summary> Creates a mill tool using the passed in type and metric flag. </summary>
            <param name="type">   The type. </param>
            <param name="metric"> true for the created mill tool to have metric values. </param>
            <returns> The new mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItemFactory.#ctor(std.shared_ptr&lt;Cnc.Tool.ITlAssemblyItemFactory&gt;)">
            <summary>	Constructor. </summary>
            <param name="spNativeInstance">	The native instance to adapt. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAssemblyItemFactory">
            <summary> Implementation of the main Mastercam tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlAssemblyItemFactory.CreateMillHolder(System.Boolean)">
            <summary> Creates a mill holder based on the input metric flag. </summary>
            <param name="metric"> True for the created holder to have metric values. </param>
            <returns> The new mill holder. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlAssemblyItemFactory.CreateMillTool(Cnc.Tool.Interop.MCToolType,System.Boolean)">
            <summary> Creates a mill tool using the passed in type and metric flag. </summary>
            <param name="type">   The type. </param>
            <param name="metric"> true for the created mill tool to have metric values. </param>
            <returns> The new mill tool. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlAssemblyItemFactory">
            <summary> Factory service class providing functionality for creating instances of the classes TlToolMill, TlHolder,
		  and TlToolLathe. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateViewWithNewDefinitionOnInsert(Cnc.Tool.Interop.TlToolAssembly,System.Guid,System.Guid)">
            <summary> Creates view of the given tool assembly with a new definition for the specified insert. </summary>
            <param name="assembly">			  The assembly. </param>
            <param name="insertId">			  Identifier for the insert. </param>
            <param name="selectedDefinition"> Identifier for the definition to insert the newly created definition after. A
								  value of GUID_NULL will insert at the end. </param>
            <returns> The new view with new insert and definition or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateViewWithNewInsertAndDefinition(Cnc.Tool.Interop.TlToolAssembly,Cnc.Tool.Interop.TlAssemblyTurnHolder,Cnc.Tool.Interop.ITlToolAssemblyFactory.InsertParams)">
            <summary>	Creates view of the given tool assembly with a new insert and definition. </summary>
            <param name="assembly">	   	The assembly. </param>
            <param name="parentHolder">	The parent holder. </param>
            <param name="params">	   	Options for controlling the operation. </param>
            <returns>	The new view with new insert and definition or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateViewWithNewInsertAndDefinition(Cnc.Tool.Interop.TlToolAssembly,System.Guid)">
            <summary>	Creates view of the given tool assembly with a new insert and definition. </summary>
            <param name="assembly">	The assembly. </param>
            <param name="holderId">	Identifier for the holder. </param>
            <returns>	The new view with new insert and definition or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateViewWithInsertAndDefinitionForActiveGroup(Cnc.Tool.Interop.ITlToolAssemblyFactory.InsertParams)">
            <summary> Creates a 3d tool assembly with an insert and definition for the active machine group. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new view with new insert and definition or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateViewWithNewComponentAbove(Cnc.Tool.Interop.TlToolAssembly,System.Guid)">
            <summary> Creates view of the given tool assembly with a new component above the specified component. </summary>
            <param name="assembly">    The assembly. </param>
            <param name="componentId"> Identifier for the component to insert above. </param>
            <returns> The new view with new component or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateViewWithNewComponent(Cnc.Tool.Interop.TlToolAssembly,System.Guid,System.Guid)">
            <summary> Creates view of the given tool assembly with a new component attached to the specified parent on the
		  specified connection. </summary>
            <param name="assembly">			  The assembly. </param>
            <param name="parentId">			  Identifier for the parent. </param>
            <param name="parentConnectionId"> Identifier for the connection on the parent. </param>
            <returns> The new view with new component or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateDefinitionForActiveGroup(Cnc.Tool.Interop.ITlToolAssemblyFactory.DefinitionParams)">
            <summary> Creates a lathe tool definition for the active machine group. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new definition for the active group. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateToolAssemblyInsert(Cnc.Tool.Interop.TlAssemblyInsert)">
            <summary>	Creates a new tool assembly insert based on an existing insert. </summary>
            <param name="other">	The other insert. </param>
            <returns>	The new tool assembly insert. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateToolAssemblyInsert(Cnc.Tool.Interop.ITlToolAssemblyFactory.InsertParams)">
            <summary> Creates a new tool assembly insert. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new tool assembly insert. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateToolAssemblyAdaptiveItem(Cnc.Tool.Interop.ITlToolAssemblyFactory.HolderParams)">
            <summary> Creates tool assembly adaptive item. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new tool assembly adaptive item. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateToolAssemblyTurnHolder(Cnc.Tool.Interop.ITlToolAssemblyFactory.HolderParams)">
            <summary> Creates tool assembly turn holder. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new tool assembly turn holder. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateHolderAssembly(Cnc.Tool.Interop.TlAdaptiveItem)">
            <summary> Creates a holder assembly based on the passed in adaptive item. </summary>
            <param name="adaptiveItem"> The adaptive item. </param>
            <returns> The new holder assembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateHolderAssembly(Cnc.Tool.Interop.TlTurnHolder)">
            <summary> Creates a holder assembly based on the passed in turn holder. </summary>
            <param name="holderItem"> The holder item. </param>
            <returns> The new holder assembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateHolderAssembly(Cnc.Tool.Interop.ITlToolAssemblyFactory.HolderParams)">
            <summary> Creates a holder assembly. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new holder assembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.CreateToolAssemblyForActiveGroup(System.Boolean)">
            <summary> Creates tool assembly instance for the active machine group. </summary>
            <param name="inMetric"> True to create in metric. </param>
            <returns> The new tool assembly for active group. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.Finalize">
            <summary>	Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter.#ctor(std.shared_ptr&lt;Cnc.Tool.ITlToolAssemblyFactory&gt;)">
            <summary>	Constructor. </summary>
            <param name="spNativeInstance">	The native instance to adapt. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlToolAssemblyFactoryAdapter">
            <summary> Factory service class providing functionality for creating bitmaps from tool components and assemblies. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateViewWithNewDefinitionOnInsert(Cnc.Tool.Interop.TlToolAssembly,System.Guid,System.Guid)">
            <summary> Creates view of the given tool assembly with a new definition for the specified insert. </summary>
            <param name="assembly">			  The assembly. </param>
            <param name="insertId">			  Identifier for the insert. </param>
            <param name="selectedDefinition"> Identifier for the definition to insert the newly created definition after. A
								  value of GUID_NULL will insert at the end. </param>
            <returns> The new view with new insert and definition or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateViewWithNewInsertAndDefinition(Cnc.Tool.Interop.TlToolAssembly,Cnc.Tool.Interop.TlAssemblyTurnHolder,Cnc.Tool.Interop.ITlToolAssemblyFactory.InsertParams)">
            <summary>	Creates view of the given tool assembly with a new insert and definition. </summary>
            <param name="assembly">	   	The assembly. </param>
            <param name="parentHolder">	The parent holder. </param>
            <param name="params">	   	Options for controlling the operation. </param>
            <returns>	The new view with new insert and definition or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateViewWithNewInsertAndDefinition(Cnc.Tool.Interop.TlToolAssembly,System.Guid)">
            <summary>	Creates view of the given tool assembly with a new insert and definition. </summary>
            <param name="assembly">	The assembly. </param>
            <param name="holderId">	Identifier for the holder. </param>
            <returns>	The new view with new insert and definition or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateViewWithInsertAndDefinitionForActiveGroup(Cnc.Tool.Interop.ITlToolAssemblyFactory.InsertParams)">
            <summary> Creates a 3d tool assembly with an insert and definition for the active machine group. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new view with new insert and definition or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateViewWithNewComponentAbove(Cnc.Tool.Interop.TlToolAssembly,System.Guid)">
            <summary> Creates view of the given tool assembly with a new component above the specified component. </summary>
            <param name="assembly">    The assembly. </param>
            <param name="componentId"> Identifier for the component to insert above. </param>
            <returns> The new view with new component or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateViewWithNewComponent(Cnc.Tool.Interop.TlToolAssembly,System.Guid,System.Guid)">
            <summary> Creates view of the given tool assembly with a new component attached to the specified parent on the
		  specified connection. </summary>
            <param name="assembly">			  The assembly. </param>
            <param name="parentId">			  Identifier for the parent. </param>
            <param name="parentConnectionId"> Identifier for the connection on the parent. </param>
            <returns> The new view with new component or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateDefinitionForActiveGroup(Cnc.Tool.Interop.ITlToolAssemblyFactory.DefinitionParams)">
            <summary> Creates a lathe tool definition for the active machine group. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new definition for the active group. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateToolAssemblyInsert(Cnc.Tool.Interop.TlAssemblyInsert)">
            <summary>	Creates a new tool assembly insert based on an existing insert. </summary>
            <param name="other">	The other insert. </param>
            <returns>	The new tool assembly insert. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateToolAssemblyInsert(Cnc.Tool.Interop.ITlToolAssemblyFactory.InsertParams)">
            <summary> Creates a new tool assembly insert. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new tool assembly insert. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateToolAssemblyAdaptiveItem(Cnc.Tool.Interop.ITlToolAssemblyFactory.HolderParams)">
            <summary> Creates tool assembly adaptive item. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new tool assembly adaptive item. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateToolAssemblyTurnHolder(Cnc.Tool.Interop.ITlToolAssemblyFactory.HolderParams)">
            <summary> Creates tool assembly turn holder. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new tool assembly turn holder. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateHolderAssembly(Cnc.Tool.Interop.TlAdaptiveItem)">
            <summary> Creates a holder assembly based on the passed in adaptive item. </summary>
            <param name="adaptiveItem"> The adaptive item. </param>
            <returns> The new holder assembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateHolderAssembly(Cnc.Tool.Interop.TlTurnHolder)">
            <summary> Creates a holder assembly based on the passed in turn holder. </summary>
            <param name="holderItem"> The holder item. </param>
            <returns> The new holder assembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateHolderAssembly(Cnc.Tool.Interop.ITlToolAssemblyFactory.HolderParams)">
            <summary> Creates a holder assembly. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new holder assembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlToolAssemblyFactory.CreateToolAssemblyForActiveGroup(System.Boolean)">
            <summary>	Creates tool assembly instance for the active machine group. </summary>
            <param name="inMetric">	True to create in metric. </param>
            <returns>	The new tool assembly for active group. </returns>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlToolAssemblyFactory.DefinitionParams.toolNumber">
            <summary> The tool number. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlToolAssemblyFactory.DefinitionParams.inMetric">
            <summary> True to create the tool in metric units. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlToolAssemblyFactory.DefinitionParams.type">
            <summary> The type. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlToolAssemblyFactory.DefinitionParams">
            <summary> Parameters used to create cutting definitions when building 3d tool assemblies. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlToolAssemblyFactory.InsertParams.inMetric">
            <summary> True to create the tool in metric units. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlToolAssemblyFactory.InsertParams.type">
            <summary> The type. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlToolAssemblyFactory.InsertParams">
            <summary> Parameters used to create inserts when building 3d tool assemblies. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlToolAssemblyFactory.HolderParams.inMetric">
            <summary> True to create the tool in metric units. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlToolAssemblyFactory.HolderParams">
            <summary> Parameters used to create holders when building 3d tool assemblies. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlToolAssemblyFactory">
            <summary>	A tool interface instance factory. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.Create(Cnc.Tool.Interop.TlToolMill,Cnc.Tool.Interop.ITlBitmapFactory.ToolParams)">
            <summary> Creates a icon for the given item. </summary>
            <param name="item">   The item. </param>
            <param name="params"> The tool params. </param>
            <returns> A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.Create(Cnc.Tool.Interop.TlToolMill,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates an icon for the given item </summary>
            <param name="item">	The item. </param>
            <param name="size">	The size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.Create(Cnc.Tool.Interop.TlAssembly,Cnc.Tool.Interop.ITlBitmapFactory.ToolParams)">
            <summary> Creates a icon for the given item. </summary>
            <param name="item">   The item. </param>
            <param name="params"> The tool params. </param>
            <returns> A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.Create(Cnc.Tool.Interop.TlAssembly,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates a a icon for the given assembly. </summary>
            <param name="assembly">	The assembly. </param>
            <param name="size">	The size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.Create(Cnc.Tool.Interop.TlHolder,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates an icon for the given holder. </summary>
            <param name="holder">	The holder. </param>
            <param name="size">  	The icon size. </param>
            <returns>	A bitmap instance </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.Create(Cnc.Tool.Interop.TlHolderAssembly,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates a icon for the given holder assembly. </summary>
            <param name="holderAssembly">	The holder assembly. </param>
            <param name="size">			 	The icon size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.Create(Cnc.Tool.Interop.TlAdaptiveItem,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates a icon for the given adaptive item. </summary>
            <param name="adaptiveItem">	The adaptive item. </param>
            <param name="size">		   	The icon size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.Create(Cnc.Tool.Interop.TlTurnHolder,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates a icon for the given item. </summary>
            <param name="item">	The item. </param>
            <param name="size">	The icon size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.Create(Cnc.Tool.Interop.TlInsert,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates a icon for the given item. </summary>
            <param name="item">	The item. </param>
            <param name="size">	The icon size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.Create(Cnc.Tool.Interop.ILTool,Cnc.Tool.Interop.ITlBitmapFactory.ToolParams)">
            <summary>	Creates a icon for the given item. </summary>
            <param name="item">  	The item. </param>
            <param name="params">	Options for controlling the operation. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.Create(System.Int32,Cnc.Tool.Interop.ITlBitmapFactory.ToolParams)">
            <summary>	Creates a icon for the given item. </summary>
            <param name="toolSlot">	The tool slot. Only lathe tool slots are supported at this time. </param>
            <param name="params">  	Options for controlling the operation. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.Finalize">
            <summary>	Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactoryAdapter.#ctor(std.shared_ptr&lt;Cnc.Tool.ITlBitmapFactory&gt;)">
            <summary>	Constructor. </summary>
            <param name="spNativeInstance">	The native instance to adapt. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlBitmapFactoryAdapter">
            <summary> Factory service class providing functionality for creating bitmaps from tool components and assemblies. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactory.Create(Cnc.Tool.Interop.TlToolMill,Cnc.Tool.Interop.ITlBitmapFactory.ToolParams)">
            <summary> Creates a icon for the given item. </summary>
            <param name="item">   The item. </param>
            <param name="params"> The tool params. </param>
            <returns> A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactory.Create(Cnc.Tool.Interop.TlToolMill,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates an icon for the given item </summary>
            <param name="item">	The item. </param>
            <param name="size">	The size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactory.Create(Cnc.Tool.Interop.TlAssembly,Cnc.Tool.Interop.ITlBitmapFactory.ToolParams)">
            <summary> Creates a icon for the given item. </summary>
            <param name="item">   The item. </param>
            <param name="params"> The tool params. </param>
            <returns> A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactory.Create(Cnc.Tool.Interop.TlAssembly,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates a a icon for the given assembly. </summary>
            <param name="assembly">	The assembly. </param>
            <param name="size">	The size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactory.Create(Cnc.Tool.Interop.TlHolder,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates an icon for the given holder. </summary>
            <param name="holder">	The holder. </param>
            <param name="size">  	The icon size. </param>
            <returns>	A bitmap instance </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactory.Create(Cnc.Tool.Interop.TlHolderAssembly,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates a icon for the given holder assembly. </summary>
            <param name="holderAssembly">	The holder assembly. </param>
            <param name="size">			 	The icon size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactory.Create(Cnc.Tool.Interop.TlAdaptiveItem,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates a icon for the given adaptive item. </summary>
            <param name="adaptiveItem">	The adaptive item. </param>
            <param name="size">		   	The icon size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactory.Create(Cnc.Tool.Interop.TlTurnHolder,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates a icon for the given item. </summary>
            <param name="item">	The item. </param>
            <param name="size">	The icon size. </param>
            <returns>	A bitmap image source. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactory.Create(Cnc.Tool.Interop.TlInsert,Cnc.Tool.Interop.ITlBitmapFactory.Size)">
            <summary>	Creates a bitmap image source for the given item. </summary>
            <param name="item">	The item. </param>
            <param name="size">	The icon size. </param>
            <returns>	A bitmap image source. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactory.Create(Cnc.Tool.Interop.ILTool,Cnc.Tool.Interop.ITlBitmapFactory.ToolParams)">
            <summary>	Creates a bitmap image source for the given item. </summary>
            <param name="item">  	The item. </param>
            <param name="params">	Options for controlling the operation. </param>
            <returns>	A bitmap image source. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ITlBitmapFactory.Create(System.Int32,Cnc.Tool.Interop.ITlBitmapFactory.ToolParams)">
            <summary> Creates a bitmap image source for the lathe tool at the given slot. </summary>
            <param name="toolSlot"> The tool slot. Only lathe tool slots are supported at this time. </param>
            <param name="params">   Options for controlling the operation. </param>
            <returns> A bitmap image source. </returns>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.ToolParams.isDisplayTool">
            <summary>	Value indicating whether to mark the tool image as the machine group display tool or not. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.ToolParams.inBlackAndWhite">
            <summary>	Value indicating whether to create the tool image in black in white or not. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.ToolParams.transparentBackground">
            <summary>	True to use a transparent background. Pixels matching the given background color will be made fully transparent. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.ToolParams.backgroundColor">
            <summary>	The background color. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.ToolParams.currentOpId">
            <summary>	Identifier for the current operation. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.ToolParams.showIfUsed">
            <summary>	True to show in the image if the tool is used. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.ToolParams.size">
            <summary>	The image size. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlBitmapFactory.ToolParams">
            <summary>	A parameters set used for controlling the creation of a tool bitmap. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.Size.SetupSheet">
            <summary>	An enum constant representing the setup sheet size option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.Size.Huge">
            <summary>	An enum constant representing the huge size option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.Size.ExtraLarge">
            <summary>	An enum constant representing the extra large size option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.Size.Large">
            <summary>	An enum constant representing the large size option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.Size.Medium">
            <summary>	An enum constant representing the medium size option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.Size.Small">
            <summary>	An enum constant representing the small size option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITlBitmapFactory.Size.Original">
            <summary>	An enum constant representing the original option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlBitmapFactory.Size">
            <summary>	Values that represent bitmap sizes. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ITlBitmapFactory">
            <summary> Factory service class providing functionality for creating bitmaps from tool components and assemblies. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterManagerAdapter.GetImporter(System.Guid)">
            <summary> Gets an importer associated to the specified identifier . </summary>
            <param name="importerId"> Identifier for the importer. </param>
            <returns> Nullptr if it fails, else the importer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterManagerAdapter.RemoveImporter(System.Guid)">
            <summary> Removes the importer described by importerId. </summary>
            <param name="importerId"> If non-null, identifier for the importer. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterManagerAdapter.AddImporter(System.Guid,Cnc.Tool.Interop.IToolDataImporter)">
            <summary> Adds an importer to be managed by this manager and associated to the specified identifier. . </summary>
            <param name="importerId"> Identifier for the importer. </param>
            <param name="importer">   If non-null, the importer. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterManagerAdapter.AddImporter(Cnc.Tool.Interop.IToolDataImporter)">
            <summary> Adds an importer to be managed by this manager. Importers are associated to the GUID sent back as a
		  result. </summary>
            <param name="importer"> The tool data importer. </param>
            <returns> A System::Guid to associate to the supplied importer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterManagerAdapter.#ctor(Cnc.Tool.IDataImporterManager&lt;Cnc.Tool.IToolDataImporter&gt;*)">
            <summary> Constructor. </summary>
            <param name="pNativeInstance"> The native instance to adapt. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataImporterManagerAdapter">
            <summary> A tool data importer manager adapter. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterManager.GetImporter(System.Guid)">
            <summary> Gets an importer associated to the specified identifier . </summary>
            <param name="importerId"> Identifier for the importer. </param>
            <returns> Nullptr if it fails, else the importer. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterManager.RemoveImporter(System.Guid)">
            <summary> Removes the importer described by importerId. </summary>
            <param name="importerId"> If non-null, identifier for the importer. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterManager.AddImporter(System.Guid,Cnc.Tool.Interop.IToolDataImporter)">
            <summary> Adds an importer to be managed by this manager and associated to the specified identifier. . </summary>
            <param name="importerId"> Identifier for the importer. </param>
            <param name="importer">   If non-null, the importer. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterManager.AddImporter(Cnc.Tool.Interop.IToolDataImporter)">
            <summary> Adds an importer to be managed by this manager. Importers are associated to the GUID sent back as a
		  result. </summary>
            <param name="importer"> The tool data importer. </param>
            <returns> A System::Guid to associate to the supplied importer. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataImporterManager">
            <summary> Manager for the set of tool data importers provided as import options in the classic tool manager lists. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.IsEmpty">
            <summary> Query if the main part tool list is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.AssignToOperation(Cnc.Tool.Interop.ILTool,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary> Assigns the specified lathe tool to the provided operation. </summary>
            <param name="spInput">		 The lathe tool to be assigned. </param>
            <param name="operationId">	 The identifier of the operation to have tool information assigned to it. </param>
            <param name="setOffsets">    Flag specifying how to initialize the operation tool offsets. 0 - from the tool, 1 -
							 from the configuration. </param>
            <param name="setStation">    true to initialize the operation tool station. </param>
            <param name="setSteps">		 true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed"> Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece material,
							 1 - From the tool, 2 - From defaults. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.AssignToOperation(Cnc.Tool.Interop.TlHolder,System.Int32)">
            <summary> Assigns the specified tool holder to the provided operation. </summary>
            <param name="spInput">	   The tool holder to be assigned. </param>
            <param name="operationId"> The identifier of the operation to have tool holder information assigned to it. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.AssignToOperation(Cnc.Tool.Interop.TlToolMill,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary> Assigns the specified tool to the provided operation. </summary>
            <param name="spInput">			   The tool to be assigned. </param>
            <param name="operationId">		   The identifier of the operation to have tool assembly information assigned to
								   it. </param>
            <param name="setOffsets">		   Flag specifying how to initialize the operation tool offsets. 0 - from the
								   tool, 1 - from the configuration. </param>
            <param name="setStation">		   true to initialize the operation tool station. </param>
            <param name="setSteps">			   true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed">	   Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece
								   material, 1 - From the tool, 2 - From defaults. </param>
            <param name="alwaysLockFeedrates"> true to always lock feedrates. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.AssignToOperation(Cnc.Tool.Interop.TlAssembly,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary> Assigns the specified tool assembly to the provided operation. </summary>
            <param name="spInput">			   The tool assembly to be assigned. </param>
            <param name="operationId">		   The identifier of the operation to have tool assembly information assigned to
								   it. </param>
            <param name="setOffsets">		   Flag specifying how to initialize the operation tool offsets. 0 - from the
								   tool, 1 - from the configuration. </param>
            <param name="setStation">		   true to initialize the operation tool station. </param>
            <param name="setSteps">			   true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed">	   Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece
								   material, 1 - From the tool, 2 - From defaults. </param>
            <param name="alwaysLockFeedrates"> true to always lock feedrates. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.LaunchManager(System.Boolean)">
            <summary> Launches the Classic Tool Manager Dialog. </summary>
            <param name="launchLathe"> True to launch the lathe tool manager.  False to launch the mill tool manager. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.LaunchManager(System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the Classic Tool Manager Dialog. </summary>
            <param name="launchLathe"> True to launch the lathe tool manager.  False to launch the mill tool manager. </param>
            <param name="parent">	   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.SelectFromLibrary(Cnc.Tool.Interop.TlCutParam@,System.Int16,System.Double)">
            <summary> Prompts the user to select a cutting parameter from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. IsoGroup and
		  ToolDiameter parameters exist to provide initial filtering functionality. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="isoGroup"> ISO group that the current workpiece material belongs to. </param>
            <param name="toolDia">  The diameter of the current tool being used. </param>
            <returns> True if a cutting parameter was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.SelectFromLibrary(Cnc.Tool.Interop.TlCutParam@,System.Int16,System.Double,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a cutting parameter from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. IsoGroup and
		  ToolDiameter parameters exist to provide initial filtering functionality. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="isoGroup"> ISO group that the current workpiece material belongs to. </param>
            <param name="toolDia">  The diameter of the current tool being used. </param>
            <param name="parent">   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a cutting parameter was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.SelectFromLibrary(Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Prompts the user to select a lathe tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.SelectFromLibrary(Cnc.Tool.Interop.TlToolLathe@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a lathe tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.SelectFromLibrary(Cnc.Tool.Interop.TlAssembly@)">
            <summary> Prompts the user to select a tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.SelectFromLibrary(Cnc.Tool.Interop.TlAssembly@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.SelectFromPart(Cnc.Tool.Interop.TlToolLathe@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a lathe tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.SelectFromPart(Cnc.Tool.Interop.TlAssembly@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.MillSaveGeometryToLevel(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject},System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the Save Geometry To Level App to save the geometry of the selected mill tool components to one
		  or more levels. </summary>
            <param name="selectedObjects"> The selected objects. </param>
            <param name="parent">		   If non-null, the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.SaveGeometryToLevel(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject},System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the Save Geometry To Level App to save the geometry of the selected tool components to one or
		  more levels. </summary>
            <param name="selectedObjects"> The selected objects. </param>
            <param name="parent">		   If non-null, the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.SaveGeometryToLevel(System.Collections.Generic.List`1{Cnc.Tool.Interop.ILTool},System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the Save Geometry To Level App to save the geometry of the selected lathe tool assemblies to one
		  or more levels. </summary>
            <param name="selectedTools"> The selected tools. </param>
            <param name="parent">		 If non-null, the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.SaveToolsToLibrary(Cnc.Tool.Interop.TlMgr,Cnc.Tool.Interop.IToolSystem.SaveToLibParams,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the Save to Library App to save the items contained within the given container to a library. </summary>
            <param name="itemsToSave"> The items to save. </param>
            <param name="params">	   Options for controlling the operation. </param>
            <param name="parent">	   If non-null, the parent. </param>
            <returns> The results of the save to library App. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.SelectInsertDefinition(Cnc.Tool.Interop.TlToolAssembly,System.Int32!System.Runtime.CompilerServices.IsLong@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Launches the select insert definition panel to allow users to choose the active definition for their tool.
</summary>
            <param name="spMultiDefTool">			The multi-definition tool. </param>
            <param name="resultSlot">				The result slot. </param>
            <param name="parent">					If non-null, (Optional) the parent. </param>
            <param name="initiallySelectedSlot">	(Optional) The initially selected slot. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Edit3DTool(Cnc.Tool.Interop.TlToolAssembly,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Launches the tool designer to allow users to edit the given 3D tool. The result of the tool designer, if
		  successful, will be placed in the input parameter "toolToEdit". </summary>
            <param name="toolToEdit">			 The 3D tool assembly to edit. </param>
            <param name="hideParent">			 True to hide the parent window before launching the tool designer. </param>
            <param name="parent">				 If non-null, the parent. </param>
            <param name="initiallySelectedSlot"> The initially selected slot. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.EditAssemblyProjections(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the GAF Projection editing feature to edit the projections of the assembly provided at the input parameter "spResult".
		  If the assembly is successfully edited, and the input parameter "updatePart" is set to true, the assembly
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="parent">    (Optional, defaults to null) If non-null, (Optional) the parent. </param>
            <returns> true if the assembly has changed, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.EditAssemblyHolder(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Int32,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the holder wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the holder is successfully edited, and the input parameter "updatePart" is set to true, the holder
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		  The result. </param>
            <param name="updatePart">	  true to update part. </param>
            <param name="compositeIndex"> (Optional, defaults to -1) If the holder is a composite holder, the index of the holder to edit. </param>
            <param name="parent">		  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.EditAssemblyTool(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the tool wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the tool is successfully edited, and the input parameter "updatePart" is set to true, the tool
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		   The result. </param>
            <param name="updatePart">	   true to update part. </param>
            <param name="startOnLastPage"> (Optional, defaults to false) true to start on the last page (properties page) of the wizard. </param>
            <param name="readOnly">        (Optional) true to present the editor in read-only mode. </param>
            <param name="parent">		   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.EditAssembly(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the mill assembly panel to edit the assembly provided at the input parameter "spAssembly". If
		  the assembly is successfully edited, and the input parameter "updatePart" is set to true, the
		  assembly will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spAssembly". </remarks>
            <param name="spAssembly"> The assembly. </param>
            <param name="updatePart"> True to update part. </param>
            <param name="readOnly">   (Optional) True if read only. </param>
            <param name="pParent">    (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Edit(Cnc.Tool.Interop.ILTool,Cnc.Tool.Interop.IToolSystem.EditLToolParams)">
            <summary>
Launches the appropriate editor for the given lathe tool. The result of the tool editor, if successful, will be
placed in the input parameter 'spToolToEdit'.
</summary>
            <param name="spToolToEdit">	The tool to edit. </param>
            <param name="params">	   	The parameters for controlling the operation. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Edit(Cnc.Tool.Interop.TlHolder,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the edit holder wizard to allow users to modify existing holders. The result of the edit holder
		  wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="readOnly"> (Optional, defaults to false) true to launch the editor in a read only mode. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Edit(Cnc.Tool.Interop.TlToolMill,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the edit tool wizard to allow users to modify existing tools. The result of the edit tool wizard,
		  if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		   The result. </param>
            <param name="startOnLastPage"> (Optional, defaults to false) true to start on the last page (properites page) of
							   the wizard. </param>
            <param name="readOnly">		   (Optional, defaults to false) true to launch the editor in a read only mode. </param>
            <param name="parent">		   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Create3dTool(Cnc.Tool.Interop.I3dLTool@,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary>
Launches the tool designer panel to allow users to create a new 3D tool assembly. The result of the tool designer,
if successful, will be placed in the input parameter "spResult".
</summary>
            <param name="spResult">  	The result. </param>
            <param name="hideParent">	True to hide the parent window before launching the tool designer. </param>
            <param name="parent">   	If non-null, the parent. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.CreateLatheCenter(Cnc.Tool.Interop.ILTool@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary>
Launches the create new lathe center wizard to allow users to create their desired lathe centers. The result of
the create new lathe center wizard, if successful, will be placed in the input parameter "spResult".
</summary>
            <param name="spResult">	The result. </param>
            <param name="parent"> 	If non-null, the parent. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.CreateLegacyLTool(Cnc.Tool.Interop.ILTool@,System.Int32!System.Runtime.CompilerServices.IsLong,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary>
Launches the legacy create lathe tool dialog to allow users to create their desired tools. The result of the
create lathe tool dialog, if successful, will be placed in the input parameter 'spResult'.
</summary>
            <param name="spResult">		 	The result. </param>
            <param name="machineGroupId">	Identifier for the machine group, send in NULL_ID for a library tool. </param>
            <param name="parent">		 	(Optional, defaults to null) If non-null, the parent. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Create(Cnc.Tool.Interop.TlHolder@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the create new holder wizard to allow users to create their desired holders. The result of the
		  create new holder wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Create(Cnc.Tool.Interop.TlToolMill@,System.Int32,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the create new tool wizard to allow users to create their desired tools. The result of the
		  create new tool wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">    The result. </param>
            <param name="initialType"> (Optional, defaults to END_MILL) The initial tool type. </param>
            <param name="parent">	   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Create(Cnc.Tool.Interop.TlAssembly@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the create new mill assembly panel. The result of the create new mill assembly panel, if
		  successful, will be placed in the input parameter "spAssembly". </summary>
            <param name="spAssembly"> The assembly. </param>
            <param name="parent">	  If non-null, the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.DeleteAll">
            <summary> Deletes all lathe tools and mill assemblies from the main part tool list. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.DeleteLathe(System.Int32)">
            <summary> Deletes a lathe tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot"> The slot number of the tool to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.DeleteMill(System.Int32,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Deletes a mill tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot">         The slot number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional, defaults to false) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional, defaults to false) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="parent">      (Optional, defaults to null) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Delete(System.Guid,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Deletes an item from the main part tool list with identification information matching the input parameter
          "id". </summary>
            <param name="toolId">           The identification number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional, defaults to false) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional, defaults to false) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="parent">      (Optional, defaults to null) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Update(Cnc.Tool.Interop.ILTool,Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters)">
            <summary>
Updates the lathe tool in the internal tool list that corresponds to the given lathe tool interface instance.
</summary>
            <param name="latheTool">	The lathe tool. </param>
            <param name="pAutomationParams"> (Optional, defaults to null) Pass to invoke Tool/Asembly Changed Processing to update all toolpath operations using this tool. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Update(Cnc.Tool.Interop.TlToolAssembly,Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <param name="pAutomationParams"> (Optional, defaults to null) Pass to invoke Tool/Asembly Changed Processing to update all toolpath operations using this tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Update(Cnc.Tool.Interop.TlToolLathe,Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <param name="pAutomationParams"> (Optional, defaults to null) Pass to invoke Tool/Asembly Changed Processing to update all toolpath operations using this tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Update(Cnc.Tool.Interop.TlAssembly,Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <param name="pAutomationParams"> (Optional, defaults to null) Pass to invoke Tool/Asembly Changed Processing to update all toolpath operations using this tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.GetLTools">
            <summary>
Constructs a list of all lathe tools from the main part tool list.  The result list is composed of smart pointers
to interfaces that wrap the items from the internal tool list.
</summary>
            <returns>	A set of all lathe tools in the main part tool list. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Get3dTools">
            <summary> Constructs a list of all items of type TlToolAssembly from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlToolAssembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.GetLatheTools">
            <summary> Constructs a list of all items of type TlToolLathe from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlToolLathe. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.GetAssemblies">
            <summary> Constructs a list of all items of type TlAssembly from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlAssembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Find(System.Int32,Cnc.Tool.Interop.ILTool@)">
            <summary>
Attempts to locate the lathe tool with a slot number matching the input parameter "slot".  If an item is found,
the input parameter "spResult" will be updated with a deep copy of the located item. This version of 'Find'
returns (by reference parameter) a shared pointer to a const version of the actual item in storage.
</summary>
            <param name="slot">	   	The slot. </param>
            <param name="spResult">	The result. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Find(System.Guid,Cnc.Tool.Interop.ILTool@)">
            <summary>
Attempts to locate the item with an ID matching the passed in identifier.  If an item is found, the input
parameter "spResult" will be updated with a deep copy of the located item. This version of 'Find' returns (by
reference parameter) a shared pointer to a const version of the actual item in storage.
</summary>
            <param name="id">	   	The identifier. </param>
            <param name="spResult">	The result. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Find(System.Guid,Cnc.Tool.Interop.TlToolAssembly@)">
            <summary> Attempts to locate the item with an ID matching the passed in identifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="toolId">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Find(System.Int32,Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Find(System.Guid,Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="toolId">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Find(System.Int32,Cnc.Tool.Interop.TlAssembly@)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Find(System.Guid,Cnc.Tool.Interop.TlAssembly@)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item.  This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="toolId">	The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.AddToMachineGroup(Cnc.Tool.Interop.TlAssembly,System.Int32,System.Boolean@,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional, defaults to true) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional, defaults to true) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional, defaults to false) true to suppress tool number warning. </param>
            <param name="appendCopyToName">			 (Optional) true to add copy to name if similar tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.AddToMachineGroup(Cnc.Tool.Interop.TlToolMill,System.Int32,System.Boolean@,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional, defaults to true) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional, defaults to true) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional, defaults to false) true to suppress tool number warning. </param>
            <param name="appendCopyToName">			 (Optional) true to add copy to name if similar tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Add(Cnc.Tool.Interop.ILTool)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Add(Cnc.Tool.Interop.TlToolAssembly)">
            <summary>
Adds the provided item to the current part's main tool list.  All definitions defined for the given 3D tool
assembly will have a unique slot number assigned to them prior to adding to the tool list.
</summary>
            <param name="spInput">	The item to add to the current part's main tool list. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Add(Cnc.Tool.Interop.TlToolLathe)">
            <summary> Adds input. </summary>
            <param name="spInput">			  The input to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.Add(Cnc.Tool.Interop.TlAssembly)">
            <summary> Adds input. </summary>
            <param name="spInput">			  The input to add. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystemAdapter.#ctor(Cnc.Tool.IToolSystem*)">
            <summary> Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolSystemAdapter">
            <summary> Implementation of the main Mastercam tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.IsEmpty">
            <summary> Query if the main part tool list is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AssignToOperation(Cnc.Tool.Interop.ILTool,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary> Assigns the specified lathe tool to the provided operation. </summary>
            <param name="spInput">		 The lathe tool to be assigned. </param>
            <param name="operationId">	 The identifier of the operation to have tool information assigned to it. </param>
            <param name="setOffsets">    Flag specifying how to initialize the operation tool offsets. 0 - from the tool, 1 -
							 from the configuration. </param>
            <param name="setStation">    true to initialize the operation tool station. </param>
            <param name="setSteps">		 true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed"> Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece material,
							 1 - From the tool, 2 - From defaults. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AssignToOperation(Cnc.Tool.Interop.TlHolder,System.Int32)">
            <summary> Assigns the specified tool holder to the provided operation. </summary>
            <param name="spInput">	   The tool holder to be assigned. </param>
            <param name="operationId"> The identifier of the operation to have tool holder information assigned to it. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AssignToOperation(Cnc.Tool.Interop.TlToolMill,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary> Assigns the specified tool to the provided operation. </summary>
            <param name="spInput">			   The tool to be assigned. </param>
            <param name="operationId">		   The identifier of the operation to have tool assembly information assigned to
								   it. </param>
            <param name="setOffsets">		   Flag specifying how to initialize the operation tool offsets. 0 - from the
								   tool, 1 - from the configuration. </param>
            <param name="setStation">		   true to initialize the operation tool station. </param>
            <param name="setSteps">			   true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed">	   Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece
								   material, 1 - From the tool, 2 - From defaults. </param>
            <param name="alwaysLockFeedrates"> true to always lock feedrates. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AssignToOperation(Cnc.Tool.Interop.TlAssembly,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary> Assigns the specified tool assembly to the provided operation. </summary>
            <param name="spInput">			   The tool assembly to be assigned. </param>
            <param name="operationId">		   The identifier of the operation to have tool assembly information assigned to
								   it. </param>
            <param name="setOffsets">		   Flag specifying how to initialize the operation tool offsets. 0 - from the
								   tool, 1 - from the configuration. </param>
            <param name="setStation">		   true to initialize the operation tool station. </param>
            <param name="setSteps">			   true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed">	   Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece
								   material, 1 - From the tool, 2 - From defaults. </param>
            <param name="alwaysLockFeedrates"> true to always lock feedrates. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.LaunchManager(System.Boolean)">
            <summary> Launches the Classic Tool Manager Dialog. </summary>
            <param name="launchLathe"> True to launch the lathe tool manager.  False to launch the mill tool manager. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.LaunchManager(System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the Classic Tool Manager Dialog. </summary>
            <param name="launchLathe"> True to launch the lathe tool manager.  False to launch the mill tool manager. </param>
            <param name="parent">	   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromLibrary(Cnc.Tool.Interop.TlCutParam@,System.Int16,System.Double)">
            <summary> Prompts the user to select a cutting parameter from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. IsoGroup and
		  ToolDiameter parameters exist to provide initial filtering functionality. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="isoGroup"> ISO group that the current workpiece material belongs to. </param>
            <param name="toolDia">  The diameter of the current tool being used. </param>
            <returns> True if a cutting parameter was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromLibrary(Cnc.Tool.Interop.TlCutParam@,System.Int16,System.Double,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a cutting parameter from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. IsoGroup and
		  ToolDiameter parameters exist to provide initial filtering functionality. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="isoGroup"> ISO group that the current workpiece material belongs to. </param>
            <param name="toolDia">  The diameter of the current tool being used. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a cutting parameter was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromLibrary(Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Prompts the user to select a lathe tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromLibrary(Cnc.Tool.Interop.TlToolLathe@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a lathe tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromLibrary(Cnc.Tool.Interop.TlAssembly@)">
            <summary> Prompts the user to select a tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromLibrary(Cnc.Tool.Interop.TlAssembly@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromPart(Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Prompts the user to select a lathe tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromPart(Cnc.Tool.Interop.TlToolLathe@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a lathe tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromPart(Cnc.Tool.Interop.TlAssembly@)">
            <summary> Prompts the user to select a tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectFromPart(Cnc.Tool.Interop.TlAssembly@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Prompts the user to select a tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.MillSaveGeometryToLevel(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject},System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the Save Geometry To Level App to save the geometry of the selected mill tool components to one
		  or more levels. </summary>
            <param name="selectedObjects"> The selected objects. </param>
            <param name="parent">		   If non-null, the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SaveGeometryToLevel(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlObject},System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the Save Geometry To Level App to save the geometry of the selected tool components to one or
		  more levels. </summary>
            <param name="selectedObjects"> The selected objects. </param>
            <param name="parent">		   If non-null, the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SaveGeometryToLevel(System.Collections.Generic.List`1{Cnc.Tool.Interop.ILTool},System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the Save Geometry To Level App to save the geometry of the selected lathe tool assemblies to one
		  or more levels. </summary>
            <param name="selectedTools"> The selected tools. </param>
            <param name="parent">		 If non-null, the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SaveToolsToLibrary(Cnc.Tool.Interop.TlMgr,Cnc.Tool.Interop.IToolSystem.SaveToLibParams,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the Save to Library App to save the items contained within the given container to a library. </summary>
            <param name="itemsToSave"> The items to save. </param>
            <param name="params">	   Options for controlling the operation. </param>
            <param name="parent">	   If non-null, the parent. </param>
            <returns> The results of the save to library App. </returns>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.SaveToLibParams.tabSelected">
            <summary> The select library tab from which the save operation was launched. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.SaveToLibParams.LibraryTab.Holders">
            <summary> The mill holder tab. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.SaveToLibParams.LibraryTab.Tools">
            <summary> The mill tool tab. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.SaveToLibParams.LibraryTab.Assemblies">
            <summary> The mill tool assembly tab. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.SaveToLibParams.LibraryTab.LatheHolders">
            <summary> The lathe holder tab. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.SaveToLibParams.LibraryTab.Inserts">
            <summary> The lathe insert tab. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.SaveToLibParams.LibraryTab.LatheAssemblies">
            <summary> The lathe tool assembly tab. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolSystem.SaveToLibParams.LibraryTab">
            <summary> Values that represent library tabs. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.SaveToLibParams.latheMode">
            <summary>	True if saving lathe components. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.SaveToLibParams.fromLibraryList">
            <summary>	True if saving from a library list. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.SaveToLibParams.libPath">
            <summary>	Full pathname of the library file. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolSystem.SaveToLibParams">
            <summary> A save to library parameters. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.SaveToLibResult.libPath">
            <summary>	Full pathname of the library file. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.SaveToLibResult.saved">
            <summary>	True if the data was saved. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolSystem.SaveToLibResult">
            <summary>	Encapsulates the result of a save to library. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectInsertDefinition(Cnc.Tool.Interop.TlToolAssembly,System.Int32!System.Runtime.CompilerServices.IsLong@)">
            <summary> Launches the select insert definition panel to allow users to choose the active definition for their
		  tool. </summary>
            <param name="spMultiDefTool"> The multi-definition tool. </param>
            <param name="resultSlot">	  The result slot. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectInsertDefinition(Cnc.Tool.Interop.TlToolAssembly,System.Int32!System.Runtime.CompilerServices.IsLong@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the select insert definition panel to allow users to choose the active definition for their
		  tool. </summary>
            <param name="spMultiDefTool"> The multi-definition tool. </param>
            <param name="resultSlot">	  The result slot. </param>
            <param name="parent">		  If non-null, the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.SelectInsertDefinition(Cnc.Tool.Interop.TlToolAssembly,System.Int32!System.Runtime.CompilerServices.IsLong@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Launches the select insert definition panel to allow users to choose the active definition for their
		  tool. </summary>
            <param name="spMultiDefTool">		 The multi-definition tool. </param>
            <param name="resultSlot">			 The result slot. </param>
            <param name="parent">				 If non-null, the parent. </param>
            <param name="initiallySelectedSlot"> The initially selected slot. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit3DTool(Cnc.Tool.Interop.TlToolAssembly,System.Boolean)">
            <summary> Launches the tool designer to allow users to edit the given 3D tool. The result of the tool designer, if
		  successful, will be placed in the input parameter "toolToEdit". </summary>
            <param name="toolToEdit"> The 3D tool assembly to edit. </param>
            <param name="hideParent"> True to hide the parent window before launching the tool designer. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit3DTool(Cnc.Tool.Interop.TlToolAssembly,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the tool designer to allow users to edit the given 3D tool. The result of the tool designer, if
		  successful, will be placed in the input parameter "toolToEdit". </summary>
            <param name="toolToEdit"> The 3D tool assembly to edit. </param>
            <param name="hideParent"> True to hide the parent window before launching the tool designer. </param>
            <param name="parent">	  If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit3DTool(Cnc.Tool.Interop.TlToolAssembly,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Launches the tool designer to allow users to edit the given 3D tool. The result of the tool designer, if
		  successful, will be placed in the input parameter "toolToEdit". </summary>
            <param name="toolToEdit">			 The 3D tool assembly to edit. </param>
            <param name="hideParent">			 True to hide the parent window before launching the tool designer. </param>
            <param name="parent">				 If non-null, the parent. </param>
            <param name="initiallySelectedSlot"> The initially selected slot. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssemblyProjections(Cnc.Tool.Interop.TlAssembly,System.Boolean)">
            <summary> Launches the GAF Projection editing feature to edit the projections of the assembly provided at the input
		  parameter "spResult". If the assembly is successfully edited, and the input parameter "updatePart" is
		  set to true, the assembly will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <returns> true if the assembly has changed, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssemblyProjections(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the GAF Projection editing feature to edit the projections of the assembly provided at the input
		  parameter "spResult". If the assembly is successfully edited, and the input parameter "updatePart" is
		  set to true, the assembly will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="parent">	  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if the assembly has changed, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssemblyHolder(Cnc.Tool.Interop.TlAssembly,System.Boolean)">
            <summary> Launches the holder wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the holder is successfully edited, and the input parameter "updatePart" is set to true, the holder
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		  The result. </param>
            <param name="updatePart">	  true to update part. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssemblyHolder(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Int32)">
            <summary> Launches the holder wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the holder is successfully edited, and the input parameter "updatePart" is set to true, the holder
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		  The result. </param>
            <param name="updatePart">	  true to update part. </param>
            <param name="compositeIndex"> (Optional, defaults to -1) If the holder is a composite holder, the index of the holder to edit. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssemblyHolder(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Int32,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the holder wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the holder is successfully edited, and the input parameter "updatePart" is set to true, the holder
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		  The result. </param>
            <param name="updatePart">	  true to update part. </param>
            <param name="compositeIndex"> (Optional, defaults to -1) If the holder is a composite holder, the index of the holder to edit. </param>
            <param name="parent">		  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssemblyTool(Cnc.Tool.Interop.TlAssembly,System.Boolean)">
            <summary> Launches the tool wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the tool is successfully edited, and the input parameter "updatePart" is set to true, the tool
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssemblyTool(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Boolean)">
            <summary> Launches the tool wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the tool is successfully edited, and the input parameter "updatePart" is set to true, the tool
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		   The result. </param>
            <param name="updatePart">	   true to update part. </param>
            <param name="startOnLastPage"> (Optional, defaults to false) true to start on the last page (properties page) of
							   the wizard. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssemblyTool(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Launches the tool wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the tool is successfully edited, and the input parameter "updatePart" is set to true, the tool
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		   The result. </param>
            <param name="updatePart">	   true to update part. </param>
            <param name="startOnLastPage"> (Optional, defaults to false) true to start on the last page (properties page) of
							   the wizard. </param>
            <param name="readOnly">		   True to present the editor in read-only mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssemblyTool(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the tool wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the tool is successfully edited, and the input parameter "updatePart" is set to true, the tool
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		   The result. </param>
            <param name="updatePart">	   true to update part. </param>
            <param name="startOnLastPage"> (Optional, defaults to false) true to start on the last page (properties page) of the wizard. </param>
            <param name="readOnly">        (Optional) true to present the editor in read-only mode. </param>
            <param name="parent">		   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssembly(Cnc.Tool.Interop.TlAssembly,System.Boolean)">
            <summary> Launches the mill assembly panel to edit the assembly provided at the input parameter "spAssembly". If
		  the assembly is successfully edited, and the input parameter "updatePart" is set to true, the
		  assembly will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spAssembly". </remarks>
            <param name="spResult">   The assembly. </param>
            <param name="updatePart"> True to update part. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssembly(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Boolean)">
            <summary> Launches the mill assembly panel to edit the assembly provided at the input parameter "spAssembly". If
		  the assembly is successfully edited, and the input parameter "updatePart" is set to true, the
		  assembly will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spAssembly". </remarks>
            <param name="spResult">   The assembly. </param>
            <param name="updatePart"> True to update part. </param>
            <param name="readOnly">   True if read only. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.EditAssembly(Cnc.Tool.Interop.TlAssembly,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the mill assembly panel to edit the assembly provided at the input parameter "spAssembly". If
		  the assembly is successfully edited, and the input parameter "updatePart" is set to true, the
		  assembly will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spAssembly". </remarks>
            <param name="spResult">   The assembly. </param>
            <param name="updatePart"> True to update part. </param>
            <param name="readOnly">   True if read only. </param>
            <param name="parent">	  If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit(Cnc.Tool.Interop.ILTool,Cnc.Tool.Interop.IToolSystem.EditLToolParams)">
            <summary>
Launches the appropriate editor for the given lathe tool. The result of the tool editor, if successful, will be
placed in the input parameter 'spToolToEdit'.
</summary>
            <param name="spToolToEdit">	The tool to edit. </param>
            <param name="params">	   	The parameters for controlling the operation. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.EditLToolParams.parent">
            <summary>	The parent window. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.EditLToolParams.hideParentWindow">
            <summary>	The option to hide the parent window if it is not null. Only valid if from a designer-based editor. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.EditLToolParams.opIdn">
            <summary>	The ID of the operation currently being edited. Only valid if 'fromOpDialog' is true. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.EditLToolParams.fromOpDialog">
            <summary>	The flag to specify that the tool is being edited from an operations dialog. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.EditLToolParams.updatePart">
            <summary>	The option to update the tool and all operations to use that tool in the part file.. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolSystem.EditLToolParams">
            <summary>	Parameters for controlling behavior when editing a lathe tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit(Cnc.Tool.Interop.TlHolder)">
            <summary> Launches the edit holder wizard to allow users to modify existing holders. The result of the edit holder
		  wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit(Cnc.Tool.Interop.TlHolder,System.Boolean)">
            <summary> Launches the edit holder wizard to allow users to modify existing holders. The result of the edit holder
		  wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="readOnly"> (Optional, defaults to false) true to launch the editor in a read only mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit(Cnc.Tool.Interop.TlHolder,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the edit holder wizard to allow users to modify existing holders. The result of the edit holder
		  wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="readOnly"> (Optional, defaults to false) true to launch the editor in a read only mode. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit(Cnc.Tool.Interop.TlToolMill)">
            <summary> Launches the edit tool wizard to allow users to modify existing tools. The result of the edit tool wizard,
		  if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit(Cnc.Tool.Interop.TlToolMill,System.Boolean)">
            <summary> Launches the edit tool wizard to allow users to modify existing tools. The result of the edit tool wizard,
		  if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		   The result. </param>
            <param name="startOnLastPage"> (Optional, defaults to false) true to start on the last page (properites page) of
							   the wizard. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit(Cnc.Tool.Interop.TlToolMill,System.Boolean,System.Boolean)">
            <summary> Launches the edit tool wizard to allow users to modify existing tools. The result of the edit tool wizard,
		  if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		   The result. </param>
            <param name="startOnLastPage"> (Optional, defaults to false) true to start on the last page (properites page) of the wizard. </param>
            <param name="readOnly">        (Optional, defaults to false) true to launch the editor in a read only mode. </param>D

<returns> true if it succeeds, false if it fails. </returns></member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Edit(Cnc.Tool.Interop.TlToolMill,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the edit tool wizard to allow users to modify existing tools. The result of the edit tool wizard,
		  if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		   The result. </param>
            <param name="startOnLastPage"> (Optional, defaults to false) true to start on the last page (properites page) of the wizard. </param>
            <param name="readOnly">        (Optional, defaults to false) true to launch the editor in a read only mode. </param>
            <param name="parent">		   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Create3dTool(Cnc.Tool.Interop.I3dLTool@,System.Boolean)">
            <summary> Launches the tool designer panel to allow users to create a new 3D tool assembly. The result of the tool
		  designer, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">   The result. </param>
            <param name="hideParent"> True to hide the parent window before launching the tool designer. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Create3dTool(Cnc.Tool.Interop.I3dLTool@,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the tool designer panel to allow users to create a new 3D tool assembly. The result of the tool
		  designer, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">   The result. </param>
            <param name="hideParent"> True to hide the parent window before launching the tool designer. </param>
            <param name="parent">	  If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.CreateLatheCenter(Cnc.Tool.Interop.ILTool@)">
            <summary> Launches the create new lathe center wizard to allow users to create their desired lathe centers. The
		  result of the create new lathe center wizard, if successful, will be placed in the input parameter
		  "spResult". </summary>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.CreateLatheCenter(Cnc.Tool.Interop.ILTool@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the create new lathe center wizard to allow users to create their desired lathe centers. The
		  result of the create new lathe center wizard, if successful, will be placed in the input parameter
		  "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="parent">   If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.CreateLegacyLTool(Cnc.Tool.Interop.TlToolLathe@,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Launches the legacy create lathe tool dialog to allow users to create their desired tools. The result of
		  the create lathe tool dialog, if successful, will be placed in the input parameter 'spResult'. </summary>
            <param name="spResult">		  The result. </param>
            <param name="machineGroupId"> Identifier for the machine group, send in NULL_ID for a library tool. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.CreateLegacyLTool(Cnc.Tool.Interop.TlToolLathe@,System.Int32!System.Runtime.CompilerServices.IsLong,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the legacy create lathe tool dialog to allow users to create their desired tools. The result of
		  the create lathe tool dialog, if successful, will be placed in the input parameter 'spResult'. </summary>
            <param name="spResult">		  The result. </param>
            <param name="machineGroupId"> Identifier for the machine group, send in NULL_ID for a library tool. </param>
            <param name="parent">		  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.CreateLegacyLTool(Cnc.Tool.Interop.ILTool@,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Launches the legacy create lathe tool dialog to allow users to create their desired tools. The result of
		  the create lathe tool dialog, if successful, will be placed in the input parameter 'spResult'. </summary>
            <param name="spResult">		  The result. </param>
            <param name="machineGroupId"> Identifier for the machine group, send in NULL_ID for a library tool. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.CreateLegacyLTool(Cnc.Tool.Interop.ILTool@,System.Int32!System.Runtime.CompilerServices.IsLong,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary>
Launches the legacy create lathe tool dialog to allow users to create their desired tools. The result of the
create lathe tool dialog, if successful, will be placed in the input parameter 'spResult'.
</summary>
            <param name="spResult">		 	The result. </param>
            <param name="machineGroupId">	Identifier for the machine group, send in NULL_ID for a library tool. </param>
            <param name="parent">		 	(Optional, defaults to null) If non-null, the parent. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Create(Cnc.Tool.Interop.TlHolder@)">
            <summary> Launches the create new holder wizard to allow users to create their desired holders. The result of the
		  create new holder wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Create(Cnc.Tool.Interop.TlHolder@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the create new holder wizard to allow users to create their desired holders. The result of the
		  create new holder wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="parent">  (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Create(Cnc.Tool.Interop.TlToolMill@)">
            <summary> Launches the create new tool wizard to allow users to create their desired tools. The result of the
		  create new tool wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Create(Cnc.Tool.Interop.TlToolMill@,System.Int32)">
            <summary> Launches the create new tool wizard to allow users to create their desired tools. The result of the
		  create new tool wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">    The result. </param>
            <param name="initialType"> (Optional, defaults to END_MILL) The initial tool type. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Create(Cnc.Tool.Interop.TlToolMill@,System.Int32,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the create new tool wizard to allow users to create their desired tools. The result of the
		  create new tool wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">    The result. </param>
            <param name="initialType"> (Optional, defaults to END_MILL) The initial tool type. </param>
            <param name="parent">	   (Optional, defaults to null) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Create(Cnc.Tool.Interop.TlAssembly@,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Launches the create new mill assembly panel. The result of the create new mill assembly panel, if
		  successful, will be placed in the input parameter "spAssembly". </summary>
            <param name="spAssembly"> The assembly. </param>
            <param name="parent">	  If non-null, the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.DeleteAll">
            <summary> Deletes all lathe tools and mill assemblies from the main part tool list. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.DeleteLathe(System.Int32)">
            <summary> Deletes a lathe tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot"> The slot number of the tool to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.DeleteMill(System.Int32)">
            <summary> Deletes a mill tool from the main part tool list with slot identification information matching the input
		  parameter "slot". </summary>
            <param name="slot"> The slot number of the tool to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.DeleteMill(System.Int32,System.Boolean,System.Boolean)">
            <summary> Deletes a mill tool from the main part tool list with slot identification information matching the input
		  parameter "slot". </summary>
            <param name="slot">		    The slot number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional, defaults to false) True if the user should be warned before deleting a
							tool used by operations. </param>
            <param name="deleteIfUsed"> (Optional, defaults to false) True to delete the tool if the warning is suppressed
							and it is a used tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.DeleteMill(System.Int32,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Deletes a mill tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot">         The slot number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional, defaults to false) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional, defaults to false) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="parent">      (Optional, defaults to null) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Delete(System.Guid)">
            <summary> Deletes an item from the main part tool list with identification information matching the input parameter
		  "id". </summary>
            <param name="toolId"> The identification number of the tool to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Delete(System.Guid,System.Boolean,System.Boolean)">
            <summary> Deletes an item from the main part tool list with identification information matching the input parameter
		  "id". </summary>
            <param name="toolId">	    The identification number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional, defaults to false) True if the user should be warned before deleting a
							tool used by operations. </param>
            <param name="deleteIfUsed"> (Optional, defaults to false) True to delete the tool if the warning is suppressed
							and it is a used tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Delete(System.Guid,System.Boolean,System.Boolean,System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Deletes an item from the main part tool list with identification information matching the input parameter
          "id". </summary>
            <param name="toolId">           The identification number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional, defaults to false) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional, defaults to false) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="parent">      (Optional, defaults to null) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Update(Cnc.Tool.Interop.ILTool)">
            <summary> Updates the lathe tool in the internal tool list that corresponds to the given lathe tool interface
		  instance. </summary>
            <param name="latheTool"> The lathe tool. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Update(Cnc.Tool.Interop.ILTool,Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters)">
            <summary> Updates the lathe tool in the internal tool list that corresponds to the given lathe tool interface
		  instance. </summary>
            <param name="latheTool">		 The lathe tool. </param>
            <param name="pAutomationParams"> (Optional, defaults to null) Pass to invoke Tool/Assembly Changed Processing to
								 update all toolpath operations using this tool. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Update(Cnc.Tool.Interop.TlToolAssembly)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Update(Cnc.Tool.Interop.TlToolAssembly,Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput">			 The input. </param>
            <param name="pAutomationParams"> (Optional, defaults to null) Pass to invoke Tool/Assembly Changed Processing to
								 update all toolpath operations using this tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Update(Cnc.Tool.Interop.TlToolLathe)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Update(Cnc.Tool.Interop.TlToolLathe,Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput">			 The input. </param>
            <param name="pAutomationParams"> (Optional, defaults to null) Pass to invoke Tool/Assembly Changed Processing to
								 update all toolpath operations using this tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Update(Cnc.Tool.Interop.TlAssembly)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Update(Cnc.Tool.Interop.TlAssembly,Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput">			 The input. </param>
            <param name="pAutomationParams"> (Optional, defaults to null) Pass to invoke Tool/Assembly Changed Processing to
								 update all toolpath operations using this tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters.OffsetWarningOccurred">
            <summary> Indicates an offset warning has occurred. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters.spCreatedAssembly">
            <summary> The created assembly (only populated if the user selected CreateNewAssembly via UI or AutomationMode = AssemblyChangedResult::CreateNewAssembly). </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters.AutomationMode">
            <summary> The automation mode to use if Automate = true. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters.AssemblyChangedResult.CancelChanges">
            <summary> Cancel Changes. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters.AssemblyChangedResult.CreateNewAssembly">
            <summary> Create a new assembly. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters.AssemblyChangedResult.UpdateAllOperations">
            <summary> Update all assemblies. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters.AssemblyChangedResult">
            <summary> Automation Modes. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters.Automate">
            <summary> Automate Assembly/Tool Changed Processor UI prompts. </summary>
            <remarks> Note: The automation parameters include this automation flag so that the caller may capture a reference to a created assembly or
			    if an offset warning has occurred, even when automation is off and the user is prompted via the UI for how to handle
				AssemblyChanged decisions. </remarks>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolSystem.UpdateToolpathOperationParameters">
            <summary> IToolSystem::Update(...) automation parameters. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.GetLTools">
            <summary>
Constructs a list of all lathe tools from the main part tool list.  The result list is composed of smart pointers
to interfaces that wrap the items from the internal tool list.
</summary>
            <returns>	A set of all lathe tools in the main part tool list. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Get3dTools">
            <summary> Constructs a list of all items of type TlToolAssembly from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlToolAssembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.GetLatheTools">
            <summary> Constructs a list of all items of type TlToolLathe from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlToolLathe. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.GetAssemblies">
            <summary> Constructs a list of all items of type TlAssembly from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlAssembly. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Find(System.Int32,Cnc.Tool.Interop.ILTool@)">
            <summary>
Attempts to locate the lathe tool with a slot number matching the input parameter "slot".  If an item is found,
the input parameter "spResult" will be updated with a deep copy of the located item. This version of 'Find'
returns (by reference parameter) a shared pointer to a const version of the actual item in storage.
</summary>
            <param name="slot">	   	The slot. </param>
            <param name="spResult">	The result. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Find(System.Guid,Cnc.Tool.Interop.ILTool@)">
            <summary>
Attempts to locate the item with an ID matching the passed in identifier.  If an item is found, the input
parameter "spResult" will be updated with a deep copy of the located item. This version of 'Find' returns (by
reference parameter) a shared pointer to a const version of the actual item in storage.
</summary>
            <param name="id">	   	The identifier. </param>
            <param name="spResult">	The result. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Find(System.Guid,Cnc.Tool.Interop.TlToolAssembly@)">
            <summary> Attempts to locate the item with an ID matching the passed in identifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="toolId">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Find(System.Int32,Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Find(System.Guid,Cnc.Tool.Interop.TlToolLathe@)">
            <summary> Attempts to locate the item with an ID matching the passed in identifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="toolId">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Find(System.Int32,Cnc.Tool.Interop.TlAssembly@)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Find(System.Guid,Cnc.Tool.Interop.TlAssembly@)">
            <summary> Attempts to locate the item with an ID matching the passed in identifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item.  This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="toolId">	The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlAssembly,System.Int32,System.Boolean@)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">		  The sp input. </param>
            <param name="machineGroupId"> Identifier for the machine group. A value of 'NULL_ID' will add the tool to the
							  active machine group. </param>
            <param name="userCancelled">  (Out) True if the user cancelled the operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlAssembly,System.Int32,System.Boolean@,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">			  The sp input. </param>
            <param name="machineGroupId">	  Identifier for the machine group. A value of 'NULL_ID' will add the tool to the
								  active machine group. </param>
            <param name="userCancelled">	  (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools"> (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists"> (Optional, defaults to true) true to add if similar exists. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlAssembly,System.Int32,System.Boolean@,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">			  The sp input. </param>
            <param name="machineGroupId">	  Identifier for the machine group. A value of 'NULL_ID' will add the tool to the
								  active machine group. </param>
            <param name="userCancelled">	  (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools"> (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists"> (Optional, defaults to true) true to add if similar exists. </param>
            <param name="initializeOffsets">  (Optional, defaults to true) true to initialize offsets. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlAssembly,System.Int32,System.Boolean@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional, defaults to true) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional, defaults to true) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional, defaults to false) true to suppress tool number warning. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlAssembly,System.Int32,System.Boolean@,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional, defaults to true) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional, defaults to true) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional, defaults to false) true to suppress tool number warning. </param>
            <param name="appendCopyToName">			 (Optional) true to add copy to name if similar tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlToolMill,System.Int32,System.Boolean@)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">		  The sp input. </param>
            <param name="machineGroupId"> Identifier for the machine group. A value of 'NULL_ID' will add the tool to the
							  active machine group. </param>
            <param name="userCancelled">  (Out) True if the user cancelled the operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlToolMill,System.Int32,System.Boolean@,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">			  The sp input. </param>
            <param name="machineGroupId">	  Identifier for the machine group. A value of 'NULL_ID' will add the tool to the
								  active machine group. </param>
            <param name="userCancelled">	  (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools"> (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists"> (Optional, defaults to true) true to add if similar exists. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlToolMill,System.Int32,System.Boolean@,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional, defaults to true) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional, defaults to true) true to initialize offsets. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlToolMill,System.Int32,System.Boolean@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional, defaults to true) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional, defaults to true) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional, defaults to false) true to suppress tool number warning. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.AddToMachineGroup(Cnc.Tool.Interop.TlToolMill,System.Int32,System.Boolean@,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional, defaults to true) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional, defaults to true) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional, defaults to true) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional, defaults to false) true to suppress tool number warning. </param>
            <param name="appendCopyToName">			 (Optional) true to add copy to name if similar tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Add(Cnc.Tool.Interop.ILTool)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Add(Cnc.Tool.Interop.TlToolAssembly)">
            <summary>
Adds the provided item to the current part's main tool list.  All definitions defined for the given 3D tool
assembly will have a unique slot number assigned to them prior to adding to the tool list.
</summary>
            <param name="spInput">	The item to add to the current part's main tool list. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Add(Cnc.Tool.Interop.TlToolLathe)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolSystem.Add(Cnc.Tool.Interop.TlAssembly)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolSystem">
            <summary> Interface into the main Mastercam tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlServices.CreateIMappedToolDataTranslator">
            <summary> Creates an instance of the IMappedToolDataTranslator interface. </summary>
            <returns> The new IMappedToolDataTranslator interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlServices.CreateIToolDataValidator">
            <summary> Creates an instance of the IToolDataValidator interface. </summary>
            <returns> The new IToolDataValidator interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlServices.CreateICatalogDataManager">
            <summary> Creates an instance of the  ICatalogDataManager. </summary>
            <returns> The new ICatalogDataManager interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlServices.CreateITlToolAssemblyFactory">
            <summary>	Creates an instance of the ITlToolAssemblyFactory interface. </summary>
            <returns>	The new ITlToolAssemblyFactory interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlServices.CreateITlAssemblyFactory">
            <summary>	Creates an instance of the ITlAssemblyFactory interface. </summary>
            <returns>	The new ITlAssemblyFactory interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlServices.CreateITlAssemblyItemFactory">
            <summary>	Creates an instance of the ITlAssemblyItemFactory interface. </summary>
            <returns>	The new ITlAssemblyItemFactory interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlServices.CreateITlBitmapFactory">
            <summary>	Creates an instance of the ITlBitmapFactory interface. </summary>
            <returns>	The new ITlBitmapFactory interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlServices.CreateIToolFactory">
            <summary>	Creates an instance of the IToolFactory interface. </summary>
            <returns>	The new IToolFactory interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlServices.GetTlMgr">
            <summary> Gets access to the database TlMgr instance. </summary>
            <returns> The database TlMgr instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlServices.GetToolDataImporterManager">
            <summary> Gets access to the tool data importer manager. </summary>
            <returns> The IToolDataImporterManager interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlServices.GetIToolSystem">
            <summary>	Gets an instance of the IToolSystem interface. </summary>
            <returns>	The IToolSystem interface instance. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.TlServices">
            <summary>	Type providing access to the tool system services. </summary>
        </member>
        <member name="M:Cnc.Tool.Import.CreateIMappedToolDataTranslator">
            <summary> Creates a new instance of the IMappedToolDataTranslator interfaces. </summary>
            <returns> The new IMappedToolDataTranslator interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.IMappedToolDataTranslator.Translate(Cnc.Tool.Import.MappedToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;std.reference_wrapper&lt;Cnc.Tool.Import.Log&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Translates the given mapped tool assembly into a TlAssembly instance. </summary>
            <param name="toolAssembly"> The tool assembly to translate. </param>
            <param name="log">		    (Optional) The log to output messages to if things go wrong during the process. </param>
            <returns> A TlAssembly instance if successful, or nullptr if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Import.IMappedToolDataTranslator.Translate(Cnc.Tool.Import.MappedToolItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;std.reference_wrapper&lt;Cnc.Tool.Import.Log&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Translates the given mapped tool item into a TlAssemblyItem instance. </summary>
            <param name="toolItem"> The tool item to translate. </param>
            <param name="log">	    (Optional) The log to output messages to if things go wrong during the process. </param>
            <returns> A TlAssemblyItem instance if successful, or nullptr if not. </returns>
        </member>
        <member name="T:Cnc.Tool.Import.IMappedToolDataTranslator">
            <summary> A mapped tool data translator. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.MappedToolAssembly">
            <summary> A mapped tool assembly. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.MappedToolItemTreeNode">
            <summary> A mapped tool item tree node. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.MappedToolItem">
            <summary> A mapped tool item. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.MappedAssemblyPerformanceParam">
            <summary> Values that represent performance parameters on a mapped assembly. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.MappedAssemblyMeasurement">
            <summary> Values that represent measurements on a mapped assembly. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.MappedItemProperty">
            <summary> Values that represent the mapped property from imported data. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.MappedItemType">
            <summary> Values that represent the type of the mapped assembly item. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.MappedItemGroup">
            <summary> Values that represent the group of the mapped assembly item. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Log.Message.Type">
            <summary> Values that represent Message types. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Log.Message">
            <summary> A log message. </summary>
        </member>
        <member name="T:Cnc.Tool.Import.Log">
            <summary> A simple log container for use during tooling import processes. </summary>
        </member>
        <member name="M:Cnc.Math.Transform.IsSameXYPlane(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Check if the xy planes of two transforms are coplanar. </summary>
            <param name="aT">		A transform. </param>
            <param name="oT">		Another transform. </param>
            <param name="angleTol">	Optional angle tolerance. </param>
            <param name="zeroTol">	Optional zero tolerance. </param>
            <returns>	true if same xy plane, false if not. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.IsAntiParallel(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Check if the z-axis of two transforms are antiparallel. </summary>
            <param name="aT">		A transform. </param>
            <param name="oT">		Another transform. </param>
            <param name="angleTol">	Optional angle tolerance. </param>
            <returns>	true if antiparallel, false if not. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.IsParallel(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Check if the z-axis of two transforms are parallel. </summary>
            <param name="aT">		A transform. </param>
            <param name="oT">		Another transform. </param>
            <param name="angleTol">	Optional angle tolerance. </param>
            <returns>	true if parallel, false if not. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.IsPerpendicular(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Check if the z-axis of two transforms are perpendicular. </summary>
            <param name="aT">		A transform. </param>
            <param name="oT">		Another transform. </param>
            <param name="angleTol">	Optional angle tolerance. </param>
            <returns>	true if perpendicular, false if not. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildRelativeTransform(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds a relative transform between two others. </summary>
            <param name="fromT"> Original transform. </param>
            <param name="toT">   Goal transform. </param>
            <returns> A Transform3D to apply to the original. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildRelativeTransform(Cnc.Math.Transform.TransformBase&lt;0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds a relative transform between two others. </summary>
            <param name="fromT"> Original transform. </param>
            <param name="toT">   Goal transform. </param>
            <returns> A Transform2D to apply to the original. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildMirrorAboutPlane(Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds a 3D mirror transform. </summary>
            <param name="normal"> The normal of the reflecting plane. </param>
            <param name="origin"> The origin. </param>
            <returns> A Transform3D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildMirrorAboutLine(Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds a 2D mirror transform. </summary>
            <param name="lineStart">	The line start. </param>
            <param name="lineEnd">  	The line end. </param>
            <returns>	A Transform2D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildRotationFromAxisAngle(Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Builds rotation from axis angle. </summary>
            <param name="axis"> The axis. </param>
            <param name="alpha"> The angle. </param>
            <returns> A Transform3D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildRotationAboutPoint(Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Builds a 3D rotation around a point on given axis. </summary>
            <param name="point"> The point. </param>
            <param name="axis"> The rotation axis. </param>
            <param name="alpha"> The angle. </param>
            <returns> A Transform3D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildRotationAboutPoint(Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Builds a 2D rotation around a point in the plane. </summary>
            <param name="point"> The point. </param>
            <param name="alpha"> The angle. </param>
            <returns> A Transform2D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildRotationFromIndexAngle(System.UInt32,System.Double)">
            <summary>	Builds rotation from axis index and angle. </summary>
            <remarks>	1 for Y, 2 for Z, all others will be X. </remarks>
            <param name="axisIdx">	Zero-based index of the axis. </param>
            <param name="alpha">  	The angle. </param>
            <returns>	A Transform3D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildRotationFromAngle(System.Double)">
            <summary> Builds a 2D rotation from an angle. </summary>
            <param name="alpha"> The angle. </param>
            <returns> A Transform2D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildTransformAxisOrigin(Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Builds transform from an axis and an origin. </summary>
            <remarks>	This uses the "AutoCAD Arbitrary Axis Algorithm", which provides consistent orientations
			(though arbitrary) for a given z axis. </remarks>
            <param name="zAxis">  	The new z axis. </param>
            <param name="origin">	The origin. </param>
            <returns>	A Transform3D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildTransformPoints(std.vector&lt;Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;,std.allocator&lt;Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Builds a transform from many points. </summary>
            <remarks> A plane is fit to the points, the origin is the average point position, and the normal is the average orientation assuming a CCW input order. </remarks>
            <param name="aP">	The points. </param>
            <returns>	A Transform3D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildTransformThreePoints(Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Builds a transform from three points. </summary>
            <remarks> The three points form a triangle in a plane. Point aP forms the base of the triangle and bP and cP
		  lead in the x and y directions, respectively. The z vector will be the plane normal. </remarks>
            <param name="aP">	The base point. </param>
            <param name="bP">	A point leading in the new x direction from the base. </param>
            <param name="cP">	A point leading in the new y direction from the base. </param>
            <returns>	A Transform3D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildTransform(Cnc.Math.Matrix.MatBase&lt;0x3,0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Builds a Transform3D object from a rotation and translation. </summary>
            <param name="rotation">   The 3x3 rotation matrix. </param>
            <param name="translation"> The 3d translation. </param>
            <param name="scale">  (Optional) A uniform scaling. </param>
            <returns> A Transform3D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildTransform2D(Cnc.Math.Matrix.MatBase&lt;0x2,0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Builds a Transform2D object from a rotation and translation. </summary>
            <param name="rotation">   The 2x2 rotation matrix. </param>
            <param name="translation"> The 2d translation. </param>
            <param name="scale">  (Optional) A uniform scaling. </param>
            <returns> A Transform2D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildScaleTransform(System.Double)">
            <summary> Builds a pure uniform scale object. </summary>
            <param name="scale"> The amount of scaling. </param>
            <returns> A scale only Transform3D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildScaleTransform2D(System.Double)">
            <summary> Builds a pure uniform scale object. </summary>
            <param name="scale"> The amount of scaling. </param>
            <returns> A scale only Transform2D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildRotationTransform(Cnc.Math.Matrix.MatBase&lt;0x3,0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds a pure rotation object. </summary>
            <param name="aRot"> The 3x3 rotation amounts. </param>
            <returns> A rotation only Transform3D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildRotationTransform2D(Cnc.Math.Matrix.MatBase&lt;0x2,0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds a pure rotation object. </summary>
            <param name="aRot"> The 2x2 rotation amounts. </param>
            <returns> A rotation only Transform2D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildTranslationTransform2D(Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds a pure translation object. </summary>
            <param name="aTrans"> The 2d translation amounts. </param>
            <returns> A translation only Transform2D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.BuildTranslationTransform(Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds a pure translation object. </summary>
            <param name="aTrans"> The 3d translation amounts. </param>
            <returns> A translation only Transform3D. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_Multiply(Cnc.Math.Matrix.MatBase&lt;0x4,0x4,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Matrix times transform operator. </summary>
            <param name="aM">	A 4x4 matrix. </param>
            <param name="oM">	A 3D transform object. </param>
            <returns> A 4x4 matrix. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_Multiply(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Matrix.MatBase&lt;0x4,0x4,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform matrix operator. </summary>
            <param name="aM">	A 3D transform object. </param>
            <param name="oM">	A 4x4 matrix. </param>
            <returns> A 4x4 matrix. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_Multiply(Cnc.Math.Matrix.MatBase&lt;0x3,0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Matrix times transform operator. </summary>
            <param name="aM">	A 3x3 matrix. </param>
            <param name="oM">	A 2D transform object. </param>
            <returns> A 3x3 matrix. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_Multiply(Cnc.Math.Transform.TransformBase&lt;0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Matrix.MatBase&lt;0x3,0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform matrix operator. </summary>
            <param name="aM">	A 2D transform object. </param>
            <param name="oM">	A 3x3 matrix. </param>
            <returns> A 3x3 matrix. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_MultiplicationAssignment(Cnc.Math.Vector.VecBase&lt;0x6,System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform assignment operator. </summary>
            <param name="aV"> [in,out] The 6D float vector to transform. </param>
            <param name="aM"> A Transform3D object. </param>
            <returns> The transformed vector. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_MultiplicationAssignment(Cnc.Math.Vector.VecBase&lt;0x6,System.Double&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform assignment operator. </summary>
            <param name="aV"> [in,out] The 6D double vector to transform. </param>
            <param name="aM"> A Transform3D object. </param>
            <returns> The transformed vector. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_MultiplicationAssignment(Cnc.Math.Vector.VecBase&lt;0x3,System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform assignment operator. </summary>
            <param name="aV"> [in,out] The 3D float vector to transform. </param>
            <param name="aM"> A Transform3D object. </param>
            <returns> The transformed vector. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_MultiplicationAssignment(Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform assignment operator. </summary>
            <param name="aV"> [in,out] The 3D double vector to transform. </param>
            <param name="aM"> A Transform3D object. </param>
            <returns> The transformed vector. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_MultiplicationAssignment(Cnc.Math.Vector.VecBase&lt;0x2,System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform assignment operator. </summary>
            <param name="aV"> [in,out] The 2D float vector to transform. </param>
            <param name="aM"> A Transform3D object. </param>
            <returns> The transformed vector. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_MultiplicationAssignment(Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform assignment operator. </summary>
            <param name="aV"> [in,out] The 2D double vector to transform. </param>
            <param name="aM"> A Transform3D object. </param>
            <returns> The transformed vector. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_MultiplicationAssignment(Cnc.Math.Vector.VecBase&lt;0x2,System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform assignment operator. </summary>
            <param name="aV"> [in,out] The 2D float vector to transform. </param>
            <param name="aM"> A Transform2D object. </param>
            <returns> The transformed vector. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_MultiplicationAssignment(Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform assignment operator. </summary>
            <param name="aV"> [in,out] The 2D double vector to transform. </param>
            <param name="aM"> A Transform2D object. </param>
            <returns> The transformed vector. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_Multiply(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x6,System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform vector operator. </summary>
            <param name="aM"> A Transform3D object. </param>
            <param name="aV"> A 6d double vector to transform. </param>
            <returns> Transformed 6d vector. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_Multiply(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x6,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform vector operator. </summary>
            <param name="aM"> A Transform3D object. </param>
            <param name="aV"> A 6d double vector to transform. </param>
            <returns> Transformed 6d vector. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_Multiply(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x3,System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform vector operator. </summary>
            <param name="aM"> A Transform3D object. </param>
            <param name="aV"> A 3d float vector to transform. </param>
            <returns> Transformed 3d vector. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_Multiply(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform vector operator. </summary>
            <param name="aM"> A Transform3D object. </param>
            <param name="aV"> A 3d double vector to transform. </param>
            <returns> Transformed 3d vector. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_Multiply(Cnc.Math.Transform.TransformBase&lt;0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x2,System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform vector operator. </summary>
            <param name="aM"> A Transform2D object. </param>
            <param name="aV"> A 2d float vector to transform. </param>
            <returns> Transformed 2d float vector. </returns>
        </member>
        <member name="M:Cnc.Math.Transform.op_Multiply(Cnc.Math.Transform.TransformBase&lt;0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transform vector operator. </summary>
            <param name="aM"> A Transform2D object. </param>
            <param name="aV"> A 2d double vector to transform. </param>
            <returns> Transformed 2d double vector. </returns>
        </member>
        <member name="T:Cnc.Math.Matrix.VecOrder">
            <summary> Right-handed permutations. </summary>
        </member>
        <member name="T:Cnc.Math.Vector.CheckedIdx">
            <summary> A simple index with a safety marker. </summary>
        </member>
        <member name="T:Cnc.Math.Vector.Orientation">
            <summary> Possible orientations between two vectors. </summary>
        </member>
        <member name="M:Cnc.Tool.CreateIToolDataValidator">
            <summary> Creates a new instance of the IToolDataValidator interface. </summary>
            <returns> The new IToolDataValidator interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataValidator.Validate(std.variant&lt;std.reference_wrapper&lt;Cnc.Tool.TlAssemblyItem!System.Runtime.CompilerServices.IsConst&gt;,std.reference_wrapper&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.optional&lt;std.reference_wrapper&lt;std.vector&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Validates the given item for compability with internal processes. </summary>
            <param name="item"> The item to validate. </param>
            <param name="log">  (Optional) The log to output messages to if validation issues are found. </param>
            <returns> True if the item is considered to be in a valid state, false if not. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolDataValidator">
            <summary> A tool data validator. </summary>
        </member>
        <member name="M:Cnc.Tool.CreateICatalogDataManager">
            <summary>	Creates a new instance of the ICatalogDataManager interface. </summary>
            <returns>	The new ICatalogDataManager interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ICatalogDataManager.RestoreManufacturerCatalogDefaults">
            <summary>	Restores the manufacturer catalog defaults. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ICatalogDataManager.Delete(Cnc.Tool.TlToolGrade!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Deletes the given grade from the catalog list. </summary>
            <param name="grade">	The grade to delete. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ICatalogDataManager.Delete(Cnc.Tool.TlManufacturer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Deletes the given manufacturer from the catalog list. </summary>
            <param name="manufacturer">	The manufacturer to delete. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ICatalogDataManager.Update(Cnc.Tool.TlToolGrade!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the given grade in the catalog list. </summary>
            <param name="grade">	The grade. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ICatalogDataManager.Update(Cnc.Tool.TlManufacturer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the given manufacturer in the catalog list. </summary>
            <param name="manufacturer">	The manufacturer. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ICatalogDataManager.Add(Cnc.Tool.TlToolGrade!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Adds the given grade to the catalog list. </summary>
            <param name="grade">	The grade to add. </param>
            <returns>	The identifier of the added item. </returns>
        </member>
        <member name="M:Cnc.Tool.ICatalogDataManager.Add(Cnc.Tool.TlManufacturer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Adds the given manufacturer to the catalog list. </summary>
            <param name="manufacturer">	The manufacturer to add. </param>
            <returns>	The identifier of the added item. </returns>
        </member>
        <member name="M:Cnc.Tool.ICatalogDataManager.GetTools">
            <summary> Gets the catalog tools. </summary>
            <returns> The catalog tools. </returns>
        </member>
        <member name="M:Cnc.Tool.ICatalogDataManager.GetGrades">
            <summary>	Gets the grades. </summary>
            <returns>	The grades. </returns>
        </member>
        <member name="M:Cnc.Tool.ICatalogDataManager.GetManufacturers">
            <summary>	Gets the manufacturers. </summary>
            <returns>	The manufacturers. </returns>
        </member>
        <member name="T:Cnc.Tool.ICatalogDataManager">
            <summary>	Manager for catalog data. </summary>
        </member>
        <member name="M:Cnc.Tool.CreateITlToolAssemblyFactory">
            <summary>	Creates an instance of the ITlToolAssemblyFactory interface. </summary>
            <returns>	The new ITlToolAssemblyFactory instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateViewWithNewDefinitionOnInsert(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates view of the given tool assembly with a new definition for the specified insert. </summary>
            <param name="assembly">			  The assembly. </param>
            <param name="insertId">			  Identifier for the insert. </param>
            <param name="selectedDefinition"> Identifier for the definition to insert the newly created definition after. A
								  value of GUID_NULL will insert at the end. </param>
            <returns> The new view with new insert and definition or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateViewWithNewInsertAndDefinition(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlAssemblyTurnHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITlToolAssemblyFactory.InsertParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates view of the given tool assembly with a new insert and definition. </summary>
            <param name="assembly">	   	The assembly. </param>
            <param name="parentHolder">	The parent holder. </param>
            <param name="params">	   	Options for controlling the operation. </param>
            <returns>	The new view with new insert and definition or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateViewWithNewInsertAndDefinition(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates view of the given tool assembly with a new insert and definition. </summary>
            <param name="assembly"> The assembly. </param>
            <param name="holderId"> Identifier for the holder to add the insert to. </param>
            <returns> The new view with new insert and definition or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateViewWithInsertAndDefinitionForActiveGroup(Cnc.Tool.ITlToolAssemblyFactory.InsertParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a 3d tool assembly with an insert and definition for the active machine group. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new view with new insert and definition or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateViewWithNewComponentAbove(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates view of the given tool assembly with a new component above the specified component. </summary>
            <param name="assembly">    The assembly. </param>
            <param name="componentId"> Identifier for the component to insert above. </param>
            <returns> The new view with new component or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateViewWithNewComponent(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates view of the given tool assembly with a new component attached to the specified parent on the
		  specified connection. </summary>
            <param name="assembly">			  The assembly. </param>
            <param name="parentId">			  Identifier for the parent. </param>
            <param name="parentConnectionId"> Identifier for the connection on the parent. </param>
            <returns> The new view with new component or nullptr if unsuccessful. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateDefinitionForActiveGroup(Cnc.Tool.ITlToolAssemblyFactory.DefinitionParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a lathe tool definition for the active machine group. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new definition for the active group. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateToolAssemblyInsert(Cnc.Tool.TlAssemblyInsert!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a new tool assembly insert based on an existing insert. </summary>
            <param name="other">	The other insert. </param>
            <returns>	The new tool assembly insert. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateToolAssemblyInsert(Cnc.Tool.ITlToolAssemblyFactory.InsertParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new tool assembly insert. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new tool assembly insert. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateToolAssemblyAdaptiveItem(System.Boolean)">
            <summary>	Creates tool assembly adaptive item. </summary>
            <param name="inMetric">	(Optional) True to create in metric. </param>
            <returns>	The new tool assembly adaptive item. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateToolAssemblyTurnHolder(Cnc.Tool.ITlToolAssemblyFactory.HolderParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates tool assembly turn holder. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <returns> The new tool assembly turn holder. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateHolderAssembly(Cnc.Tool.TlAdaptiveItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a holder assembly based on the passed in adaptive item. </summary>
            <param name="adaptiveItem">	The adaptive item. </param>
            <returns>	The new holder assembly. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateHolderAssembly(Cnc.Tool.TlTurnHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a holder assembly based on the passed in turn holder. </summary>
            <param name="holderItem">	The holder item. </param>
            <returns>	The new holder assembly. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateHolderAssembly(System.Boolean)">
            <summary>	Creates a holder assembly. </summary>
            <param name="inMetric">	(Optional) True to create in metric. </param>
            <returns>	The new holder assembly. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlToolAssemblyFactory.CreateToolAssemblyForActiveGroup(System.Boolean)">
            <summary>	Creates tool assembly instance for the active machine group. </summary>
            <param name="inMetric">	(Optional) True to create in metric. </param>
            <returns>	The new tool assembly for active group. </returns>
        </member>
        <member name="T:Cnc.Tool.ITlToolAssemblyFactory.DefinitionParams">
            <summary> Parameters used to create definitions when building 3d tool assemblies. </summary>
        </member>
        <member name="T:Cnc.Tool.ITlToolAssemblyFactory.InsertParams">
            <summary> Parameters used to create inserts when building 3d tool assemblies. </summary>
        </member>
        <member name="T:Cnc.Tool.ITlToolAssemblyFactory.HolderParams">
            <summary> Parameters used to create holders when building 3d tool assemblies. </summary>
        </member>
        <member name="T:Cnc.Tool.ITlToolAssemblyFactory">
            <summary> A factory service for use when creating instances of TlToolAssembly and related types for the purpose of
		  building and working with 3d tools. </summary>
        </member>
        <member name="M:Cnc.Tool.CreateITlBitmapFactory">
            <summary>	Creates an instance of the tool class bitmap factory interface. </summary>
            <returns>	The new tool class bitmap factory instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlBitmapFactory.Create(Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITlBitmapFactory.ToolParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a icon for the given item. </summary>
            <param name="item">   The item. </param>
            <param name="params"> The tool params. </param>
            <returns> A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlBitmapFactory.Create(Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITlBitmapFactory.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates an icon for the given item </summary>
            <param name="item">	The item. </param>
            <param name="size">	The size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlBitmapFactory.Create(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITlBitmapFactory.ToolParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a icon for the given item. </summary>
            <param name="item">   The item. </param>
            <param name="params"> The tool params. </param>
            <returns> A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlBitmapFactory.Create(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITlBitmapFactory.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a a icon for the given assembly. </summary>
            <param name="assembly">	The assembly. </param>
            <param name="size">	The size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlBitmapFactory.Create(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITlBitmapFactory.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates an icon for the given holder. </summary>
            <param name="holder">	The holder. </param>
            <param name="size">  	The icon size. </param>
            <returns>	A bitmap instance </returns>
        </member>
        <member name="M:Cnc.Tool.ITlBitmapFactory.Create(Cnc.Tool.TlHolderAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITlBitmapFactory.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a icon for the given holder assembly. </summary>
            <param name="holderAssembly">	The holder assembly. </param>
            <param name="size">			 	The icon size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlBitmapFactory.Create(Cnc.Tool.TlAdaptiveItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITlBitmapFactory.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a icon for the given adaptive item. </summary>
            <param name="adaptiveItem">	The adaptive item. </param>
            <param name="size">		   	The icon size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlBitmapFactory.Create(Cnc.Tool.TlTurnHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITlBitmapFactory.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a icon for the given turn holder. </summary>
            <param name="turnHolder">	The turn holder. </param>
            <param name="size">		 	The icon size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlBitmapFactory.Create(Cnc.Tool.TlInsert!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITlBitmapFactory.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a icon for the given item. </summary>
            <param name="item">	The item. </param>
            <param name="size">	The icon size. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlBitmapFactory.Create(Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITlBitmapFactory.ToolParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a icon for the given item. </summary>
            <param name="item">  	The item. </param>
            <param name="params">	Options for controlling the operation. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlBitmapFactory.Create(System.Int32!System.Runtime.CompilerServices.IsLong,Cnc.Tool.ITlBitmapFactory.ToolParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a icon for the given item. </summary>
            <param name="toolSlot">	The tool slot. Only lathe tool slots are supported at this time. </param>
            <param name="params">  	Options for controlling the operation. </param>
            <returns>	A bitmap instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlBitmapFactory.Create(Cnc.Tool.TlGraphicsFile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITlBitmapFactory.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new icon for the specified graphics file. Must be an image file. </summary>
            <param name="image"> The image. </param>
            <param name="size">  The size. </param>
            <returns> A bitmap instance. </returns>
        </member>
        <member name="T:Cnc.Tool.ITlBitmapFactory.ToolParams">
            <summary>	A parameters set used for controlling the creation of a tool bitmap. </summary>
        </member>
        <member name="T:Cnc.Tool.ITlBitmapFactory.Size">
            <summary>	Values that represent sizes. </summary>
        </member>
        <member name="M:Cnc.Tool.ITlBitmapFactory.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="T:Cnc.Tool.ITlBitmapFactory">
            <summary>	A tool bitmap factory interface. </summary>
        </member>
        <member name="M:Cnc.Tool.GetTlMgr">
            <summary> Gets tl manager. </summary>
            <returns> The tl manager. </returns>
        </member>
        <member name="M:Cnc.Tool.GetIToolDataImporterManager">
            <summary> Gets the single instance of the IToolDataImporterManager interface. </summary>
            <returns> The IToolDataImporterManager single instance. </returns>
        </member>
        <member name="M:Cnc.Tool.CreateITlAssemblyItemFactory">
            <summary>	Creates a new new instance of the ITlAssemblyItemFactory interface. </summary>
            <returns>	The new ITlAssemblyItemFactory instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateAdaptiveItem(System.Boolean)">
            <summary>	Creates an adaptive item. </summary>
            <param name="metric">	True if metric. </param>
            <returns>	The new adaptive item. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateTurnHolder(System.Boolean)">
            <summary>	Creates a turn holder. </summary>
            <param name="metric">	True if metric. </param>
            <returns>	The new turn holder. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateThreadingInsert(System.Int32,System.Int32,System.Boolean)">
            <summary>	Creates threading insert. </summary>
            <param name="insertStyle">	The insert style. </param>
            <param name="threadType"> 	Type of the thread. </param>
            <param name="metric">	  	True for the created insert to have metric values. </param>
            <returns>	The new threading insert. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateGroovingInsert(System.Char,System.Boolean)">
            <summary>	Creates a grooving insert using the passed in style and metric flag. </summary>
            <param name="style"> 	The style. </param>
            <param name="metric">	True for the created insert to have metric values. </param>
            <returns>	The new grooving insert. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateTurnInsert(System.Char,System.Boolean)">
            <summary>	Creates a turning boring insert using the passed in shape code and metric flag. </summary>
            <param name="shapeCode">	The shape code. </param>
            <param name="metric">   	True for the created insert to have metric values. </param>
            <returns>	The new turn insert. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateLatheTool(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a lathe tool using the values from the legacy tool. </summary>
            <param name="oldTool"> The old tool. </param>
            <returns> The new lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateMillHolder(System.Boolean)">
            <summary> Creates a mill holder based on the input metric flag. </summary>
            <param name="metric"> True for the created holder to have metric values. </param>
            <returns> The new mill holder. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateMillTool(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a mill tool using the values from the legacy tool. </summary>
            <param name="oldTool"> The old tool. </param>
            <returns> The new mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyItemFactory.CreateMillTool(MCToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Creates a mill tool using the passed in type and metric flag. </summary>
            <param name="type">   The type. </param>
            <param name="metric"> true for the created mill tool to have metric values. </param>
            <returns> The new mill tool. </returns>
        </member>
        <member name="T:Cnc.Tool.ITlAssemblyItemFactory">
            <summary> Factory service class providing functionality for creating instances of the classes TlToolMill, TlHolder,
		  and TlToolLathe. </summary>
        </member>
        <member name="M:Cnc.Tool.CreateITlAssemblyFactory">
            <summary>	Creates a new new instance of the ITlAssemblyFactory interface. </summary>
            <returns>	The new ITlAssemblyFactory instance. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Create(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new TlAssemblyPtr from the parameters in the specified operation. </summary>
            <param name="op"> The operation. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Create(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new TlAssemblyPtr from the old tool. </summary>
            <param name="oldTool"> The old tool. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Create(std.shared_ptr&lt;Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Creates a new TlAssemblyPtr from the given tool. </summary>
            <param name="spTool"> The tool. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.ITlAssemblyFactory.Create(MCToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Creates a new TlAssemblyPtr based on the tool type and metric flag. </summary>
            <param name="toolType"> Type of the tool. </param>
            <param name="isMetric"> true if this object is metric. </param>
            <returns> A TlAssemblyPtr. </returns>
        </member>
        <member name="T:Cnc.Tool.ITlAssemblyFactory">
            <summary> Factory service class providing functionality for creating instances of class TlAssembly. </summary>
        </member>
        <member name="M:Cnc.Tool.GetToolSystem">
            <summary> Gets a pointer to the global tool system. </summary>
            <returns> The tool system. </returns>
        </member>
        <member name="D:Cnc.Tool.IToolSystemUPtr">
            <summary> Defines an alias representing zero-based index of the tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.IsEmpty">
            <summary> Query if the main part tool list is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AssignToOperation(Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>	Assigns the specified lathe tool to the provided operation. </summary>
            <param name="toolToAssign"> 	The lathe tool to be assigned. </param>
            <param name="result">			The operation to have tool information assigned to it. </param>
            <param name="setOffsets">   	Flag specifying how to initialize the operation tool offsets. 0 - from the tool,
								1 - from the configuration. </param>
            <param name="setStation">   	true to initialize the operation tool station. </param>
            <param name="setSteps">			true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed">	Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece
								material, 1 - From the tool, 2 - From defaults. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AssignToOperation(std.shared_ptr&lt;Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assigns the specified tool holder to the provided operation. </summary>
            <param name="spInput"> The tool holder to be assigned. </param>
            <param name="result">  The operation to have tool holder information assigned to it. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AssignToOperation(std.shared_ptr&lt;Cnc.Tool.TlToolMill!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary> Assigns the specified tool to the provided operation. </summary>
            <param name="spInput">			   The tool to be assigned. </param>
            <param name="result">			   The operation to have tool assembly information assigned to it. </param>
            <param name="setOffsets">		   Flag specifying how to initialize the operation tool offsets. 0 - from the
								   tool, 1 - from the configuration. </param>
            <param name="setStation">		   true to initialize the operation tool station. </param>
            <param name="setSteps">			   true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed">	   Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece
								   material, 1 - From the tool, 2 - From defaults. </param>
            <param name="alwaysLockFeedrates"> true to always lock feedrates. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AssignToOperation(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,operation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary> Assigns the specified tool assembly to the provided operation. </summary>
            <param name="spInput">			   The tool assembly to be assigned. </param>
            <param name="result">			   The operation to have tool assembly information assigned to it. </param>
            <param name="setOffsets">		   Flag specifying how to initialize the operation tool offsets. 0 - from the
								   tool, 1 - from the configuration. </param>
            <param name="setStation">		   true to initialize the operation tool station. </param>
            <param name="setSteps">			   true to set the step/peck/coolant values from the tool. </param>
            <param name="calcFeedSpeed">	   Flag specifying how to recalculate the feeds/speeds. 0 - From the workpiece
								   material, 1 - From the tool, 2 - From defaults. </param>
            <param name="alwaysLockFeedrates"> true to always lock feedrates. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.LaunchManager(System.Boolean,CWnd*)">
            <summary> Launches the Classic Tool Manager Dialog. </summary>
            <param name="launchLathe"> True to launch the lathe tool manager.  False to launch the mill tool manager. </param>
            <param name="pParent">     (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromLibrary(std.shared_ptr&lt;Cnc.Tool.TlCutParam&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,System.Double,CWnd*)">
            <summary> Prompts the user to select a cutting parameter from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. IsoGroup and
		  ToolDiameter parameters exist to provide initial filtering functionality. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="isoGroup"> ISO group that the current workpiece material belongs to. </param>
            <param name="toolDia">  The diameter of the current tool being used. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a cutting parameter was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromLibrary(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Prompts the user to select a lathe tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromLibrary(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Prompts the user to select a tool assembly from the current tool component library. </summary>
            <remarks> The current tool library is the library set within the active machine definition. </remarks>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromPart(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Prompts the user to select a lathe tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a lathe tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectFromPart(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Prompts the user to select a tool assembly from the tools in the current Mastercam part file. </summary>
            <param name="spResult"> Output parameter that will be filled in with the selected result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> True if a tool assembly was selected.  False otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.MillSaveGeometryToLevel(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary>	Launches the Save to Level panel to save the mill geometry to levels. </summary>
            <param name="selectedObjects">	The selected objects. </param>
            <param name="pParent">		  	(Optional) If non-null, (Optional) the parent. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SaveGeometryToLevel(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary>	Saves a geometry to level. </summary>
            <param name="selectedObjects">	The selected objects. </param>
            <param name="pParent">		  	(Optional) If non-null, (Optional) the parent. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SaveGeometryToLevel(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary>	Saves a geometry to level. </summary>
            <param name="selectedTools">  	The selected tools. </param>
            <param name="pParent">		  	(Optional) If non-null, (Optional) the parent. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SaveToolsToLibrary(Cnc.Tool.TlMgr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.IToolSystem.SaveToLibParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary>	Saves the tools to library. </summary>
            <param name="itemsToSave">	The items to save. </param>
            <param name="params">	  	Options for controlling the operation. </param>
            <param name="pParent">	  	(Optional) If non-null, (Optional) the parent. </param>
            <returns>	A SaveToLibResult. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolSystem.SaveToLibParams.LibraryTab">
            <summary> Values that represent library tabs. </summary>
        </member>
        <member name="T:Cnc.Tool.IToolSystem.SaveToLibParams">
            <summary> A save to library parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.IToolSystem.SaveToLibResult">
            <summary>	Encapsulates the result of a save to library. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectInsertDefinition(Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Launches the select insert definition panel to allow users to choose the active definition for their tool.
</summary>
            <param name="multiDefTool">				The multi-definition tool. </param>
            <param name="resultSlot">				The result slot. </param>
            <param name="pParent">					(Optional) If non-null, (Optional) the parent. </param>
            <param name="initiallySelectedSlot">	(Optional) The initially selected slot. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.SelectInsertDefinition(std.shared_ptr&lt;Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Launches the select insert definition panel to allow users to choose the active definition for their tool.
</summary>
            <param name="spMultiDefTool">			The multi-definition tool. </param>
            <param name="resultSlot">				The result slot. </param>
            <param name="pParent">					(Optional) If non-null, (Optional) the parent. </param>
            <param name="initiallySelectedSlot">	(Optional) The initially selected slot. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Edit3DTool(Cnc.Tool.TlToolAssembly*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Launches the tool designer to allow users to edit the given 3D tool. The result of the tool designer, if
successful, will be placed in the input parameter "toolToEdit".
</summary>
            <param name="toolToEdit">	The 3D tool assembly to edit. </param>
            <param name="hideParent">	True to hide the parent window before launching the tool designer. </param>
            <param name="pParent">   	(Optional) If non-null, the parent. </param>
            <param name="initiallySelectedSlot">	(Optional) The initially selected slot. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.EditAssemblyProjections(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary> Launches the GAF Projection editing feature to edit the projections of the assembly provided at the input parameter "spResult".
		  If the assembly is successfully edited, and the input parameter "updatePart" is set to true, the assembly
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">   The result. </param>
            <param name="updatePart"> true to update part. </param>
            <param name="pParent">    (Optional) If non-null, the parent dialog to suspend. </param>
            <returns> true if the assembly has changed, false otherwise. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.EditAssemblyHolder(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32,CWnd*)">
            <summary> Launches the holder wizard to edit the holder of the assembly provided at the input parameter "spResult".
		  If the holder is successfully edited, and the input parameter "updatePart" is set to true, the holder
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" at that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		  The result. </param>
            <param name="updatePart">	  true to update part. </param>
            <param name="compositeIndex"> (Optional) If the holder is a composite holder, the index of the holder to edit. </param>
            <param name="pParent">		  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.EditAssemblyTool(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,CWnd*)">
            <summary> Launches the tool wizard to edit the tool of the assembly provided at the input parameter "spResult".
		  If the tool is successfully edited, and the input parameter "updatePart" is set to true, the tool
		  will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spResult". </remarks>
            <param name="spResult">		   The result. </param>
            <param name="updatePart">	   true to update part. </param>
            <param name="startOnLastPage"> (Optional) true to start on the last page (properties page) of the wizard. </param>
            <param name="readOnly">        (Optional) true to present the editor in read-only mode. </param>
            <param name="pParent">		   (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.EditAssembly(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,CWnd*)">
            <summary> Launches the mill assembly panel to edit the assembly provided at the input parameter "spAssembly". If
		  the assembly is successfully edited, and the input parameter "updatePart" is set to true, the
		  assembly will be updated in the Mastercam part tool list. </summary>
            <remarks> If the part list is updated after an edit, and the relevant assembly is used in operations, the "assembly
		  has changed" dialog will be presented to the user.  In the event that the user selects "create new
		  assembly" from that dialog, the newly created assembly will be in parameter "spAssembly". </remarks>
            <param name="spAssembly"> The assembly. </param>
            <param name="updatePart"> True to update part. </param>
            <param name="readOnly">   (Optional) True if read only. </param>
            <param name="pParent">    (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Edit(std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary> Launches the edit holder wizard to allow users to modify existing holders. The result of the edit holder
		  wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="readOnly"> (Optional) true to present the editor in read-only mode. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Edit(std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,CWnd*)">
            <summary> Launches the edit tool wizard to allow users to modify existing tools. The result of the edit tool wizard,
		  if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		   The result. </param>
            <param name="startOnLastPage"> (Optional) true to start on the last page (properites page) of the wizard. </param>
            <param name="readOnly">		   (Optional) true to present the editor in read-only mode. </param>
            <param name="pParent">		   (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Edit(Cnc.Tool.LATHETOOL*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.IToolSystem.EditLToolParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Launches the appropriate editor for the given lathe tool. The result of the tool editor, if successful, will be
placed in the input parameter 'toolToEdit'.
</summary>
            <param name="toolToEdit">	The tool to edit. </param>
            <param name="params">	   	The parameters for controlling the operation. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Edit(std.shared_ptr&lt;Cnc.Tool.ILTool&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.IToolSystem.EditLToolParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Launches the appropriate editor for the given lathe tool. The result of the tool editor, if successful, will be
placed in the input parameter 'spToolToEdit'.
</summary>
            <param name="spToolToEdit">	The tool to edit. </param>
            <param name="params">	   	The parameters for controlling the operation. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolSystem.EditLToolParams">
            <summary>	Parameters for controlling behavior when editing a lathe tool. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Create3dTools(std.function&lt;(Cnc.Tool.I3dLTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(Cnc.Tool.I3dLTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary>
Launches the tool designer panel to allow users to create a new 3D tool assembly. The function passed in should
handle a completed 3D tool and do with it whatever the client prefers. This workflow supports OK/New from the
tool designer, so a series of 3D tools can be created without exiting the tool designer.
</summary>
            <param name="commitFunc">	The commit function to use when if/when the user selects OK/New in the tool designer. </param>
            <param name="hideParent">	True to hide the parent window before launching the tool designer. </param>
            <param name="pParent">   	If non-null, the parent. </param>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Create3dTool(std.shared_ptr&lt;Cnc.Tool.I3dLTool&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CWnd*)">
            <summary>
Launches the tool designer panel to allow users to create a new 3D tool assembly. The result of the tool designer,
if successful, will be placed in the input parameter "spResult".
</summary>
            <param name="spResult">  	The result. </param>
            <param name="hideParent">	True to hide the parent window before launching the tool designer. </param>
            <param name="pParent">   	If non-null, the parent. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.CreateLatheCenter(std.shared_ptr&lt;Cnc.Tool.ILTool&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary>
Launches the create new lathe center wizard to allow users to create their desired lathe centers. The result of
the create new lathe center wizard, if successful, will be placed in the input parameter "spResult".
</summary>
            <param name="spResult">	The result. </param>
            <param name="pParent"> 	If non-null, the parent. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.CreateLegacyLTool(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,CWnd*)">
            <summary> Launches the create lathe tool dialog to allow users to create their desired tools. The result of the
		  create lathe tool dialog, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">		  The result. </param>
            <param name="machineGroupId"> Identifier for the machine group, send in NULL_ID for a library tool. </param>
            <param name="pParent">		  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.CreateLegacyLTool(std.shared_ptr&lt;Cnc.Tool.ILTool&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,CWnd*)">
            <summary>
Launches the legacy create lathe tool dialog to allow users to create their desired tools. The result of the
create lathe tool dialog, if successful, will be placed in the input parameter 'spResult'.
</summary>
            <param name="spResult">		 	The result. </param>
            <param name="machineGroupId">	Identifier for the machine group, send in NULL_ID for a library tool. </param>
            <param name="pParent">		 	If non-null, the parent. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Create(std.shared_ptr&lt;Cnc.Tool.TlHolder&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Launches the create new holder wizard to allow users to create their desired holders. The result of the
		  create new holder wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult"> The result. </param>
            <param name="pParent">  (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Create(std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,CWnd*)">
            <summary> Launches the create new tool wizard to allow users to create their desired tools. The result of the
		  create new tool wizard, if successful, will be placed in the input parameter "spResult". </summary>
            <param name="spResult">    The result. </param>
            <param name="initialType"> (Optional) The initial tool type. </param>
            <param name="pParent">	   (Optional) If non-null, the parent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Create(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CWnd*)">
            <summary> Launches the create new mill assembly panel. The result of the create new mill assembly
		  panel, if successful, will be placed in the input parameter "spAssembly". </summary>
            <param name="spAssembly"> The assembly. </param>
            <param name="pParent">    (Optional) If non-null, the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.DeleteAll">
            <summary> Deletes all lathe tools and mill assemblies from the main part tool list. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.DeleteLathe(System.Int32)">
            <summary> Deletes a lathe tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot"> The slot number of the tool to delete. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.DeleteMill(System.Int32,System.Boolean,System.Boolean,CWnd*)">
            <summary> Deletes a mill tool from the main part tool list with slot identification information matching the input
          parameter "slot". </summary>
            <param name="slot">         The slot number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="pParent">      (Optional) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Delete(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,CWnd*)">
            <summary> Deletes an item from the main part tool list with identification information matching the input parameter
          "id". </summary>
            <param name="id">           The identification number of the tool to delete. </param>
            <param name="warnIfUsed">   (Optional) True if the user should be warned before deleting a tool used by
                            operations. </param>
            <param name="deleteIfUsed"> (Optional) True to delete the tool if the warning is suppressed and it is a used
                            tool. </param>
            <param name="pParent">      (Optional) The parent window pointer to be given to the warning dialog (should it be
                            launched). This parameter should only be used if "true" was passed into the parameter
                            "warnIfUsed". </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Update(Cnc.Tool.ILTool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.IToolSystem.UpdateToolpathOperationParameters*)">
            <summary>
Updates the lathe tool in the internal tool list that corresponds to the given lathe tool interface instance.
</summary>
            <param name="latheTool">	The lathe tool. </param>
            <param name="pAutomationParams"> (Optional) Assembly Changed Processor automation options, nullptr indicates no Assembly Changed Processing. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Update(Cnc.Tool.TlToolAssembly*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.IToolSystem.UpdateToolpathOperationParameters*)">
            <summary>	Updates the tool assembly referenced by the slot information stored within the input tool. </summary>
            <param name="input">	The input tool. </param>
            <param name="pAutomationParams"> (Optional) Assembly Changed Processor automation options, nullptr indicates no Assembly Changed Processing. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Update(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.IToolSystem.UpdateToolpathOperationParameters*)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list. </summary>
            <param name="spInput"> The input. </param>
            <param name="pAutomationParams"> (Optional) Assembly Changed Processor automation options, nullptr indicates no Assembly Changed Processing. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Update(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.IToolSystem.UpdateToolpathOperationParameters*)">
            <summary> Updates an item in the main part tool list with the input parameter data. The input parameter's
		  identification information must match an existing item in the main part tool list.  If the
		  assembly is successfully updated, and the input parameter "pAutomationParams" is specified, the
		  Assembly Changed Processor will be invoked to update all toolpath operations using the tool that 
		  is updated, in accordance with the options specified in "pAutomationParams". </summary>
            <param name="spInput"> The tool assembly to update. </param>
            <param name="pAutomationParams"> (Optional) Assembly Changed Processor automation options, nullptr indicates no Assembly Changed Processing. </param>
            <returns> true if tool updated, false if failure. </returns>
        </member>
        <member name="F:Cnc.Tool.IToolSystem.UpdateToolpathOperationParameters.OffsetWarningOccurred">
            <summary> Indicates an offset warning has occurred. </summary>
        </member>
        <member name="F:Cnc.Tool.IToolSystem.UpdateToolpathOperationParameters.spCreatedAssembly">
            <summary> The created assembly (only populated if the user selected CreateNewAssembly via UI or AutomationMode = AssemblyChangedResult::CreateNewAssembly). </summary>
        </member>
        <member name="F:CancelChanges">
            <summary> Cancel Changes. </summary>
        </member>
        <member name="F:CreateNewAssembly">
            <summary> Create a new assembly. </summary>
        </member>
        <member name="F:UpdateAllOperations">
            <summary> Update all assemblies. </summary>
        </member>
        <member name="T:Cnc.Tool.IToolSystem.UpdateToolpathOperationParameters.AssemblyChangedResult">
            <summary> Automation Mode to use, if Automate = true. </summary>
        </member>
        <member name="F:Cnc.Tool.IToolSystem.UpdateToolpathOperationParameters.Automate">
            <summary> Automate Assembly/Tool Changed Processor UI prompts. </summary>
            <remarks> Note: The automation parameters include this automation flag so that the caller may capture a reference to a created assembly or
			    if an offset warning has occurred, even when automation is off and the user is prompted via the UI for how to handle
				AssemblyChanged decisions. </remarks>
        </member>
        <member name="T:Cnc.Tool.IToolSystem.UpdateToolpathOperationParameters">
            <summary> IToolSystem::Update(...) automation parameters. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AnyOf(Cnc.Tool.TlPredicate&lt;Cnc.Tool.ILTool&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Queries if any lathe tools in the tool system satisfy the given predicate. </summary>
            <param name="pred"> The predicate to evaluate against. </param>
            <returns> True if any lathe tools satisfy the given predicate. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AnyOf(Cnc.Tool.TlPredicate&lt;Cnc.Tool.TlAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Queries if any mill tool assemblies in the tool system satisfy the given predicate. </summary>
            <param name="pred"> The predicate to evaluate against. </param>
            <returns> True if any mill tool assemblies satisfy the given predicate. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.FindAll(Cnc.Tool.TlPredicate&lt;Cnc.Tool.ILTool&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for matching lathe tools in the tool manager. The predicate parameter will be executed on all 3d
		  tools and legacy lathe tools. Items that result in a value of 'true' when passed into the predicate
		  will be added to the result set. </summary>
            <param name="pred"> A function predicate used to select all matching lathe tools from the Mastercam part tool
					list. </param>
            <returns> The result set. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.FindAll(Cnc.Tool.TlPredicate&lt;Cnc.Tool.TlAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for matching mill tools in the tool manager. The predicate parameter will be executed on all
		  mill tools. Items that result in a value of 'true' when passed into the predicate will be added to
		  the result set. </summary>
            <param name="pred"> A function predicate used to select all matching mill tools from the Mastercam part tool
					list. </param>
            <returns> The result set. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.FindIf(Cnc.Tool.TlPredicate&lt;Cnc.Tool.ILTool&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for the first item for which predicate 'pred' returns true. </summary>
            <param name="pred"> A function predicate used to select the appropriate tool from the Mastercam part tool list.
					This function parameter will be executed on each tool in the list until a value of "true" is
					returned. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.FindIf(Cnc.Tool.TlPredicate&lt;Cnc.Tool.TlAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Searches for the first item for which predicate 'pred' returns true. </summary>
            <param name="pred"> A function predicate used to select the appropriate tool from the Mastercam part tool list.
					This function parameter will be executed on each tool in the list until a value of "true" is
					returned. </param>
            <returns> The result or nullptr if not found. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.GetLTools">
            <summary>
Constructs a list of all lathe tools from the main part tool list.  The result list is composed of smart pointers
to interfaces that wrap the items from the internal tool list.
</summary>
            <returns>	A set of all lathe tools in the main part tool list. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Get3dTools">
            <summary> Constructs a list of all items of type TlToolAssembly from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlToolAssembly. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.GetLatheTools">
            <summary> Constructs a list of all items of type TlToolLathe from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlToolLathe. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.GetAssemblies">
            <summary> Constructs a list of all items of type TlAssembly from the main part tool list.  The result list is
          composed of non-modifiable smart pointers that directly point to the items from the internal tool
          list. If changes are desired to any individual item in the result set, the "Clone" method should be
          called on the item to create a deep copy to work with. </summary>
            <returns> A set of all items in the main part tool list of type TlAssembly. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(System.Int32,std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Attempts to locate the lathe tool with a slot number matching the input parameter "slot".  If an item is found,
the input parameter "spResult" will be updated with a deep copy of the located item. This version of 'Find'
returns (by reference parameter) a shared pointer to a const version of the actual item in storage.
</summary>
            <param name="slot">	   	The slot. </param>
            <param name="spResult">	The result. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Attempts to locate the item with an ID matching the passed in identifier.  If an item is found, the input
parameter "spResult" will be updated with a deep copy of the located item. This version of 'Find' returns (by
reference parameter) a shared pointer to a const version of the actual item in storage.
</summary>
            <param name="id">	   	The identifier. </param>
            <param name="spResult">	The result. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(System.Int32,std.shared_ptr&lt;Cnc.Tool.TlToolAssemblyLatheDefView!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Attempts to locate a 3D tool corresponding to the slot number specified at input parameter "slot".  Because 3D
tools live in both the mill and lathe tool lists, input parameter "slotIsMill" is used to determine whether to
look for the tool from the lathe slot list or the mill slot list.
</summary>
            <param name="slot">		 	The slot. </param>
            <param name="spResult">  	The result. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item.  This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="id">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(System.Int32,std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="id">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(System.Int32,std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with a slot number matching the input parameter "slot".  If an item is found,
		  the input parameter "spResult" will be updated with a deep copy of the located item. This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="slot">	    The slot. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Find(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to locate the item with an ID matching the passed in indentifier.  If an item is found, the
		  input parameter "spResult" will be updated with a deep copy of the located item.  This version of
		  'Find' returns (by reference parameter) a shared pointer to a const version of the actual item in
		  storage. </summary>
            <param name="id">	    The identifier. </param>
            <param name="spResult"> The result. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AddToMachineGroup(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional) true to suppress tool number warning. </param>
            <param name="appendCopyToName">			 (Optional) true to add copy to name if similar tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.AddToMachineGroup(std.shared_ptr&lt;Cnc.Tool.TlToolMill&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Prepares the provided item using the settings in the specified machine group, and then adds the item to
		  the specified machine group.  If not suppressed, this function will warn the user of any similar
		  items that already exist within the specified machine group.  If the add is successful, the input
		  parameter will updated to reflect adjusted slot number, tool number, tool offsets, and potentially
		  station number. </summary>
            <param name="spInput">					 The sp input. </param>
            <param name="machineGroupId">			 Identifier for the machine group. A value of 'NULL_ID' will add the tool
										 to the active machine group. </param>
            <param name="userCancelled">			 (Out) True if the user cancelled the operation. </param>
            <param name="warnOnSimilarTools">		 (Optional) true to warning on similar tools. </param>
            <param name="addIfSimilarExists">		 (Optional) true to add if similar exists. </param>
            <param name="initializeOffsets">		 (Optional) true to initialize offsets. </param>
            <param name="suppressToolNumberWarning"> (Optional) true to suppress tool number warning. </param>
            <param name="appendCopyToName">		 (Optional) true to add copy to name if similar tool. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Add(std.shared_ptr&lt;Cnc.Tool.ILTool&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Add(Cnc.Tool.TlToolAssembly*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds the provided item to the current part's main tool list.  All definitions defined for the given 3D tool
assembly will have a unique slot number assigned to them prior to adding to the tool list.
</summary>
            <param name="input">	The item to add to the current part's main tool list. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Add(std.shared_ptr&lt;Cnc.Tool.TlToolLathe&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolSystem.Add(std.shared_ptr&lt;Cnc.Tool.TlAssembly&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the provided item to the current part's main tool list.  An open slot number will be determined and
		  assigned to the item as it is added to the part tool list. If the add is successful, the input
		  parameter's slot number will be updated to reflect how it was stored.  This slot number can be used
		  to access and/or update the item from the main tool list. </summary>
            <param name="spInput"> The item to add to the current part's main tool list. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolSystem">
            <summary> Interface into the main Mastercam tool system. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.SetCommercialName(System.String)">
            <summary>   Sets a commercial name. </summary>
            <param name="name"> The name. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.GetCommercialName">
            <summary>   Gets the commercial name. </summary>
            <returns>   The commercial name. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.CopyFrom(Cnc.Tool.Interop.TlMaterial)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlMaterial.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlMaterial">
            <summary> Defines the TlMaterial tool class type. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderAssembly.IsMetric">
            <summary> Gets or sets whether the holder assembly is metric </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderAssembly.HasImage">
            <summary> Tests if Image reference property is set. </summary>
            <returns> true if Image is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderAssembly.Image">
            <summary> Gets or sets the image for the holder assembly </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderAssembly.ComponentTree">
            <summary> Gets or sets the assembly component tree </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderAssembly.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderAssembly.CopyFrom(Cnc.Tool.Interop.TlHolderAssembly)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderAssembly.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderAssembly.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolderAssembly">
            <summary> Defines the TlHolderAssembly tool class type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderAssembly.TlHolderAssemblyDeserializationImpl">
            <summary>	A holder assembly deserialization implementation. </summary>
            <summary>	A holder assembly deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderAssembly.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the reset ids operation. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
            <summary>	Executes the reset ids operation. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderAssembly.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderAssembly.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderAssembly.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolderAssembly.IsSameType(Cnc.Tool.TlHolderAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> First Unwraps the holder assemblies then queries if 'other' is the same type. 
		  Type possibilities are TlHolderAssembly, TlTurnHolder, and TlAdaptiveItem. </summary>
            <param name="other"> The other holder assembly. </param>
            <returns> True if same type, false if not. </returns>
            <summary> First Unwraps the holder assemblies then queries if 'other' is the same type. 
		  Type possibilities are TlHolderAssembly, TlTurnHolder, and TlAdaptiveItem. </summary>
            <param name="other"> The other holder assembly. </param>
            <returns> True if same type, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderAssembly.Unwrap">
            <summary>	Unwraps the holder assembly into a TlTurnHolder or TlAdaptiveItem if there's
			a single component. </summary>
            <returns>	If not nullptr, then a TlTurnHolder or TlAdaptiveItem as a TlObjectPtr. </returns>
            <summary>	Unwraps the holder assembly into a TlTurnHolder or TlAdaptiveItem if there's
			a single component. </summary>
            <returns>	If not nullptr, then a TlTurnHolder or TlAdaptiveItem as a TlObjectPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.MoveComponent(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Move the specified component to the next or previous connection on its parent. </summary>
            <param name="componentId"> Identifier for the component to move. </param>
            <param name="moveUp">	   True to move up, false to move down. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Move the specified component to the next or previous connection on its parent. </summary>
            <param name="componentId"> Identifier for the component to move. </param>
            <param name="moveUp">	   True to move up, false to move down. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.CanMoveComponent(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determine if we can move the specified component. </summary>
            <param name="componentId"> Identifier for the component to investigate moving. </param>
            <param name="moveUp">	   True to check moving up, false for moving down. </param>
            <returns> True if we can move component, false if not. </returns>
            <summary> Determine if we can move the specified component. </summary>
            <param name="componentId"> Identifier for the component to investigate moving. </param>
            <param name="moveUp">	   True to check moving up, false for moving down. </param>
            <returns> True if we can move component, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetRootItemPtr">
            <summary>	Gets the root item pointer. </summary>
            <returns>	The root item pointer. </returns>
            <summary>	Gets the root item pointer. </summary>
            <returns>	The root item pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetInsertItemIds">
            <summary>	Gets insert item identifiers. </summary>
            <returns>	The insert item identifiers. </returns>
            <summary>	Gets insert item identifiers. </summary>
            <returns>	The insert item identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetItemIds">
            <summary>	Gets all identifiers of the assembly items contained within this component tree. </summary>
            <returns>	The item identifiers. </returns>
            <summary>	Gets all identifiers of the assembly items contained within this component tree. </summary>
            <returns>	The item identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetTurnHolders">
            <summary>	Gets a collection of const pointers to the turn holders defined on this tree. </summary>
            <returns>	The turn holders. </returns>
            <summary>	Gets a collection of const pointers to the turn holders defined on this tree. </summary>
            <returns>	The turn holders. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetChangeInProjectionLengthAdjustments(Cnc.Tool.TlAssemblyComponentTree!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets change in projection length adjustments. </summary>
            <param name="oldTree">	  	The old tree. </param>
            <param name="componentId">	Identifier for the component. </param>
            <returns>	True if it changed, false if it did not change. </returns>
            <summary>	Gets change in projection length adjustments. </summary>
            <param name="oldTree">	  	The old tree. </param>
            <param name="componentId">	Identifier for the component. </param>
            <returns>	True if it changed, false if it did not change. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.UpdateComponentItemProjectionLengthAdjustment(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Boolean)">
            <summary> Updates the projection length adjustment described by value. </summary>
            <param name="componentId">   Identifier for the component. </param>
            <param name="value">		 The value. </param>
            <param name="valueIsMetric"> (Optional) True if value is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Updates the projection length adjustment described by value. </summary>
            <param name="componentId">   Identifier for the component. </param>
            <param name="value">		 The value. </param>
            <param name="valueIsMetric"> (Optional) True if value is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetComponentItemProjectionLengthAdjustment(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets projection length adjustment. </summary>
            <param name="componentId">	    Identifier for the component. </param>
            <param name="getValueInMetric"> (Optional) True to get value in metric. </param>
            <returns> The projection length adjustment. </returns>
            <summary> Gets projection length adjustment. </summary>
            <param name="componentId">	    Identifier for the component. </param>
            <param name="getValueInMetric"> (Optional) True to get value in metric. </param>
            <returns> The projection length adjustment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.UpdateComponentItemModelData(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlGraphicsFile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Updates the item model data. </summary>
            <param name="componentId">  Identifier for the component. </param>
            <param name="modelData">    Information describing the model. </param>
            <param name="geometryFile"> The name of the geometry file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Updates the item model data. </summary>
            <param name="componentId">  Identifier for the component. </param>
            <param name="modelData">    Information describing the model. </param>
            <param name="geometryFile"> The name of the geometry file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.ApplyXformToParentConnection(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Applies the given transform to the parent connection. </summary>
            <param name="componentId">   Identifier for the component. </param>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> (Optional) True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Applies the given transform to the parent connection. </summary>
            <param name="componentId">   Identifier for the component. </param>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> (Optional) True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.ApplyXformToConnection(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Applies the given transform to the specified connection. </summary>
            <param name="connection">    The connection. </param>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> (Optional) True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Applies the given transform to the specified connection. </summary>
            <param name="connection">    The connection. </param>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> (Optional) True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.UpdateMachineSideConnectionXform(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Updates the machine side connection transform. </summary>
            <param name="componentId">   Identifier for the component. </param>
            <param name="xform">		 The transform. </param>
            <param name="xformIsMetric"> (Optional) True if transform is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Updates the machine side connection transform. </summary>
            <param name="componentId">   Identifier for the component. </param>
            <param name="xform">		 The transform. </param>
            <param name="xformIsMetric"> (Optional) True if transform is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.UpdateConnectionXform(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Updates the connection transform. </summary>
            <param name="connection">   	The connection. </param>
            <param name="xform">			The transform. </param>
            <param name="xformIsMetric">	(Optional) True if transform is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Updates the connection transform. </summary>
            <param name="connection">   	The connection. </param>
            <param name="xform">			The transform. </param>
            <param name="xformIsMetric">	(Optional) True if transform is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.UpdateConnection(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the connection described by connection. </summary>
            <param name="connection">	The connection. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Updates the connection described by connection. </summary>
            <param name="connection">	The connection. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.RemoveWorkpieceSideConnection(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Removes the workpiece side connection. </summary>
            <param name="componentId">  Identifier for the component. </param>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Removes the workpiece side connection. </summary>
            <param name="componentId">  Identifier for the component. </param>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.AddWorkpieceSideConnection(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a workpiece side connection to the component described by 'componentId' </summary>
            <param name="componentId"> Identifier for the component. </param>
            <param name="connection">  The connection. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Adds a workpiece side connection to the component described by 'componentId' </summary>
            <param name="componentId"> Identifier for the component. </param>
            <param name="connection">  The connection. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetConnections">
            <summary> Gets the connections. </summary>
            <returns> The connections. </returns>
            <summary> Gets the connections. </summary>
            <returns> The connections. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetChangedConnections(Cnc.Tool.TlAssemblyComponentTree!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the connections associated to the component described by 'componentId' that have changed when
		  compared with the state in the given component tree. </summary>
            <param name="oldTree">	   The old tree to compare against. </param>
            <param name="componentId"> Identifier for the component. </param>
            <returns> The updated connections. </returns>
            <summary> Gets the connections associated to the component described by 'componentId' that have changed when
		  compared with the state in the given component tree. </summary>
            <param name="oldTree">	   The old tree to compare against. </param>
            <param name="componentId"> Identifier for the component. </param>
            <returns> The updated connections. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetComponentWorkpieceSideConnectionMapPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets component workpiece side connection map pointer. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> Null if it fails, else the component workpiece side connection map pointer. </returns>
            <summary> Gets component workpiece side connection map pointer. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> Null if it fails, else the component workpiece side connection map pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetComponentMachineSideConnectionPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets component machine side connection pointer. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> Null if it fails, else the component machine side connection pointer. </returns>
            <summary> Gets component machine side connection pointer. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> Null if it fails, else the component machine side connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetConnectionPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets a const pointer to the connection described by connectionId </summary>
            <param name="connectionId">	Identifier for the connection. </param>
            <returns>	Null if it fails, else the connection. </returns>
            <summary>	Gets a const pointer to the connection described by connectionId </summary>
            <param name="connectionId">	Identifier for the connection. </param>
            <returns>	Null if it fails, else the connection. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetInsertConnectionPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets the connection for the insert described by insertId. </summary>
            <param name="insertId">	Identifier for the insert. </param>
            <returns>	Null if it fails, else the insert connection. </returns>
            <summary>	Gets the connection for the insert described by insertId. </summary>
            <param name="insertId">	Identifier for the insert. </param>
            <returns>	Null if it fails, else the insert connection. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetInsertPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets a const pointer to the insert described by insertId. </summary>
            <param name="insertId">	Identifier for the insert. </param>
            <returns>	Null if it fails, else the insert. </returns>
            <summary>	Gets a const pointer to the insert described by insertId. </summary>
            <param name="insertId">	Identifier for the insert. </param>
            <returns>	Null if it fails, else the insert. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetAssemblyInsertIds">
            <summary> Gets a sorted list of the identifiers of all assembly insert components currently in this tree. </summary>
            <returns> The sorted list of assembly insert identifiers. </returns>
            <summary> Gets a sorted list of the identifiers of all assembly insert components currently in this tree. </summary>
            <returns> The sorted list of assembly insert identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetInserts">
            <summary>	Gets a collection of const pointers to the inserts defined on this tree. </summary>
            <returns>	The inserts. </returns>
            <summary>	Gets a collection of const pointers to the inserts defined on this tree. </summary>
            <returns>	The inserts. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.AddComponentOnConnection(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlAssemblyComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to add the given component onto the workpiece connection specified by the given identifier
		  provided that the specified connection exists and that there is not already a component on it. </summary>
            <param name="connectionId"> Identifier for the workpiece-side connection. </param>
            <param name="newComponent"> The new component. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Attempts to add the given component onto the workpiece connection specified by the given identifier
		  provided that the specified connection exists and that there is not already a component on it. </summary>
            <param name="connectionId"> Identifier for the workpiece-side connection. </param>
            <param name="newComponent"> The new component. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.InsertComponentAbove(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlAssemblyComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attempts to insert the given component in the tree above the component specified by the given identifier. </summary>
            <param name="componentId">  Identifier for the component to add above. </param>
            <param name="newComponent"> The new component to add. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Attempts to insert the given component in the tree above the component specified by the given identifier. </summary>
            <param name="componentId">  Identifier for the component to add above. </param>
            <param name="newComponent"> The new component to add. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.DuplicateComponent(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Duplicates the component in the tree with the specified identifier. </summary>
            <param name="componentId">	Identifier for the component. </param>
            <returns>	The ID of the new component if successful, or GUID_NULL if not. </returns>
            <summary>	Duplicates the component in the tree with the specified identifier. </summary>
            <param name="componentId">	Identifier for the component. </param>
            <returns>	The ID of the new component if successful, or GUID_NULL if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.DeleteComponentAndAllChildren(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the component and all children described by componentId. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Deletes the component and all children described by componentId. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.DeleteComponent(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Deletes the component described by componentId. </summary>
            <param name="componentId">	Identifier for the component. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Deletes the component described by componentId. </summary>
            <param name="componentId">	Identifier for the component. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.UpdateComponentItem(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlAssemblyItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the item in the component in the tree described by componentId. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <param name="item">		   The item. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Updates the item in the component in the tree described by componentId. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <param name="item">		   The item. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.UpdateComponent(Cnc.Tool.TlAssemblyComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the component in the tree described by component. </summary>
            <param name="component">	The component. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Updates the component in the tree described by component. </summary>
            <param name="component">	The component. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetComponentPtrAttachedToConnection(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a pointer to the component that is attached to the connection specified by the given identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> Null if it fails, else the component pointer attached to connection. </returns>
            <summary> Gets a pointer to the component that is attached to the connection specified by the given identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> Null if it fails, else the component pointer attached to connection. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetComponentPtrOwningConnection(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a pointer to the component that owns the connection specified by the given identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> Null if it fails, else the component pointer owning connection. </returns>
            <summary> Gets a pointer to the component that owns the connection specified by the given identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> Null if it fails, else the component pointer owning connection. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.HasComponentAtConnection(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if there is a component attached to the workpiece side connection specified by the given
		  identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> True if child component at connection, false if not. </returns>
            <summary> Query if there is a component attached to the workpiece side connection specified by the given
		  identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> True if child component at connection, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetComponentItemId(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets component item identifier. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> The component item identifier. </returns>
            <summary> Gets component item identifier. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> The component item identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetComponentItemPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a pointer to the assembly item contained within the component described by the given identifier. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> Null if it fails, else the component item pointer. </returns>
            <summary> Gets a pointer to the assembly item contained within the component described by the given identifier. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> Null if it fails, else the component item pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetComponentPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a pointer to the component described by the given identifier. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> Null if it fails, else the component pointer. </returns>
            <summary> Gets a pointer to the component described by the given identifier. </summary>
            <param name="componentId"> Identifier for the component. </param>
            <returns> Null if it fails, else the component pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetComponents">
            <summary>	Gets the components in the tree.  </summary>
            <returns>	The components. </returns>
            <summary>	Gets the components in the tree.  </summary>
            <returns>	The components. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetMachineSideConnectionPtr">
            <summary>	Gets a pointer to the machine side connection of the component tree. </summary>
            <returns>	The machine side connection pointer. </returns>
            <summary>	Gets a pointer to the machine side connection of the component tree. </summary>
            <returns>	The machine side connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.SetAssemblyPtr(Cnc.Tool.TlToolAssembly*)">
            <summary>	Sets the tool assembly pointer. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
            <summary>	Sets the tool assembly pointer. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponentTree.GetAssemblyPtr">
            <summary>	Gets the tool assembly pointer. </summary>
            <returns>	The tool assembly pointer. </returns>
            <summary>	Gets the tool assembly pointer. </summary>
            <returns>	The tool assembly pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.DoGetItemIds(std.vector&lt;Cnc.Tool.TlID,std.allocator&lt;Cnc.Tool.TlID&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the get item identifiers operation. </summary>
            <param name="ids">	The identifiers. </param>
            <summary>	Executes the get item identifiers operation. </summary>
            <param name="ids">	The identifiers. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.DoGetChildIds(std.vector&lt;Cnc.Tool.TlID,std.allocator&lt;Cnc.Tool.TlID&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the get child identifiers operation. </summary>
            <param name="ids"> The identifiers. </param>
            <summary> Executes the get child identifiers operation. </summary>
            <param name="ids"> The identifiers. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.DoGetChildren(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlAssemblyComponent!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlAssemblyComponent!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Executes the get children operation. </summary>
            <param name="results">					 The results. </param>
            <param name="includeChildrenOfChildren"> True to include, false to exclude the children of children. </param>
            <summary> Executes the get children operation. </summary>
            <param name="results">					 The results. </param>
            <param name="includeChildrenOfChildren"> True to include, false to exclude the children of children. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.DoConvertUnits(System.Boolean)">
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.DoSetAssemblyPtr(Cnc.Tool.TlToolAssembly*)">
            <summary>	Executes the set assembly pointer operation. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
            <summary>	Executes the set assembly pointer operation. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.MoveComponent(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Move the specified component to the next or previous connection on its parent. </summary>
            <param name="componentId"> Identifier for the component to move. </param>
            <param name="moveUp">	   True to move up, false to move down. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Move the specified component to the next or previous connection on its parent. </summary>
            <param name="componentId"> Identifier for the component to move. </param>
            <param name="moveUp">	   True to move up, false to move down. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.CanMoveComponent(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Determine if we can move the specified component. </summary>
            <param name="componentId"> Identifier for the component to investigate moving. </param>
            <param name="moveUp">	   True to check moving up, false for moving down. </param>
            <returns> True if we can move component, false if not. </returns>
            <summary> Determine if we can move the specified component. </summary>
            <param name="componentId"> Identifier for the component to investigate moving. </param>
            <param name="moveUp">	   True to check moving up, false for moving down. </param>
            <returns> True if we can move component, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.UpdateProjectionLengthAdjustment(System.Double,System.Boolean)">
            <summary>	Updates the projection length adjustment described by value. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	(Optional) True if value is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Updates the projection length adjustment described by value. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	(Optional) True if value is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetProjectionLengthAdjustment(System.Boolean)">
            <summary>	Gets projection length adjustment. </summary>
            <param name="getValueInMetric">	(Optional) True to get value in metric. </param>
            <returns>	The projection length adjustment. </returns>
            <summary>	Gets projection length adjustment. </summary>
            <param name="getValueInMetric">	(Optional) True to get value in metric. </param>
            <returns>	The projection length adjustment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.UpdateItemModelData(Cnc.Tool.TlGraphicsFile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Updates the item model data. </summary>
            <param name="modelData">    Information describing the model. </param>
            <param name="geometryFile"> The name of the geometry file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Updates the item model data. </summary>
            <param name="modelData">    Information describing the model. </param>
            <param name="geometryFile"> The name of the geometry file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetChildItemIds">
            <summary>
Gets the identifiers of the assembly items contained within this component and all its children.
</summary>
            <returns>	The item identifiers. </returns>
            <summary>
Gets the identifiers of the assembly items contained within this component and all its children.
</summary>
            <returns>	The item identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetItemIds">
            <summary>
Gets the identifiers of the assembly items contained within this component and all its children.
</summary>
            <returns>	The item identifiers. </returns>
            <summary>
Gets the identifiers of the assembly items contained within this component and all its children.
</summary>
            <returns>	The item identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.ApplyXformToParentConnection(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Applies the given transform to the parent connection. </summary>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> (Optional) True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Applies the given transform to the parent connection. </summary>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> (Optional) True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.ApplyXformToConnection(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Applies the given transform to the specified connection. </summary>
            <param name="connection">    The connection. </param>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> (Optional) True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Applies the given transform to the specified connection. </summary>
            <param name="connection">    The connection. </param>
            <param name="xform">		 The transform to apply. </param>
            <param name="xformIsMetric"> (Optional) True if the transform is in metric units. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.UpdateMachineSideConnectionXform(Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Updates the machine side connection transform. </summary>
            <param name="xform">		 The transform. </param>
            <param name="xformIsMetric"> (Optional) True if transform is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Updates the machine side connection transform. </summary>
            <param name="xform">		 The transform. </param>
            <param name="xformIsMetric"> (Optional) True if transform is metric. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.UpdateConnectionXform(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Math.Transform.TransformBase&lt;0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Updates the connection transform. </summary>
            <param name="connection">   	The connection. </param>
            <param name="xform">			The transform. </param>
            <param name="xformIsMetric">	(Optional) True if transform is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Updates the connection transform. </summary>
            <param name="connection">   	The connection. </param>
            <param name="xform">			The transform. </param>
            <param name="xformIsMetric">	(Optional) True if transform is metric. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.UpdateConnection(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates the connection described by connection. </summary>
            <param name="connection">	The connection. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Updates the connection described by connection. </summary>
            <param name="connection">	The connection. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetConnectionPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets a const pointer to the connection described by connectionId </summary>
            <param name="connectionId">	Identifier for the connection. </param>
            <returns>	Null if it fails, else the connection. </returns>
            <summary>	Gets a const pointer to the connection described by connectionId </summary>
            <param name="connectionId">	Identifier for the connection. </param>
            <returns>	Null if it fails, else the connection. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetChildConnectionPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets the connection for the child component described by childId. </summary>
            <param name="childId">	Identifier for the child. </param>
            <returns>	Null if it fails, else the child connection. </returns>
            <summary>	Gets the connection for the child component described by childId. </summary>
            <param name="childId">	Identifier for the child. </param>
            <returns>	Null if it fails, else the child connection. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.InsertComponentAboveChild(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlAssemblyComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inserts the given component above the child component specified by the given identifier. </summary>
            <param name="childId">	    Identifier for the child. </param>
            <param name="newComponent"> The new component to insert above a specific child. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Inserts the given component above the child component specified by the given identifier. </summary>
            <param name="childId">	    Identifier for the child. </param>
            <param name="newComponent"> The new component to insert above a specific child. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.DuplicateChild(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Duplicates the child component described by childId. Searches down the tree from this component should the child
to duplicate not directly exist on this component.
</summary>
            <param name="childId">	Identifier for the child. </param>
            <returns>	The ID of the new component if successful, or GUID_NULL if not. </returns>
            <summary>
Duplicates the child component described by childId. Searches down the tree from this component should the child
to duplicate not directly exist on this component.
</summary>
            <param name="childId">	Identifier for the child. </param>
            <returns>	The ID of the new component if successful, or GUID_NULL if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.DeleteChildAndAllChildren(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Deletes the child and all children described by childId. </summary>
            <param name="childId"> Identifier for the child. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Deletes the child and all children described by childId. </summary>
            <param name="childId"> Identifier for the child. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.DeleteChild(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Deletes the child component described by childId. Searches down the tree from this component should the child to
delete not directly exist on this component.
</summary>
            <param name="childId">	Identifier for the child. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>
Deletes the child component described by childId. Searches down the tree from this component should the child to
delete not directly exist on this component.
</summary>
            <param name="childId">	Identifier for the child. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.UpdateChild(Cnc.Tool.TlAssemblyComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Updates the child component described by child. Searches down the tree from this component should the child to
update not directly exist on this component.
</summary>
            <param name="child">	The child. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>
Updates the child component described by child. Searches down the tree from this component should the child to
update not directly exist on this component.
</summary>
            <param name="child">	The child. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetComponentPtrOwningConnection(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a pointer to the component that owns the connection specified by the given identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> Null if it fails, else the component pointer owning connection. </returns>
            <summary> Gets a pointer to the component that owns the connection specified by the given identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> Null if it fails, else the component pointer owning connection. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetChildPtrAttachedToConnection(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the child component attached to the workpiece side connection specified by the given identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> Null if it fails, else the child attached to connection. </returns>
            <summary> Gets the child component attached to the workpiece side connection specified by the given identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> Null if it fails, else the child attached to connection. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.HasChildComponentAtConnection(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if there is a child component attached to the workpiece side connection specified by the given
		  identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> True if child component at connection, false if not. </returns>
            <summary> Query if there is a child component attached to the workpiece side connection specified by the given
		  identifier. </summary>
            <param name="connectionId"> Identifier for the connection. </param>
            <returns> True if child component at connection, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetChildPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets a const pointer to the child described by childId. Searches down the tree from this component should the
child not directly exist on this component.
</summary>
            <param name="childId">	Identifier for the child component. </param>
            <returns>	Null if it fails, else the child. </returns>
            <summary>
Gets a const pointer to the child described by childId. Searches down the tree from this component should the
child not directly exist on this component.
</summary>
            <param name="childId">	Identifier for the child component. </param>
            <returns>	Null if it fails, else the child. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.AddChild(Cnc.Tool.TlAssemblyComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Adds a child component to this component. </summary>
            <param name="child">					   The child component. </param>
            <param name="copyExistingTypeSizeToChild"> (Optional) True if the child component should get the existing parent
										   workpiece side connection's type and size. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Adds a child component to this component. </summary>
            <param name="child">					   The child component. </param>
            <param name="copyExistingTypeSizeToChild"> (Optional) True if the child component should get the existing parent
										   workpiece side connection's type and size. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetChildInserts(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlAssemblyInsert!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlAssemblyInsert!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the set of inserts beneath this component. </summary>
            <param name="result"> The children insert components. </param>
            <summary> Gets the set of inserts beneath this component. </summary>
            <param name="result"> The children insert components. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetChildInserts">
            <summary> Gets the set of inserts beneath this component. </summary>
            <returns> The children insert components. </returns>
            <summary> Gets the set of inserts beneath this component. </summary>
            <returns> The children insert components. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetChildIds">
            <summary> Gets the identifiers of all children of this component </summary>
            <returns> The child identifiers. </returns>
            <summary> Gets the identifiers of all children of this component </summary>
            <returns> The child identifiers. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetChildren(System.Boolean)">
            <summary> Gets the set of child components. </summary>
            <param name="includeChildrenOfChildren"> (Optional) True to include, false to exclude the children of children. </param>
            <returns> The children components. </returns>
            <summary> Gets the set of child components. </summary>
            <param name="includeChildrenOfChildren"> (Optional) True to include, false to exclude the children of children. </param>
            <returns> The children components. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.RemoveWorkpieceSideConnection(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Removes the workpiece side connection described by value. </summary>
            <param name="connectionId"> The connection identifier. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Removes the workpiece side connection described by value. </summary>
            <param name="connectionId"> The connection identifier. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.AddWorkpieceSideConnection(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a workpiece side connection to this component. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
            <summary> Adds a workpiece side connection to this component. </summary>
            <param name="value"> The value. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetNextParentConnectionPtr">
            <summary> Gets the next parent connection pointer. </summary>
            <returns> Null if it fails, else the next parent connection pointer. </returns>
            <summary> Gets the next parent connection pointer. </summary>
            <returns> Null if it fails, else the next parent connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetPreviousParentConnectionPtr">
            <summary> Gets the previous parent connection pointer. </summary>
            <returns> Null if it fails, else the previous parent connection pointer. </returns>
            <summary> Gets the previous parent connection pointer. </summary>
            <returns> Null if it fails, else the previous parent connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetParentConnectionPtr">
            <summary>	Gets the parent connection pointer. </summary>
            <returns>	The parent connection pointer. </returns>
            <summary>	Gets the parent connection pointer. </summary>
            <returns>	The parent connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetWorkpieceSideConnectionMapPtr">
            <summary>	Gets workpiece side connection map pointer. </summary>
            <returns>	The workpiece side connection map pointer. </returns>
            <summary>	Gets workpiece side connection map pointer. </summary>
            <returns>	The workpiece side connection map pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetMachineSideConnectionPtr">
            <summary>	Gets machine side connection pointer. </summary>
            <returns>	The machine side connection pointer. </returns>
            <summary>	Gets machine side connection pointer. </summary>
            <returns>	The machine side connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetParentPtr">
            <summary>	Gets the parent pointer. </summary>
            <returns>	The parent pointer. </returns>
            <summary>	Gets the parent pointer. </summary>
            <returns>	The parent pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.SetAssemblyPtr(Cnc.Tool.TlToolAssembly*)">
            <summary>	Sets the tool assembly pointer. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
            <summary>	Sets the tool assembly pointer. </summary>
            <param name="pAssembly">	If non-null, the assembly. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetAssemblyPtr">
            <summary>	Gets the tool assembly pointer. </summary>
            <returns>	The tool assembly pointer. </returns>
            <summary>	Gets the tool assembly pointer. </summary>
            <returns>	The tool assembly pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.GetIsMetric">
            <summary>	Query if this object is metric. </summary>
            <returns>	True if metric, false if not. </returns>
            <summary>	Query if this object is metric. </summary>
            <returns>	True if metric, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.op_Assign(Cnc.Tool.TlAssemblyComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.op_Assign(Cnc.Tool.TlAssemblyComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
            <summary>	Assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.Dispose">
            <summary>	Destructor. </summary>
            <summary>	Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.#ctor(Cnc.Tool.TlAssemblyComponent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyComponent.#ctor(Cnc.Tool.TlAssemblyComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Copy constructor. </summary>
            <param name="other">	The other. </param>
            <summary>	Copy constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.SetPilotLength(System.Double,System.Boolean)">
            <summary> Sets PilotLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.GetPilotLength(System.Boolean)">
            <summary> Gets PilotLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePilotLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolCounterBore.PilotLength">
            <summary> Pilot Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.SetPilotDiameter(System.Double,System.Boolean)">
            <summary> Sets PilotDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.GetPilotDiameter(System.Boolean)">
            <summary> Gets PilotDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePilotDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolCounterBore.PilotDiameter">
            <summary> Pilot Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.CopyFrom(Cnc.Tool.Interop.TlToolCounterBore)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolCounterBore.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolCounterBore">
            <summary> Defines the TlToolCounterBore tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolCounterBore.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolCounterBore.DoSetProfileParams(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolCounterBore.DoGetProfileParams(Cnc.Tool.MillToolProfileParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolCounterBore.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolCounterBore.#ctor(Cnc.Tool.TlToolDrill!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor taking a base class type. This is used to sepparate the CounterBore tool type from it's
		  previous home (TlToolDrill) to this class definition. </summary>
            <param name="other"> The const TlToolDrill to process. </param>
            <summary> Copy constructor taking a base class type. This is used to sepparate the CounterBore tool type from it's
		  previous home (TlToolDrill) to this class definition. </summary>
            <param name="other"> The const TlToolDrill to process. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolCounterBore.#ctor">
            <summary> Default Constructor. </summary>
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.SetRadiusType(Cnc.Tool.Interop.TlCornerType)">
            <summary>	Sets the radius type. </summary>
            <param name="radius">	The radius. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBoring.RadiusType">
            <summary> Radius Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.SetShift(System.Double,System.Boolean)">
            <summary> Sets Shift property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.GetShift(System.Boolean)">
            <summary> Gets Shift property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShift property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBoring.Shift">
            <summary> Shift </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBoring.TaperAngle">
            <summary> Taper Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.CopyFrom(Cnc.Tool.Interop.TlToolBoring)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBoring.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolBoring">
            <summary> Defines the TlToolBoring tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.GetHolemakingOpParams">
            <summary> Gets drilling operation parameters. </summary>
            <returns> The drilling operation parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.SetPrimaryCornerRadius(System.Double,System.Boolean)">
            <summary> Sets PrimaryCornerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.GetPrimaryCornerRadius(System.Boolean)">
            <summary> Gets PrimaryCornerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePrimaryCornerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolDrill.PrimaryCornerRadius">
            <summary> Gets or sets the primary corner radius. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolDrill.ShoulderAngle">
            <summary> Shoulder Angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolDrill.TipAngle">
            <summary> Tip Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.CopyFrom(Cnc.Tool.Interop.TlToolDrill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolDrill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolDrill">
            <summary> Defines the TlToolDrill tool class type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolBoring.TlToolBoringDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.DoSetProfileParams(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.DoGetProfileParams(Cnc.Tool.MillToolProfileParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.SetRadiusType(TlCornerType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the radius type. </summary>
            <param name="radiusType">	Type of the radius. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Sets the radius type. </summary>
            <param name="radiusType">	Type of the radius. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.GetCornerType">
            <summary> Gets the corner type. </summary>
            <returns> The corner type. </returns>
            <summary> Gets the corner type. </summary>
            <returns> The corner type. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.GetOpToolInfo">
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBoring.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an operation tool information. </summary>
            <param name="info">	The information. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Sets an operation tool information. </summary>
            <param name="info">	The information. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Cnc.Tool.TlToolDrill.TlToolDrillDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.DoSetProfileParams(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.DoGetProfileParams(Cnc.Tool.MillToolProfileParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.GetHolemakingOpParams">
            <summary> Gets drilling operation parameters. </summary>
            <returns> The drilling operation parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.SetCornerRadius(System.Double)">
            <summary>	Sets a corner radius. </summary>
            <param name="cornerRadius">	The corner radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.GetCornerRadius">
            <summary>	Gets the corner radius. </summary>
            <returns>	The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an operation tool information. </summary>
            <param name="info">	The information. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.GetOpToolInfo">
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolDrill.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom7Time">
            <summary> Custom Option 7 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom7State">
            <summary> Custom Option 7 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom6Time">
            <summary> Custom Option 6 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom6State">
            <summary> Custom Option 6 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom5Time">
            <summary> Custom Option 5 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom5State">
            <summary> Custom Option 5 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom4Time">
            <summary> Custom Option 4 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom4State">
            <summary> Custom Option 4 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom3Time">
            <summary> Custom Option 3 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom3State">
            <summary> Custom Option 3 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom2Time">
            <summary> Custom Option 2 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom2State">
            <summary> Custom Option 2 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom1Time">
            <summary> Custom Option 1 Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.Custom1State">
            <summary> Custom Option 1 State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.ToolTime">
            <summary> Tool Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.ToolState">
            <summary> Tool State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.MistTime">
            <summary> Mist Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.MistState">
            <summary> Mist State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.FloodTime">
            <summary> Flood Timing </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.FloodState">
            <summary> Flood State </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlCoolant.IsOldStyle">
            <summary> Old Style Flag </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCoolant.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCoolant.CopyFrom(Cnc.Tool.Interop.TlCoolant)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCoolant.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlCoolant.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlCoolant">
            <summary> Defines the TlCoolant tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.MakeHolderSegmentsFromProfile(Cnc.Tool.Interop.TlProfile)">
            <summary> Makes holder segments from profile. </summary>
            <param name="profile"> The profile. </param>
            <returns> A vector of TlHolderSegment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.MakeProfileFromHolderSegments(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlHolderSegment})">
            <summary> Makes profile from holder segments. </summary>
            <param name="holderSegments"> The holder segments. </param>
            <returns> A TlProfilePtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.GetLength">
            <summary> Gets the length. </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.GetHeight">
            <summary> Gets the height. </summary>
            <returns> The height. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.IsDefaultHolder">
            <summary>	Query if this object is default holder. </summary>
            <returns>	true if default holder, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.DeleteAllSegments">
            <summary> Deletes all segments. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.SetSegments(System.Collections.Generic.List`1{Cnc.Tool.Interop.TlHolderSegment})">
            <summary>	Gets the segments </summary>
            <param name="segments">	segments to define the holder </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.GetSegments">
            <summary> Gets the segments. </summary>
            <returns> The segments. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.AddSegment(System.Double,System.Double,System.Double)">
            <summary> Adds a segment. </summary>
            <param name="topWidth">    Width of the top. </param>
            <param name="bottomWidth"> Width of the bottom. </param>
            <param name="height">	   The height. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.AccessoryCollection">
            <summary> Accessory items for this holder </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.LowerConnectionType">
            <summary> Lower Connection Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.LowerConnectionSize">
            <summary> Lower Connection Size </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.UpperConnectionType">
            <summary> Upper Connection Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.UpperConnectionSize">
            <summary> Upper Connection Size </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.HolderType">
            <summary> Holder Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolder.LibraryName">
            <summary> Library Name </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.CopyFrom(Cnc.Tool.Interop.TlHolder)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolder.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolder">
            <summary> Defines the TlHolder tool class type. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderSegment.m_Height">
            <summary> The height. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderSegment.m_BottomWidth">
            <summary> Width of the bottom. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHolderSegment.m_TopWidth">
            <summary> Width of the top. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolderSegment">
            <summary> A tl holder segment. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.SetTipDiameter(System.Double,System.Boolean)">
            <summary> Sets TipDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.GetTipDiameter(System.Boolean)">
            <summary> Gets TipDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTipDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBarrelMill.TipDiameter">
            <summary> Gets or sets the tip diameter (for use on lens form tools) </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBarrelMill.TaperAngle">
            <summary> Gets or sets the taper angle (for use on tapered form tools) </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.SetUpperRadius(System.Double,System.Boolean)">
            <summary> Sets UpperRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.GetUpperRadius(System.Boolean)">
            <summary> Gets UpperRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheUpperRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBarrelMill.UpperRadius">
            <summary> Gets or sets the upper radius (for use on tapered form tools) </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.SetPrimaryCornerRadius(System.Double,System.Boolean)">
            <summary> Sets PrimaryCornerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.GetPrimaryCornerRadius(System.Boolean)">
            <summary> Gets PrimaryCornerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePrimaryCornerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBarrelMill.PrimaryCornerRadius">
            <summary> Gets or sets the primary corner radius. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.SetProfileRadius(System.Double,System.Boolean)">
            <summary> Sets ProfileRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.GetProfileRadius(System.Boolean)">
            <summary> Gets ProfileRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheProfileRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBarrelMill.ProfileRadius">
            <summary> Profile Radius </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.SetBarrelLength(System.Double,System.Boolean)">
            <summary> Sets BarrelLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.GetBarrelLength(System.Boolean)">
            <summary> Gets BarrelLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheBarrelLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolBarrelMill.BarrelLength">
            <summary> Barrel Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.CopyFrom(Cnc.Tool.Interop.TlToolBarrelMill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolBarrelMill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolBarrelMill">
            <summary> Defines the TlToolBarrelMill tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.DoSetProfileParams(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.DoGetProfileParams(Cnc.Tool.MillToolProfileParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.SetCornerRadius(System.Double)">
            <summary> Sets corner radius. </summary>
            <param name="value"> The value. </param>
            <summary> Sets corner radius. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.GetCornerRadius">
            <summary> Gets corner radius. </summary>
            <returns> The corner radius. </returns>
            <summary> Gets corner radius. </summary>
            <returns> The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets operation tool information. </summary>
            <param name="info"> The information. </param>
            <summary> Sets operation tool information. </summary>
            <param name="info"> The information. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.GetOpToolInfo">
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolBarrelMill.#ctor">
            <summary> Default constructor. </summary>
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContextNativeWrapper.AddImportedItemsToLibrary(System.Char!System.Runtime.CompilerServices.IsConst*,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a series of imported items to the specified library. </summary>
            <remarks> Only tool libraries are supported at this time. </remarks>
            <param name="libraryPath">   Full pathname of the library file. </param>
            <param name="importedItems"> The imported items. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContextNativeWrapper.AddImportedItemsToPart(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a series of imported items to the part list in the machine group determined by the context from
		  which the importer was launched from. </summary>
            <remarks> Only mill tools and mill tool assemblies are supported at this time. </remarks>
            <param name="importedItems"> The imported items. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContextNativeWrapper.AddImportedItems(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a series of imported items to the context from which the importer was launched from. </summary>
            <param name="importedItems"> The imported items. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContextNativeWrapper.Logger">
            <summary> Gets the logger. </summary>
            <returns> A reference to an IToolDataImportLogger. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContextNativeWrapper.#ctor(Cnc.Tool.Interop.IToolDataImportContext)">
            <summary> Constructor. </summary>
            <param name="clientContext">   If non-null, the client context to direct to. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataImportContextNativeWrapper">
            <summary> A tool data importer adapter. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportLoggerNativeWrapper.SaveLogToDisk(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Saves the log to disk. </summary>
            <param name="path"> I/O Full pathname of the file. </param>
            <returns> True if the log was successfully saved to disk. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportLoggerNativeWrapper.Log(System.UInt32,HINSTANCE__*,Cnc.Tool.MessageType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Logs a message. </summary>
            <param name="resourceId">	  The Resource Identifier of the message to log. </param>
            <param name="resourceHandle"> Handle of the resource. </param>
            <param name="messageType">    (Optional) type of the message. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportLoggerNativeWrapper.Log(System.Char!System.Runtime.CompilerServices.IsConst*,Cnc.Tool.MessageType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Logs a message. </summary>
            <param name="message">	   The message. </param>
            <param name="messageType"> (Optional) type of the message. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportLoggerNativeWrapper.#ctor(Cnc.Tool.Interop.IToolDataImportLogger)">
            <summary> Constructor. </summary>
            <param name="clientInstance"> The client instance. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataImportLoggerNativeWrapper">
            <summary> A tool data import logger adapter. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportLogger.SaveLogToDisk(System.String@)">
            <summary> Saves the log to disk. </summary>
            <param name="path"> The full pathname of the file to save to. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportLogger.Log(System.String,Cnc.Tool.Interop.IToolDataImportLogger.MessageType)">
            <summary> Logs a message to the logger. </summary>
            <param name="message">	   The message. </param>
            <param name="messageType"> The type of the message. </param>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolDataImportLogger.MessageType.Error">
            <summary> An enum constant representing the error option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolDataImportLogger.MessageType.Warning">
            <summary> An enum constant representing the warning option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolDataImportLogger.MessageType.Message">
            <summary> An enum constant representing the message option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataImportLogger.MessageType">
            <summary> Values that represent message types. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataImportLogger">
            <summary> Interface for a logger for use during the tool import process. </summary>
        </member>
        <member name="M:Cnc.Tool.CreateIToolDataImportLogger">
            <summary> Creates a new instance of the IToolDataImportLogger interface. </summary>
            <returns> The new IToolDataImportLogger interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportLogger.SaveLogToDisk(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Saves the log to disk. </summary>
            <param name="path"> I/O Full pathname of the file. </param>
            <returns> True if the log was successfully saved to disk. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportLogger.Log(System.UInt32,HINSTANCE__*,Cnc.Tool.MessageType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Logs a message. </summary>
            <param name="resourceId">	  The Resource Identifier of the message to log. </param>
            <param name="resourceHandle"> Handle of the resource. </param>
            <param name="messageType">    (Optional) type of the message. </param>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportLogger.Log(System.Char!System.Runtime.CompilerServices.IsConst*,Cnc.Tool.MessageType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Logs a message. </summary>
            <param name="message">	   The message. </param>
            <param name="messageType"> (Optional) type of the message. </param>
        </member>
        <member name="T:Cnc.Tool.IToolDataImportLogger">
            <summary> A tool data import logger. </summary>
        </member>
        <member name="T:Cnc.Tool.MessageType">
            <summary> Values that represent the type of message. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContext.AddImportedItemsToLibrary(System.String,System.Collections.Generic.ICollection`1{Cnc.Tool.Interop.TlObject})">
            <summary> Adds a series of imported items to the specified library. </summary>
            <remarks> Only tool libraries are supported at this time. </remarks>
            <param name="libraryPath">   Full pathname of the library file. </param>
            <param name="importedItems"> The imported items. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContext.AddImportedItemsToPart(System.Collections.Generic.ICollection`1{Cnc.Tool.Interop.TlObject})">
            <summary> Adds a series of imported items to the part list in the machine group determined by the context from
		  which the importer was launched from. </summary>
            <remarks> Only mill tools and mill tool assemblies are supported at this time. </remarks>
            <param name="importedItems"> The imported items. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContext.AddImportedItems(System.Collections.Generic.ICollection`1{Cnc.Tool.Interop.TlObject})">
            <summary> Adds a series of imported items to the context from which the importer was launched from. </summary>
            <param name="importedItems"> The imported items. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImportContext.Logger">
            <summary> Gets the logger. </summary>
            <returns> A reference to an IToolDataImportLogger. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataImportContext">
            <summary> A tool data import context. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterAdapter.ImportFromFile(System.String,Cnc.Tool.Interop.IToolDataImportContext)">
            <summary> Import the contents from the specified file into the specified context. </summary>
            <param name="path">    Full pathname of the file to import. </param>
            <param name="context"> The context to import data through. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterAdapter.RunUI(Cnc.Tool.Interop.IToolDataImportContext,System.IntPtr)">
            <summary> Launches the user interface operation for this importer. </summary>
            <param name="context"> The context from which it has been launched. </param>
            <param name="pParent"> Handle of the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterAdapter.ProvidesUI">
            <summary> Queries the importer on whether or not it will provide a interface for the user.  If an interface is not
		  provided, and an interface is desired, a value of 'false' should be returned. Mastercam will supply
		  an interface in this case when one is supported. </summary>
            <returns> True to put the responsibility for any user interaction within this importer. False to let Mastercam
		  handle the user interface responsibility. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterAdapter.GetImportFileTypes">
            <summary> Retrieves a set of possible file types that can be imported by this importer. </summary>
            <returns> The import file types. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterAdapter.GetName">
            <summary> Retrieves the localized name of this tool data importer. </summary>
            <returns> The name. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporterAdapter.#ctor(Cnc.Tool.IToolDataImporter!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="pNativeImporter"> If non-null, the client importer to direct to. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataImporterAdapter">
            <summary> A tool data importer adapter. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporter.ImportFromFile(System.String,Cnc.Tool.Interop.IToolDataImportContext)">
            <summary> Import the contents from the specified file into the specified context. </summary>
            <param name="path">    Full pathname of the file to import. </param>
            <param name="context"> The context to import data through. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporter.RunUI(Cnc.Tool.Interop.IToolDataImportContext,System.IntPtr)">
            <summary> Launches the user interface operation for this importer. </summary>
            <param name="context"> The context from which it has been launched. </param>
            <param name="pParent"> Handle of the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporter.ProvidesUI">
            <summary> Queries the importer on whether or not it will provide a interface for the user.  If an interface is not
		  provided, and an interface is desired, a value of 'false' should be returned. Mastercam will supply
		  an interface in this case when one is supported. </summary>
            <returns> True to put the responsibility for any user interaction within this importer. False to let Mastercam
		  handle the user interface responsibility. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporter.GetImportFileTypes">
            <summary> Retrieves a set of possible file types that can be imported by this importer. </summary>
            <returns> The import file types. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolDataImporter.GetName">
            <summary> Retrieves the localized name of this tool data importer. </summary>
            <returns> The name. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolDataImporter">
            <summary> An interface for tool data import. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporter.ImportFromFile(System.Char!System.Runtime.CompilerServices.IsConst*,Cnc.Tool.IToolDataImportContext!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Import the contents from the specified file into the specified context. </summary>
            <param name="path">    Full pathname of the file to import. </param>
            <param name="context"> The context to import data through. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporter.RunUI(Cnc.Tool.IToolDataImportContext!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__*)">
            <summary> Launches the user interface operation for this importer. </summary>
            <param name="context"> The context from which it has been launched. </param>
            <param name="pParent"> Handle of the parent. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporter.ProvidesUI">
            <summary> Queries the importer on whether or not it will provide a interface for the user.  If an interface is not
		  provided, and an interface is desired, a value of 'false' should be returned. Mastercam will supply
		  an interface in this case when one is supported. </summary>
            <returns> True to put the responsibility for any user interaction within this importer. False to let Mastercam
		  handle the user interface responsibility. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImporter.GetImportFileTypes">
            <summary> Retrieves a set of possible file types that can be imported by this importer. </summary>
            <returns> The import file types. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolDataImporter">
            <summary> The IToolDataImporter interface. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportContext.AddImportedItemsToLibrary(System.Char!System.Runtime.CompilerServices.IsConst*,std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a series of imported items to the specified library. </summary>
            <remarks> Only tool libraries are supported at this time. </remarks>
            <param name="libraryPath">   Full pathname of the library file. </param>
            <param name="importedItems"> The imported items. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportContext.AddImportedItemsToPart(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a series of imported items to the part list in the machine group determined by the context from
		  which the importer was launched from. </summary>
            <remarks> Only mill tools and mill tool assemblies are supported at this time. </remarks>
            <param name="importedItems"> The imported items. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportContext.AddImportedItems(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a series of imported items to the context from which the importer was launched from. </summary>
            <param name="importedItems"> The imported items. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolDataImportContext.Logger">
            <summary> Gets the logger. </summary>
            <returns> A reference to an IToolDataImportLogger. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolDataImportContext">
            <summary> A tool data import context. </summary>
        </member>
        <member name="M:Cnc.Tool.IDataImporter.GetName">
            <summary> Retrieves the localized name of this data importer. </summary>
            <returns> The name. </returns>
        </member>
        <member name="T:Cnc.Tool.IDataImporter">
            <summary> A data importer. </summary>
        </member>
        <member name="T:Cnc.Tool.IBaseInterface">
            <summary> A base tooling interface for the implicit standardization of special member functions. </summary>
            <remarks> Protected constructor to avoid deleting the implicit constructor in derived types, virtual destructor to
		  be implicitly carried forth by derived types, and deleted copy and move constructor or assignment
		  operators to prevent unintentional object slicing. </remarks>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheDrill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheDrill.CopyFrom(Cnc.Tool.Interop.TlHolderLatheDrill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheDrill.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLatheDrill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolderLatheDrill">
            <summary> Defines the TlHolderLatheDrill tool class type. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.IsCustom">
            <summary> Is this object is custom </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.VerticallyMountedTool">
            <summary> Is vertically mounted tool </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.LeftHandTool">
            <summary> Is left hand tool </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.RoundShank">
            <summary> Is round shank </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.SideCuttingEdgeAngle">
            <summary> Side cutting edge angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.EndCuttingEdgeAngle">
            <summary> End cutting edge angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetChamferHeight(System.Double,System.Boolean)">
            <summary> Sets ChamferHeight property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetChamferHeight(System.Boolean)">
            <summary> Gets ChamferHeight property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheChamferHeight property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.ChamferHeight">
            <summary> Height of the chamfer </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetChamferWidth(System.Double,System.Boolean)">
            <summary> Sets ChamferWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetChamferWidth(System.Boolean)">
            <summary> Gets ChamferWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheChamferWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.ChamferWidth">
            <summary> Width of the chamfer </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetHeadWidth(System.Double,System.Boolean)">
            <summary> Sets HeadWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetHeadWidth(System.Boolean)">
            <summary> Gets HeadWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheHeadWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.HeadWidth">
            <summary> Width of the head </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetHeadLength(System.Double,System.Boolean)">
            <summary> Sets HeadLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetHeadLength(System.Boolean)">
            <summary> Gets HeadLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheHeadLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.HeadLength">
            <summary> Length of the head </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetShankHeight(System.Double,System.Boolean)">
            <summary> Sets ShankHeight property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetShankHeight(System.Boolean)">
            <summary> Gets ShankHeight property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShankHeight property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.ShankHeight">
            <summary> Height of the shank </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetShankWidth(System.Double,System.Boolean)">
            <summary> Sets ShankWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetShankWidth(System.Boolean)">
            <summary> Gets ShankWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShankWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.ShankWidth">
            <summary> Width of the shank </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetWidth(System.Double,System.Boolean)">
            <summary> Sets Width property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetWidth(System.Boolean)">
            <summary> Gets Width property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.Width">
            <summary> Width </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.SetLength(System.Double,System.Boolean)">
            <summary> Sets Length property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.GetLength(System.Boolean)">
            <summary> Gets Length property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.Length">
            <summary> Length </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.InsertShapes">
            <summary> Insert shapes </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.AnsiShapeCode">
            <summary> ANSI shape code </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlHolderLathe.Type">
            <summary> Type		 </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.CopyFrom(Cnc.Tool.Interop.TlHolderLathe)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlHolderLathe.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHolderLathe">
            <summary> Defines the TlHolderLathe tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLatheDrill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.SetPrimaryCornerRadius(System.Double,System.Boolean)">
            <summary> Sets PrimaryCornerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.GetPrimaryCornerRadius(System.Boolean)">
            <summary> Gets PrimaryCornerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ThePrimaryCornerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.PrimaryCornerRadius">
            <summary> Gets or sets the primary corner radius. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.ThreadShape">
            <summary> Thread Shape </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.NumThreadStarts">
            <summary> Number Thread Starts </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.RadiusType">
            <summary> Radius Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.SetTipDiameter(System.Double,System.Boolean)">
            <summary> Sets TipDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.GetTipDiameter(System.Boolean)">
            <summary> Gets TipDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTipDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.TipDiameter">
            <summary> Tip diameter of Threading Tool. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.ThreadAngle">
            <summary> Thread angle of Threading Tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.SetRootDiameter(System.Double,System.Boolean)">
            <summary> Sets RootDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.GetRootDiameter(System.Boolean)">
            <summary> Gets RootDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRootDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.RootDiameter">
            <summary> Root diameter of Threading Tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.SetThreadPitch(System.Double,System.Boolean)">
            <summary> Sets ThreadPitch property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.GetThreadPitch(System.Boolean)">
            <summary> Gets ThreadPitch property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheThreadPitch property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.ThreadPitch">
            <summary> Thread pitch of Threading Tool. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolThreading.TipAngle">
            <summary> Tip angle of the Threading Tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.CopyFrom(Cnc.Tool.Interop.TlToolThreading)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolThreading.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolThreading">
            <summary> Defines the TlToolThreading tool class type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolThreading.TlToolThreadingDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.DoSetProfileParams(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.DoGetProfileParams(Cnc.Tool.MillToolProfileParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.GetCalculatedMinorThreadDiameter(System.Boolean)">
            <summary> Gets calculated minor thread diameter if the there is enough information to calculate it. To be able to
		  successfully calculate a minor diameter, the tool must be a thread mill with a defined thread form. </summary>
            <remarks> For NPT threads, the minimum diameter will be defined WRT the defined cutting diameter. Apply a taper
		  angle at a height to calculate the minimum diameter for that height. </remarks>
            <param name="getValueInMetric"> (Optional) True to get the value in metric, false for inch. Defaults to system
								units. </param>
            <returns> The calculated minimum diameter if available, or nullopt if not. </returns>
            <summary> Gets calculated minor thread diameter if the there is enough information to calculate it. To be able to
		  successfully calculate a minor diameter, the tool must be a thread mill with a defined thread form. </summary>
            <remarks> For NPT threads, the minimum diameter will be defined WRT the defined cutting diameter. Apply a taper
		  angle at a height to calculate the minimum diameter for that height. </remarks>
            <param name="getValueInMetric"> (Optional) True to get the value in metric, false for inch. Defaults to system
								units. </param>
            <returns> The calculated minimum diameter if available, or nullopt if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.SetRadiusType(TlCornerType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the radius type. </summary>
            <param name="radiusType">	Type of the radius. </param>
            <summary>	Sets the radius type. </summary>
            <param name="radiusType">	Type of the radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.GetCornerType">
            <summary> Gets the corner type. </summary>
            <returns> The corner type. </returns>
            <summary> Gets the corner type. </summary>
            <returns> The corner type. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.SetThreadCount(System.Int32)">
            <summary>	Sets a thread count. </summary>
            <param name="threadCount">	Number of threads. </param>
            <summary>	Sets a thread count. </summary>
            <param name="threadCount">	Number of threads. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.GetThreadCount">
            <summary>	Gets the thread count. </summary>
            <returns>	The thread count. </returns>
            <summary>	Gets the thread count. </summary>
            <returns>	The thread count. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.SetCornerRadius(System.Double)">
            <summary>	Sets a corner radius. </summary>
            <param name="cornerRadius">	The corner radius. </param>
            <summary>	Sets a corner radius. </summary>
            <param name="cornerRadius">	The corner radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.GetCornerRadius">
            <summary>	Gets the corner radius. </summary>
            <returns>	The corner radius. </returns>
            <summary>	Gets the corner radius. </summary>
            <returns>	The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an operation tool information. </summary>
            <param name="info">	The information. </param>
            <summary>	Sets an operation tool information. </summary>
            <param name="info">	The information. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolThreading.#ctor">
            <summary>	Default constructor. </summary>
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.GetProgramRadius">
            <summary> Gets program radius. </summary>
            <returns> The program radius. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.GetTaperedHeight">
            <summary> Gets tapered height. </summary>
            <returns> The tapered height. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolFeedMill.LowerTaperAngle">
            <summary> Lower Taper Angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolFeedMill.ReliefTaperAngle">
            <summary> Relief Taper Angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolFeedMill.UpperTaperAngle">
            <summary> Upper Taper Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.SetUpperRadius(System.Double,System.Boolean)">
            <summary> Sets UpperRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.GetUpperRadius(System.Boolean)">
            <summary> Gets UpperRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheUpperRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolFeedMill.UpperRadius">
            <summary> Upper Radius </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.SetLowerRadius(System.Double,System.Boolean)">
            <summary> Sets LowerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.GetLowerRadius(System.Boolean)">
            <summary> Gets LowerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLowerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolFeedMill.LowerRadius">
            <summary> Lower Radius </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.SetTipDiameter(System.Double,System.Boolean)">
            <summary> Sets TipDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.GetTipDiameter(System.Boolean)">
            <summary> Gets TipDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTipDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolFeedMill.TipDiameter">
            <summary> Tip Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.CopyFrom(Cnc.Tool.Interop.TlToolFeedMill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolFeedMill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolFeedMill">
            <summary> Defines the TlToolFeedMill tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetCornerRadius(System.Double)">
            <summary>	Convenience only - No backing field on TlToolMill </summary>
            <param name="cornerRadius">	The corner radius. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetCornerRadius">
            <summary>	Convenience only - No backing field </summary>
            <returns>	The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.AdjustLengthForStickout(System.Double)">
            <summary>	Adjust length for stickout. </summary>
            <param name="stickout">	The stickout. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetCannedTxtCoolant(System.Int16[])">
            <summary>	Sets a canned text coolant. </summary>
            <param name="cannedText">	The coolant. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetCannedTxtCoolant">
            <summary>Gets the canned text coolant data</summary>
            <returns>The canned text coolant data</returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetMCToolType(Cnc.Tool.Interop.MCToolType)">
            <summary>Sets the mastercam type of this tool.</summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetMCToolType">
            <summary>Returns the mastercam type of this tool.</summary>
            <returns>The Mastercam type of this tool.</returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetOpTypeIDs">
            <summary>Returns a list of the IDs of the op type this tool
		 supports</summary>
            <returns>The list of op type IDs support by this tool</returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.AddToolTypeID(System.Guid)">
            <summary>Adds a supported tool type ID for this tool.</summary>
            <returns> true if the ID was successfully set, false otherwise</returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.AddOpTypeID(System.Guid)">
            <summary>Adds a supported op type ID for this tool.</summary>
            <returns> true if the ID was successfully set, false otherwise</returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.IsAcceleratedFinishing">
            <summary> Gets or sets whether the tool is an accelerated finishing tool. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.OldAggregateData">
            <summary> Gets or sets the legacy aggregate head data used with aggregates and block drills. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.HasToolGrade">
            <summary> Tests if ToolGrade reference property is set. </summary>
            <returns> true if ToolGrade is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.ToolGrade">
            <summary> Gets or sets the grade of this tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.HasToolMaterial">
            <summary> Tests if ToolMaterial reference property is set. </summary>
            <returns> true if ToolMaterial is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.ToolMaterial">
            <summary> Gets or sets the material of this tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.HasOpParams">
            <summary> Tests if OpParams reference property is set. </summary>
            <returns> true if OpParams is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.OpParams">
            <summary> Gets or sets the operation parameters stored with this tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetLegacyHolderDiameter(System.Double,System.Boolean)">
            <summary> Sets LegacyHolderDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetLegacyHolderDiameter(System.Boolean)">
            <summary> Gets LegacyHolderDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLegacyHolderDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.LegacyHolderDiameter">
            <summary> Legacy Holder Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetLegacyHolderLength(System.Double,System.Boolean)">
            <summary> Sets LegacyHolderLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetLegacyHolderLength(System.Boolean)">
            <summary> Gets LegacyHolderLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheLegacyHolderLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.LegacyHolderLength">
            <summary> Legacy Holder Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetTruePhysicalLength(System.Double,System.Boolean)">
            <summary> Sets TruePhysicalLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetTruePhysicalLength(System.Boolean)">
            <summary> Gets TruePhysicalLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTruePhysicalLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.TruePhysicalLength">
            <summary> True Physical Length </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.IsAdjustedForStickout">
            <summary> Adjusted for Stickout Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.IsScalable">
            <summary> Scalable Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.IsVariablePitch">
            <summary> Variable Pitch Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.IsAggregate">
            <summary> Aggregate Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.IsFBMTool">
            <summary> FBM Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.HelixAngle">
            <summary> Helix Angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.HelixType">
            <summary> Helix Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.FluteCount">
            <summary> Flute Count </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.LengthOffsetNum">
            <summary> Length Offset Number </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.DiameterOffsetNum">
            <summary> Diameter Offset Number </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.Chuck">
            <summary> Chuck </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.SpindleDir">
            <summary> Spindle Direction </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetRequiredPilotDiameter(System.Double,System.Boolean)">
            <summary> Sets RequiredPilotDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetRequiredPilotDiameter(System.Boolean)">
            <summary> Gets RequiredPilotDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheRequiredPilotDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.RequiredPilotDiameter">
            <summary> Required Pilot Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetNeckDiameter(System.Double,System.Boolean)">
            <summary> Sets NeckDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetNeckDiameter(System.Boolean)">
            <summary> Gets NeckDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheNeckDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.NeckDiameter">
            <summary> Neck Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetTaperLength(System.Double,System.Boolean)">
            <summary> Sets TaperLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetTaperLength(System.Boolean)">
            <summary> Gets TaperLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheTaperLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.TaperLength">
            <summary> Taper Length </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.ShankType">
            <summary> Shank Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetShoulderDiameter(System.Double,System.Boolean)">
            <summary> Sets ShoulderDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetShoulderDiameter(System.Boolean)">
            <summary> Gets ShoulderDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShoulderDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.ShoulderDiameter">
            <summary> Shoulder Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetArborDiameter(System.Double,System.Boolean)">
            <summary> Sets ArborDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetArborDiameter(System.Boolean)">
            <summary> Gets ArborDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheArborDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.ArborDiameter">
            <summary> Arbor Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetOverallDiameter(System.Double,System.Boolean)">
            <summary> Sets OverallDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetOverallDiameter(System.Boolean)">
            <summary> Gets OverallDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheOverallDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.OverallDiameter">
            <summary> Overall Diameter </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetCuttingDepth(System.Double,System.Boolean)">
            <summary> Sets CuttingDepth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetCuttingDepth(System.Boolean)">
            <summary> Gets CuttingDepth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheCuttingDepth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.CuttingDepth">
            <summary> Cutting Depth </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetShoulderLength(System.Double,System.Boolean)">
            <summary> Sets ShoulderLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetShoulderLength(System.Boolean)">
            <summary> Gets ShoulderLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheShoulderLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.ShoulderLength">
            <summary> Shoulder Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.SetOverallLength(System.Double,System.Boolean)">
            <summary> Sets OverallLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.GetOverallLength(System.Boolean)">
            <summary> Gets OverallLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheOverallLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolMill.OverallLength">
            <summary> Overall Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.CopyFrom(Cnc.Tool.Interop.TlToolMill)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolMill.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolMill.tool_attr_head.view_num">
            <summary> View number for this tool. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolMill.tool_attr_head.enable">
            <summary> true = tool is enabled. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolMill.tool_attr_head.head_n">
            <summary> bitwise head numbers. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolMill.tool_attr_head.tool_offset">
            <summary> offset from the first lead tool. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolMill.tool_attr_head.block_offset">
            <summary> block offset </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolMill.tool_attr_head.init_dir_vector">
            <summary> initial tool direction vector for use with programable c axis. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolMill.tool_attr_head.tool_vector">
            <summary> tool axis vector. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolMill.tool_attr_head.wcs_offset">
            <summary> work offset ( used to overide t/c plane value. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolMill.tool_attr_head.holder_type">
            <summary> 0=std, 1=rt angle, 2=comp. angle, 3=drill block, 4 = UST. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolMill.tool_attr_head">
            <summary> tool_attr_head. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolMill">
            <summary> Defines the TlToolMill tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.DoSetProfileParams(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.DoGetProfileParams(Cnc.Tool.MillToolProfileParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.GetCornerRadius">
            <summary> Gets corner radius. </summary>
            <returns> The corner radius. </returns>
            <summary> Gets corner radius. </summary>
            <returns> The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.GetProgramRadius">
            <summary> Gets program radius. </summary>
            <returns> The program radius. </returns>
            <summary> Gets program radius. </summary>
            <returns> The program radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.GetTaperedHeight">
            <summary> Gets tapered height. </summary>
            <returns> The tapered height. </returns>
            <summary> Gets tapered height. </summary>
            <returns> The tapered height. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets operation tool information. </summary>
            <param name="info"> The information. </param>
            <summary> Sets operation tool information. </summary>
            <param name="info"> The information. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.GetOpToolInfo">
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolFeedMill.#ctor">
            <summary> Default constructor. </summary>
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.RemoveAssemblyComponents">
            <summary>	Removes the assembly components. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.SetStationPerConfig">
            <summary>	Sets the station per configuration. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.SetOffsetsPerConfig">
            <summary>	Sets the offsets per configuration. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetGaugeLength">
            <summary>	Gets the Assembly Gauge length</summary>
            <returns>	The Gauge Length </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetComponentCScalar(System.Boolean)">
            <summary> Gets the distance between the top of the tool and the bottom of the holder. </summary>
            <remarks> This value is equivalent to tool length - tool machine side connection height, and represents the
		  positioning distance between the top of the tool and the parent holder's workpiece side connection. </remarks>
            <param name="getValueInMetric"> (Optional) True to get value in metric. </param>
            <returns> The component CScalar value. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetComponentCScalar">
            <summary> Gets the distance between the top of the tool and the bottom of the holder. </summary>
            <remarks> This value is equivalent to tool length - tool machine side connection height, and represents the
		  positioning distance between the top of the tool and the parent holder's workpiece side connection. </remarks>
            <returns> The component CScalar value. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetStickout(System.Boolean)">
            <summary> Gets the stick-out of the tool from the holder. </summary>
            <remarks> This value is equivalent to the tool's machine side connection height. It represents the distance from
		  the bottom of the holder to the bottom of the tool. In the case of the holder being inside the tool
		  (e.g. facemill arbor), this value will be the distance between the bottom of the internal holder and
		  the bottom of the tool. Tool projection in that case will represent the full length of the tool. </remarks>
            <param name="getValueInMetric"> True to get value in metric. </param>
            <returns> The stick-out of the tool with respect to the bottom of the parent holder. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetStickout">
            <summary> Gets the stick-out of the tool from the holder. </summary>
            <remarks> This value is equivalent to the tool's machine side connection height. It represents the distance from
		  the bottom of the holder to the bottom of the tool. In the case of the holder being inside the tool
		  (e.g. facemill arbor), this value will be the distance between the bottom of the internal holder and
		  the bottom of the tool. Tool projection in that case will represent the full length of the tool. </remarks>
            <returns> The stick-out of the tool with respect to the bottom of the parent holder. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.UpdateToolMachineSideConnectionHeight(System.Double,System.Boolean)">
            <summary> Updates the tool machine side connection height. </summary>
            <param name="value">		 The value. </param>
            <param name="valueIsMetric"> True if the value is metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.UpdateToolMachineSideConnectionHeight(System.Double)">
            <summary> Updates the tool machine side connection height. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetToolMachineSideConnectionHeightMax(System.Boolean)">
            <summary> Gets the maximum tool machine side connection height. </summary>
            <param name="getValueInMetric"> True to get value in metric. </param>
            <returns> The maximum tool machine side connection height. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetToolMachineSideConnectionHeightMax">
            <summary> Gets the maximum tool machine side connection height. </summary>
            <returns> The maximum tool machine side connection height. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetToolMachineSideConnectionHeightMin(System.Boolean)">
            <summary> Gets the minimum tool machine side connection height. </summary>
            <param name="getValueInMetric"> True to get value in metric. </param>
            <returns> The minimum tool machine side connection height. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetToolMachineSideConnectionHeightMin">
            <summary> Gets the minimum tool machine side connection height. </summary>
            <returns> The minimum tool machine side connection height. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetToolMachineSideConnectionHeight(System.Boolean)">
            <summary> Gets the tool machine side connection height. </summary>
            <param name="getValueInMetric"> True to get value in metric. </param>
            <returns> The tool machine side connection height. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetToolMachineSideConnectionHeight">
            <summary> Gets the tool machine side connection height. </summary>
            <returns> The tool machine side connection height. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.UpdateToolProjection(System.Double,System.Boolean)">
            <summary> Updates the tool projection. </summary>
            <param name="value">		 The value. </param>
            <param name="valueIsMetric"> True if the value is metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.UpdateToolProjection(System.Double)">
            <summary> Updates the tool projection. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetToolProjectionMax(System.Boolean)">
            <summary> Gets the maximum tool projection value. </summary>
            <param name="getValueInMetric"> True to get the value in metric. </param>
            <returns> The calculated tool projection minimum. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetToolProjectionMax">
            <summary> Gets the maximum tool projection value. </summary>
            <returns> The calculated tool projection minimum. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetToolProjectionMin(System.Boolean)">
            <summary> Gets the minimum tool projection value. </summary>
            <param name="getValueInMetric"> True to get the value in metric. </param>
            <returns> The calculated tool projection minimum. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetToolProjectionMin">
            <summary> Gets the minimum tool projection value. </summary>
            <returns> The calculated tool projection minimum. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetToolProjection(System.Boolean)">
            <summary> Gets the Tool Projection. </summary>
            <param name="getValueInMetric"> True to get the value in metric. </param>
            <returns> The tool projection. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetToolProjection">
            <summary>	Gets the Tool Projection</summary>
            <returns>	The tool projection </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetTotalHolderLength">
            <summary>	Gets the total length of all holders</summary>
            <returns>	The total length of holders </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.SetToolNumber(System.Int32,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets tool number. </summary>
            <param name="toolNum">	    The tool number. </param>
            <param name="machineGroup"> Group the machine belongs to. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.SetAsDefaultAssembly(System.Boolean)">
            <summary>	Sets as default assembly. </summary>
            <param name="value">	The value. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.GetMillTool">
            <summary>	Gets the mill tool. </summary>
            <returns>	The mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.IsSimilar(Cnc.Tool.Interop.TlAssembly)">
            <summary> Determines if the other tool assembly is similar enough to be considered a duplicate. </summary>
            <param name="spOther">	The other tool assembly. </param>
            <returns> true if similar, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.IsSimilar(Cnc.Tool.Interop.TlAssembly,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Determines if the other tool assembly is similar enough to be considered a duplicate. </summary>
            <param name="spOther">		  The other tool assembly. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <returns> true if similar, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.ExternalId">
            <summary> The external (3rd Party) identifier of the tool assembly </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.GraphicsFileCollection">
            <summary> Collection of graphics files associated to this item. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.AccessoryCollection">
            <summary> Accessory items for this tool assembly </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.HasMainHolder">
            <summary> Tests if MainHolder reference property is set. </summary>
            <returns> true if MainHolder is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.MainHolder">
            <summary> Main holder on this tool assembly. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.HasMainTool">
            <summary> Tests if MainTool reference property is set. </summary>
            <returns> true if MainTool is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.MainTool">
            <summary> Main tool on this tool assembly. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.MaxRamp">
            <summary> Maximum Ramp Angle. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.IsMetric">
            <summary> Metric Flag. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.MainHolderID">
            <summary> Main Holder Identifier. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.MainToolID">
            <summary> Main Tool Identifier. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.IsDefaultAssembly">
            <summary> Default Assembly Flag. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.LengthOffsetNum">
            <summary> Length Offset Number. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.DiameterOffsetNum">
            <summary> Diameter Offset Number. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.MachineGroup">
            <summary> Machine Group. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssembly.ToolNumber">
            <summary> Tool Number. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.CopyFrom(Cnc.Tool.Interop.TlAssembly)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssembly.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAssembly">
            <summary> Defines the TlAssembly tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.SetToolAssemblyView(Cnc.Tool.Interop.TlToolAssemblyLatheDefView)">
            <summary>	Sets the local tool assembly view. </summary>
            <param name="toolView">	The tool view. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.GetToolAssemblyView">
            <summary>	Gets the local tool assembly view. </summary>
            <returns>	The tool assembly view. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.GetMachineToolAxisCutPlaneOffset">
            <summary>	Gets the offset value from the machine tool axis to the cutting plane of the tool. </summary>
            <returns>	The machine tool axis cut plane offset. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.SetCompQuadrant(Cnc.Tool.Interop.ILTool.CompensationQuadrant)">
            <summary>	Sets the compensation quadrant. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.LoadHolderModel(System.String)">
            <summary>	Loads holder model. </summary>
            <param name="modelPath">	If non-null, full pathname of the model file. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.LoadInsertModel(System.String)">
            <summary>	Loads insert model. </summary>
            <param name="modelPath">	If non-null, full pathname of the model file. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.GetLToolType(System.Boolean,System.Boolean)">
            <summary>	Gets the type of the tool. </summary>
            <param name="useCustomType">	True to use custom type, meaning that if custom, the specialization will be
								returned (Drill, Groove, etc.). </param>
            <param name="flagCustom">   	True to flag custom, meaning that if custom, the custom specialization types will
								be used (CustomDrilling, CustomTurning, etc.). </param>
            <returns>	The type. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.GetLToolType">
            <summary>	Gets the type of the tool. </summary>
            <returns>	TheThe type. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.ResetIds">
            <summary>	Resets the identifiers. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.CreateDescription(System.Int32)">
            <summary>	Creates a description of this tool. </summary>
            <param name="offsetNumber">	The offset number. </param>
            <returns>	The new description. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.CreateDescription">
            <summary>	Creates a description of this tool. </summary>
            <returns>	The new description. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.GetCutParams">
            <summary>
Lathe tooling cutting parameters for defining what the parameters in a toolpath will default to if requested.
</summary>
            <returns>	An interface into lathe tooling compensation parameters, or null if not valid for the tool type. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.Finalize">
            <summary>	Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLToolAdapter.#ctor(std.shared_ptr&lt;Cnc.Tool.I3dLTool&gt;)">
            <summary>	Constructor. </summary>
            <param name="spNativeInstance">	The native instance to adapt. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.I3dLToolAdapter">
            <summary>	An adapter class for the I3dLTool interface. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.GetMachineToolAxisCutPlaneOffset">
            <summary>	Gets the offset value from the machine tool axis to the cutting plane of the tool. </summary>
            <returns>	The machine tool axis cut plane offset. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.SetCompQuadrant(Cnc.Tool.Interop.ILTool.CompensationQuadrant)">
            <summary>	Sets the compensation quadrant. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.LoadHolderModel(System.String)">
            <summary>	Loads holder model. </summary>
            <param name="modelPath">	If non-null, full pathname of the model file. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.LoadInsertModel(System.String)">
            <summary>	Loads insert model. </summary>
            <param name="modelPath">	If non-null, full pathname of the model file. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.SetToolAssemblyView(Cnc.Tool.Interop.TlToolAssemblyLatheDefView)">
            <summary>	Sets the local tool assembly view. </summary>
            <param name="toolView">	The tool view. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.GetToolAssemblyView">
            <summary>	Gets the local tool assembly view. </summary>
            <returns>	The tool assembly view. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.I3dLTool.ToolAssemblyType">
            <summary>	Gets or sets the type of the tool assembly. </summary>
            <value>	The type of the tool assembly. </value>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.SetCompPoint(System.Windows.Point,System.Boolean)">
            <summary> Sets CompPoint property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.GetCompPoint(System.Boolean)">
            <summary> Gets CompPoint property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The CompPointX property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.I3dLTool.CompPoint">
            <summary> Compensation Point Coordinates </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.SetNonCutProfile(Cnc.Tool.Interop.TlProfile,System.Boolean)">
            <summary> Sets NonCutProfile property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.GetNonCutProfile(System.Boolean)">
            <summary>	Gets the NonCutProfile property in the specified units. </summary>
            <param name="getValueInMetric">	True to get value in metric. </param>
            <returns>	The CutProfile property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.I3dLTool.NonCutProfile">
            <summary>	Gets the cutting boundary for the tool. </summary>
            <value>	The cutting plane. </value>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.SetCutProfile(Cnc.Tool.Interop.TlProfile,System.Boolean)">
            <summary> Sets CutProfile property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.GetCutProfile(System.Boolean)">
            <summary>	Gets the CutProfile property in the specified units. </summary>
            <param name="getValueInMetric">	True to get value in metric. </param>
            <returns>	The CutProfile property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.I3dLTool.CutProfile">
            <summary>	Gets the cutting boundary for the tool. </summary>
            <value>	The cutting plane. </value>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.SetCuttingPlane(System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Sets CuttingPlane property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.GetCuttingPlane(System.Boolean)">
            <summary>	Gets the CuttingPlane property in the specified units. </summary>
            <param name="getValueInMetric">	True to get value in metric. </param>
            <returns>	The CuttingPlane property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.I3dLTool.CuttingPlane">
            <summary>	Gets the cutting plane transformation. </summary>
            <remarks>
The cutting plane transformation is the transformation required to rotate and translate the 3d solids of the tool
from the orientation they are in at when the machine connection plane is facing Y+ at Y = 0 to the position where
the cutting plane is facing Z+ at Z = 0.
</remarks>
            <value>	The cutting plane. </value>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.SetMachineConnectionPlane(System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Sets MachineConnectionPlane property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.GetMachineConnectionPlane(System.Boolean)">
            <summary>	Gets the MachineConnectionPlane property in the specified units. </summary>
            <param name="getValueInMetric">	True to get value in metric. </param>
            <returns>	The MachineConnectionPlane property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.I3dLTool.MachineConnectionPlane">
            <summary>	Gets the machine connection plane transformation. </summary>
            <remarks>
The machine connection plane transformation is the required transformation to move the 3D solid for the holder
into a position such that the normal of the plane is defined as {0.0, 1.0, 0.0}
and the origin of the plane is at the origin (0.0, 0.0, 0.0). If the model for the holder is defined such that it
is already correctly placed on the origin, a rotation may still be required so that the intended plane's face has
the correct normal vector.
</remarks>
            <value>	The machine side connection plane. </value>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.SetInsertPosition(System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary> Sets InsertPosition property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.I3dLTool.GetInsertPosition(System.Boolean)">
            <summary>	Gets the InsertPosition property in the specified units. </summary>
            <param name="getValueInMetric">	True to get value in metric. </param>
            <returns>	The InsertPosition property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.I3dLTool.InsertPosition">
            <summary>	Gets the insert connection transformation. </summary>
            <remarks>
The insert connection transformation is the required transformation to move the 3D solid defined for the insert
into relative position with the 3D solid defined for the holder.  If the solid for the insert is already defined
with respect to the holder solid, this transformation should be the identity matrix.
</remarks>
            <value>	The insert position. </value>
        </member>
        <member name="P:Cnc.Tool.Interop.I3dLTool.HolderHasModel">
            <summary>	Gets a value indicating whether the insert has a model. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.I3dLTool.InsertHasModel">
            <summary>	Gets a value indicating whether the insert has a model. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.I3dLTool.ToolAssemblyTypes.MultiFunction">
            <summary>	An enum constant representing the multi function option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.I3dLTool.ToolAssemblyTypes.Parting">
            <summary>	An enum constant representing the parting option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.I3dLTool.ToolAssemblyTypes.FaceGrooving">
            <summary>	An enum constant representing the face grooving option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.I3dLTool.ToolAssemblyTypes.ExternalGrooving">
            <summary>	An enum constant representing the external grooving option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.I3dLTool.ToolAssemblyTypes.InternalGrooving">
            <summary>	An enum constant representing the internal grooving option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.I3dLTool.ToolAssemblyTypes.ExternalThreading">
            <summary>	An enum constant representing the external threading option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.I3dLTool.ToolAssemblyTypes.InternalThreading">
            <summary>	An enum constant representing the internal threading option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.I3dLTool.ToolAssemblyTypes.BoringBar">
            <summary>	An enum constant representing the boring bar option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.I3dLTool.ToolAssemblyTypes.GeneralTurning">
            <summary>	An enum constant representing the turning option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.I3dLTool.ToolAssemblyTypes">
            <summary>	Values that represent tool assembly types. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.I3dLTool">
            <summary>	Interface for a 3D lathe tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.Transform(System.Windows.Media.Matrix,Cnc.Tool.Interop.TlProfileSegment.TransformationType)">
            <summary> Transforms the current profile by the given transformation. </summary>
            <param name="transformation">	  The transformation. </param>
            <param name="transformationType"> Type of the transformation. </param>
            <summary> Transforms the current profile by the given transformation. </summary>
            <param name="transformation">	  The transformation. </param>
            <param name="transformationType"> Type of the transformation. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.Scale(System.Double)">
            <summary> Scales the current profile. </summary>
            <param name="scaleFactor"> The scale factor. </param>
            <summary> Scales the current profile. </summary>
            <param name="scaleFactor"> The scale factor. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.TrimOrExtendToYValue(System.Double)">
            <summary> Trim or extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
            <summary> Trim or extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.ExtendToYValue(System.Double)">
            <summary> Extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
            <summary> Extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.TrimToYValue(System.Double,System.Boolean)">
            <summary> Trim to y coordinate value. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
            <summary> Trim to y coordinate value. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.TrimToXValue(System.Double,System.Boolean)">
            <summary> Trim to x coordinate value. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
            <summary> Trim to x coordinate value. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.SplitAtYValue(System.Double,Cnc.Tool.Interop.TlProfile@,Cnc.Tool.Interop.TlProfile@)">
            <summary> Splits the current profile at the specified y coordinate value. </summary>
            <param name="yValue">	    The value. </param>
            <param name="lowerPortion"> The lower portion profile result. </param>
            <param name="upperPortion"> The upper portion profile result. </param>
            <summary> Splits the current profile at the specified y coordinate value. </summary>
            <param name="yValue">	    The value. </param>
            <param name="lowerPortion"> The lower portion profile result. </param>
            <param name="upperPortion"> The upper portion profile result. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.SplitAtXValue(System.Double,Cnc.Tool.Interop.TlProfile@,Cnc.Tool.Interop.TlProfile@)">
            <summary> Splits the current profile at the specified x coordinate value. </summary>
            <param name="xValue">	    The value. </param>
            <param name="lowerPortion"> The lower portion profile result. </param>
            <param name="upperPortion"> The upper portion profile result. </param>
            <summary> Splits the current profile at the specified x coordinate value. </summary>
            <param name="xValue">	    The value. </param>
            <param name="lowerPortion"> The lower portion profile result. </param>
            <param name="upperPortion"> The upper portion profile result. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.AnyLineSegmentsOnYAxis">
            <summary> Determines if we have any line segments on the Y axis. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Determines if we have any line segments on the Y axis. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.IsClosedLoop">
            <summary> Query if this object is a closed loop profile. </summary>
            <remarks> Does not need segments to be in any specific direction or order. </remarks>
            <returns> true if closed loop, false if not. </returns>
            <summary> Query if this object is a closed loop profile. </summary>
            <remarks> Does not need segments to be in any specific direction or order. </remarks>
            <returns> true if closed loop, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.TranslateToYZero">
            <summary> Translates the entire profile, so that the lowest point of the profile is at Y=0. </summary>
            <remarks> Looks at the endpoints of each segment to determine the amount to translate. </remarks>
            <summary> Translates the entire profile, so that the lowest point of the profile is at Y=0. </summary>
            <remarks> Looks at the endpoints of each segment to determine the amount to translate. </remarks>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.AddHorizontalConnectors">
            <summary> Adds horizontal connectors to the start and endpoint of the profile. </summary>
            <remarks> If the point is already at y=0, then no connector is added/needed. </remarks>
            <summary> Adds horizontal connectors to the start and endpoint of the profile. </summary>
            <remarks> If the point is already at y=0, then no connector is added/needed. </remarks>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.Linearize">
            <summary> Linearizes this profile into strictly line segments. </summary>
            <summary> Linearizes this profile into strictly line segments. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.SortProfile">
            <summary> Sorts the profile. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Sorts the profile. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.ValidateProfileQuadrant">
            <summary> Validates the profile quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Validates the profile quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.SwapSegments(System.Int32,System.Int32)">
            <summary> Swap the segments at index1 and index2. </summary>
            <param name="index1">	  The first index. </param>
            <param name="index2">	  The second index. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Swap the segments at index1 and index2. </summary>
            <param name="index1">	  The first index. </param>
            <param name="index2">	  The second index. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.SwapSegments(System.Int32,System.Int32,System.Boolean)">
            <summary> Swap the segments at index1 and index2. </summary>
            <param name="index1">	  The first index. </param>
            <param name="index2">	  The second index. </param>
            <param name="reverseDir"> true to reverse direction of the resulting index1 segment. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Swap the segments at index1 and index2. </summary>
            <param name="index1">	  The first index. </param>
            <param name="index2">	  The second index. </param>
            <param name="reverseDir"> true to reverse direction of the resulting index1 segment. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.AddToTopOfProfile(Cnc.Tool.Interop.TlProfileSegment)">
            <summary> Adds a segment to the top of profile. The rest of the profile remains unchanged. </summary>
            <remarks> The passed in segment should have coordinates relative to the profile we're adding it to. </remarks>
            <param name="segment"> The segment. </param>
            <summary> Adds a segment to the top of profile. The rest of the profile remains unchanged. </summary>
            <remarks> The passed in segment should have coordinates relative to the profile we're adding it to. </remarks>
            <param name="segment"> The segment. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.AddToBottomOfProfile(Cnc.Tool.Interop.TlProfileSegment)">
            <summary>	adds a segment to the bottom of a profile, and pushes everything else up to accomadate it. </summary>
            <param name="segment">	New segment to add - should be constructed from origin.  Will be translated down if profile is below x axis</param>
            <summary>	adds a segment to the bottom of a profile, and pushes everything else up to accomadate it. </summary>
            <param name="segment">	New segment to add - should be constructed from origin.  Will be translated down if profile is below x axis</param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetProfileSegmentsCount">
            <summary> Gets the number of profile segments with height. </summary>
            <returns> The number of profile segments with height. </returns>
            <summary> Gets the number of profile segments with height. </summary>
            <returns> The number of profile segments with height. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetProfileSegmentsCount(System.Boolean)">
            <summary> Gets the number of profile segments with height. </summary>
            <param name="onlyWithHeight"> (Optional, defaults to false) true to only get the segments with height. </param>
            <returns> The number of profile segments with height. </returns>
            <summary> Gets the number of profile segments with height. </summary>
            <param name="onlyWithHeight"> (Optional, defaults to false) true to only get the segments with height. </param>
            <returns> The number of profile segments with height. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetProfileSegments">
            <summary> Provides const reference to profile segment array. </summary>
            <returns> const reference to profile segments array. </returns>
            <summary> Provides const reference to profile segment array. </summary>
            <returns> const reference to profile segments array. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetProfileSegmentsTopDown">
            <summary> Gets all the profile segments as a const vector of const TlProfileSegmentPtr objects (does not clone segments!). </summary>
            <remarks> This function returns the profile segments in reverse order to mimick the TlHolderSegments. </remarks>
            <returns> The profile from the top down. </returns>
            <summary> Gets all the profile segments as a const vector of const TlProfileSegmentPtr objects (does not clone segments!). </summary>
            <remarks> This function returns the profile segments in reverse order to mimick the TlHolderSegments. </remarks>
            <returns> The profile from the top down. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetProfileSegmentsTopDown(System.Boolean)">
            <summary> Gets all the profile segments as a const vector of const TlProfileSegmentPtr objects (does not clone segments!). </summary>
            <remarks> This function returns the profile segments in reverse order to mimick the TlHolderSegments. </remarks>
            <param name="onlyWithHeight"> (Optional, defaults to false) true to only get the segments with height. </param>
            <returns> The profile from the top down. </returns>
            <summary> Gets all the profile segments as a const vector of const TlProfileSegmentPtr objects (does not clone segments!). </summary>
            <remarks> This function returns the profile segments in reverse order to mimick the TlHolderSegments. </remarks>
            <param name="onlyWithHeight"> (Optional, defaults to false) true to only get the segments with height. </param>
            <returns> The profile from the top down. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetSegmentAt(System.Int32)">
            <summary> Gets the segment at the specified index. </summary>
            <param name="index"> Zero-based index of the segments. </param>
            <returns> The segment. </returns>
            <summary> Gets the segment at the specified index. </summary>
            <param name="index"> Zero-based index of the segments. </param>
            <returns> The segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.ClearProfile">
            <summary> Clears the profile. </summary>
            <summary> Clears the profile. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.SetCalcTol(System.Double)">
            <summary> Sets calculate tolerance. </summary>
            <param name="value"> The value. </param>
            <summary> Sets calculate tolerance. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetCalcTol">
            <summary> Gets calculate tolerance. </summary>
            <returns> The calculate tolerance. </returns>
            <summary> Gets calculate tolerance. </summary>
            <returns> The calculate tolerance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetSegmentCount">
            <summary> Gets segment count. </summary>
            <returns> The segment count. </returns>
            <summary> Gets segment count. </summary>
            <returns> The segment count. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetLength">
            <summary>	True length of profile in Y, including section below X axis </summary>
            <returns>	said length </returns>
            <summary>	True length of profile in Y, including section below X axis </summary>
            <returns>	said length </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.GetHeight">
            <summary>	Height of profile at top as measured from X axis </summary>
            <returns>	said height </returns>
            <summary>	Height of profile at top as measured from X axis </summary>
            <returns>	said height </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.IsEmpty">
            <summary>	Checks to see if this profile is empty </summary>
            <returns>	true if empty, else false </returns>
            <summary>	Checks to see if this profile is empty </summary>
            <returns>	true if empty, else false </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.CopyFrom(Cnc.Tool.Interop.TlProfile)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfile.#ctor">
            <summary> Default Constructor. </summary>
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfile">
            <summary> Defines the TlProfile tool class type. </summary>
            <summary> Defines the TlProfile tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetScaledSegment(System.Double)">
            <summary> Gets scaled segment. </summary>
            <param name="scaleFactor"> The scale factor. </param>
            <returns> The scaled segment. </returns>
            <summary> Gets scaled segment. </summary>
            <param name="scaleFactor"> The scale factor. </param>
            <returns> The scaled segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Scale(System.Double)">
            <summary> Scales this segment. </summary>
            <param name="scaleFactor"> The scale factor. </param>
            <summary> Scales this segment. </summary>
            <param name="scaleFactor"> The scale factor. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetRotatedSegment(System.Double,Cnc.Tool.Interop.TlProfileSegment.Point2D)">
            <summary> Gets rotated segment. </summary>
            <param name="radians">    The radians. </param>
            <param name="aboutPoint"> The about point. </param>
            <returns> The rotated segment. </returns>
            <summary> Gets rotated segment. </summary>
            <param name="radians">    The radians. </param>
            <param name="aboutPoint"> The about point. </param>
            <returns> The rotated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetRotatedSegment(System.Double)">
            <summary> Gets rotated segment. </summary>
            <param name="radians"> The radians. </param>
            <returns> The rotated segment. </returns>
            <summary> Gets rotated segment. </summary>
            <param name="radians"> The radians. </param>
            <returns> The rotated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Rotate(System.Double,Cnc.Tool.Interop.TlProfileSegment.Point2D)">
            <summary> Rotates this object about the passed in point. </summary>
            <param name="radians">    The radians. </param>
            <param name="aboutPoint"> The about point. </param>
            <summary> Rotates this object about the passed in point. </summary>
            <param name="radians">    The radians. </param>
            <param name="aboutPoint"> The about point. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Rotate(System.Double)">
            <summary> Rotates this object. </summary>
            <param name="radians"> The radians. </param>
            <summary> Rotates this object. </summary>
            <param name="radians"> The radians. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetMirroredSegment(System.Boolean)">
            <summary> Gets mirrored segment. </summary>
            <param name="aboutYAxis"> true to about y coordinate axis. </param>
            <returns> The mirrored segment. </returns>
            <summary> Gets mirrored segment. </summary>
            <param name="aboutYAxis"> true to about y coordinate axis. </param>
            <returns> The mirrored segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Mirror(System.Boolean)">
            <summary> Mirrors. </summary>
            <param name="aboutYAxis"> true to mirror about the Y axis, false to mirror about the X axis. </param>
            <summary> Mirrors. </summary>
            <param name="aboutYAxis"> true to mirror about the Y axis, false to mirror about the X axis. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetTranslatedSegment(System.Double,System.Double)">
            <summary> Gets translated segment. </summary>
            <param name="deltaX"> The delta x coordinate. </param>
            <param name="deltaY"> The delta y coordinate. </param>
            <returns> The translated segment. </returns>
            <summary> Gets translated segment. </summary>
            <param name="deltaX"> The delta x coordinate. </param>
            <param name="deltaY"> The delta y coordinate. </param>
            <returns> The translated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Translate(System.Double,System.Double)">
            <summary> Translates the segment in 2space. </summary>
            <param name="deltaX"> The change to make in X. </param>
            <param name="deltaY"> The change to make in Y. </param>
            <summary> Translates the segment in 2space. </summary>
            <param name="deltaX"> The change to make in X. </param>
            <param name="deltaY"> The change to make in Y. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetTransformedSegment(System.Windows.Media.Matrix,Cnc.Tool.Interop.TlProfileSegment.TransformationType)">
            <summary> Gets transformed segment. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
            <returns> The transformed segment. </returns>
            <summary> Gets transformed segment. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
            <returns> The transformed segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Transform(System.Windows.Media.Matrix,Cnc.Tool.Interop.TlProfileSegment.TransformationType)">
            <summary> Transforms the current segment by the given transformation. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
            <summary> Transforms the current segment by the given transformation. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetReversedSegment">
            <summary> Gets reversed segment. </summary>
            <returns> The reversed segment. </returns>
            <summary> Gets reversed segment. </summary>
            <returns> The reversed segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.ValidateQuadrant">
            <summary> Validates the quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Validates the quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Reverse">
            <summary> Reverses the segment. </summary>
            <summary> Reverses the segment. </summary>
            <summary> Reverses the segment. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.TrimAtXValue(System.Double)">
            <summary> Trim at x coordinate value. </summary>
            <param name="x"> The x coordinate. </param>
            <returns> A TlProfileSegmentPtr. </returns>
            <summary> Trim at x coordinate value. </summary>
            <param name="x"> The x coordinate. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.TrimAtXValue(System.Double,System.Boolean)">
            <summary> Trim at x coordinate value. </summary>
            <param name="x">			    The x coordinate. </param>
            <param name="keepLowerSegment"> (Optional, defaults to true) true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
            <summary> Trim at x coordinate value. </summary>
            <param name="x">			    The x coordinate. </param>
            <param name="keepLowerSegment"> (Optional, defaults to true) true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.TrimAtYValue(System.Double)">
            <summary> Trim at y coordinate value. </summary>
            <param name="y"> The y value to trim to. </param>
            <returns> A TlProfileSegmentPtr. </returns>
            <summary> Trim at y coordinate value. </summary>
            <param name="y"> The y value to trim to. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.TrimAtYValue(System.Double,System.Boolean)">
            <summary> Trim at y coordinate value. </summary>
            <param name="y">			    The y value to trim to. </param>
            <param name="keepLowerSegment"> (Optional, defaults to true) true to keep the lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
            <summary> Trim at y coordinate value. </summary>
            <param name="y">			    The y value to trim to. </param>
            <param name="keepLowerSegment"> (Optional, defaults to true) true to keep the lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.CrossesXValue(System.Double)">
            <summary> Determines if the current segment x coordinate value. </summary>
            <param name="value"> The value. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Determines if the current segment x coordinate value. </summary>
            <param name="value"> The value. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.CrossesYValue(System.Double)">
            <summary> Determines whether a given segment would have to be trimmed to stay under Y. </summary>
            <param name="maxY"> Y value to stay under. </param>
            <returns> true if it needs trimming, else false. </returns>
            <summary> Determines whether a given segment would have to be trimmed to stay under Y. </summary>
            <param name="maxY"> Y value to stay under. </param>
            <returns> true if it needs trimming, else false. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.SetCalcTol(System.Double)">
            <summary> Sets calculate tolerance. </summary>
            <param name="value"> The value. </param>
            <summary> Sets calculate tolerance. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetCalcTol">
            <summary> Gets calculate tolerance. </summary>
            <returns> The calculate tolerance. </returns>
            <summary> Gets calculate tolerance. </summary>
            <returns> The calculate tolerance. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.IsCoincidentWithYAxis">
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetMaxWidth">
            <summary> Gets maximum width. </summary>
            <returns> The maximum width. </returns>
            <summary> Gets maximum width. </summary>
            <returns> The maximum width. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetTopWidth">
            <summary> Gets top width. </summary>
            <returns> The top width. </returns>
            <summary> Gets top width. </summary>
            <returns> The top width. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetBottomWidth">
            <summary> Gets bottom width. </summary>
            <returns> The bottom width. </returns>
            <summary> Gets bottom width. </summary>
            <returns> The bottom width. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetHeight">
            <summary> Height of segment. </summary>
            <returns> said height. </returns>
            <summary> Height of segment. </summary>
            <returns> said height. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetLength">
            <summary> Gets the length of this profile segment. </summary>
            <returns> The length. </returns>
            <summary> Gets the length of this profile segment. </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetEndpoint2">
            <summary> Gets the end endpoint of this segment. </summary>
            <returns> The end endpoint. </returns>
            <summary> Gets the end endpoint of this segment. </summary>
            <returns> The end endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.GetEndpoint1">
            <summary> Gets the start endpoint of this segment. </summary>
            <returns> The start endpoint. </returns>
            <summary> Gets the start endpoint of this segment. </summary>
            <returns> The start endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.MinY">
            <summary> Lowest point contained in segment. </summary>
            <returns> Lowest point contained in segment. </returns>
            <summary> Lowest point contained in segment. </summary>
            <returns> Lowest point contained in segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.MinX">
            <summary> Minimum x coordinate. </summary>
            <returns> A double. </returns>
            <summary> Minimum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.MaxY">
            <summary> Highest point contained in segment. </summary>
            <returns> Highest point contained in segment. </returns>
            <summary> Highest point contained in segment. </summary>
            <returns> Highest point contained in segment. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.MaxX">
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Linearize">
            <summary> Conversion function. </summary>
            <returns> vector of TlProfileLineSegmentPtr representing this object, linearized. </returns>
            <summary> Conversion function. </summary>
            <returns> vector of TlProfileLineSegmentPtr representing this object, linearized. </returns>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileSegment.TransformationType.Scale">
            <summary> An enum constant representing the scale option. </summary>
            <summary> An enum constant representing the scale option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileSegment.TransformationType.Translation">
            <summary> An enum constant representing the translation option. </summary>
            <summary> An enum constant representing the translation option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileSegment.TransformationType.Rotation">
            <summary> An enum constant representing the rotation option. </summary>
            <summary> An enum constant representing the rotation option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileSegment.TransformationType.Mirror">
            <summary> An enum constant representing the mirror option. </summary>
            <summary> An enum constant representing the mirror option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileSegment.TransformationType">
            <summary> Values that represent the various possible transformations for a segment. </summary>
            <summary> Values that represent the various possible transformations for a segment. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlProfileSegment.Color">
            <summary> Color </summary>
            <summary> Color </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.CopyFrom(Cnc.Tool.Interop.TlProfileSegment)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.#ctor">
            <summary> Default Constructor. </summary>
            <summary> Default Constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlProfileSegment.Point2D.#ctor(System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="x"> The x coordinate. </param>
            <param name="y"> The y coordinate. </param>
            <summary> Constructor. </summary>
            <param name="x"> The x coordinate. </param>
            <param name="y"> The y coordinate. </param>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileSegment.Point2D.y">
            <summary> The Y coordinate of the point. </summary>
            <summary> The Y coordinate of the point. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlProfileSegment.Point2D.x">
            <summary> The X coordinate of the point. </summary>
            <summary> The X coordinate of the point. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileSegment.Point2D">
            <summary> Point2D. </summary>
            <summary> Point2D. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlProfileSegment">
            <summary> Defines the TlProfileSegment tool class type. </summary>
            <summary> Defines the TlProfileSegment tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolAdapter.GetLToolType(System.Boolean,System.Boolean)">
            <summary>	Gets the type of the tool. </summary>
            <param name="useCustomType">	True to use custom type, meaning that if custom, the specialization will be
								returned (Drill, Groove, etc.). </param>
            <param name="flagCustom">   	True to flag custom, meaning that if custom, the custom specialization types will
								be used (CustomDrilling, CustomTurning, etc.). </param>
            <returns>	The type. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolAdapter.GetLToolType">
            <summary>	Gets the type of the tool. </summary>
            <returns>	TheThe type. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolAdapter.ResetIds">
            <summary>	Resets the identifiers. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolAdapter.CreateDescription(System.Int32)">
            <summary>	Creates a description of this tool. </summary>
            <param name="offsetNumber">	The offset number. </param>
            <returns>	The new description. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolAdapter.CreateDescription">
            <summary>	Creates a description of this tool. </summary>
            <returns>	The new description. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolAdapter.GetCutParams">
            <summary>
Lathe tooling cutting parameters for defining what the parameters in a toolpath will default to if requested.
</summary>
            <returns>	An interface into lathe tooling compensation parameters, or null if not valid for the tool type. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolAdapter.Finalize">
            <summary>	Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolAdapter.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolAdapter.#ctor(std.shared_ptr&lt;Cnc.Tool.ILTool&gt;)">
            <summary>	Constructor. </summary>
            <param name="spNativeInstance">	The native instance to adapt. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.ILToolAdapter">
            <summary>	An adapter class for the ILTool interface. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.CreateDescription(System.Int32)">
            <summary>	Creates a description of this tool using the given offset number. </summary>
            <param name="offsetNumber">	The offset number. </param>
            <returns>	The new description. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.GetCutParams">
            <summary>
Lathe tooling cutting parameters for defining what the parameters in a toolpath will default to if requested.
</summary>
            <returns>	An interface into lathe tooling compensation parameters, or null if not valid for the tool type. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.HolderOrientation">
            <summary>	Gets the holder orientation. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.CompQuadrant">
            <summary>	Gets the compensation quadrant. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.ToolpathOrientation">
            <summary>	Gets the toolpath orientation. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.GetToolCenter(System.Boolean)">
            <summary> Gets ToolCenter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ToolCenter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.ToolCenter">
            <summary>	Gets the tool center in tool units. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.IsFeedDirReversed">
            <summary> Gets or sets a value indicating whether the feed direction is reversed.  </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.SetClearanceHeight(System.Double,System.Boolean)">
            <summary> Sets ClearanceHeight property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.GetClearanceHeight(System.Boolean)">
            <summary> Gets ClearanceHeight property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ClearanceWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.ClearanceHeight">
            <summary> Gets or sets the clearance height in tool units </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.SetClearanceWidth(System.Double,System.Boolean)">
            <summary> Sets ClearanceWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.GetClearanceWidth(System.Boolean)">
            <summary> Gets ClearanceWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> ClearanceWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.ClearanceWidth">
            <summary> Gets or sets the clearance width in tool units </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.ClearanceEndAngle">
            <summary>	Gets or sets the end clearance angle for this compensation configuration. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.ClearanceSideAngle">
            <summary>	Gets or sets the side clearance angle for this compensation configuration. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.CompMethod">
            <summary>	Gets or sets the compensation method. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.SpindleDirCCW">
            <summary>	Gets or sets a value indicating whether the spindle direction for this tool is counter clockwise. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.ToolAngle">
            <summary> Gets or sets the tool angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.IsReversed">
            <summary>	Gets or sets a value indicating whether this tool is reversed. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.IsVertical">
            <summary>	Gets or sets a value indicating whether this tool is vertical. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.SetHolderWidth(System.Double,System.Boolean)">
            <summary> Sets HolderWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.GetHolderWidth(System.Boolean)">
            <summary> Gets HolderWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> HolderWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.HolderWidth">
            <summary> Gets or sets the holder width </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.SetHolderThickness(System.Double,System.Boolean)">
            <summary> Sets HolderThickness property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.GetHolderThickness(System.Boolean)">
            <summary> Gets HolderThickness property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> HolderThickness property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.HolderThickness">
            <summary> Gets or sets the holder thickness </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.IsHolderRound">
            <summary>	Gets or sets a value indicating whether the holder on this tool is round. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.HolderRequiresToolLocator">
            <summary>	Gets or sets a value indicating whether the holder requires a tool locator for loading. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.HolderName">
            <summary>	Gets or sets the insert name. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.SetInsertCornerRadius(System.Double,System.Boolean)">
            <summary> Sets InsertCornerRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.GetInsertCornerRadius(System.Boolean)">
            <summary> Gets InsertCornerRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> InsertCornerRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.InsertCornerRadius">
            <summary> Gets or sets the insert corner radius </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.InsertName">
            <summary>	Gets or sets the insert name. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.GetLToolType(System.Boolean,System.Boolean)">
            <summary>	Gets the type of the tool. </summary>
            <param name="useCustomType">	True to use custom type, meaning that if custom, the specialization will be
								returned (Drill, Groove, etc.). </param>
            <param name="flagCustom">   	True to flag custom, meaning that if custom, the custom specialization types will
								be used (CustomDrilling, CustomTurning, etc.). </param>
            <returns>	The type. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.GetLToolType">
            <summary>	Gets the type. </summary>
            <returns>	The type. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.SetHomePosition(System.Windows.Point,System.Boolean)">
            <summary> Sets HomePosition property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILTool.GetHomePosition(System.Boolean)">
            <summary> Gets HomePosition property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheHomePosition property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.HomePosition">
            <summary> Home Position Coordinate </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.IsRightHanded">
            <summary>	Gets a value indicating whether this object is right handed. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.ToolBackOffsetNumber">
            <summary>	Gets or sets the tool back offset number. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.ToolOffsetNumber">
            <summary>	Gets or sets the tool offset number. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILTool.OverallLength">
            <summary>	Gets the overall length of the tool in current system units. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Orientation.HorizontalQ4">
            <summary>	An enum constant representing the horizontal quadrant 4 option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Orientation.HorizontalQ3">
            <summary>	An enum constant representing the horizontal quadrant 3 option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Orientation.HorizontalQ2">
            <summary>	An enum constant representing the horizontal quadrant 2 option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Orientation.HorizontalQ1">
            <summary>	An enum constant representing the horizontal quadrant 1 option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Orientation.VerticalQ4">
            <summary>	An enum constant representing the vertical quadrant 4 option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Orientation.VerticalQ3">
            <summary>	An enum constant representing the vertical quadrant 3 option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Orientation.VerticalQ2">
            <summary>	An enum constant representing the vertical quadrant 2 option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Orientation.VerticalQ1">
            <summary>	An enum constant representing the vertical quadrant 1 option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ILTool.Orientation">
            <summary>	Values that represent orientations. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.CompensationQuadrant.Quadrant4">
            <summary>	An enum constant representing the quadrant 4 option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.CompensationQuadrant.Quadrant3">
            <summary>	An enum constant representing the quadrant 3 option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.CompensationQuadrant.Quadrant2">
            <summary>	An enum constant representing the quadrant 2 option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.CompensationQuadrant.Quadrant1">
            <summary>	An enum constant representing the quadrant 1 option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ILTool.CompensationQuadrant">
            <summary>	Values that represent compensation quadrants. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.CompensationMethod.RadiusTip">
            <summary>	Comp to tip of insert radius on C/L. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.CompensationMethod.TwoPoint">
            <summary>	Comp using tangencies of two tool circles. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.CompensationMethod.SharpCorner">
            <summary>	Comp to theoretical sharp corner of insert. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.CompensationMethod.Center">
            <summary>	Comp to center of insert radius. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ILTool.CompensationMethod">
            <summary>	Values that represent compensation methods. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Type.CustomDrilling">
            <summary>	An enum constant representing the custom drilling option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Type.CustomBoring">
            <summary>	An enum constant representing the custom boring option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Type.CustomGrooving">
            <summary>	An enum constant representing the custom grooving option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Type.CustomThreading">
            <summary>	An enum constant representing the custom threading option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Type.CustomTurning">
            <summary>	An enum constant representing the custom turning option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Type.LiveCenter">
            <summary>	An enum constant representing the live center option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Type.Custom">
            <summary>	An enum constant representing the custom option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Type.Drilling">
            <summary>	An enum constant representing the drilling option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Type.Boring">
            <summary>	An enum constant representing the boring option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Type.Grooving">
            <summary>	An enum constant representing the grooving option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Type.Threading">
            <summary>	An enum constant representing the threading option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILTool.Type.GeneralTurning">
            <summary>	An enum constant representing the turning option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ILTool.Type">
            <summary>	Values that represent lathe tool types. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ILTool">
            <summary>	A lathe tool interface. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolCutParams.CuttingSpeedPercentage">
            <summary>	Gets or sets the cutting speed percentage. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolCutParams.FeedPerRevPercentage">
            <summary>	Gets or sets the feed per revolution percentage. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolCutParams.SpindleSpeedUnits">
            <summary>	Gets or sets the units of the spindle speed. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolCutParams.SpindleSpeed">
            <summary>	Gets or sets the spindle speed. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolCutParams.PlungeRateUnits">
            <summary>	Gets or sets the units of the plunge rates. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolCutParams.SetPlungeRate(System.Double,System.Boolean)">
            <summary> Sets the PlungeRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolCutParams.GetPlungeRate(System.Boolean)">
            <summary> Gets the PlungeRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The PlungeRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolCutParams.PlungeRate">
            <summary>	Gets or sets the plunge rate. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolCutParams.FeedRateUnits">
            <summary>	Gets or sets the units of the feed rates. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolCutParams.SetFeedRate(System.Double,System.Boolean)">
            <summary> Sets the FeedRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.ILToolCutParams.GetFeedRate(System.Boolean)">
            <summary> Gets the FeedRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> The FeedRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolCutParams.FeedRate">
            <summary>	Gets or sets the feed rate. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolCutParams.Material">
            <summary>	Gets or sets the tool material. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolCutParams.CannedTxtCoolant">
            <summary>	Gets or sets the canned text coolant. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ILToolCutParams.PreXCoolant">
            <summary>	Gets or sets the tool coolant. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILToolCutParams.SpindleSpeedUnitValues.ConstantSurfaceSpeed">
            <summary>	An enum constant representing the constant surface speed option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILToolCutParams.SpindleSpeedUnitValues.RevolutionsPerMinute">
            <summary>	An enum constant representing the revolutions per minute option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ILToolCutParams.SpindleSpeedUnitValues">
            <summary>	Values that represent spindle speed units. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILToolCutParams.FeedRateUnitValues.FeedPerMinute">
            <summary>	An enum constant representing the feed per minute option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILToolCutParams.FeedRateUnitValues.FeedPerRevolution">
            <summary>	An enum constant representing the feed per revolution option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ILToolCutParams.FeedRateUnitValues">
            <summary>	Values that represent feed rate units. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILToolCutParams.MaterialValues.Unknown">
            <summary>	An enum constant representing the unknown option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILToolCutParams.MaterialValues.Diamond">
            <summary>	An enum constant representing the diamond option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILToolCutParams.MaterialValues.CubicBoronNitride">
            <summary>	An enum constant representing the cubic boron nitride option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILToolCutParams.MaterialValues.Ceramic">
            <summary>	An enum constant representing the ceramic option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILToolCutParams.MaterialValues.Cermet">
            <summary>	An enum constant representing the cermet option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ILToolCutParams.MaterialValues.Carbide">
            <summary>	An enum constant representing the carbide option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ILToolCutParams.MaterialValues">
            <summary>	Values that represent materials. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ILToolCutParams">
            <summary>	An interface representing lathe tool cutting parameters. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IMToolAdapter.ResetIds">
            <summary>	Resets the identifiers. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IMToolAdapter.CreateDescription">
            <summary>	Creates a description of this tool. </summary>
            <returns>	The new description. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IMToolAdapter.Finalize">
            <summary>	Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IMToolAdapter.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IMToolAdapter.#ctor(std.shared_ptr&lt;Cnc.Tool.IMTool&gt;)">
            <summary>	Constructor. </summary>
            <param name="spNativeInstance">	The native instance to adapt. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.IMToolAdapter">
            <summary>	An adapter class for the IMTool interface. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.IMTool.DiameterOffsetNumber">
            <summary>	Gets or sets the diameter offset number. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.IMTool.LengthOffsetNumber">
            <summary>	Gets or sets the length offset number. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.IMTool">
            <summary>	Interface for a mill tool. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITool.ResetIds">
            <summary>	Resets the identifiers. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ITool.CreateDescription">
            <summary>	Creates a description of this tool. </summary>
            <returns>	The new description. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.ITool.ActiveTurret">
            <summary>	Gets or sets the active turret. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ITool.ActiveSpindle">
            <summary>	Gets or sets the active spindle. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ITool.MfgCode">
            <summary>	Gets or sets the manufacturer tool code. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ITool.Station">
            <summary>	Gets or sets the tool station. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ITool.MachineGroupId">
            <summary>	Gets or sets the machine group identifier. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ITool.Number">
            <summary>	Gets or sets the tool number. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ITool.Name">
            <summary>	Gets or sets the name. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ITool.IsMetric">
            <summary>	Gets a value indicating whether this object is metric. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ITool.Slot">
            <summary>	Gets or sets the slot. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.ITool.Id">
            <summary>	Gets the identifier. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITool.ActiveTurretValues.MaxTurrets">
            <summary>	An enum constant representing the maximum turrets option (for flag purposes only as a max value). </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITool.ActiveTurretValues.LowerFixedTurret">
            <summary>	An enum constant representing the lower fixed turret option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITool.ActiveTurretValues.UpperFixedTurret">
            <summary>	An enum constant representing the upper fixed turret option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITool.ActiveTurretValues.URTurret">
            <summary>	An enum constant representing the upper right turret option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITool.ActiveTurretValues.LRTurret">
            <summary>	An enum constant representing the lower right turret option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITool.ActiveTurretValues.ULTurret">
            <summary>	An enum constant representing the upper left turret option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITool.ActiveTurretValues.LLTurret">
            <summary>	An enum constant representing the lower left turret option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITool.ActiveTurretValues.NoActiveTurret">
            <summary>	An enum constant representing the no active turret option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ITool.ActiveTurretValues">
            <summary>	Values that represent which turret is the active turret. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITool.ActiveSpindleValues.MaxHeads">
            <summary>	An enum constant representing the Maximum heads option (for flag purposes only as a max value). </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITool.ActiveSpindleValues.RHHead">
            <summary>	An enum constant representing the Right spindle option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.ITool.ActiveSpindleValues.LHHead">
            <summary>	An enum constant representing the Left spindle option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ITool.ActiveSpindleValues">
            <summary>	Values that represent which spindle is the active spindle. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.ITool">
            <summary>	Interface for tools. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolFactoryAdapter.Create(Cnc.Tool.Interop.IToolFactory.Create3dLToolParams)">
            <summary>	Creates a new instance of the I3dLTool interface based on the specified parameters. </summary>
            <param name="params">	Options for controlling the operation. </param>
            <returns>	Nullptr if it fails, else an I3dLTool^. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolFactoryAdapter.Create(Cnc.Tool.Interop.TlToolLathe)">
            <summary>	Creates a new instance of the ILTool interface wrapping the given TlToolLathe instance. </summary>
            <param name="toolAssembly">	If non-null, the tool assembly. </param>
            <returns>	Nullptr if it fails, else an ILTool^. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolFactoryAdapter.Create(Cnc.Tool.Interop.TlAssembly)">
            <summary>	Creates a new instance of the IMTool interface wrapping the given TlAssembly instance. </summary>
            <param name="toolAssembly">	If non-null, the tool assembly. </param>
            <returns>	Nullptr if it fails, else an IMTool^. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolFactoryAdapter.Finalize">
            <summary>	Finalizer. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolFactoryAdapter.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolFactoryAdapter.#ctor(std.shared_ptr&lt;Cnc.Tool.IToolFactory&gt;)">
            <summary>	Constructor. </summary>
            <param name="spNativeInstance">	The native instance to adapt. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolFactory.Create(Cnc.Tool.Interop.IToolFactory.Create3dLToolParams)">
            <summary>	Creates a new instance of the I3dLTool interface based on the specified parameters. </summary>
            <param name="params">	Options for controlling the operation. </param>
            <returns>	Nullptr if it fails, else an I3dLTool^. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolFactory.Create(Cnc.Tool.Interop.TlToolLathe)">
            <summary>	Creates a new instance of the ILTool interface wrapping the given TlToolLathe instance. </summary>
            <param name="toolAssembly">	If non-null, the tool assembly. </param>
            <returns>	Nullptr if it fails, else an ILTool^. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.IToolFactory.Create(Cnc.Tool.Interop.TlAssembly)">
            <summary>	Creates a new instance of the IMTool interface wrapping the given TlAssembly instance. </summary>
            <param name="toolAssembly">	If non-null, the tool assembly. </param>
            <returns>	Nullptr if it fails, else an IMTool^. </returns>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolFactory.Create3dLToolParams.inMetric">
            <summary>	True to create the tool in metric units. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolFactory.Create3dLToolParams.type">
            <summary>	The type of the tool to create. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolFactory.Create3dLToolParams.Type.Grooving">
            <summary>	An enum constant representing the grooving option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolFactory.Create3dLToolParams.Type.Threading">
            <summary>	An enum constant representing the threading option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.IToolFactory.Create3dLToolParams.Type.TurningBoring">
            <summary>	An enum constant representing the turning boring option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolFactory.Create3dLToolParams.Type">
            <summary>	Values that represent types. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolFactory.Create3dLToolParams">
            <summary>	Parameters for creating 3D lathe tools. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.IToolFactory">
            <summary>	A tool interface instance factory. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssembly.TlAssemblyDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.RefreshPositioningLimits">
            <summary> Refresh the positioning limits from current tool and holder profiles. </summary>
            <summary> Refresh the positioning limits from current tool and holder profiles. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetFullToolProfile(System.Boolean)">
            <summary> Gets the full profile of the tool. </summary>
            <param name="getProfileInMetric"> True to get profile in metric. </param>
            <returns> The tool profile result. </returns>
            <summary> Gets the full profile of the tool. </summary>
            <param name="getProfileInMetric"> True to get profile in metric. </param>
            <returns> The tool profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetFullHolderProfile(System.Boolean)">
            <summary> Gets the full profile of the entire holder assembly. </summary>
            <param name="getProfileInMetric"> True to get profile in metric. </param>
            <returns> The holder profile result. </returns>
            <summary> Gets the full profile of the entire holder assembly. </summary>
            <param name="getProfileInMetric"> True to get profile in metric. </param>
            <returns> The holder profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.OnSetMainHolder">
            <summary>	Executes the set main holder action. </summary>
            <summary>	Executes the set main holder action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.OnSetMainTool">
            <summary>	Executes the set main tool action. </summary>
            <summary>	Executes the set main tool action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.OnSlotChanged">
            <summary> Executes the slot changed action. </summary>
            <summary> Executes the slot changed action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.UpdateAssemblyItem(Cnc.Tool.TlAssemblyItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Updates the assembly item described by item. </summary>
            <param name="item"> The item. </param>
            <summary> Updates the assembly item described by item. </summary>
            <param name="item"> The item. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetAssemblyItemPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the assembly item pointer. </summary>
            <param name="itemId"> Identifier for the item to get. </param>
            <returns> The assembly item pointer, or nullptr if the item is not found. </returns>
            <summary> Gets the assembly item pointer. </summary>
            <param name="itemId"> Identifier for the item to get. </param>
            <returns> The assembly item pointer, or nullptr if the item is not found. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.SetMainHolder(&lt;unknown type&gt;)">
            <summary> Sets the main holder as null. </summary>
            <remarks> This special "Set" overload is necessary because TlHolder has a bool constructor, making a call to
		  "SetMainHolder" ambiguous if a nullptr is passed in. </remarks>
            <param name="val"> The nullptr value. </param>
            <summary> Sets the main holder as null. </summary>
            <remarks> This special "Set" overload is necessary because TlHolder has a bool constructor, making a call to
		  "SetMainHolder" ambiguous if a nullptr is passed in. </remarks>
            <param name="val"> The nullptr value. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetMachineSideConnectionType">
            <summary>	Gets machine side connection type. </summary>
            <returns>	The machine side connection type. </returns>
            <summary>	Gets machine side connection type. </summary>
            <returns>	The machine side connection type. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.RemoveAssemblyComponents">
            <summary>	Removes the assembly components. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Removes the assembly components. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.SetStationPerConfig">
            <summary>	Sets the station per configuration. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Sets the station per configuration. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.SetOffsetsPerConfig">
            <summary>	Sets the offsets per configuration. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Sets the offsets per configuration. </summary>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.SetAsDefaultAssembly(System.Boolean)">
            <summary>	Sets as default assembly. </summary>
            <param name="val">	The value. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Sets as default assembly. </summary>
            <param name="val">	The value. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.SetToolNumber(System.Int32,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets tool number. </summary>
            <param name="toolNum">	    The tool number. </param>
            <param name="machineGroup"> Group the machine belongs to. </param>
            <summary> Sets tool number. </summary>
            <param name="toolNum">	    The tool number. </param>
            <param name="machineGroup"> Group the machine belongs to. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetHolderProfile(System.Boolean)">
            <summary> Gets the profile of the entire holder assembly from the perspective of an external client. </summary>
            <remarks> If a portion of the holder assembly exists contained within the tool (e.g., facemill arbor), that portion
		  will be truncated from the result. </remarks>
            <param name="getProfileInMetric"> (Optional) True to get profile in metric. </param>
            <returns> The holder profile result. </returns>
            <summary> Gets the profile of the entire holder assembly from the perspective of an external client. </summary>
            <remarks> If a portion of the holder assembly exists contained within the tool (e.g., facemill arbor), that portion
		  will be truncated from the result. </remarks>
            <param name="getProfileInMetric"> (Optional) True to get profile in metric. </param>
            <returns> The holder profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetGaugeLength">
            <summary>	Gets the Assembly Gauge length</summary>
            <returns>	The Gauge Length </returns>
            <summary>	Gets the Assembly Gauge length</summary>
            <returns>	The Gauge Length </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetComponentCScalar(System.Boolean)">
            <summary> Gets the distance between the top of the tool and the bottom of the holder. </summary>
            <remarks> This value is equivalent to tool length - tool machine side connection height, and represents the
		  positioning distance between the top of the tool and the parent holder's workpiece side connection. </remarks>
            <param name="getValueInMetric"> (Optional) True to get value in metric. </param>
            <returns> The component CScalar value. </returns>
            <summary> Gets the distance between the top of the tool and the bottom of the holder. </summary>
            <remarks> This value is equivalent to tool length - tool machine side connection height, and represents the
		  positioning distance between the top of the tool and the parent holder's workpiece side connection. </remarks>
            <param name="getValueInMetric"> (Optional) True to get value in metric. </param>
            <returns> The component CScalar value. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetStickout(System.Boolean)">
            <summary> Gets the stick-out of the tool from the holder. </summary>
            <remarks> This value is equivalent to the tool's machine side connection height. It represents the distance from
		  the bottom of the holder to the bottom of the tool. In the case of the holder being inside the tool
		  (e.g. facemill arbor), this value will be the distance between the bottom of the internal holder and
		  the bottom of the tool. Tool projection in that case will represent the full length of the tool. </remarks>
            <param name="getValueInMetric"> (Optional) True to get value in metric. </param>
            <returns> The stick-out of the tool with respect to the bottom of the parent holder. </returns>
            <summary> Gets the stick-out of the tool from the holder. </summary>
            <remarks> This value is equivalent to the tool's machine side connection height. It represents the distance from
		  the bottom of the holder to the bottom of the tool. In the case of the holder being inside the tool
		  (e.g. facemill arbor), this value will be the distance between the bottom of the internal holder and
		  the bottom of the tool. Tool projection in that case will represent the full length of the tool. </remarks>
            <param name="getValueInMetric"> (Optional) True to get value in metric. </param>
            <returns> The stick-out of the tool with respect to the bottom of the parent holder. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.UpdateToolMachineSideConnectionHeight(System.Double,System.Boolean)">
            <summary> Updates the tool machine side connection height. </summary>
            <param name="value">		 The value. </param>
            <param name="valueIsMetric"> (Optional) True if the value is metric. </param>
            <summary> Updates the tool machine side connection height. </summary>
            <param name="value">		 The value. </param>
            <param name="valueIsMetric"> (Optional) True if the value is metric. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetToolMachineSideConnectionHeightMax(System.Boolean)">
            <summary> Gets the maximum tool machine side connection height. </summary>
            <param name="getValueInMetric"> (Optional) True to get value in metric. </param>
            <returns> The maximum tool machine side connection height. </returns>
            <summary> Gets the maximum tool machine side connection height. </summary>
            <param name="getValueInMetric"> (Optional) True to get value in metric. </param>
            <returns> The maximum tool machine side connection height. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetToolMachineSideConnectionHeightMin(System.Boolean)">
            <summary> Gets the minimum tool machine side connection height. </summary>
            <param name="getValueInMetric"> (Optional) True to get value in metric. </param>
            <returns> The minimum tool machine side connection height. </returns>
            <summary> Gets the minimum tool machine side connection height. </summary>
            <param name="getValueInMetric"> (Optional) True to get value in metric. </param>
            <returns> The minimum tool machine side connection height. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetToolMachineSideConnectionHeight(System.Boolean)">
            <summary> Gets tool machine side connection height. </summary>
            <param name="getValueInMetric"> (Optional) True to get value in metric. </param>
            <returns> The tool machine side connection height. </returns>
            <summary> Gets tool machine side connection height. </summary>
            <param name="getValueInMetric"> (Optional) True to get value in metric. </param>
            <returns> The tool machine side connection height. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.UpdateToolProjection(System.Double,System.Boolean)">
            <summary> Updates the tool projection. </summary>
            <param name="value">		 The value. </param>
            <param name="valueIsMetric"> (Optional) True if the value is metric. </param>
            <summary> Updates the tool projection. </summary>
            <param name="value">		 The value. </param>
            <param name="valueIsMetric"> (Optional) True if the value is metric. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetToolProjectionMax(System.Boolean)">
            <summary> Gets the maximum tool projection value. </summary>
            <param name="getValueInMetric"> (Optional) True to get the value in metric. </param>
            <returns> The calculated tool projection minimum. </returns>
            <summary> Gets the maximum tool projection value. </summary>
            <param name="getValueInMetric"> (Optional) True to get the value in metric. </param>
            <returns> The calculated tool projection minimum. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetToolProjectionMin(System.Boolean)">
            <summary> Gets the minimum tool projection value. </summary>
            <param name="getValueInMetric"> (Optional) True to get the value in metric. </param>
            <returns> The calculated tool projection minimum. </returns>
            <summary> Gets the minimum tool projection value. </summary>
            <param name="getValueInMetric"> (Optional) True to get the value in metric. </param>
            <returns> The calculated tool projection minimum. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetToolProjection(System.Boolean)">
            <summary> Gets the Tool Projection. </summary>
            <param name="getValueInMetric"> (Optional) True to get the value in metric. </param>
            <returns> The tool projection. </returns>
            <summary> Gets the Tool Projection. </summary>
            <param name="getValueInMetric"> (Optional) True to get the value in metric. </param>
            <returns> The tool projection. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetTotalHolderLength">
            <summary>	Gets the total length of all holders</summary>
            <returns>	The total length of holders </returns>
            <summary>	Gets the total length of all holders</summary>
            <returns>	The total length of holders </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.GetMillTool">
            <summary>	Gets the mill tool. </summary>
            <returns>	The mill tool. </returns>
            <summary>	Gets the mill tool. </summary>
            <returns>	The mill tool. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssembly.IsSimilar(std.shared_ptr&lt;Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Determines if the other tool assembly is similar enough to be considered a duplicate. </summary>
            <param name="spOther">		  The other tool assembly. </param>
            <param name="machineGroupId"> (Optional) identifier for the machine group. </param>
            <returns> true if similar, false if not. </returns>
            <summary> Determines if the other tool assembly is similar enough to be considered a duplicate. </summary>
            <param name="spOther">		  The other tool assembly. </param>
            <param name="machineGroupId"> (Optional) identifier for the machine group. </param>
            <returns> true if similar, false if not. </returns>
        </member>
        <member name="D:Cnc.Tool.TlAssemblyEntry">
            <summary>	Defines an alias representing the tl assembly entry. </summary>
            <summary>	Defines an alias representing the tl assembly entry. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolder.TlHolderDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DoGetProfile">
            <summary> Executes the get profile operation. </summary>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DoOnSetStoredProfile">
            <summary> Executes the on set stored profile operation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolder.MakeSegment(Cnc.Tool.TlHolderSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Byte)">
            <summary> Makes a segment. </summary>
            <param name="segment">	    The segment. </param>
            <param name="bottomHeight"> (Optional) height of the bottom. </param>
            <param name="color">	    (Optional) the color. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.ConvertProfileSegmentToHolderSegment(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert profile segment to holder segment. </summary>
            <param name="segment"> The profile segment. </param>
            <returns> The holder segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.MakeHolderSegmentsFromProfile(std.shared_ptr&lt;Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary> Makes holder segments from profile. </summary>
            <param name="profile"> The profile. </param>
            <returns> A vector of TlHolderSegment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.MakeProfileFromHolderSegments(std.vector&lt;Cnc.Tool.TlHolderSegment,std.allocator&lt;Cnc.Tool.TlHolderSegment&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes profile from holder segments. </summary>
            <param name="holderSegments"> The holder segments. </param>
            <returns> A TlProfilePtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.GetLength">
            <summary> Gets the length of the holder (max y value - min y value). </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.GetHeight">
            <summary>	Gets the total Height of the Holder (from y=0 to the holder's max y value). </summary>
            <returns>	The Height of the Holder. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.IsDefaultHolder">
            <summary>	Query if this object is default holder. </summary>
            <returns>	true if default holder, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.SetSegments(std.vector&lt;Cnc.Tool.TlHolderSegment,std.allocator&lt;Cnc.Tool.TlHolderSegment&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets the segments </summary>
            <param name="segments">	segments to define the holder </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.GetSegments">
            <summary> Gets the segments. </summary>
            <returns> The segments. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.AddSegment(System.Double,System.Double,System.Double)">
            <summary> Adds a segment. </summary>
            <param name="topWidth">    Width of the top. </param>
            <param name="bottomWidth"> Width of the bottom. </param>
            <param name="height">	   The height. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.DeleteAllSegments">
            <summary> Deletes all segments. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.op_Assign(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> A deep copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolder.#ctor(Cnc.Tool.TlHolder!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="x"> A deep copy of this object </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.#ctor(System.Boolean)">
            <summary>	Parameterized constructor. </summary>
            <param name="IsMetric">	true if this object is metric. </param>
        </member>
        <member name="M:Cnc.Tool.TlHolder.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderSegment.op_Equality(Cnc.Tool.TlHolderSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	comparison operator. </summary>
            <param name="rhs">	The other. </param>
            <returns>	true if objects are the same </returns>
        </member>
        <member name="T:Cnc.Tool.TlHolderSegment">
            <summary> Class representing an old-style holder segment in the form of a top width, a bottom width, and a height. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolMill.TlToolMillDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.OnToolLengthChanged">
            <summary> Executes the 'tool length changed' action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.CleanUpPoorlyDefinedTools(System.Boolean,System.Boolean)">
            <summary> Clean up tools that were created badly in older versions. </summary>
            <param name="preX8"> True if called from a pre-X8 serialization version </param>
            <param name="preX9"> True if called from a pre-X9 serialization version </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DoGetProfile">
            <summary> Executes the get profile operation. </summary>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="F:Cnc.Tool.TlToolMill.m_MCToolType">
Old Holder Attributes
</member>
        <member name="M:Cnc.Tool.TlToolMill.DoSetProfileParams(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the set profile parameters operation. </summary>
            <param name="params"> Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DoGetProfileParams(Cnc.Tool.MillToolProfileParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the get profile parameters operation. </summary>
            <param name="result"> The result profile parameters. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DoIsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The other tool. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetProfileParams(Cnc.Tool.MillToolProfileParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets profile parameters. </summary>
            <param name="params"> Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetProfileParams(System.Boolean)">
            <summary>	Gets the profile parameters. </summary>
            <param name="metric">	(Optional) True to specifically get parameters in metric, false in inch. </param>
            <returns>	The profile parameters. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetCornerRadius(System.Double)">
            <summary>	Convenience only - No backing field on TlToolMill </summary>
            <param name="cornerRadius">	The corner radius. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetCornerRadius">
            <summary>	Convenience only - No backing field </summary>
            <returns>	The corner radius. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetFBMWasMetric(System.Boolean)">
            <summary> Sets fbm was metric. </summary>
            <param name="value"> true to value. </param>
            <remarks> This is here to support a hack in FBM. </remarks>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.AdjustLengthForStickout(System.Double,System.Boolean)">
            <summary> Adjust length for stickout. </summary>
            <param name="value">		 The value. </param>
            <param name="valueIsMetric"> (Optional) True if value is metric. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.ResetProjectionValues">
            <summary>	Resets the projection values. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetToolMaterialCode(System.Int16,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>	Sets a tool material code. </summary>
            <param name="code">	   	The code. </param>
            <param name="matlName">	Name of the matl. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetToolMaterialCode">
            <summary>	Gets the tool material code. </summary>
            <returns>	The tool material code. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetCannedTxtCoolant(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets a canned text coolant. </summary>
            <param name="cool">	The coolant. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetCannedTxtCoolant">
            <summary>Gets the canned text coolant data</summary>
            <returns>The canned text coolant data</returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetPreXCoolant(System.Int16)">
            <summary>	Sets a pre x coordinate coolant. </summary>
            <param name="cool">	The coolant. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetPreXCoolant">
            <summary>Gets the PreX style coolant values (off/flood/mist/spindle). </summary>
            <returns>Tthe PreX style coolant values</returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetLegacyHolderData(System.Double,System.Double)">
            <summary> Sets the legacy holder data. </summary>
            <param name="top">    The top. </param>
            <param name="height"> The height. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetMCToolType(MCToolType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the mastercam type of this tool.</summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetMCToolType(System.Int32)">
            <summary> Sets mc tool type. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetMCToolType">
            <summary>Returns the mastercam type of this tool.</summary>
            <returns>The Mastercam type of this tool.</returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetOpTypeIDs">
            <summary>Returns a list of the IDs of the op type this tool
		 supports</summary>
            <returns>The list of op type IDs support by this tool</returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.AddToolTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds a supported tool type ID for this tool.</summary>
            <returns> true if the ID was successfully set, false otherwise</returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.AddOpTypeID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds a supported op type ID for this tool.</summary>
            <returns> true if the ID was successfully set, false otherwise</returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the TlToolMill properties located within op_tool_info</summary>
            <returns>true of the setting was successful</returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.GetOpToolInfo">
            <summary> Gets operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMill.#ctor">
            <summary>Default constructor.  Creates an empty tool.</summary>
        </member>
        <member name="M:Cnc.Tool.TlMillingOpParams.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMillingOpParams.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="T:Cnc.Tool.TlOpParams.TlOpParamsDeserializationImpl">
            <summary>	A TlOpParams deserialization implementation. </summary>
            <summary>	A TlOpParams deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.SetCannedTxtCoolant(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets canned text coolant. </summary>
            <param name="value"> The value. </param>
            <summary> Sets canned text coolant. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlOpParams.SetPreXCoolant(System.Int16)">
            <summary> Sets pre x coordinate coolant. </summary>
            <param name="value"> The value. </param>
            <summary> Sets pre x coordinate coolant. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.DecrunchValues(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Decrunches the values from the inputed coolant vector </summary>
            <param name="coolant"> [in] The initial coolant vector to decrunch. </param>
            <returns>	Decrunched coolant vector. </returns>
            <summary>	Decrunches the values from the inputed coolant vector </summary>
            <param name="coolant"> [in] The initial coolant vector to decrunch. </param>
            <returns>	Decrunched coolant vector. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.ConvertToTime(System.Int16)">
            <summary>	Converts the inputted coolant value to a Time index (0, 1, 2). </summary>
            <param name="value"> The value to convert from. </param>
            <returns>	Coolant Timing state (BEFORE, WITH, AFTER). </returns>
            <summary>	Converts the inputted coolant value to a Time index (0, 1, 2). </summary>
            <param name="value"> The value to convert from. </param>
            <returns>	Coolant Timing state (BEFORE, WITH, AFTER). </returns>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.ConvertToState(System.Int16)">
            <summary>	Converts the inputted coolant value to a State index (0, 1, 2). </summary>
            <param name="value"> The value to convert from. </param>
            <returns>	Coolant State (ON, OFF, IGNORE). </returns>
            <summary>	Converts the inputted coolant value to a State index (0, 1, 2). </summary>
            <param name="value"> The value to convert from. </param>
            <returns>	Coolant State (ON, OFF, IGNORE). </returns>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.CalculateValue(System.Int32,System.Int16,System.Int16)">
            <summary>	Calculates the appropriate value for the given Index, state and time. </summary>
            <param name="index"> [in] field index used in calculations. </param>
            <param name="state"> [in] state of the field. </param>
            <param name="time">	 [in] timing state of the field. </param>
            <returns>	Result value based off of input. </returns>
            <summary>	Calculates the appropriate value for the given Index, state and time. </summary>
            <param name="index"> [in] field index used in calculations. </param>
            <param name="state"> [in] state of the field. </param>
            <param name="time">	 [in] timing state of the field. </param>
            <returns>	Result value based off of input. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.UpdateFrom(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Updates from canned txt coolant escribed by coolant. </summary>
            <param name="coolant">	The coolant. </param>
            <summary>	Updates from canned txt coolant escribed by coolant. </summary>
            <param name="coolant">	The coolant. </param>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.op_Implicit~std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;">
            <summary> 
Converts this coolant object into the cannedtxtcoolant shorts
that Mastercam uses in machine definitions and posts.
</summary>
            <summary> 
Converts this coolant object into the cannedtxtcoolant shorts
that Mastercam uses in machine definitions and posts.
</summary>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.#ctor(System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Paramaterized Constructor. </summary>
            <param name="other"> The old style coolant flag to update from. </param>
            <summary>	Paramaterized Constructor. </summary>
            <param name="other"> The old style coolant flag to update from. </param>
        </member>
        <member name="M:Cnc.Tool.TlCoolant.#ctor(std.vector&lt;System.Int16,std.allocator&lt;System.Int16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Paramaterized Constructor. </summary>
            <param name="other"> The coolant vector to update from. </param>
            <summary>	Paramaterized Constructor. </summary>
            <param name="other"> The coolant vector to update from. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.SetCodeFromID">
            <summary> Sets code from identifier. </summary>
            <summary> Sets code from identifier. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.SetIDFromCode">
            <summary> Sets identifier from code. </summary>
            <summary> Sets identifier from code. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsIDValidMaterialID(Cnc.Tool.TlID)">
            <summary> Query if 'testID' is a valid material identifier. </summary>
            <param name="testID"> Identifier for the test. </param>
            <returns> true if identifier a valid material identifier, false if not. </returns>
            <summary> Query if 'testID' is a valid material identifier. </summary>
            <param name="testID"> Identifier for the test. </param>
            <returns> true if identifier a valid material identifier, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsUser2">
            <summary> Query if this object is user 2. </summary>
            <returns> true if user 2, false if not. </returns>
            <summary> Query if this object is user 2. </summary>
            <returns> true if user 2, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsUser1">
            <summary> Query if this object is user 1. </summary>
            <returns> true if user 1, false if not. </returns>
            <summary> Query if this object is user 1. </summary>
            <returns> true if user 1, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsCeramic">
            <summary> Query if this object is ceramic. </summary>
            <returns> true if ceramic, false if not. </returns>
            <summary> Query if this object is ceramic. </summary>
            <returns> true if ceramic, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsTinCoated">
            <summary> Query if this object is tin coated. </summary>
            <returns> true if tin coated, false if not. </returns>
            <summary> Query if this object is tin coated. </summary>
            <returns> true if tin coated, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsCarbide">
            <summary> Query if this object is carbide. </summary>
            <returns> true if carbide, false if not. </returns>
            <summary> Query if this object is carbide. </summary>
            <returns> true if carbide, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsHighSpeedSteel">
            <summary> Query if this object is high speed steel. </summary>
            <returns> true if high speed steel, false if not. </returns>
            <summary> Query if this object is high speed steel. </summary>
            <returns> true if high speed steel, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsDefinedMaterial">
            <summary> Query if this object is defined material. </summary>
            <returns> true if defined material, false if not. </returns>
            <summary> Query if this object is defined material. </summary>
            <returns> true if defined material, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.IsKnownMaterial">
            <summary> Query if this object is known material. </summary>
            <returns> true if known material, false if not. </returns>
            <summary> Query if this object is known material. </summary>
            <returns> true if known material, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.SetID(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.SetID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.#ctor(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst)">
            <summary>	Paramiterized constructor. </summary>
            <param name="knownID"> Material ID to set the code based off of.Will only work for Mastercam known ids </param>
            <summary>	Paramiterized constructor. </summary>
            <param name="knownID"> Material ID to set the code based off of.Will only work for Mastercam known ids </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.#ctor(System.Int16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Paramiterized constructor. </summary>
            <param name="code"> Material code to set the ID based off of. </param>
            <summary> Paramiterized constructor. </summary>
            <param name="code"> Material code to set the ID based off of. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolMaterial.#ctor">
            <summary>	Default constructor. </summary>
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlMaterial.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlMaterial.SetCommercialName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Sets a commercial name. </summary>
            <param name="name"> The name. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlMaterial.GetCommercialName">
            <summary>   Gets the commercial name. </summary>
            <returns>   The commercial name. </returns>
        </member>
        <member name="M:Cnc.Tool.CreateIToolFactory">
            <summary>	Creates an instance of the IToolFactory interface. </summary>
            <returns>	The new IToolFactory instance. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolFactory.Create(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a new tool interface instance from the given database entity. </summary>
            <param name="entity">	The database entity. </param>
            <returns>	A tool interface instance, or nullptr if not a valid tool entity. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolFactory.Create(Cnc.Tool.LATHETOOL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a new lathe tool interface instance from the given legacy lathe tool. </summary>
            <param name="tool">	The tool assembly. </param>
            <returns>	A lathe tool interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolFactory.Create(Cnc.Tool.IToolFactory.Create3dLToolParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a new 3d lathe tool interface instance from the given 3d tool assembly. </summary>
            <param name="params">	Parameters for controlling the operation. </param>
            <returns>	A 3d lathe tool interface instance. </returns>
        </member>
        <member name="T:Cnc.Tool.IToolFactory.Create3dLToolParams.Type">
            <summary>	Values that represent 3d tool type options. </summary>
        </member>
        <member name="T:Cnc.Tool.IToolFactory.Create3dLToolParams">
            <summary>	A parameters structure for creating instances of the I3dLTool interface. </summary>
        </member>
        <member name="M:Cnc.Tool.IToolFactory.Create(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Creates a new 3d lathe tool interface instance from the given 3d tool assembly. </summary>
            <param name="tool">			 	The tool assembly. </param>
            <param name="definitionSlot">	The definition slot. </param>
            <returns>	A 3d lathe tool interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolFactory.Create(Cnc.Tool.TlToolAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a new 3d lathe tool interface instance from the given 3d tool assembly. </summary>
            <param name="tool">	The tool assembly. </param>
            <returns>	A 3d lathe tool interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolFactory.Create(Cnc.Tool.TlToolLathe!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a new lathe tool interface instance from the given lathe tool assembly. </summary>
            <param name="tool">	The tool assembly. </param>
            <returns>	A lathe tool interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolFactory.Create(tp_tool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a new mill tool interface instance from the given legacy tool. </summary>
            <param name="tool">	The tool assembly. </param>
            <returns>	A tool interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolFactory.Create(Cnc.Tool.TlAssembly!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Creates a new mill tool interface instance from the given tool assembly. </summary>
            <param name="tool">	The tool assembly. </param>
            <returns>	A tool interface instance. </returns>
        </member>
        <member name="M:Cnc.Tool.IToolFactory.Dispose">
            <summary>	Destructor. </summary>
        </member>
        <member name="T:Cnc.Tool.IToolFactory">
            <summary>	A tool factory interface. </summary>
        </member>
        <member name="M:Cnc.Tool.IMTool.FillParams(tp_tool*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Fill parameters in the provided LATHETOOL instance using the contained tool data. </summary>
            <param name="params">	Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.IMTool.Clone">
            <summary>	Makes a deep copy of this object. </summary>
            <returns>	A copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.I3dLTool.SetToolAssemblyView(Cnc.Tool.TlToolAssemblyLatheDefView!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the local tool assembly view. </summary>
            <param name="toolView">	The tool view. </param>
        </member>
        <member name="M:Cnc.Tool.I3dLTool.GetToolAssemblyView">
            <summary>	Gets the local tool assembly view. </summary>
            <returns>	The tool assembly view. </returns>
        </member>
        <member name="T:Cnc.Tool.I3dLTool.ToolAssemblyType">
            <summary>	Values that represent tool assembly types. </summary>
        </member>
        <member name="M:Cnc.Tool.I3dLTool.GetCuttingPlaneRotationOffsetAngle">
            <summary> Gets the cutting plane rotation offset angle between the primary insert cutting plane and the active
		  insert cutting plane for this tool assembly. </summary>
            <returns> The rotation angle offset between the cutting planes of the primary insert and current insert. </returns>
        </member>
        <member name="M:Cnc.Tool.I3dLTool.GetCuttingPlaneScalarOffset">
            <summary> Gets the offset in z-depth between the primary insert cutting plane and the active insert cutting plane
		  for this tool assembly. </summary>
            <returns> The z-depth scalar offset between the cutting planes of the primary insert and current insert. </returns>
        </member>
        <member name="M:Cnc.Tool.I3dLTool.GetMachineToolAxisCutPlaneOffset">
            <summary>	Gets the offset value from the machine tool axis to the cutting plane of the tool. </summary>
            <returns>	The machine tool axis cut plane offset. </returns>
        </member>
        <member name="M:Cnc.Tool.I3dLTool.SetCompQuadrant(Cnc.Tool.ILTool.CompensationQuadrant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the compensation quadrant. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.I3dLTool.LoadHolderModel(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Loads holder model. </summary>
            <param name="modelPath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.I3dLTool.LoadInsertModel(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Loads holder model. </summary>
            <param name="modelPath"> Full pathname of the file. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.I3dLTool.Clone">
            <summary>	Makes a deep copy of this object. </summary>
            <returns>	A copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.ILTool.FillParams(Cnc.Tool.LATHETOOLCLASS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets global information on the given tool class instance. </summary>
            <param name="pClass">	If non-null, the class. </param>
        </member>
        <member name="M:Cnc.Tool.ILTool.FillParams(Cnc.Tool.LATHETOOL*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Fill parameters in the provided LATHETOOL instance using the contained tool data. </summary>
            <param name="params">	Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.ILTool.IsSimilar(Cnc.Tool.ILTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary>	Query if 'rhs' is similar to this tool. </summary>
            <param name="rhs">			   	The right hand side. </param>
            <param name="machineGroupId">  	Identifier for the machine group. </param>
            <param name="ignoreToolNumber">	True to ignore tool number. </param>
            <returns>	True if similar, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.ILTool.CreateDescription(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>	Creates a description. </summary>
            <param name="offsetNumber">	The offset number. </param>
            <returns>	The new description. </returns>
        </member>
        <member name="M:Cnc.Tool.ILTool.GetCutParams">
            <summary>
3d tooling cutting parameters for defining what the parameters in a toolpath will default to if requested.
</summary>
            <returns>	An interface into 3d tooling compensation parameters, or null if not valid for the tool type. </returns>
            <summary>
3d tooling cutting parameters for defining what the parameters in a toolpath will default to if requested.
</summary>
            <returns>	An interface into 3d tooling compensation parameters, or null if not valid for the tool type. </returns>
        </member>
        <member name="M:Cnc.Tool.ILTool.SaveSetupInformation(System.Boolean,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Saves the given setup information to the tool. </summary>
            <param name="ccw">				True if the spindle direction is CCW. </param>
            <param name="activeSpindle">	The active spindle. </param>
            <param name="activeTurret"> 	The active turret. </param>
            <param name="vertical">			True if the tool is vertical. </param>
            <param name="inverted">			True if the tool is inverted. </param>
            <param name="turretAngle">  	The turret angle. </param>
            <param name="homePosition"> 	The home position. </param>
        </member>
        <member name="T:Cnc.Tool.ILTool.Orientation">
            <summary>	Values that represent orientations. </summary>
        </member>
        <member name="T:Cnc.Tool.ILTool.CompensationQuadrant">
            <summary>	Values that represent compensation quadrants. </summary>
        </member>
        <member name="T:Cnc.Tool.ILTool.CompensationMethod">
            <summary>	Values that represent compensation methods. </summary>
        </member>
        <member name="M:Cnc.Tool.ILTool.GetNonCutBoundary">
            <summary>	Gets the non cutting boundary. </summary>
            <returns>	The non cut boundary. </returns>
        </member>
        <member name="M:Cnc.Tool.ILTool.GetCutBoundary">
            <summary>	Gets the cutting boundary. </summary>
            <returns>	The cut boundary. </returns>
        </member>
        <member name="M:Cnc.Tool.ILTool.GetType(System.Boolean,System.Boolean)">
            <summary>	Gets the type of the tool. </summary>
            <param name="useCustomType">	True to use custom type, meaning that if custom, the specialization will be
								returned (Drill, Groove, etc.). </param>
            <param name="flagCustom">   	True to flag custom, meaning that if custom, the custom specialization types will
								be used (CustomDrilling, CustomTurning, etc.). </param>
            <returns>	The type. </returns>
        </member>
        <member name="M:Cnc.Tool.ILTool.GetType">
            <summary>	Gets the type of the tool. </summary>
            <returns>	The type. </returns>
        </member>
        <member name="T:Cnc.Tool.ILTool.Type">
            <summary>	Values that represent lathe tool types. </summary>
        </member>
        <member name="M:Cnc.Tool.ILTool.CreateViewOfFirstDefinitionSatisfyingPredicate(Cnc.Tool.TlPredicate&lt;Cnc.Tool.ILTool&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> For use with tools that have multiple inserts or definitions on a single insert, queries the tool to
		  identify if there is an alternate insert or definition that satisfies the given predicate, and then
		  returns an ILTool instance representing a view of that definition. </summary>
            <param name="predicate"> The predicate to evaluate against. </param>
            <returns> An ILTool instance representing a view of the first tool definition satisfying the predicate, or nullptr
		  if one does not exist. </returns>
        </member>
        <member name="M:Cnc.Tool.ILTool.CreateViewOfSlot(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
For use with tools that have multiple inserts or definitions on a single insert, creates an alternative ILTool
instance that represents the tool definition with the specified slot number.
</summary>
            <param name="slot">	The slot number of the definition to create an alternate view of. </param>
            <returns>	The new view of the tool definition that is defined by the alternate slot. </returns>
        </member>
        <member name="M:Cnc.Tool.ILTool.HasDefinitionAtSlot(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
For use with tools that have multiple inserts or definitions on a single insert, queries the tool to identify if
there is an alternative insert or definition at the specified slot number.
</summary>
            <param name="slot">	The lathe tool slot number. </param>
            <returns>	True if a lathe tool definition exists for the specified slot, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.ILTool.GetOverallLength">
            <summary>	Gets overall length. </summary>
            <returns>	The overall length. </returns>
        </member>
        <member name="M:Cnc.Tool.ILTool.HasMultipleInserts">
            <summary> Query if there are multiple inserts defined for this tool assembly. </summary>
            <returns> True if there are multiple inserts defined for this tool, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.ILTool.GetAllSlots">
            <summary>
For use with tools that have multiple inserts or definitions on a single insert, queries the tool for all tool
definition slots that are represented by this tool, including the currently active one retrieved by a call to
'GetSlot'.
</summary>
            <returns>	A set of lathe definition slots for this lathe tool. </returns>
        </member>
        <member name="M:Cnc.Tool.ILTool.Clone">
            <summary>	Makes a deep copy of this object. </summary>
            <returns>	A copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.op_Inequality(Cnc.Tool.ITool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Inequality operator. </summary>
            <param name="lhs">	The first instance to compare. </param>
            <param name="rhs">	The second instance to compare. </param>
            <returns>	True if the parameters are not considered equivalent. </returns>
            <summary>	Inequality operator. </summary>
            <param name="lhs">	The first instance to compare. </param>
            <param name="rhs">	The second instance to compare. </param>
            <returns>	True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.op_Equality(Cnc.Tool.ITool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.ITool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Equality operator. </summary>
            <param name="lhs">	The first instance to compare. </param>
            <param name="rhs">	The second instance to compare. </param>
            <returns>	True if the parameters are considered equivalent. </returns>
            <summary>	Equality operator. </summary>
            <param name="lhs">	The first instance to compare. </param>
            <param name="rhs">	The second instance to compare. </param>
            <returns>	True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.ITool.DoIsEqual(Cnc.Tool.ITool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the is equal operation. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Executes the is equal operation. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.ITool.DoClone">
            <summary>	Executes the clone operation. </summary>
            <returns>	An IToolPtr. </returns>
            <summary>	Executes the clone operation. </summary>
            <returns>	An IToolPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.ITool.FillParams(op_tool_info*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Fill parameters in the provided op_tool_info instance using the contained tool data. </summary>
            <param name="params">	Options for controlling the operation. </param>
            <summary>	Fill parameters in the provided op_tool_info instance using the contained tool data. </summary>
            <param name="params">	Options for controlling the operation. </param>
        </member>
        <member name="M:Cnc.Tool.ITool.ResetIds">
            <summary>	Resets the identifiers. </summary>
            <summary>	Resets the identifiers. </summary>
        </member>
        <member name="M:Cnc.Tool.ITool.CreateDescription">
            <summary>	Creates a description of this tool. </summary>
            <returns>	The new description. </returns>
            <summary>	Creates a description of this tool. </summary>
            <returns>	The new description. </returns>
        </member>
        <member name="T:Cnc.Tool.ITool.ActiveTurret">
            <summary>	Values that represent active turrets. </summary>
            <summary>	Values that represent active turrets. </summary>
        </member>
        <member name="T:Cnc.Tool.ITool.ActiveSpindle">
            <summary>	Values that represent active spindles. </summary>
            <summary>	Values that represent active spindles. </summary>
        </member>
        <member name="M:Cnc.Tool.ITool.Clone">
            <summary>	Makes a deep copy of this object. </summary>
            <returns>	A copy of this object. </returns>
            <summary>	Makes a deep copy of this object. </summary>
            <returns>	A copy of this object. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLatheCustom.HolderEntityID">
            <summary> Identifier for the holder entity. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLatheCustom.InsertEntityID">
            <summary> Identifier for the insert entity. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLatheCustom.ToolType">
            <summary> Type of the tool. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLatheCustom.ToolOrientation">
            <summary> The tool orientation. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.SetNoseRadius(System.Double,System.Boolean)">
            <summary> Sets NoseRadius property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.GetNoseRadius(System.Boolean)">
            <summary> Gets NoseRadius property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheNoseRadius property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLatheCustom.NoseRadius">
            <summary> The nose radius. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.CopyFrom(Cnc.Tool.Interop.TlToolLatheCustom)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLatheCustom.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolLatheCustom">
            <summary> Defines the TlToolLatheCustom tool class type. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.RequiresToolLocator">
            <summary> Gets or sets whether the tool requires a tool locator </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.MachineSideConnectionType">
            <summary> Gets or sets the machine side connection type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.HolderDirection">
            <summary> Gets or sets the holder direction. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.CannedTxtCoolant">
            <summary> Canned Text Coolant </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.RetractForce">
            <summary> Retract Force </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.RetractOutput">
            <summary> Retract Output </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.RetractType">
            <summary> Retract Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.RetractSelect">
            <summary> Retract Select </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ApproachForce">
            <summary> Approach Force </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ApproachOutput">
            <summary> Approach Output </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ApproachType">
            <summary> Approach Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ApproachSelect">
            <summary> Approach Select </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.SpindleSpeed">
            <summary> Spindle Speed </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.SlowFeedRateType">
            <summary> Slow Feed Rate type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetSlowFeedRate(System.Double,System.Boolean)">
            <summary> Sets SlowFeedRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetSlowFeedRate(System.Boolean)">
            <summary> Gets SlowFeedRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheSlowFeedRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.SlowFeedRate">
            <summary> Slow Feed Rate </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.FastFeedRateType">
            <summary> Fast Feed Rate Type </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetFastFeedRate(System.Double,System.Boolean)">
            <summary> Sets FastFeedRate property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetFastFeedRate(System.Boolean)">
            <summary> Gets FastFeedRate property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheFastFeedRate property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.FastFeedRate">
            <summary> Fast Feed Rate </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.CoolantStatus">
            <summary> Coolant Status </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetToolHeight(System.Double,System.Boolean)">
            <summary> Sets ToolHeight property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetToolHeight(System.Boolean)">
            <summary> Gets ToolHeight property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheToolHeight property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolHeight">
            <summary> Tool Height </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetToolWidth(System.Double,System.Boolean)">
            <summary> Sets ToolWidth property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetToolWidth(System.Boolean)">
            <summary> Gets ToolWidth property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheToolWidth property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolWidth">
            <summary> Tool Width </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolRakeAngle">
            <summary> Tool Rake Angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolClearanceAngle">
            <summary> Tool Clearance Angle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.PercentMaterialCSS">
            <summary> Percentage Material CSS </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.PercentMaterialFeed">
            <summary> Percentage Material Feed </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.TurretAngle">
            <summary> Turret Angle </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetToolCenterY(System.Double,System.Boolean)">
            <summary> Sets ToolCenterY property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetToolCenterY(System.Boolean)">
            <summary> Gets ToolCenterY property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheToolCenterY property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolCenterY">
            <summary> Tool Center Y Coordinate </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetToolCenterX(System.Double,System.Boolean)">
            <summary> Sets ToolCenterX property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetToolCenterX(System.Boolean)">
            <summary> Gets ToolCenterX property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheToolCenterX property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolCenterX">
            <summary> Tool Center X Coordinate </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetHomePositionY(System.Double,System.Boolean)">
            <summary> Sets HomePositionY property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetHomePositionY(System.Boolean)">
            <summary> Gets HomePositionY property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheHomePositionY property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.HomePositionY">
            <summary> Home Position Y Coordinate </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.SetHomePositionX(System.Double,System.Boolean)">
            <summary> Sets HomePositionX property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.GetHomePositionX(System.Boolean)">
            <summary> Gets HomePositionX property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheHomePositionX property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.HomePositionX">
            <summary> Home Position X Coordinate </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolBackOffsetNum">
            <summary> Tool Back Offset Number </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ToolOffsetNum">
            <summary> Tool Offset Number </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.CompType">
            <summary> Component Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ActiveTurret">
            <summary> Active Turret </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.ActiveSpindle">
            <summary> Active Spindle </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.SpindleDirection">
            <summary> Spindle Direction </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.SpindleSpeedCSS">
            <summary> Spindle Speed CSS </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.IsToolInverted">
            <summary> Inverted Tool Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.SelectionFlag">
            <summary> Selection Flag </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.HasMainHolder">
            <summary> Tests if MainHolder reference property is set. </summary>
            <returns> true if MainHolder is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.MainHolder">
            <summary> Gets or sets the main holder of this lathe tool assembly. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.HasMainInsert">
            <summary> Tests if MainInsert reference property is set. </summary>
            <returns> true if MainInsert is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.MainInsert">
            <summary> Gets or sets the main insert of this lathe tool assembly. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.MainHolderID">
            <summary> Main Holder Identifier </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlToolLathe.MainInsertID">
            <summary> Main Insert Identifier </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.CopyFrom(Cnc.Tool.Interop.TlToolLathe)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlToolLathe.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolLathe">
            <summary> Defines the TlToolLathe tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.IsSimilar(Cnc.Tool.Interop.TlTool)">
            <summary> Determines if the other tool is similar enough to be considered a duplciate. </summary>
            <param name="other"> The other. </param>
            <returns> true if similar, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.IsSimilar(Cnc.Tool.Interop.TlTool,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Determines if the other tool is similar enough to be considered a duplciate. </summary>
            <param name="other">		  The other. </param>
            <param name="machineGroupId"> (Optional, defaults to NULL_ID) identifier for the machine group to aid in the comparison. </param>
            <returns> true if similar, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.IsSimilar(Cnc.Tool.Interop.TlTool,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Determines if the other tool is similar enough to be considered a duplciate. </summary>
            <param name="other">		  The other. </param>
            <param name="machineGroupId"> (Optional, defaults to NULL_ID) identifier for the machine group to aid in the comparison. </param>
            <param name="compareMode">    (Optional, defaults to 0) the compare mode. </param>
            <returns> true if similar, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.GetDisplayType">
            <summary>Gets the tool Display Type. </summary>
            <returns>The tool Display type</returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.SetDisplayType(Cnc.Tool.Interop.TlDisplayType)">
            <summary>	Sets a display type. </summary>
            <param name="type">	The type. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.AccessoryCollection">
            <summary> Accessory Collection </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.GeometryLevel">
            <summary> Geometry Level </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.DisplayType">
            <summary> Display Type </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.IsCustom">
            <summary> Is Custom  </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.MfgToolCode">
            <summary> Manufacturer's Tool Code </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.MachineGroup">
            <summary> Machine Group </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.ToolStation">
            <summary> Tool Station </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlTool.ToolNumber">
            <summary> Tool Number </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.CopyFrom(Cnc.Tool.Interop.TlTool)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlTool.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlTool">
            <summary> Defines the TlTool tool class type. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAccessoryCollection.AccessoryItems">
            <summary> Gets or sets the vector of accessory items associated to this item. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessoryCollection.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessoryCollection.CopyFrom(Cnc.Tool.Interop.TlAccessoryCollection)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessoryCollection.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessoryCollection.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAccessoryCollection">
            <summary> Defines the TlAccessoryCollection tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessory.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessory.CopyFrom(Cnc.Tool.Interop.TlAccessory)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessory.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAccessory.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAccessory">
            <summary> Defines the TlAccessory tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.GetProfile">
            <summary> Generates the profile of this item. If the item is a parametric item, a parametric profile will be
		  generated.  Otherwise, the item's stored custom profile will be retrieved in the form of a
		  TlProfileResult instance. </summary>
            <returns> The profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.RemoveOpGroup(Cnc.Tool.Interop.TlOpGroup)">
            <summary>   Removes the operation group described by opGroup. </summary>
            <param name="opGroup">  Group the operation belongs to. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.AddOpGroup(Cnc.Tool.Interop.TlOpGroup)">
            <summary>   Adds an operation group. </summary>
            <param name="opGroup">  Group the operation belongs to. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.GetOpGroups">
            <summary>   Gets the operation groups. </summary>
            <returns>   The operation groups. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.IsProjectionAdjustmentEditable">
            <summary> Is Projection Adjustment Editable </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.SetMachineSideProjectionAdjustment(System.Double,System.Boolean)">
            <summary> Sets MachineSideProjectionAdjustment property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.GetMachineSideProjectionAdjustment(System.Boolean)">
            <summary> Gets MachineSideProjectionAdjustment property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheMachineSideProjectionAdjustment property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.MachineSideProjectionAdjustment">
            <summary> Machine Side Projection Adjustment </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.GraphicsFileCollection">
            <summary> Gets or sets the collection of graphics files associated to this item. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.WorkpieceSideConnectionMap">
            <summary> Gets or sets the workpiece side connection on this tool assembly component. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.MachineSideConnection">
            <summary> Gets or sets the machine side connection of this tool assembly component. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.HasManufacturer">
            <summary> Tests if Manufacturer reference property is set. </summary>
            <returns> true if Manufacturer is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.Manufacturer">
            <summary> Gets or sets the manufacturer of this tool assembly component. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.HasStoredProfile">
            <summary> Tests if StoredProfile reference property is set. </summary>
            <returns> true if StoredProfile is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.StoredProfile">
            <summary> Gets or sets the stored profile of this tool assembly component. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.SetGaugeLength(System.Double,System.Boolean)">
            <summary> Sets GaugeLength property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.GetGaugeLength(System.Boolean)">
            <summary> Gets GaugeLength property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheGaugeLength property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.GaugeLength">
            <summary> Gauge Length </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.SetGaugeDiameter(System.Double,System.Boolean)">
            <summary> Sets GaugeDiameter property in the specified units. </summary>
            <param name="value"> value to set. </param>
            <param name="valueIsMetric"> true to specify value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.GetGaugeDiameter(System.Boolean)">
            <summary> Gets GaugeDiameter property in the specified units. </summary>
            <param name="getValueInMetric"> true to get value in metric. </param>
            <returns> TheGaugeDiameter property. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.GaugeDiameter">
            <summary> Gauge Diameter </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.ToolTypeID">
            <summary> Tool type Identifier </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.MaterialID">
            <summary> Material Identifier </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.IsCatalogItem">
            <summary> Catalog item flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.ThruCoolant">
            <summary> Thru Coolant </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.IsMetric">
            <summary> Metric Flag </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.QuantityOnHand">
            <summary> Quantity On Hand </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.HasModelFile">
            <summary> Tests if ModelFile reference property is set. </summary>
            <returns> true if ModelFile is set, false if not. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.ModelFile">
            <summary> Main Model File </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.GeometryFile">
            <summary> Geometry File </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.Location">
            <summary> Location </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlAssemblyItem.CatalogID">
            <summary> Catalog Identifier </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.CopyFrom(Cnc.Tool.Interop.TlAssemblyItem)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlAssemblyItem.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlAssemblyItem">
            <summary> Defines the TlAssemblyItem tool class type. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlGraphicsFileCollection.GraphicsFiles">
            <summary> Gets or sets the vector of graphics files associated to this item. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFileCollection.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFileCollection.CopyFrom(Cnc.Tool.Interop.TlGraphicsFileCollection)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFileCollection.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFileCollection.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlGraphicsFileCollection">
            <summary> Defines the TlGraphicsFileCollection tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.GetFileDataSize">
            <summary>   Gets the file data binary size. </summary>
            <returns>   The file data binary size. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.SetFileData(System.String)">
            <summary> Sets the file data using the path to the Parasolid transmit (.x_b) file. </summary>
            <param name="filePath"> Full pathname of the file. Must be a Parasolid transmit (.x_b) file. </param>
        </member>
        <member name="P:Cnc.Tool.Interop.TlGraphicsFile.FileFormat">
            <summary> Gets or sets the graphics file format. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlGraphicsFile.FileData">
            <summary> Gets or sets graphics file data in byte form. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.CopyFrom(Cnc.Tool.Interop.TlGraphicsFile)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlGraphicsFile.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlGraphicsFile">
            <summary> Defines the TlGraphicsFile tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.AddOpTypeID(System.Guid)">
            <summary>	Adds an operation type identifier. </summary>
            <param name="opTypeID">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.AddOpTypeID(Cnc.Tool.Interop.TlOpType)">
            <summary>	Adds an operation type identifier. </summary>
            <param name="group">	The group. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.GetOpTypeIDs">
            <summary>	Gets the operation type ids. </summary>
            <returns>	The operation type ids. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.CopyFrom(Cnc.Tool.Interop.TlOpGroup)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlOpGroup.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlOpGroup">
            <summary> Defines the TlOpGroup tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.SetTranslation(System.Windows.Media.Media3D.Point3D,System.Boolean)">
            <summary>	Sets the translation portion of the locator, scaling the input value if necessary. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	True if the value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.GetTranslation(System.Boolean)">
            <summary>	Gets the translation portion of the locator in the specified units. </summary>
            <param name="getValueInMetric">	True to get the translation portion in metric. </param>
            <returns>	The translation portion of the locator. </returns>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLocator.Translation">
            <summary>	Gets or sets the translation portion of the locator. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLocator.IsMetric">
            <summary> Gets or sets a value indicating whether this locator is in Metric units or not. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlLocator.Rotation">
            <summary> Gets or sets the rotation portion of the locator. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.CopyFrom(Cnc.Tool.Interop.TlLocator)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.#ctor(TlObjectProxy*)">
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="M:Cnc.Tool.Interop.TlLocator.#ctor">
            <summary> Default Constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlLocator">
            <summary> Defines the TlLocator tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.ClassFactory.AllocateAppropriateAPIObject(std.shared_ptr&lt;Cnc.Tool.TlObject&gt;)">
            <summary> Allocate appropriate managed object based referencing native object. </summary>
            <param name="spNativeInstance"> The underlying native object. </param>
            <returns> nullptr if it fails, else a managed wrapper object. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.ClassFactory">
            <summary> Allocates appropriate managed object based referencing native object. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlObject.m_pNativeInstance">
            <summary> Pointer to native instance. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlObject.m_disposed">
            <summary> Track whether Dispose has been called. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.GetNativeTlObjectPointer">
            <summary> Gets smart pointer to native TlObject. </summary>
            <returns> The smart pointer to native TlObject (always non-null). </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.ResetIDs">
            <summary> Resets all identifiers associated to this object. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.SetID(System.Guid)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.GetID">
            <summary>	Gets the identifier. </summary>
            <returns>	The identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.op_Inequality(Cnc.Tool.Interop.TlObject,Cnc.Tool.Interop.TlObject)">
            <summary> Inequality operator. </summary>
            <param name="a"> The first instance to compare. </param>
            <param name="b"> The second instance to compare. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.op_Equality(Cnc.Tool.Interop.TlObject,Cnc.Tool.Interop.TlObject)">
            <summary> Equality operator. </summary>
            <param name="a"> The first instance to compare. </param>
            <param name="b"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.Finalize">
            <summary> Finaliser. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlObject.Slot">
            <summary> Gets or sets the slot index of this object. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlObject.Description">
            <summary> Gets or sets the description of this object. </summary>
        </member>
        <member name="P:Cnc.Tool.Interop.TlObject.Name">
            <summary> Gets or sets the name of this object. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.Clone">
            <summary> Makes a deep copy of this object. </summary>
            <returns> nullptr if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.CopyFrom(Cnc.Tool.Interop.TlObject)">
            <summary> Copies from described by item. </summary>
            <param name="item"> The item. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.Interop.TlObject.#ctor(TlObjectProxy*)">
            <summary> Default Constructor. </summary>
            <summary> Constructor - This is for internal use by the API. </summary>
            <remarks> This is for internal use by the API. </remarks>
            <param name="pProxy"> Native pointer to underlying native object to wrap. </param>
        </member>
        <member name="T:Cnc.Tool.Interop.TlObject">
            <summary> Defines the TlObject tool class type. </summary>
        </member>
        <member name="M:Cnc.Tool.Interop.WindowMarshal(System.ValueType!System.IntPtr!System.Runtime.CompilerServices.IsBoxed)">
            <summary> Window marshal. </summary>
            <param name="pWindow"> If non-null, the window. </param>
            <returns> Null if it fails, else a pointer to a CWnd. </returns>
        </member>
        <member name="T:Cnc.Tool.Interop.TlTurnHolderType">
            <summary>	Values that represent turn holder types. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlTurnHolderType.MultiFunction">
            <summary> An enum constant representing the multi function option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlTurnHolderType.Parting">
            <summary> An enum constant representing the parting option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlTurnHolderType.FaceGrooving">
            <summary> An enum constant representing the face grooving option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlTurnHolderType.ExternalGrooving">
            <summary> An enum constant representing the external grooving option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlTurnHolderType.InternalGrooving">
            <summary> An enum constant representing the internal grooving option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlTurnHolderType.ExternalThreading">
            <summary> An enum constant representing the external threading option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlTurnHolderType.InternalThreading">
            <summary> An enum constant representing the internal threading option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlTurnHolderType.BoringBar">
            <summary> An enum constant representing the boring bar option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlTurnHolderType.GeneralTurning">
            <summary> An enum constant representing the general turning option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlActiveTurret">
            <summary> Defines the TlActiveTurret enumeration. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlActiveTurret.LowerFixedTurret">
            <summary> (Lower) Fixed tooling is active. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlActiveTurret.UpperFixedTurret">
            <summary> (Upper) Fixed tooling is active. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlActiveTurret.URTurret">
            <summary> Upper right turret is active. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlActiveTurret.LRTurret">
            <summary> Lower right turret is active. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlActiveTurret.ULTurret">
            <summary> Upper left turret is active. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlActiveTurret.LLTurret">
            <summary> Lower left turret is active. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlActiveTurret.NoActiveTurret">
            <summary> No active turret. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlSpindleSpeedUnits">
            <summary>	Values that represent spindle speed units. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlSpindleSpeedUnits.ConstantSurfaceSpeed">
            <summary> An enum constant representing the constant surface speed option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlSpindleSpeedUnits.RevolutionsPerMinute">
            <summary> An enum constant representing the revolutions per minute option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlFeedSpeedUnits">
            <summary> Defines the TlFeedSpeedUnits enumeration. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlFeedSpeedUnits.FeedPerMinute">
            <summary> The feed per minute. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlFeedSpeedUnits.FeedPerRevolution">
            <summary> The feed per revolution. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlToolAssemblyType">
            <summary>	Values that represent 3D Tool Assembly types. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolAssemblyType.Grooving">
            <summary> An enum constant representing the grooving option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolAssemblyType.Threading">
            <summary> An enum constant representing the threading option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolAssemblyType.TurningBoring">
            <summary> An enum constant representing the turning boring option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlToolAssemblyType.Undefined">
            <summary> An enum constant representing the undefined option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlCompensationPositionState">
            <summary>	Values that represent tool compensation positions states. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCompensationPositionState.Position4">
            <summary> An enum constant representing the position4 option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCompensationPositionState.Position3">
            <summary> An enum constant representing the position3 option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCompensationPositionState.Position2">
            <summary> An enum constant representing the position2 option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCompensationPositionState.Position1">
            <summary> An enum constant representing the position1 option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlCompensationType">
            <summary> Defines the TlCompensationType enumeration. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCompensationType.RadiusTip">
            <summary> Comp to tip of insert radius on C/L. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCompensationType.TwoPoint">
            <summary> Comp using tangencies of two tool circles. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCompensationType.SharpCorner">
            <summary> Comp to theoretical sharp corner of insert. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCompensationType.Center">
            <summary> Comp to center of insert radius. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlActiveSpindle">
            <summary> Defines the TlActiveSpindle enumeration. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlActiveSpindle.MaxHeads">
            <summary> Maximum heads. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlActiveSpindle.RHHead">
            <summary> Right spindle is active. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlActiveSpindle.LHHead">
            <summary> Left spindle is active. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlBoundaryGenerationMethod">
            <summary> Defined methods for calculating the profile from the 3D model. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlBoundaryGenerationMethod.SilhouetteFromPlanes">
            <summary> Cut 3D model between the two planes and then calculate profile from silhouette. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlBoundaryGenerationMethod.Slice">
            <summary> Cut 3D model on one side of plane and then calculate profile from silhouette. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlBoundaryGenerationMethod.Silhouette">
            <summary> Simple silhouette profile calculated WRT cutting plane normal. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlDefinition">
            <summary>	Values that represent the insert definition. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlDefinition.Iso">
            <summary> An enum constant representing the ISO option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlDefinition.Ansi">
            <summary> An enum constant representing the ANSI option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlCuttingSide">
            <summary>	Values that represent the handedness of a tool or tool item. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCuttingSide.Symmetric">
            <summary>  An enum constant representing the symmetric option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCuttingSide.LeftHanded">
            <summary> An enum constant representing the left option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCuttingSide.RightHanded">
            <summary> An enum constant representing the right option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlGraphicsFileFormat">
            <summary>	Values that represent tool graphics file formats. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGraphicsFileFormat.TransmitMemory">
            <summary> an enum constant representing the Parasolid Transmit memory format option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGraphicsFileFormat.Other">
            <summary> An enum constant representing a file format that isn't recognized by the other options. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGraphicsFileFormat.X_B">
            <summary> An enum constant representing the Parasolid Transmit file (X_B) option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGraphicsFileFormat.Stl">
            <summary> An enum constant representing the STL option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGraphicsFileFormat.Stp">
            <summary> An enum constant representing the STEP option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGraphicsFileFormat.Jpg">
            <summary> An enum constant representing the JPEG option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGraphicsFileFormat.Png">
            <summary> An enum constant representing the PNG option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlGraphicsFileFormat.Bmp">
            <summary> An enum constant representing the bitmap option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlRadiusType">
            <summary>	Enumeration for radius types </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlRadiusType.TL_RADIUS_FULL">
            <summary> An enum constant representing the TL_RADIUS_FULL option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlRadiusType.TL_RADIUS_CORNER">
            <summary> An enum constant representing the TL_RADIUS_CORNER option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlRadiusType.TL_RADIUS_NONE">
            <summary> An enum constant representing the TL_RADIUS_NONE option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlMaterialHardness">
            <summary>	Enumeration for different hardness scales. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlMaterialHardness.TL_HARDNESS_ROCKWELL_C">
            <summary> An enum constant representing the TL_HARDNESS_ROCKWELL_C option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlMaterialHardness.TL_HARDNESS_ROCKWELL_B">
            <summary> An enum constant representing the TL_HARDNESS_ROCKWELL_B option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlMaterialHardness.TL_HARDNESS_ROCKWELL_A">
            <summary> An enum constant representing the TL_HARDNESS_ROCKWELL_A option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlMaterialHardness.TL_HARDNESS_BRINELL">
            <summary> An enum constant representing the TL_HARDNESS_BRINELL option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlMaterialISOValue">
            <summary>	Enumeration representing the different material ISO Group Values. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlMaterialISOValue.TL_MATERIAL_ISO_H">
            <summary> An enum constant representing the TL_MATERIAL_ISO_S option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlMaterialISOValue.TL_MATERIAL_ISO_S">
            <summary> An enum constant representing the TL_MATERIAL_ISO_S option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlMaterialISOValue.TL_MATERIAL_ISO_N">
            <summary> An enum constant representing the TL_MATERIAL_ISO_N option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlMaterialISOValue.TL_MATERIAL_ISO_K">
            <summary> An enum constant representing the TL_MATERIAL_ISO_K option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlMaterialISOValue.TL_MATERIAL_ISO_M">
            <summary> An enum constant representing the TL_MATERIAL_ISO_M option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlMaterialISOValue.TL_MATERIAL_ISO_P">
            <summary> An enum constant representing the TL_MATERIAL_ISO_P option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlMaterialISOValue.TL_MATERIAL_ISO_UNDEFINED">
            <summary> An enum constant representing the TL_MATERIAL_ISO_UNDEFINED option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlThreadShape">
            <summary> Values that represent the different Thread Shapes. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlThreadShape.Undefined">
            <summary> An enum constant representing a generic undefined thread shape. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlThreadShape.NPT">
            <summary> An enum constant representing the National Pipe Thread shape.. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlThreadShape.Buttress_Push">
            <summary> An enum constant representing the Buttress Push shape.. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlThreadShape.Buttress_Pull">
            <summary> An enum constant representing the Buttress Pull shape.. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlThreadShape.Acme_Stub">
            <summary> An enum constant representing the acme stub shape. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlThreadShape.Acme">
            <summary> An enum constant representing the acme shape. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlThreadShape.Metric">
            <summary> An enum constant representing the metric shape. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlThreadShape.Unified">
            <summary> An enum constant representing the un shape. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlHelixType">
            <summary>	 Helix type for router tools </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHelixType.Compression">
            <summary> Compression Helix. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHelixType.Down">
            <summary> Down Helix. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHelixType.Up">
            <summary> Up Helix. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlHelixType.None">
            <summary> No Helix. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlSpindleDir">
            <summary>	 Enumeration for spindle directions. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlSpindleDir.Static">
            <summary> Static spindle.. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlSpindleDir.Counterclockwise">
            <summary> Counterclockwise spindle direction.. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlSpindleDir.Clockwise">
            <summary> Clockwise spindle direction.. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlShankType">
            <summary> Values that represent the different shank types on tools. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlShankType.Reduced">
            <summary> Reduced Shank. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlShankType.Tapered">
            <summary> Tapered Shank. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlShankType.Straight">
            <summary> Straight Shank. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlCornerType">
            <summary>	Enumeration that represent TlCornerType. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCornerType.TL_CORNER_ROUNDOVER">
            <summary> An enum constant representing the TL_CORNER_ROUNDOVER option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCornerType.TL_CORNER_FULL_RADIUS">
            <summary> An enum constant representing the TL_CORNER_FULL_RADIUS option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCornerType.TL_CORNER_RADIUS">
            <summary> An enum constant representing the TL_CORNER_RADIUS option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCornerType.TL_CORNER_CHAMFER">
            <summary> An enum constant representing the TL_CORNER_CHAMFER option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCornerType.TL_CORNER_NONE">
            <summary> An enum constant representing the TL_CORNER_NONE option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlLiveCenterTaperStyle">
            <summary> Values that represent the different Lathe Live Center taper styles. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlLiveCenterTaperStyle.BrownAndSharpe">
            <summary> An enum constant representing the brown and sharpe option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlLiveCenterTaperStyle.Jarno">
            <summary> An enum constant representing the jarno option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlLiveCenterTaperStyle.Morse">
            <summary> An enum constant representing the morse option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlLiveCenterTaperStyle.StraightShank">
            <summary> An enum constant representing the straight shank option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlLiveCenterPointStyle">
            <summary> Values that represent the different Lathe Live Center point styles. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlLiveCenterPointStyle.Interchangable">
            <summary> An enum constant representing the interchangable option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlLiveCenterPointStyle.CenterExtractor">
            <summary> An enum constant representing the center extractor option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlLiveCenterPointStyle.TracerPoint">
            <summary> An enum constant representing the tracer point option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlLiveCenterPointStyle.PipeNose">
            <summary> An enum constant representing the pipe nose option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlLiveCenterPointStyle.CarbideTipPoint">
            <summary> An enum constant representing the carbide tip point option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlLiveCenterPointStyle.LongPoint">
            <summary> An enum constant representing the long point option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlLiveCenterPointStyle.Bullnose">
            <summary> An enum constant representing the bullnose option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlLiveCenterPointStyle.StandardPoint">
            <summary> An enum constant representing the standard point option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlDisplayType">
            <summary>	 Enumeration representing the Tool Display Type </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlDisplayType.TL_CUSTOM_STORED">
            <summary> An enum constant representing the TL_CUSTOM_STORED option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlDisplayType.TL_CUSTOM_LEVEL">
            <summary> An enum constant representing the TL_CUSTOM_LEVEL option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlDisplayType.TL_CUSTOM_FILE">
            <summary> An enum constant representing the TL_CUSTOM_FILE option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlDisplayType.TL_AUTO_TOOL">
            <summary> An enum constant representing the TL_AUTO_TOOL option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.MCToolType">
            <summary> Values that represent the different tool types that Mastercam supports. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.OvalFormBarrelMill">
            <summary> Oval form Barrel Mill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.LensBarrelMill">
            <summary> Lens-Barrel Hybrid Barrel Mill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.LensFormBarrelMill">
            <summary> Lens Form Barrel Mill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.TaperFormBarrelMill">
            <summary> Taper Form Barrel Mill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.BarrelMill">
            <summary> Barrel Mill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.ThreadMill">
            <summary> Thread Mill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.FeedMill">
            <summary> Feed Mill (High speed mill). </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.BradpointDrill">
            <summary> Bradpoint Drill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.EngraveTool">
            <summary> Engraving Bit. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.BlockDrill">
            <summary> Block Drill Tool Definition Shell. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.BullNosedEndmill">
            <summary> Bull Nosed Endmill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.LollipopMill">
            <summary> Lollipop Mill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.TaperMill">
            <summary> Taper Mill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.DoveMill">
            <summary> Dove Tail Cutter. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.RadiusMill">
            <summary> Radius Mill (Roundover Tool). </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.SlotMill">
            <summary> Slot Mill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.FaceMill">
            <summary> Face Mill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.ChamferMill">
            <summary> Chamfer Mill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.BallNosedEndmill">
            <summary> Spherical Ball-Nosed Endmill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.FlatEndmill">
            <summary> Flat Endmill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.CounterSink">
            <summary> Counter Sink. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.CounterBore">
            <summary> Counter Bore. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.FineBoringTool">
            <summary> Boring Bar. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.Reamer">
            <summary> Reamer. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.LeftHandedTap">
            <summary> Left Handed Tap. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.RightHandedTap">
            <summary> Right Handed Tap. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.StandardDrill">
            <summary> Standard Drill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.SpotDrill">
            <summary> Spot Drill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.CenterDrill">
            <summary> Center Drill. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.MCToolType.Undefined">
            <summary> Undefined Tool. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.LowerConnectionType">
            <summary>	Enumeration representing the Holder Lower Connection Type. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.LowerConnectionType.EOC">
            <summary> An enum constant representing the EOC option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.LowerConnectionType.SYOZ">
            <summary> An enum constant representing the SYOZ option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.LowerConnectionType.DA">
            <summary> An enum constant representing the DA option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.LowerConnectionType.ER">
            <summary> An enum constant representing the ER option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.LowerConnectionType.CHUCK">
            <summary> An enum constant representing the CHUCK option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.LowerConnectionType.OD">
            <summary> An enum constant representing the OD option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.LowerConnectionType.ID">
            <summary> An enum constant representing the ID option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.UpperConnectionType">
            <summary>	Enumeration representing the Holder Upper Connection Type. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.UpperConnectionType.Generic">
            <summary> An enum constant representing the Generic option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.UpperConnectionType.KM">
            <summary> An enum constant representing the KM option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.UpperConnectionType.OD">
            <summary> An enum constant representing the OD option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.UpperConnectionType.CAPTO">
            <summary> An enum constant representing the CAPTO option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.UpperConnectionType.HSK">
            <summary> An enum constant representing the HSK option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.UpperConnectionType.ISO">
            <summary> An enum constant representing the ISO option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.UpperConnectionType.CAT">
            <summary> An enum constant representing the CAT option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.UpperConnectionType.DV">
            <summary> An enum constant representing the DV option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.UpperConnectionType.BT">
            <summary> An enum constant representing the BT option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlCutSource">
            <summary>	 Enumeration for source of cut params. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCutSource.TL_CUT_SOURCE_USER">
            <summary> An enum constant representing the TL_CUT_SOURCE_USER option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCutSource.TL_CUT_SOURCE_MANUFACTURER">
            <summary> An enum constant representing the TL_CUT_SOURCE_MANUFACTURER option. </summary>
        </member>
        <member name="T:Cnc.Tool.Interop.TlCutQuality">
            <summary>	Enumeration for cut quality. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCutQuality.TL_CUT_FINISH">
            <summary> An enum constant representing the TL_CUT_FINISH option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCutQuality.TL_CUT_SEMI_FINISH">
            <summary> An enum constant representing the TL_CUT_SEMI_FINISH option. </summary>
        </member>
        <member name="F:Cnc.Tool.Interop.TlCutQuality.TL_CUT_ROUGH">
            <summary> An enum constant representing the TL_CUT_ROUGH option. </summary>
        </member>
        <member name="T:TlToolAssemblyComponentViewProxy">
            <summary> A proxy wrapper for a Cnc::Tool::TlToolAssemblyComponentView shared pointer instance. </summary>
        </member>
        <member name="T:TlToolAssemblyLatheDefViewProxy">
            <summary> A proxy wrapper for a Cnc::Tool::TlToolAssemblyLatheDefView shared pointer instance. </summary>
        </member>
        <member name="T:TlObjectProxy">
            <summary> A macro that defines a native class instance proxy. </summary>
            <param name="TYPE"> The class type. </param>
            <summary> A proxy wrapper for a Cnc::Tool::TlObject shared pointer instance. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolLatheCustom.TlToolLatheCustomDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolLatheCustom.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolLatheCustom.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="T:Cnc.Tool.TlToolLathe.TlToolLatheDeserializationImpl">
            <summary>	Declaration of private deserialization implementation class. </summary>
            <summary>	Declaration of private deserialization implementation class. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.OnSetMainHolder">
            <summary>	Executes the set main holder action. </summary>
            <summary>	Executes the set main holder action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.OnSetMainInsert">
            <summary>	Executes the set main insert action. </summary>
            <summary>	Executes the set main insert action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.DoGetProfile">
            <summary> Executes the get profile operation. </summary>
            <returns> A TlProfileResult. </returns>
            <summary> Executes the get profile operation. </summary>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.DoIsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The other tool. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The other tool. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="F:Cnc.Tool.TlToolLathe.m_HolderPoints">
            <summary>	The holder points array. </summary>
            <summary>	The holder points array. </summary>
        </member>
        <member name="F:Cnc.Tool.TlToolLathe.m_InsertPoints">
            <summary>	The insert points array. </summary>
            <summary>	The insert points array. </summary>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlToolLathe.#ctor">
            <summary>Default constructor.  Creates an empty tool.</summary>
            <summary>Default constructor.  Creates an empty tool.</summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLathe.TlHolderLatheDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlHolderLathe.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlHolderLathe.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="T:Cnc.Tool.TlInsert.TlInsertDeserializationImpl">
            <summary>	A deserialization implementation. </summary>
            <summary>	A deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlInsert.DoGetDefaultCuttingSide">
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
            <summary>	Executes the get default cutting side operation. </summary>
            <returns>	A TlCuttingSide. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsert.DoIsCuttingItem">
            <summary>	Executes the is cutting item operation. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Executes the is cutting item operation. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsert.DoConvertUnits(System.Boolean)">
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlInsert.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlInsert.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlInsert.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlInsert.GetDefaultCuttingSide">
            <summary>	Gets default cutting side. </summary>
            <returns>	The default cutting side. </returns>
            <summary>	Gets default cutting side. </summary>
            <returns>	The default cutting side. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolGrade.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlToolGrade.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.DoIsCuttingItem">
            <summary>	Executes the is cutting item operation. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
            <summary>	Executes the is cutting item operation. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.DoIsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The other tool. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Executes the is similar operation. </summary>
            <param name="spOther">		  The other tool. </param>
            <param name="machineGroupId"> Identifier for the machine group. </param>
            <param name="compareMode">    The compare mode. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.IsSimilar(std.shared_ptr&lt;Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary> Determines if the other tool is similar enough to be considered a duplicate. </summary>
            <param name="other">		  The other. </param>
            <param name="machineGroupId"> (Optional) identifier for the machine group to aid in the comparison. </param>
            <param name="compareMode">    (Optional) the compare mode. </param>
            <returns> true if similar, false if not. </returns>
            <summary> Determines if the other tool is similar enough to be considered a duplicate. </summary>
            <param name="other">		  The other. </param>
            <param name="machineGroupId"> (Optional) identifier for the machine group to aid in the comparison. </param>
            <param name="compareMode">    (Optional) the compare mode. </param>
            <returns> true if similar, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.SetOpToolInfo(op_tool_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets operation tool information. </summary>
            <param name="info"> The information. </param>
            <summary> Sets operation tool information. </summary>
            <param name="info"> The information. </param>
        </member>
        <member name="M:Cnc.Tool.TlTool.GetOpToolInfo">
            <summary> Gets the operation tool information. </summary>
            <returns> The operation tool information. </returns>
            <summary> Gets the operation tool information. </summary>
            <returns> The operation tool information. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.op_Assign(Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> A deep copy of this object. </returns>
            <summary> Copy operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> A deep copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlTool.#ctor(Cnc.Tool.TlTool!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="x"> A deep copy of this object </param>
            <summary> Copy constructor. </summary>
            <param name="x"> A deep copy of this object </param>
        </member>
        <member name="M:Cnc.Tool.TlAccessoryCollection.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlAccessoryCollection.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAccessoryCollection.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAccessoryCollection.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlAccessory.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAccessory.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAccessory.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyItem.TlAssemblyItemDeserializationImpl">
            <summary>	A tool assembly item deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoIsCuttingItem">
            <summary>	Executes the is cutting item operation. </summary>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoOnSetStoredProfile">
            <summary> Executes the set stored profile action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoGetProfile">
            <summary> Executes the get profile operation. </summary>
            <returns> A TlProfileResult. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoConvertUnits(System.Boolean)">
            <summary> Executes the convert units operation. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.IsCuttingItem">
            <summary>	Query if this tool assembly item is a cutting item. </summary>
            <returns>	True if this assembly item is a cutting item, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.GetProfile">
            <summary> Generates the profile of this item. If the item is a parametric item, a parametric profile will be
		  generated.  Otherwise, the item's stored custom profile will be retrieved in the form of a
		  TlProfileResult instance. </summary>
            <returns> The profile result. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.RemoveOpGroup(Cnc.Tool.TlOpGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Removes the operation group described by opGroup. </summary>
            <param name="opGroup">  Group the operation belongs to. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.AddOpGroup(Cnc.Tool.TlOpGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>   Adds an operation group. </summary>
            <param name="opGroup">  Group the operation belongs to. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.SetStoredProfile(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the stored profile of the item using the given profile.  The passed in profile is assumed to be in the
specified units, as it will be scaled as necessary before being set as the stored profile.
</summary>
            <param name="profile">	  			The profile in system units to be set as the stored profile of this item. </param>
            <param name="profileIsInMetric">	True if the profile passed in is in Metric units. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.SetStoredProfile(std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Sets the stored profile of the item using the given profile.  The passed in profile is assumed to be in
		  the specified units, as it will be scaled as necessary before being set as the stored profile. </summary>
            <param name="spProfile">		 The profile in system units to be set as the stored profile of this item. </param>
            <param name="profileIsInMetric"> True if the profile passed in is in Metric units. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.GetStoredProfileCPtr(System.Boolean)">
            <summary>	Gets a scaled version of the stored internal profile in the desired units. </summary>
            <param name="getProfileInMetric">	true to get profile in metric. </param>
            <returns>	The stored profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.GetStoredProfile(System.Boolean)">
            <summary>	Gets a scaled version of the stored internal profile in the desired units. </summary>
            <param name="getProfileInMetric">	true to get profile in metric. </param>
            <returns>	The stored profile. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.GetOpGroups">
            <summary>   Gets the operation groups. </summary>
            <returns>   The operation groups. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.op_Assign(Cnc.Tool.TlAssemblyItem*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A reference to this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.op_Assign(Cnc.Tool.TlAssemblyItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment operator. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	A reference to this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.#ctor(Cnc.Tool.TlAssemblyItem*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.#ctor(Cnc.Tool.TlAssemblyItem!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Copy constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlAssemblyItem.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:Cnc.Tool.TlConnectionMap.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlConnectionMap.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnectionMap.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlConnectionMap.Clear">
            <summary>	Clears this object to its blank/initial state. </summary>
        </member>
        <member name="M:Cnc.Tool.TlConnectionMap.Delete(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Deletes the connection described by ID from the map. </summary>
            <param name="id">	The Identifier of the connection to delete. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnectionMap.GetConnectionPtr(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Gets a const pointer to the connection described by id. </summary>
            <param name="id">	The identifier. </param>
            <returns>	Null if it fails, else the connection pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnectionMap.AddOrUpdate(Cnc.Tool.TlConnection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the connection described by value to the map or updates the existing item if a connection with the
		  same identifier already exists. </summary>
            <param name="value"> The value to add or update. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnectionMap.IsEmpty">
            <summary>	Query if this object is empty. </summary>
            <returns>	True if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnectionMap.Size">
            <summary>	Gets the size. </summary>
            <returns>	The size. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnectionMap.end">
            <summary>	Gets the end iterator. </summary>
            <returns>	The end iterator. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnectionMap.begin">
            <summary>	Gets the begin iterator. </summary>
            <returns>	The begin iterator. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnectionMap.SetItemPtr(Cnc.Tool.TlAssemblyItem*)">
            <summary>	Sets the item pointer. </summary>
            <param name="pItem">	The item . </param>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFileCollection.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of old identifiers to new identifiers. </param>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFileCollection.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFileCollection.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFile.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFile.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFile.GetFileDataSize">
            <summary>   Gets the file data binary size. </summary>
            <returns>   The file data binary size. </returns>
            <summary>   Gets the file data binary size. </summary>
            <returns>   The file data binary size. </returns>
        </member>
        <member name="M:Cnc.Tool.TlGraphicsFile.SetFileData(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets the file data using the path to the Parasolid transmit (.x_b) file. </summary>
            <param name="filePath"> Full pathname of the file. Must be a Parasolid transmit (.x_b) file. </param>
            <summary> Sets the file data using the path to the Parasolid transmit (.x_b) file. </summary>
            <param name="filePath"> Full pathname of the file. Must be a Parasolid transmit (.x_b) file. </param>
        </member>
        <member name="T:Cnc.Tool.TlConnection.TlConnectionDeserializationImpl">
            <summary>	A connection deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlConnection.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the reset IDs operation. </summary>
            <param name="changedIDs">	The map of old IDs to new IDs. </param>
        </member>
        <member name="M:Cnc.Tool.TlConnection.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the is equal operation. </summary>
            <param name="rhs">	The right hand side. </param>
            <returns>	True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnection.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Serialize this object to the given stream. </summary>
            <param name="ar">	The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlConnection.ConvertUnits(System.Boolean)">
            <summary> Converts the object to the specified units. </summary>
            <param name="toMetric"> True to convert to metric, false to convert to inch. </param>
        </member>
        <member name="M:Cnc.Tool.TlConnection.SetItemPtr(Cnc.Tool.TlAssemblyItem*)">
            <summary>	Sets the item pointer. </summary>
            <param name="pItem">	The item . </param>
        </member>
        <member name="M:Cnc.Tool.TlConnection.GetItemPtr">
            <summary>	Gets the item pointer. </summary>
            <returns>	The item pointer. </returns>
        </member>
        <member name="M:Cnc.Tool.TlConnection.GetIsMetric">
            <summary>	Gets a value indicating whether the scalar values in this connection are metric. </summary>
            <returns>	True if metric, false if inch. </returns>
        </member>
        <member name="M:Cnc.Tool.TlLocator.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlLocator.SetTranslation(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Sets the translation portion of the locator, scaling the input value if necessary. </summary>
            <param name="value">			The value. </param>
            <param name="valueIsMetric">	True if the value is in metric. </param>
        </member>
        <member name="M:Cnc.Tool.TlLocator.SetTranslation(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets the translation portion of the locator assuming that the value is in system units. </summary>
            <param name="value">	The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlLocator.GetTranslation(System.Boolean)">
            <summary>	Gets the translation portion of the locator in the specified units. </summary>
            <param name="inMetric">	True to get the translation portion in metric. </param>
            <returns>	The translation portion of the locator. </returns>
        </member>
        <member name="M:Cnc.Tool.TlLocator.GetTranslation">
            <summary>	Gets the translation portion of the locator in system units. </summary>
            <returns>	The translation portion of the locator. </returns>
        </member>
        <member name="M:Cnc.Tool.TlLocator.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_PrimeTurn">
            <summary>   The prime turn tool id. </summary>
            <summary>   The prime turn tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_US_Union_Tool">
            <summary>   The us union tool id. </summary>
            <summary>   The us union tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_HPI">
            <summary>   The hpi id. </summary>
            <summary>   The hpi id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_MariTool">
            <summary>   The mari tool id. </summary>
            <summary>   The mari tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Lyndex_Nikken">
            <summary>   The lyndex nikken id. </summary>
            <summary>   The lyndex nikken id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_YG_1">
            <summary>   The yg id. </summary>
            <summary>   The yg id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Fraisa">
            <summary>   The fraisa id. </summary>
            <summary>   The fraisa id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Redline">
            <summary>   The redline id. </summary>
            <summary>   The redline id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Micro100">
            <summary>   The micro 100 id. </summary>
            <summary>   The micro 100 id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Harvey_Tool">
            <summary>   The harvey tool id. </summary>
            <summary>   The harvey tool id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Garr">
            <summary>   The garr id. </summary>
            <summary>   The garr id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Everede">
            <summary>   The everede id. </summary>
            <summary>   The everede id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_MA_Ford">
            <summary>   The ma ford id. </summary>
            <summary>   The ma ford id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Emuge">
            <summary>   The emuge id. </summary>
            <summary>   The emuge id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_OSG">
            <summary>   The osg id. </summary>
            <summary>   The osg id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Mitsubishi">
            <summary>   The mitsubishi id. </summary>
            <summary>   The mitsubishi id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Helical_Solutions">
            <summary>   The Helical ID. </summary>
            <summary>   The Helical ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Holex_Hoffman_Group">
            <summary>   The Holex - Hoffman Group ID. </summary>
            <summary>   The Holex - Hoffman Group ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Garant_Hoffman_Group">
            <summary>   The Garant - Hoffman Group ID. </summary>
            <summary>   The Garant - Hoffman Group ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Sumitomo">
            <summary>   The Sumitomo ID. </summary>
            <summary>   The Sumitomo ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Onsrud">
            <summary>   The Onsrud ID. </summary>
            <summary>   The Onsrud ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Harvey">
            <summary>   The Harvey ID. </summary>
            <summary>   The Harvey ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Greenleaf">
            <summary>   The Greenleaf ID. </summary>
            <summary>   The Greenleaf ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Vortex">
            <summary>   The Vortex ID. </summary>
            <summary>   The Vortex ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Widia_Valenite">
            <summary>   The Widia - Valenite ID. </summary>
            <summary>   The Widia - Valenite ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Widia_Hanita">
            <summary>   The Widia-Hanita ID. </summary>
            <summary>   The Widia-Hanita ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Seco">
            <summary>   The Seco ID. </summary>
            <summary>   The Seco ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Dapra">
            <summary>   The Dapra ID. </summary>
            <summary>   The Dapra ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Duramill">
            <summary>   The Duramill ID. </summary>
            <summary>   The Duramill ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Niagara">
            <summary>   The Niagara ID. </summary>
            <summary>   The Niagara ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Dataflute">
            <summary>   The Dataflute ID. </summary>
            <summary>   The Dataflute ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_MillStar">
            <summary>   The Millstar ID. </summary>
            <summary>   The Millstar ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Intersoll">
            <summary>   The Intersoll ID. </summary>
            <summary>   The Intersoll ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Robbjack">
            <summary>   The Robbjack ID. </summary>
            <summary>   The Robbjack ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Sandvik">
            <summary> The Sandvik ID. </summary>
            <summary> The Sandvik ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Kennametal">
            <summary>   The Kennemetal ID. </summary>
            <summary>   The Kennemetal ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Command_Tool">
            <summary>   The Command Tool ID. </summary>
            <summary>   The Command Tool ID. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Mastercam">
            <summary>   The mastercam id. </summary>
            <summary>   The mastercam id. </summary>
        </member>
        <member name="F:Cnc.Tool.TlManufacturer.s_Iscar">
            <summary>   The iscar id. </summary>
            <summary>   The iscar id. </summary>
        </member>
        <member name="M:Cnc.Tool.TlManufacturer.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="F:Cnc.Tool.TlProfile.linearizationConstant">
            <summary> The linearization constant. </summary>
            <summary> The linearization constant. </summary>
        </member>
        <member name="F:Cnc.Tool.TlProfile.m_Profile">
            <summary> The profile segments in order from bottom up. </summary>
            <summary> The profile segments in order from bottom up. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfile.TlProfileDeserializationImpl">
            <summary>	A TlProfile deserialization implementation. </summary>
            <summary>	A TlProfile deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfile.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the operation to reset identifiers. </summary>
            <param name="changedIDs">	The changed identifiers. </param>
            <summary>	Executes the operation to reset identifiers. </summary>
            <param name="changedIDs">	The changed identifiers. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitSegmentAtYValueIntoProfiles(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Splits segment into profiles. </summary>
            <param name="spCurrentSegment">   The sp segment. </param>
            <param name="spLowerProfile">	  The sp lower profile. </param>
            <param name="spLowerLastSegment"> The sp lower last segment. </param>
            <param name="spUpperProfile">	  The sp upper profile. </param>
            <param name="spUpperLastSegment"> The sp upper last segment. </param>
            <param name="yValue">			  The value. </param>
            <param name="tol">				  The tolerance. </param>
            <summary> Splits segment into profiles. </summary>
            <param name="spCurrentSegment">   The sp segment. </param>
            <param name="spLowerProfile">	  The sp lower profile. </param>
            <param name="spLowerLastSegment"> The sp lower last segment. </param>
            <param name="spUpperProfile">	  The sp upper profile. </param>
            <param name="spUpperLastSegment"> The sp upper last segment. </param>
            <param name="yValue">			  The value. </param>
            <param name="tol">				  The tolerance. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitSegmentAtXValueIntoProfiles(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Splits segment into profiles. </summary>
            <param name="spCurrentSegment">   The sp segment. </param>
            <param name="spLowerProfile">	  The sp lower profile. </param>
            <param name="spLowerLastSegment"> The sp lower last segment. </param>
            <param name="spUpperProfile">	  The sp upper profile. </param>
            <param name="spUpperLastSegment"> The sp upper last segment. </param>
            <param name="xValue">			  The value. </param>
            <param name="tol">				  The tolerance. </param>
            <summary> Splits segment into profiles. </summary>
            <param name="spCurrentSegment">   The sp segment. </param>
            <param name="spLowerProfile">	  The sp lower profile. </param>
            <param name="spLowerLastSegment"> The sp lower last segment. </param>
            <param name="spUpperProfile">	  The sp upper profile. </param>
            <param name="spUpperLastSegment"> The sp upper last segment. </param>
            <param name="xValue">			  The value. </param>
            <param name="tol">				  The tolerance. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AddSegmentToProfile(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Adds a segment to profile. </summary>
            <param name="spSegment">	 The sp segment. </param>
            <param name="spProfile">	 The sp profile. </param>
            <param name="spLastSegment"> The sp last segment. </param>
            <param name="tol">			 The tolerance. </param>
            <summary> Adds a segment to profile. </summary>
            <param name="spSegment">	 The sp segment. </param>
            <param name="spProfile">	 The sp profile. </param>
            <param name="spLastSegment"> The sp last segment. </param>
            <param name="tol">			 The tolerance. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentAnArcCrossing360(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Query if 'segment' is segment an arc crossing 360. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing 270, false if not. </returns>
            <summary> Query if 'segment' is segment an arc crossing 360. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing 270, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentAnArcCrossing270(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Query if 'segment' is segment an arc crossing 270. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing 270, false if not. </returns>
            <summary> Query if 'segment' is segment an arc crossing 270. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing 270, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentAnArcCrossing180(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Query if 'segment' is segment an arc crossing a specified angle. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing angle, false if not. </returns>
            <summary> Query if 'segment' is segment an arc crossing a specified angle. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing angle, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentAnArcCrossing90(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Query if 'segment' is segment an arc crossing a specified angle. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing angle, false if not. </returns>
            <summary> Query if 'segment' is segment an arc crossing a specified angle. </summary>
            <param name="segment"> The segment. </param>
            <returns> true if segment an arc crossing angle, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentCompletelyBelowXValue(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Segment completely below x coordinate value. </summary>
            <param name="spSegment"> The sp segment. </param>
            <param name="xValue">    The value. </param>
            <param name="tol">		 The tolerance. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Segment completely below x coordinate value. </summary>
            <param name="spSegment"> The sp segment. </param>
            <param name="xValue">    The value. </param>
            <param name="tol">		 The tolerance. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsSegmentCompletelyBelowYValue(std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
            <summary> Segment completely below y coordinate value. </summary>
            <param name="spSegment"> The sp segment. </param>
            <param name="yValue">    The value. </param>
            <param name="tol">		 The tolerance. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Segment completely below y coordinate value. </summary>
            <param name="spSegment"> The sp segment. </param>
            <param name="yValue">    The value. </param>
            <param name="tol">		 The tolerance. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitArcAtAngle(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Splits arc at angle. </summary>
            <param name="segment"> The segment. </param>
            <param name="angle">   The angle. </param>
            <returns> Results of the arc split. </returns>
            <summary> Splits arc at angle. </summary>
            <param name="segment"> The segment. </param>
            <param name="angle">   The angle. </param>
            <returns> Results of the arc split. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.PointsEqualTol(std.array&lt;System.Double,0x02&gt;,std.array&lt;System.Double,0x02&gt;,System.Double)">
            <summary> Comparison tool for points. </summary>
            <param name="value1"> The first value. </param>
            <param name="value2"> The second value. </param>
            <param name="tol">    The tolerance. </param>
            <returns> true if the two points are equal within system tolerance. </returns>
            <summary> Comparison tool for points. </summary>
            <param name="value1"> The first value. </param>
            <param name="value2"> The second value. </param>
            <param name="tol">    The tolerance. </param>
            <returns> true if the two points are equal within system tolerance. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.ScaleToUnits(System.Boolean,System.Boolean)">
            <summary>	Scales the current profile from Inch to Metric or vise versa if needed. </summary>
            <param name="currentUnitsMetric">	 	True if the profile is currently in metric units. </param>
            <param name="destinationUnitsMetric">	True to scale the profile to metric units if needed. </param>
            <summary>	Scales the current profile from Inch to Metric or vise versa if needed. </summary>
            <param name="currentUnitsMetric">	 	True if the profile is currently in metric units. </param>
            <param name="destinationUnitsMetric">	True to scale the profile to metric units if needed. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.Transform(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlProfileSegment.TransformationType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Transforms the current profile by the given transformation. </summary>
            <param name="transformation">	  The transformation. </param>
            <param name="transformationType"> Type of the transformation. </param>
            <summary> Transforms the current profile by the given transformation. </summary>
            <param name="transformation">	  The transformation. </param>
            <param name="transformationType"> Type of the transformation. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.Scale(System.Double)">
            <summary> Scales the current profile. </summary>
            <param name="scaleFactor"> The scale factor. </param>
            <summary> Scales the current profile. </summary>
            <param name="scaleFactor"> The scale factor. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TrimOverhang">
            <summary> Trims any overhang at the end of the profile. This essentially removes horizontal overlapping segments at
		  the end of the profile and replaces it with a single trimmed horizontal line segment. </summary>
            <summary> Trims any overhang at the end of the profile. This essentially removes horizontal overlapping segments at
		  the end of the profile and replaces it with a single trimmed horizontal line segment. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TrimOrExtendToYValue(System.Double)">
            <summary> Trim or extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
            <summary> Trim or extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.ExtendToYValue(System.Double)">
            <summary> Extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
            <summary> Extend to y coordinate value. </summary>
            <param name="yValue"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TrimToYValue(System.Double,System.Boolean)">
            <summary> Trim to y coordinate value. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
            <summary> Trim to y coordinate value. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TrimToXValue(System.Double,System.Boolean)">
            <summary> Trim to x coordinate value. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
            <summary> Trim to x coordinate value. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerPortion"> true to keep lower portion, false to keep the upper portion. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitAtYValue(System.Double,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Splits the current profile at the specified y coordinate value. </summary>
            <param name="yValue">		  The value. </param>
            <param name="spLowerPortion"> The lower portion profile result. </param>
            <param name="spUpperPortion"> The upper portion profile result. </param>
            <summary> Splits the current profile at the specified y coordinate value. </summary>
            <param name="yValue">		  The value. </param>
            <param name="spLowerPortion"> The lower portion profile result. </param>
            <param name="spUpperPortion"> The upper portion profile result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SplitAtXValue(System.Double,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Cnc.Tool.TlProfile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Splits the current profile at the specified x coordinate value. </summary>
            <param name="xValue">		  The value. </param>
            <param name="spLowerPortion"> The lower portion profile result. </param>
            <param name="spUpperPortion"> The upper portion profile result. </param>
            <summary> Splits the current profile at the specified x coordinate value. </summary>
            <param name="xValue">		  The value. </param>
            <param name="spLowerPortion"> The lower portion profile result. </param>
            <param name="spUpperPortion"> The upper portion profile result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TranslateToYZero">
            <summary> Translates the entire profile, so that the lowest point of the profile is at Y=0. </summary>
            <remarks> Looks at the endpoints of each segment to determine the amount to translate. </remarks>
            <summary> Translates the entire profile, so that the lowest point of the profile is at Y=0. </summary>
            <remarks> Looks at the endpoints of each segment to determine the amount to translate. </remarks>
        </member>
        <member name="M:Cnc.Tool.TlProfile.TranslateToYValue(System.Double)">
            <summary> Translates the entire profile so that the lowest point of the profile is at Y = 'value'. </summary>
            <param name="value"> The value. </param>
            <summary> Translates the entire profile so that the lowest point of the profile is at Y = 'value'. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AddHorizontalConnectors">
            <summary> Adds horizontal connectors to the start and endpoint of the profile. </summary>
            <remarks> If the point is already at y=0, then no connector is added/needed. </remarks>
            <summary> Adds horizontal connectors to the start and endpoint of the profile. </summary>
            <remarks> If the point is already at y=0, then no connector is added/needed. </remarks>
        </member>
        <member name="M:Cnc.Tool.TlProfile.Linearize(std.optional&lt;System.Double&gt;)">
            <summary> Linearizes this profile into strictly line segments. </summary>
            <param name="chordTol"> (Optional) The chordal deviation tolerance. </param>
            <summary> Linearizes this profile into strictly line segments. </summary>
            <param name="chordTol"> (Optional) The chordal deviation tolerance. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SortProfile">
            <summary> Sorts the profile. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Sorts the profile. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.CleanupZeroLengthSegments">
            <summary>	Cleanup zero length segments. </summary>
            <summary>	Cleanup zero length segments. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AnyLineSegmentsOnYAxis">
            <summary> Determines if we have any line segments on the Y axis. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Determines if we have any line segments on the Y axis. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.ValidateProfileQuadrant">
            <summary> Validates the profile quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Validates the profile quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SwapSegments(System.Int32,System.Int32,System.Boolean)">
            <summary> Swap the segments at index1 and index2. </summary>
            <param name="index1">	  The first index. </param>
            <param name="index2">	  The second index. </param>
            <param name="reverseDir"> (Optional) true to reverse direction of the resulting index1 segment. </param>
            <returns> true if it succeeds, false if it fails. </returns>
            <summary> Swap the segments at index1 and index2. </summary>
            <param name="index1">	  The first index. </param>
            <param name="index2">	  The second index. </param>
            <param name="reverseDir"> (Optional) true to reverse direction of the resulting index1 segment. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AddToTopOfProfile(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a segment to the top of profile. The rest of the profile remains unchanged. </summary>
            <remarks> The passed in segment should have coordinates relative to the profile we're adding it to. </remarks>
            <param name="segment"> The segment. </param>
            <summary> Adds a segment to the top of profile. The rest of the profile remains unchanged. </summary>
            <remarks> The passed in segment should have coordinates relative to the profile we're adding it to. </remarks>
            <param name="segment"> The segment. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.AddToBottomOfProfile(Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	adds a segment to the bottom of a profile, and pushes everything else up to accomadate it. </summary>
            <param name="segment">	New segment to add - should be constructed from origin.  Will be translated down if profile is below x axis</param>
            <summary>	adds a segment to the bottom of a profile, and pushes everything else up to accomadate it. </summary>
            <param name="segment">	New segment to add - should be constructed from origin.  Will be translated down if profile is below x axis</param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetProfileSegmentsCount(System.Boolean)">
            <summary> Gets the number of profile segments with height. </summary>
            <param name="onlyWithHeight"> (Optional) true to only get the segments with height. </param>
            <returns> The number of profile segments with height. </returns>
            <summary> Gets the number of profile segments with height. </summary>
            <param name="onlyWithHeight"> (Optional) true to only get the segments with height. </param>
            <returns> The number of profile segments with height. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetProfileSegments">
            <summary> Provides const reference to profile segment array. </summary>
            <returns> const reference to profile segments array. </returns>
            <summary> Provides const reference to profile segment array. </summary>
            <returns> const reference to profile segments array. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetProfileSegmentsTopDown(System.Boolean)">
            <summary> Gets all the profile segments as a const vector of const TlProfileSegmentPtr objects (does not clone segments!). </summary>
            <remarks> This function returns the profile segments in reverse order to mimick the TlHolderSegments. </remarks>
            <param name="onlyWithHeight"> (Optional) true to only get the segments with height. </param>
            <returns> The profile from the top down. </returns>
            <summary> Gets all the profile segments as a const vector of const TlProfileSegmentPtr objects (does not clone segments!). </summary>
            <remarks> This function returns the profile segments in reverse order to mimick the TlHolderSegments. </remarks>
            <param name="onlyWithHeight"> (Optional) true to only get the segments with height. </param>
            <returns> The profile from the top down. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetSegmentAt(System.Int32)">
            <summary> Gets the segment at the specified index. </summary>
            <param name="index"> Zero-based index of the segments. </param>
            <returns> The segment. </returns>
            <summary> Gets the segment at the specified index. </summary>
            <param name="index"> Zero-based index of the segments. </param>
            <returns> The segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.ClearProfile">
            <summary> Clears the profile. </summary>
            <summary> Clears the profile. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfile.SetCalcTol(System.Double)">
            <summary> Sets calculate tolerance. </summary>
            <param name="value"> The value. </param>
            <summary> Sets calculate tolerance. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetCalcTol">
            <summary> Gets calculate tolerance. </summary>
            <returns> The calculate tolerance. </returns>
            <summary> Gets calculate tolerance. </summary>
            <returns> The calculate tolerance. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetSegmentCount">
            <summary> Gets segment count. </summary>
            <returns> The segment count. </returns>
            <summary> Gets segment count. </summary>
            <returns> The segment count. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.MaxY">
            <summary>	Maximum y coordinate of this profile. </summary>
            <returns>	The maximum y coordinate. </returns>
            <summary>	Maximum y coordinate of this profile. </summary>
            <returns>	The maximum y coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.MinY">
            <summary>	Minimum y coordinate of this profile. </summary>
            <returns>	the minimum y coordinate. </returns>
            <summary>	Minimum y coordinate of this profile. </summary>
            <returns>	the minimum y coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.MaxX">
            <summary>	Maximum x coordinate of this profile. </summary>
            <returns>	The maximum X coordinate. </returns>
            <summary>	Maximum x coordinate of this profile. </summary>
            <returns>	The maximum X coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.MinX">
            <summary>	Minimum x coordinate of this profile. </summary>
            <returns>	the minimum X coordinate. </returns>
            <summary>	Minimum x coordinate of this profile. </summary>
            <returns>	the minimum X coordinate. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetLength">
            <summary>	True length of profile in Y, including section below X axis </summary>
            <returns>	said length </returns>
            <summary>	True length of profile in Y, including section below X axis </summary>
            <returns>	said length </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.GetHeight">
            <summary>	Height of profile at top as measured from X axis </summary>
            <returns>	said height </returns>
            <summary>	Height of profile at top as measured from X axis </summary>
            <returns>	said height </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsEmpty">
            <summary>	Checks to see if this profile is empty </summary>
            <returns>	true if empty, else false </returns>
            <summary>	Checks to see if this profile is empty </summary>
            <returns>	true if empty, else false </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.IsClosedLoop">
            <summary> Query if this object is a closed loop profile. </summary>
            <remarks> Does not need segments to be in any specific direction or order. </remarks>
            <returns> true if closed loop, false if not. </returns>
            <summary> Query if this object is a closed loop profile. </summary>
            <remarks> Does not need segments to be in any specific direction or order. </remarks>
            <returns> true if closed loop, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.op_Implicit~std.vector&lt;prof_ent,std.allocator&lt;prof_ent&gt;&gt;">
            <summary> Cast that converts the given  to a vector. </summary>
            <typeparam name="prof_ent"> Type of the prof ent. </typeparam>
            <returns> The result of the operation. </returns>
            <summary> Cast that converts the given  to a vector. </summary>
            <typeparam name="prof_ent"> Type of the prof ent. </typeparam>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.op_Implicit~std.vector&lt;TlProfileEnt,std.allocator&lt;TlProfileEnt&gt;&gt;">
            <summary> Cast that converts the given  to a vector. </summary>
            <typeparam name="TlProfileEnt"> Type of the tl profile ent. </typeparam>
            <returns> The result of the operation. </returns>
            <summary> Cast that converts the given  to a vector. </summary>
            <typeparam name="TlProfileEnt"> Type of the tl profile ent. </typeparam>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.op_Assign(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="rhs"> The right hand side of the assignment operation. </param>
            <returns> A deep copy of this object. </returns>
            <summary> Assignment operator. </summary>
            <param name="rhs"> The right hand side of the assignment operation. </param>
            <returns> A deep copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfile.#ctor(Cnc.Tool.TlProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy Constructor. </summary>
            <param name="profile"> The profile. </param>
            <summary> Copy Constructor. </summary>
            <param name="profile"> The profile. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.#ctor(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlProfileSegment!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor to create a TlProfile from a vector of profile segments. </summary>
            <param name="profile"> The profile. </param>
            <summary> Constructor to create a TlProfile from a vector of profile segments. </summary>
            <param name="profile"> The profile. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.#ctor(std.vector&lt;std.shared_ptr&lt;Cnc.Tool.TlProfileSegment&gt;,std.allocator&lt;std.shared_ptr&lt;Cnc.Tool.TlProfileSegment&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor to create a TlProfile from a vector of profile segments. </summary>
            <param name="profile"> The profile. </param>
            <summary> Constructor to create a TlProfile from a vector of profile segments. </summary>
            <param name="profile"> The profile. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfile.#ctor">
            <summary> Default constructor.  Creates an empty profile. </summary>
            <summary> Default constructor.  Creates an empty profile. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.DoTrimAtXValue(System.Double,System.Boolean)">
            <summary> Executes the trim at x coordinate value operation. </summary>
            <param name="xValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.DoTrimAtYValue(System.Double,System.Boolean)">
            <summary> Executes the trim at y coordinate value operation. </summary>
            <param name="yValue">		    The value. </param>
            <param name="keepLowerSegment"> true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.DoIsCoincidentWithYAxis">
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.SetToOldSegment(TlProfileEnt*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.SetToOldSegment(prof_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets to old segment. </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetScaledSegment(System.Double)">
            <summary> Gets scaled segment. </summary>
            <param name="scaleFactor"> The scale factor. </param>
            <returns> The scaled segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Scale(System.Double)">
            <summary> Scales this segment. </summary>
            <param name="scaleFactor"> The scale factor. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetRotatedSegment(System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets rotated segment. </summary>
            <param name="radians">    The radians. </param>
            <param name="aboutPoint"> The about point. </param>
            <returns> The rotated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetRotatedSegment(System.Double)">
            <summary> Gets rotated segment. </summary>
            <param name="radians"> The radians. </param>
            <returns> The rotated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Rotate(System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Rotates this object about the passed in point. </summary>
            <param name="radians">    The radians. </param>
            <param name="aboutPoint"> The about point. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Rotate(System.Double)">
            <summary> Rotates this object. </summary>
            <param name="radians"> The radians. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetMirroredSegment(System.Boolean)">
            <summary> Gets mirrored segment. </summary>
            <param name="aboutYAxis"> true to about y coordinate axis. </param>
            <returns> The mirrored segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Mirror(System.Boolean)">
            <summary> Mirrors. </summary>
            <param name="aboutYAxis"> true to mirror about the Y axis, false to mirror about the X axis. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetTranslatedSegment(System.Double,System.Double)">
            <summary> Gets translated segment. </summary>
            <param name="deltaX"> The delta x coordinate. </param>
            <param name="deltaY"> The delta y coordinate. </param>
            <returns> The translated segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Translate(System.Double,System.Double)">
            <summary> Translates the segment in 2space. </summary>
            <param name="deltaX"> The change to make in X. </param>
            <param name="deltaY"> The change to make in Y. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetTransformedSegment(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlProfileSegment.TransformationType)">
            <summary> Gets transformed segment. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
            <returns> The transformed segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Transform(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlProfileSegment.TransformationType)">
            <summary> Transforms the current segment by the given transformation. </summary>
            <param name="transformation"> The transformation. </param>
            <param name="transformType">  Type of the transform. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetReversedSegment">
            <summary> Gets reversed segment. </summary>
            <returns> The reversed segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.ValidateQuadrant">
            <summary> Validates the quadrant. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Reverse">
            <summary> Reverses the segment. </summary>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.TrimAtXValue(System.Double,System.Boolean)">
            <summary> Trim at x coordinate value. </summary>
            <param name="x">			    The x coordinate. </param>
            <param name="keepLowerSegment"> (Optional) true to keep lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.TrimAtYValue(System.Double,System.Boolean)">
            <summary> Trim at y coordinate value. </summary>
            <param name="y">			    The y value to trim to. </param>
            <param name="keepLowerSegment"> (Optional) true to keep the lower segment. </param>
            <returns> A TlProfileSegmentPtr. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.CrossesXValue(System.Double)">
            <summary> Determines if the current segment x coordinate value. </summary>
            <param name="value"> The value. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.CrossesYValue(System.Double)">
            <summary> Determines whether a given segment would have to be trimmed to stay under Y. </summary>
            <param name="maxY"> Y value to stay under. </param>
            <returns> true if it needs trimming, else false. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.SetCalcTol(System.Double)">
            <summary> Sets calculate tolerance. </summary>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetCalcTol">
            <summary> Gets calculate tolerance. </summary>
            <returns> The calculate tolerance. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.IsCoincidentWithYAxis">
            <summary> Query if this object is coincident with the Y axis. </summary>
            <returns> true if coincident with y axis, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetMaxWidth">
            <summary> Gets maximum width. </summary>
            <returns> The maximum width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetTopWidth">
            <summary> Gets top width. </summary>
            <returns> The top width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetBottomWidth">
            <summary> Gets bottom width. </summary>
            <returns> The bottom width. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetHeight">
            <summary> Height of segment. </summary>
            <returns> said height. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetLength">
            <summary> Gets the length of this profile segment. </summary>
            <returns> The length. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetEndpoint2">
            <summary> Gets the end endpoint of this segment. </summary>
            <returns> The end endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.GetEndpoint1">
            <summary> Gets the start endpoint of this segment. </summary>
            <returns> The start endpoint. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.MinY">
            <summary> Lowest point contained in segment. </summary>
            <returns> Lowest point contained in segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.MinX">
            <summary> Minimum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.MaxY">
            <summary> Highest point contained in segment. </summary>
            <returns> Highest point contained in segment. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.MaxX">
            <summary> Maximum x coordinate. </summary>
            <returns> A double. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.Linearize(std.optional&lt;System.Double&gt;)">
            <summary> Conversion function. </summary>
            <param name="chordTol"> (Optional) The chordal deviation tolerance. </param>
            <returns> vector of TlProfileLineSegmentPtr representing this object, linearized. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.op_Implicit~TlProfileEnt">
            <summary> Cast that converts the given profile segment to a TlProfileEnt. </summary>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.op_Implicit~prof_ent">
            <summary> Conversion operator. </summary>
            <returns> prof_ent representing this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="color"> The segment. </param>
        </member>
        <member name="M:Cnc.Tool.TlProfileSegment.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileSegment.TransformationType">
            <summary> Values that represent the various possible transformations for a segment. </summary>
        </member>
        <member name="T:Cnc.Tool.TlObject.TlObjectDeserializationImpl">
            <summary>	A TlObject deserialization implementation. </summary>
            <summary>	A TlObject deserialization implementation. </summary>
            <summary>	A TlObject deserialization implementation. </summary>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoAccept(Cnc.Tool.IConstTlClassVisitor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the accept visitor operation. </summary>
            <param name="visitor">	The visitor. </param>
            <summary>	Executes the accept visitor operation. </summary>
            <param name="visitor">	The visitor. </param>
            <summary>	Executes the accept visitor operation. </summary>
            <param name="visitor">	The visitor. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoAccept(Cnc.Tool.ITlClassVisitor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the accept visitor operation. </summary>
            <param name="visitor">	The visitor. </param>
            <summary>	Executes the accept visitor operation. </summary>
            <param name="visitor">	The visitor. </param>
            <summary>	Executes the accept visitor operation. </summary>
            <param name="visitor">	The visitor. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoClone">
            <summary>	Executes the clone operation. </summary>
            <returns>	A TlObjectPtr. </returns>
            <summary>	Executes the clone operation. </summary>
            <returns>	A TlObjectPtr. </returns>
            <summary>	Executes the clone operation. </summary>
            <returns>	A TlObjectPtr. </returns>
        </member>
        <member name="F:Cnc.Tool.TlObject.m_ID">
            <summary>	The identifier. </summary>
            <summary>	The identifier. </summary>
            <summary>	The identifier. </summary>
        </member>
        <member name="M:Cnc.Tool.TlObject.OnSlotChanged">
            <summary> Executes the slot changed action. </summary>
            <summary> Executes the slot changed action. </summary>
            <summary> Executes the slot changed action. </summary>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Executes the reset ids operation. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
            <summary>	Executes the reset ids operation. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
            <summary>	Executes the reset ids operation. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.DoIsEqual(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
            <summary> Executes the query to find out if 'other' is equal. </summary>
            <param name="rhs"> The other. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
            <summary> Serializes this class instance.  If the referenced CArchive is writing data out, this class is written
		  out to the archive.  If the referenced CArchive is reading data in, this class is read in from the
		  archive. </summary>
            <param name="archive"> The archive. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.ResetIDs(std.map&lt;Cnc.Tool.TlID,Cnc.Tool.TlID,std.less&lt;Cnc.Tool.TlID&gt;,std.allocator&lt;std.pair&lt;Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst,Cnc.Tool.TlID&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
            <summary>	Resets all identifiers associated to this object. </summary>
            <param name="changedIDs">	The map of IDs that have been changed. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.ResetIDs">
            <summary>	Resets all identifiers associated to this object. </summary>
            <summary>	Resets all identifiers associated to this object. </summary>
            <summary>	Resets all identifiers associated to this object. </summary>
        </member>
        <member name="M:Cnc.Tool.TlObject.Accept(Cnc.Tool.IConstTlClassVisitor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Method to accept an instance of the IConstTlClassVisitor interface in an implementation of the Visitor 
		  design pattern. The IConstTlClassVisitor interface allows read only access to the Tl class instance 
		  based off of the implementation of the interface. </summary>
            <param name="visitor">	The visitor interface instance. </param>
            <summary> Method to accept an instance of the IConstTlClassVisitor interface in an implementation of the Visitor 
		  design pattern. The IConstTlClassVisitor interface allows read only access to the Tl class instance 
		  based off of the implementation of the interface. </summary>
            <param name="visitor">	The visitor interface instance. </param>
            <summary> Method to accept an instance of the IConstTlClassVisitor interface in an implementation of the Visitor 
		  design pattern. The IConstTlClassVisitor interface allows read only access to the Tl class instance 
		  based off of the implementation of the interface. </summary>
            <param name="visitor">	The visitor interface instance. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.Accept(Cnc.Tool.ITlClassVisitor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Method to accept an instance of the ITlClassVisitor interface in an implementation of the Visitor design
		  pattern. The ITlClassVisitor interface allows for changes to be made to the Tl class instance based off 
		  of the implementation of the interface. </summary>
            <param name="visitor">	The visitor interface instance. </param>
            <summary> Method to accept an instance of the ITlClassVisitor interface in an implementation of the Visitor design
		  pattern. The ITlClassVisitor interface allows for changes to be made to the Tl class instance based off 
		  of the implementation of the interface. </summary>
            <param name="visitor">	The visitor interface instance. </param>
            <summary> Method to accept an instance of the ITlClassVisitor interface in an implementation of the Visitor design
		  pattern. The ITlClassVisitor interface allows for changes to be made to the Tl class instance based off 
		  of the implementation of the interface. </summary>
            <param name="visitor">	The visitor interface instance. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.SetID(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.SetID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
            <summary>	Sets an identifier. </summary>
            <param name="id">	The identifier. </param>
            <returns>	true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.SetSlotDirect(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets slot directly with no side affects. </summary>
            <remarks> This special accessor is needed because m_Slot is actually serialized out in the TlToolAssembly class.
		  This will be resolved eventually. </remarks>
            <param name="slot"> The new slot number. </param>
            <summary> Sets slot directly with no side affects. </summary>
            <remarks> This special accessor is needed because m_Slot is actually serialized out in the TlToolAssembly class.
		  This will be resolved eventually. </remarks>
            <param name="slot"> The new slot number. </param>
            <summary> Sets slot directly with no side affects. </summary>
            <remarks> This special accessor is needed because m_Slot is actually serialized out in the TlToolAssembly class.
		  This will be resolved eventually. </remarks>
            <param name="slot"> The new slot number. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.GetID">
            <summary>	Gets the identifier. </summary>
            <returns>	The identifier. </returns>
            <summary>	Gets the identifier. </summary>
            <returns>	The identifier. </returns>
            <summary>	Gets the identifier. </summary>
            <returns>	The identifier. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_LessThan(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Less-than comparison operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the first parameter is less than the second. </returns>
            <summary>	Less-than comparison operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the first parameter is less than the second. </returns>
            <summary>	Less-than comparison operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_Inequality(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
            <summary> Inequality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
            <summary> Inequality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_Equality(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	comparison operator. </summary>
            <param name="rhs">	The other. </param>
            <returns>	true if objects are the same </returns>
            <summary>	comparison operator. </summary>
            <param name="rhs">	The other. </param>
            <returns>	true if objects are the same </returns>
            <summary>	comparison operator. </summary>
            <param name="rhs">	The other. </param>
            <returns>	true if objects are the same </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.Clone">
            <summary>	Makes a deep copy of this object. </summary>
            <returns>	null if it fails, else a copy of this object. </returns>
            <summary>	Makes a deep copy of this object. </summary>
            <returns>	null if it fails, else a copy of this object. </returns>
            <summary>	Makes a deep copy of this object. </summary>
            <returns>	null if it fails, else a copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_Assign(Cnc.Tool.TlObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move assigment operator. </summary>
            <param name="other">	The other. </param>
            <returns>	A shallow copy of this object. </returns>
            <summary>	Move assigment operator. </summary>
            <param name="other">	The other. </param>
            <returns>	A shallow copy of this object. </returns>
            <summary>	Move assigment operator. </summary>
            <param name="other">	The other. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.op_Assign(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment operator. </summary>
            <param name="other">	The other. </param>
            <returns>	A shallow copy of this object. </returns>
            <summary>	Assignment operator. </summary>
            <param name="other">	The other. </param>
            <returns>	A shallow copy of this object. </returns>
            <summary>	Assignment operator. </summary>
            <param name="other">	The other. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlObject.#ctor(Cnc.Tool.TlObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
            <summary>	Move constructor. </summary>
            <param name="other">	The other. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.#ctor(Cnc.Tool.TlObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Copy constructor. </summary>
            <param name="other">	The other tl object. </param>
            <summary>	Copy constructor. </summary>
            <param name="other">	The other tl object. </param>
            <summary>	Copy constructor. </summary>
            <param name="other">	The other tl object. </param>
        </member>
        <member name="M:Cnc.Tool.TlObject.#ctor">
            <summary>	Default constructor. </summary>
            <summary>	Default constructor. </summary>
            <summary>	Default constructor. </summary>
        </member>
        <member name="M:RotatePoint(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
 @par Purpose:
			Find the point rotated about a point and a unit directional vector

 @param[in]		pt		3d point
 @param[in]		pt0		fixed point
 @param[in]		axis	unit axial vector
 @param[in]		angle	angle of rotation in radians
 @return			rotated 3d point

</member>
        <member name="M:RotateVector(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
 @par Purpose:
			Find the components of one vector rotated about a unit directional vector

 @param[in]		v		3d vector
 @param[in]		axis	unit axial vector
 @param[in]		angle	angle of rotation in radians
 @return			rotated 3d vector

</member>
        <member name="M:Parallel(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Determine if two 3d vectors are parallel
 @param[in]		v1		First vector
 @param[in]		v2		Second vector
 @return			true = parallel, false = non-parallel

</member>
        <member name="M:Components(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find the components of one vector w.r.t. a unit vector

 @param[in]		v			first 3d vector
 @param[in]		u			unit 3d vector
 @param[out]		perpUVec	component of V perpendicular to U
 @param[out]		dirUVec		component of V in direction of U

</member>
        <member name="M:vec_3dx(System.Double,System.Double,System.Double,System.Double*)">
 @par Purpose:
			Form a 3d vectors from its x, y, z components
 @param[in]		x		x component
 @param[in]		y		y component
 @param[in]		z		z component
 @param[out]		pt		components set to x, y, and z

</member>
        <member name="M:vecx(System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*)">
 @par Purpose:
			Form a 2d vector from its x, y components
 @param[out]		vector		components set to x and y
 @param[in]		x			x component
 @param[in]		y			y component

</member>
        <member name="M:AngleBetween(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find the angle formed by two 3d vectors

 @param[in]		vec1	first 3d vector
 @param[in]		vec2	second 3d vector
 @return			Angle formed by the vectors (radians);

</member>
        <member name="M:SweepAngle(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find the angle formed by a 2d vector
 @param[in]		vec		a 2d vector
 @return			Angle, in radians, formed by vec (equivalent to [0,360] degrees)

</member>
        <member name="M:copy_ptx(System.Double*,System.Double!System.Runtime.CompilerServices.IsConst*)">
 @par Purpose:
			Copy a 2d point
 @param[out]		pt_out		The array to copy to
 @param[in]		pt_in		The array to copy from

</member>
        <member name="M:copy_ptx(System.Double*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Copy a 2d point
 @param[out]		pt_out		The array to copy to
 @param[in]		pt_in		The point to copy from

</member>
        <member name="M:proj_pt_ln(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Boolean*)">
 @par Purpose:
			Project a 2d point onto a line
 @param[in]		pt		The point to project
 @param[in]		line	The line to project onto
 @param[out]		pr_pt	The projected point
 @param[out]		t		The parameter (0 to 1);
 @param[out]		succf	true if line has non-zero length

</member>
        <member name="M:pt_on_line_tol(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
 @par Purpose:
			Determines whether a point lies on a line

 @return true = pt lies between line's endpoints
 @param[in]		pt			the 2d point in question
 @param[in]		line		the 2d line in question

</member>
        <member name="M:aa_ints_new(a_2d!System.Runtime.CompilerServices.IsConst*,a_2d!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			Find the intersection points of two circles whose center and
			radius are specified by arc1 and arc2.	Return the intersection
			points in p1 and p2.  Set succf to false if the circles are
			concentric or do not intersect.  Allow for tangent circles (to
			within a distance of tol);

 @param[in]		arc1		first 2d arc to intersect
 @param[in]		arc2		second 2d arc to intersect
 @param[in]		loc_tol		maximum allowable distance between arc1 and arc2
 @param[out]		p1			first intersection
 @param[out]		p2			second intersection
 @param[out]		succf		true = p1 and p2 are valid

</member>
        <member name="M:l_offset_tol(l_2d!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,l_2d*,System.Boolean*)">
 @par Purpose:
			Offset a 2d line
 @param[in]		line	The line to offset
 @param[in]		dist	The distance to offset line
 @param[in]		bias	A point to offset line towards
 @param[out]		line1	line offset by dist
 @param[out]		succf	true if bias does not lie on line

</member>
        <member name="M:ints_gt(gt!System.Runtime.CompilerServices.IsConst*,gt!System.Runtime.CompilerServices.IsConst*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			New version of gp_ints with the input loc_tol
			  Find the intersection of a line or arc with a line or arc.

 @param[in]		object1		2d line or arc
 @param[in]		object2		2d line or arc
 @param[in]		bias_pt		bias point
 @param[in]		loc_tol		max distance between object1 and object2
 @param[out]		near_inters intersection closest to bias_pt
 @param[out]		far_inters	intersection furthest from bias_pt
 @param[out]		succf		true = object1 and object2 intersect

</member>
        <member name="M:pt_on_arc(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,a_2d!System.Runtime.CompilerServices.IsConst*,System.Double)">
 @par Purpose:
			Determine whether a point is within loc_tol of a finite arc,
			based on a distance and angle test.

 @return pt lies on arc
 @param[in]		pt			a 2d point
 @param[out]		arc			a 2d arc
 @param[in]		loc_tol		local tolerance for closeness

</member>
        <member name="M:pt_on_gt_tol(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,gt!System.Runtime.CompilerServices.IsConst*,System.Double)">
 @par Purpose:
			Determine whether a point actually lies on an entity.

 @return true = pt lies on ent
 @param[in]		pt		 a 2d point
 @param[in]		entity	 a 2d entity

</member>
        <member name="M:arc_ep_3d(a_3d!System.Runtime.CompilerServices.IsConst*,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @par Purpose:
			This method computes the endpoints of a 3d arc

 @param[in]		arc			the arc to analyze
 @param[in]		mat			An nxm matrix
 @param[out]		ep1			the endpoint corresponding to sa (first endpoint)
 @param[out]		ep2			the endpoint corresponding to sa_sw (second endpoint)


</member>
        <member name="M:arc_endpoints(a_2d!System.Runtime.CompilerServices.IsConst*,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @par Purpose:
			Find the endpoints of a 2d arc
 @param[in]		arc			a 2d arc
 @param[out]		p1			the endpoint corresponding to sa
 @param[out]		p2			the endpoint corresponding to sa + sw

</member>
        <member name="M:t_on_line_tol(System.Double*,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,l_2d!System.Runtime.CompilerServices.IsConst*,System.Double)">
 @par Purpose:
			Find the t parameter on a 2d line given a point
 @param[out]		t		The parameter corresponding to the projected point
 @param[in]		pt		The point to "project"
 @param[in]		line	The line to "project" onto

</member>
        <member name="M:la_ints_new(l_2d!System.Runtime.CompilerServices.IsConst*,a_2d!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*)">
 @par Purpose:
			New version of la_ints.
			Finds the intersections of a line and an arc

 @param[in]		line		a 2d line to intersect
 @param[in]		arc			a 2d arc to intersect
 @param[in]		loc_tol		maximum allowable distance between line and arc
 @param[out]		p1			first intersection
 @param[out]		p2			second intersection
 @param[out]		succf		true = p1 and p2 are valid

</member>
        <member name="M:l_ints_tol(l_2d!System.Runtime.CompilerServices.IsConst*,l_2d!System.Runtime.CompilerServices.IsConst*,System.Double,p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*,System.Double*,System.Boolean*)">
 @par Purpose:
			Intersect two 2d lines
 @param[in]		l1		The first line
 @param[in]		l2		The second line
 @param[out]		inters	The intersection point
 @param[out]		t1		parameter value
 @param[out]		t2		parameter value
 @param[out]		succf	Success/Fail

</member>
        <member name="M:InchToMm(System.Double)">
            <summary> Convert value from Inch to Millimeters. </summary>
            <param name="inch"> The value in inches. </param>
            <returns> The value in millimeters. </returns>
            <summary> Convert value from Inch to Millimeters. </summary>
            <param name="inch"> The value in inches. </param>
            <returns> The value in millimeters. </returns>
        </member>
        <member name="M:MmToInch(System.Double)">
            <summary> Convert value from Millimeters to Inch. </summary>
            <param name="mm"> The value in millimeters. </param>
            <returns> The value in inches. </returns>
            <summary> Convert value from Millimeters to Inch. </summary>
            <param name="mm"> The value in millimeters. </param>
            <returns> The value in inches. </returns>
        </member>
        <member name="M:IsMetric">
            <summary> Checks if the working measurement system is metric. </summary>
            <returns> True if the system is metric; false if it is not. </returns>
            <summary> Checks if the working measurement system is metric. </summary>
            <returns> True if the system is metric; false if it is not. </returns>
        </member>
        <member name="M:IsNotMetric">
            <summary> Checks if the working measurement system is NOT metric. </summary>
            <returns> True if the system is not metric; false if it is. </returns>
            <summary> Checks if the working measurement system is NOT metric. </summary>
            <returns> True if the system is not metric; false if it is. </returns>
        </member>
        <member name="M:IsEnglish">
            <summary> Checks if the working measurement system is english. </summary>
            <returns> True if the system is english; false if it is not. </returns>
            <summary> Checks if the working measurement system is english. </summary>
            <returns> True if the system is english; false if it is not. </returns>
        </member>
        <member name="M:IsNotEnglish">
            <summary> Macro for allocating an ent structure instead of having it on the stack. </summary>
            <summary> Macro for allocating an ent structure array instead of having it on the stack. </summary>
            <summary> Checks if the working measurement system is NOT english. </summary>
            <returns> True if the system is not english; false if it is. </returns>
            <summary> Checks if the working measurement system is NOT english. </summary>
            <returns> True if the system is not english; false if it is. </returns>
            <summary> Checks if the working measurement system is NOT english. </summary>
            <returns> True if the system is not english; false if it is. </returns>
        </member>
        <member name="M:ent_tp.op_Assign(EntTemplate&lt;tp_entity&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Conversion assignment operator. </summary>
            <param name="entity"> The toolpath entity in 'ent' form. </param>
            <returns> A reference to this instance. </returns>
        </member>
        <member name="M:ent_tp.#ctor(EntTemplate&lt;tp_entity&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Conversion constructor. </summary>
            <param name="entity"> The toolpath entity in 'ent' form. </param>
        </member>
        <member name="T:ent_tp">
            <summary> Create struct that matches the legacy ent_tp structure.  We use a struct instead of using or typedef in
		  order to preserve the existing use of forward declarations. </summary>
        </member>
        <member name="T:ent">
            <summary> Create struct that matches the legacy ent structure.  We use a struct instead of using or typedef in
		  order to preserve the existing use of forward declarations. </summary>
        </member>
        <member name="T:EntTpUnion">
            <summary> A streamlined entity union used to store toolpath entity information only. </summary>
        </member>
        <member name="T:EntUnion">
            <summary> The union portion of the Entity.  Contains the data for the specific type actually stored in the entity,
		  as indicated by the entity's id and assoc_id. </summary>
        </member>
        <member name="T:EntHeader">
            <summary>A type that is used to just contain the "header" portion of the ent structure.</summary>
        </member>
        <member name="T:EntUnionEmpty">
            <summary>An empty struct that allows us to construct an "ent header".</summary>
        </member>
        <member name="T:ubvsControls">
DBvars_CH.h
@defgroup controldb_ch1 Control component union type 
@{ 
@} 
@defgroup controldb_ch2 Control post union type 
@{ 
@} 
@defgroup controldb_ch3 Control type defines 
@{ 
@} 
@defgroup controldb_ch5 Control class access types 
@{ 
@} 
@defgroup controldb_ch6 File status 
@{ 
@} 
@defgroup controldb_ch7 Pop menu selections 
@{ 
@} 
@defgroup controldb_ch8 CNCControl errors 
@{ 
@} 
@defgroup controldb_ch10 CNCControl file 
@{ 
@} 
@defgroup controldb_ch11 Multiple selection defines 
@{ 
@defgroup controldb_ch12 Control init option option 
@{ 
@} 
@defgroup controldb_ch13 Control misc option 
@{ 
@} 
@defgroup controldb_ch14 Control drill option 
@{ 
@} 
@defgroup controldb_ch15 snAddToToolRegister 
@{ 
@} 
@defgroup controldb_ch16 snTransOperParams 
@{ 
@} 
@defgroup controldb_ch17 snWorkOffsetNumberTPlane 
@{ 
@} 
@defgroup controldb_ch18 snWorkCoordinate 
@{ 
@} 
@defgroup controldb_ch19 snGetHomePosition 
@{ 
@} 
@defgroup controldb_ch20 snRapidDestination... 
@{ 
@} 
@defgroup controldb_ch21 snXYlinPlaneControl...\nsnXYbreakArc... 
@{ 
@} 
@defgroup controldb_ch22 snMoveEndOption 
@{ 
@} 
@defgroup controldb_ch23 snXYcenterType... 
@{ 
@} 
@defgroup controldb_ch24 snHelixType 
@{ 
@} 
@defgroup controldb_ch25 snThreeAxisFeed, snFourAxisFeed, snFourAxisRotFeed, snFiveAxisFeed, snFiveAxisRotFeed	
@{ 
@} 
@defgroup controldb_ch26 snInverseFeed 
@{ 
@} 
@defgroup controldb_ch27 snArcCheckEndPointType 
@{ 
@} 
@defgroup controldb_ch28 snSubLocationInNC 
@{ 
@} 
@defgroup controldb_ch30 snThreadType 
@{ 
@} 
@defgroup controldb_ch31 snLeadInType, snLeadOutType 
@{ 
@} 
@defgroup controldb_ch32 snRevPosCornerType..., snAuxRevPosReg1... 
@{ 
@} 
@defgroup controldb_ch33 snAuxRevModReg1 
@{ 
@} 
@defgroup controldb_ch34 snReturnDrill 
@{ 
@} 
@defgroup controldb_ch35 snInitAbsoluteMatching 
@{ 
@} 
@defgroup controldb_ch36 snRefAbsoluteMatching - snDepthAbsoluteMatching 
@{ 
@} 
@} 
<summary> UBVS control values. </summary></member>
        <member name="T:control_post_type">
            <summary> Control Post ID. </summary>
        </member>
        <member name="T:control_component_type">
            <summary> Control Component. </summary>
        </member>
        <member name="T:control_type">
            <summary> Control Base ID. </summary>
        </member>
        <member name="T:ent_idn_ctrl">
            <summary> Control link ent_idn. </summary>
        </member>
        <member name="T:wire_nc_path_ctrl">
            <summary> Wire NC path values. </summary>
        </member>
        <member name="T:nc_wire_nocore_ctrl">
            <summary> Wire nocore. </summary>
        </member>
        <member name="T:nc_wire_taper_ctrl">
            <summary> Wire 4 axis. </summary>
        </member>
        <member name="T:nc_wire_aux_rev_ctrl">
            <summary> Wire reverse auxiliary. </summary>
        </member>
        <member name="T:nc_wire_reverse_ctrl">
            <summary> Wire reverse. </summary>
        </member>
        <member name="T:nc_wire_corner_ctrl">
            <summary> Wire corners. </summary>
        </member>
        <member name="T:nc_wire_cuts_ctrl">
            <summary> Wire cuts. </summary>
        </member>
        <member name="T:nc_wire_leads_ctrl">
            <summary> Wire leads. </summary>
        </member>
        <member name="T:cycles_ctrl">
            <summary> Machine Cycles. </summary>
        </member>
        <member name="T:nc_lathe_cycles_ctrl">
            <summary> Lathe canned cycles. </summary>
        </member>
        <member name="T:nc_drill_cycles_ctrl">
            <summary> Drill cycles. </summary>
        </member>
        <member name="T:nc_gen_cycles_ctrl">
            <summary> General canned cycle. </summary>
        </member>
        <member name="T:nc_path_ctrl">
            <summary> General NC path values. </summary>
        </member>
        <member name="T:nc_path_subs_ctrl">
            <summary> Subprograms. </summary>
        </member>
        <member name="T:nc_path_comp_ctrl">
            <summary> Cutter compensation. </summary>
        </member>
        <member name="T:nc_path_feed_ctrl">
            <summary> Feed. </summary>
        </member>
        <member name="T:nc_path_rotary_ctrl">
            <summary> Rotary. </summary>
        </member>
        <member name="T:nc_path_arc_ctrl">
            <summary> Arc. </summary>
        </member>
        <member name="T:nc_path_linear_ctrl">
            <summary> Linear. </summary>
        </member>
        <member name="T:nc_path_tool_ctrl">
            <summary> Tool. </summary>
        </member>
        <member name="T:nc_path_worksys_ctrl">
            <summary> Work system. </summary>
        </member>
        <member name="T:nc_output_ctrl">
            <summary> NC Output. </summary>
        </member>
        <member name="T:nc_dialog_wire_ctrl">
            <summary> NC Dialog Wire. </summary>
        </member>
        <member name="T:nc_dialog_lathe_ctrl">
            <summary> NC Dialog Lathe. </summary>
        </member>
        <member name="T:nc_dialog_router_ctrl">
            <summary> NC Dialog Router. </summary>
        </member>
        <member name="T:nc_dialog_mill_ctrl">
            <summary> NC Dialog Mill. </summary>
        </member>
        <member name="T:file_postlist_ctrl">
            <summary> Post file list element. </summary>
        </member>
        <member name="T:file_ctrl">
Files Common
</member>
        <member name="T:communication_ctrl">
            <summary> Communication. </summary>
        </member>
        <member name="T:tolerance_ctrl">
            <summary> Tolerances
		  
		  	Tolerance settings for posting, 'var' are MP variables. </summary>
        </member>
        <member name="F:wp_change.list_index">
@} 
</member>
        <member name="F:wp_change.pass">
@} 
@defgroup pass-specific_data PASS-SPECIFIC DATA 
@{ 
</member>
        <member name="F:wp_change.taper">
@defgroup non-pass-specific_data NON-PASS-SPECIFIC DATA 
@{ 
</member>
        <member name="T:wp_change">
Wire change at point structure
</member>
        <member name="T:wp_cset_change">
Wire control settings change structure
</member>
        <member name="T:wp_cflag_change">
Wire control flag change structure
</member>
        <member name="T:event_ent">
event entity
</member>
        <member name="T:event_prm_feed_type">
feed type event
</member>
        <member name="T:event_prm_feed_rate">
feed rate event
</member>
        <member name="T:event_prm_rotary_axis_master">
part rotary axis master event
</member>
        <member name="T:event_prm_spindle_speed_master">
part spindle speed master event
</member>
        <member name="T:event_prm_stock_transfer">
stock transfer event
</member>
        <member name="T:event_prm_tool_change">
tool change event
</member>
        <member name="T:event_prm_macro">
macro event
</member>
        <member name="T:event_prm_axis_clamp">
axis clamp event
</member>
        <member name="T:event_prm_quill">
quill event
</member>
        <member name="T:event_prm_steady_rest">
steady rest advance/retract event
</member>
        <member name="T:event_prm_axis_place_holder">
axis place holder event
</member>
        <member name="T:event_prm_axis_motion">
axis motion event
</member>
        <member name="T:event_prm_coolant_place_holder">
coolant place holder event
</member>
        <member name="T:event_prm_coolant">
coolant event
</member>
        <member name="T:event_prm_hidden_tc_marker">
hidden tool change marker event
</member>
        <member name="T:event_prm_sync">
sync event
</member>
        <member name="T:event_prm_string">
manual entry event
</member>
        <member name="T:event_prm_bar_feed">
bar feed event
</member>
        <member name="T:event_prm_spindle_move">
spindle move event (part spindle)
</member>
        <member name="T:event_prm_tool_grip">
tool grip length move event
</member>
        <member name="T:event_prm_tool_clear">
tool clearance move event
</member>
        <member name="T:event_prm_tool_linear">
tool linear move event
</member>
        <member name="T:event_prm_spindle_grip">
part spindle grip length move event 
</member>
        <member name="T:event_prm_spindle_clear">
part spindle clearance move event 
</member>
        <member name="T:event_prm_chuck">
chuck open/close event
</member>
        <member name="T:event_prm_tool_offset">
tool offset event
</member>
        <member name="T:event_prm_tool_stage">
tool stage event
</member>
        <member name="T:event_prm_tool_call">
tool call event 
</member>
        <member name="T:event_prm_tool_orient">
tool spindle orientation event 
</member>
        <member name="T:event_prm_part_orient">
part spindle orientation event 
</member>
        <member name="T:event_prm_tool_ss_clamp">
tool spindle speed clamp event 
</member>
        <member name="T:event_prm_part_ss_clamp">
part spindle speed clamp event 
</member>
        <member name="T:event_prm_tool_ss">
tool spindle speed event 
</member>
        <member name="T:event_prm_part_ss">
part spindle speed event 
</member>
        <member name="T:event_prm_dwell">
dwell event
</member>
        <member name="T:event_prm_custom">
custom event (canned text)
</member>
        <member name="T:event_prm_tool_rpm_css">
tool spindle rpm/css
</member>
        <member name="T:event_prm_tool_states">
tool spindle event with states
</member>
        <member name="T:event_prm_part_spindle_dir">
part spindle direction event
</member>
        <member name="T:event_prm_part_rpm_css">
part spindle rpm/css
</member>
        <member name="T:event_prm_part_states">
part spindle event with states
</member>
        <member name="T:event_prm_work_offset">
select event
</member>
        <member name="T:event_prm_select">
select event
</member>
        <member name="T:event_prm_comment_output">
comment output event
</member>
        <member name="T:event_prm_bar_puller_open">
bar puller open/close
</member>
        <member name="T:event_prm_tool_table">
tool table event
</member>
        <member name="T:event_prm_states">
event with multiple states, like on/off
</member>
        <member name="T:event_prm_spindle">
part spindle event
</member>
        <member name="T:event_prm_simple">
simple event
</member>
        <member name="T:event_prm_header">
For tool item id
For MT machine position data
event list header event
</member>
        <member name="T:view_ent">
            <summary> View Entity Structure. </summary>
        </member>
        <member name="T:WCSinfo">
            <summary> WCS Information Structure. </summary>
        </member>
        <member name="T:assoc_pt">
@defgroup block_types Block Types  
@{ 
@} 
@defgroup head_types Head Types 
@{ 
@} 
lathe tool types
for tp_ent type
<summary> Named View Associative Geometry Selections. </summary></member>
        <member name="T:tool_station_type">
            <summary> Tool station. </summary>
        </member>
        <member name="T:tool_block_type">
            <summary> Tool block component parameters. </summary>
        </member>
        <member name="T:tool_head_type">
Tool heads
<summary> Tool head component parameters. </summary></member>
        <member name="M:SetMainLevel(System.Int32)">
@} 
 @par Purpose:
		Sets the main level number global "main_level".  Note: unless temporarily set and restored, do not set "main_level" directly, use this function instead!

 @param[in]		level		level number

</member>
        <member name="F:constr_view_is_3d">
@defgroup math_varuables math variables
*
* initialized in this module

Maximum number of views
</member>
        <member name="D:LeaderList">
            <summary> Defines an alias representing list of leaders. </summary>
        </member>
        <member name="T:nci_bin_5ax">
5ax abbreviated nci entity - definition
</member>
        <member name="T:nci_bin">
@} 
nci entity - definition
</member>
        <member name="T:nci_disp_marker">
mill nci - mark start/end of NCI display section
</member>
        <member name="T:nci_ctour_sect">
mill nci - contour start section marker (used in contour temp file)
</member>
        <member name="T:nci_pock_ktd_move">
mill nci - pocket start/end keep tool down move marker (used in pocket temp file)
</member>
        <member name="T:nci_pock_sect">
mill nci - pocket start section marker (used in pocket temp file)
</member>
        <member name="T:nci_nocore_sect">
wire nci - nocore start section marker (used in pocket temp file)
</member>
        <member name="T:nci_marker">
mill nci - mark start/end of cut/pass
</member>
        <member name="T:nci_nest_prt">
nci - part info
</member>
        <member name="T:nci_nest_sht">
nci - sheet change marker
</member>
        <member name="T:nci_sop">
start of operation output for the post
Note: The start of transform op is not marked but the
start of transformed ops within the transform op are marked.
</member>
        <member name="T:nci_eos">
mill nci - end of operation's nci section
</member>
        <member name="T:nci_sos">
@} 
@defgroup nci_start nci - start of operation's nci section 
@{ 
</member>
        <member name="T:nci_event_2919">
event bnci - unused
</member>
        <member name="T:nci_event_2918">
event bnci - unused
</member>
        <member name="T:nci_event_2917">
event bnci - unused
</member>
        <member name="T:nci_event_2916">
event bnci - unused
</member>
        <member name="T:nci_event_2915">
event bnci - unused
</member>
        <member name="T:nci_event_2914">
event bnci - unused
</member>
        <member name="T:nci_event_2913">
event bnci - unused
</member>
        <member name="T:nci_event_2912">
event bnci - unused
</member>
        <member name="T:nci_event_2911">
event bnci - unused
</member>
        <member name="T:nci_event_2910">
event bnci - unused
</member>
        <member name="T:nci_event_2909">
event bnci - unused
</member>
        <member name="T:nci_event_2908">
event bnci - unused
</member>
        <member name="T:nci_event_2907">
event bnci - unused
</member>
        <member name="T:nci_event_2906">
event bnci - unused
</member>
        <member name="T:nci_event_2905">
event bnci - unused
</member>
        <member name="T:nci_event_2904">
event bnci - unused
</member>
        <member name="T:nci_event_2903">
event bnci - feed type
</member>
        <member name="T:nci_event_2902">
event bnci - feed rate
</member>
        <member name="T:nci_event_2901">
event bnci - tool spindle rpm/css
</member>
        <member name="T:nci_event_2900">
event bnci - part spindle rpm/css
</member>
        <member name="T:nci_event_2881">
event bnci - work shift select
</member>
        <member name="T:nci_event_2880">
event bnci - work offset select
</member>
        <member name="T:nci_event_2852">
event bnci - drill cancel
</member>
        <member name="T:nci_event_2851">
event bnci - drill reference
</member>
        <member name="T:nci_event_2848">
event bnci - axis clamp select
</member>
        <member name="T:nci_event_2847">
event bnci - rtcp select
</member>
        <member name="T:nci_event_2846">
event bnci - reference return select
</member>
        <member name="T:nci_event_2845">
event bnci - polar cylinder select
</member>
        <member name="T:nci_event_2844">
event bnci - cutter comp select
</member>
        <member name="T:nci_event_2843">
event bnci - plane select
</member>
        <member name="T:nci_event_2842">
event bnci - abs/inc select
</member>
        <member name="T:nci_event_2841">
event bnci - unit select
</member>
        <member name="T:nci_event_2840">
event bnci - motion select
</member>
        <member name="T:nci_event_2832">
event bnci - comment output
</member>
        <member name="T:nci_event_2830">
event bnci - tool table
</member>
        <member name="T:nci_event_2812">
event bnci - tool stage
</member>
        <member name="T:nci_event_2811">
event bnci - tool call
</member>
        <member name="T:nci_event_2810">
event bnci - tool offset
</member>
        <member name="T:nci_event_2808">
event bnci - a axis motion place holder
</member>
        <member name="T:nci_event_2807">
event bnci - tool change approach place holder
</member>
        <member name="T:nci_event_2806">
event bnci - b axis motion place holder
</member>
        <member name="T:nci_event_2805">
event bnci - axis motion place holder
</member>
        <member name="T:nci_event_2801">
event bnci - tool change event list end
</member>
        <member name="T:nci_event_2800">
event bnci - tool change event list start
</member>
        <member name="T:nci_event_2705">
event bnci - stock transfer
</member>
        <member name="T:nci_event_2704">
event bnci - custom (canned text)
</member>
        <member name="T:nci_event_2703">
event bnci - manual entry
</member>
        <member name="T:nci_event_2702">
event bnci - join token
This is only used in the toolpath simulation, it is not passed to the post
</member>
        <member name="T:nci_event_2701">
event bnci - macro end
</member>
        <member name="T:nci_event_2700">
event bnci - macro start
</member>
        <member name="T:nci_event_2699">
event bnci - macro else
</member>
        <member name="T:nci_event_2620">
event bnci - transform subprogram marker
</member>
        <member name="T:nci_event_2612">
event bnci - join
</member>
        <member name="T:nci_event_2606">
event bnci - hidden part rotary axis master event
</member>
        <member name="T:nci_event_2605">
event bnci - part rotary axis master event
</member>
        <member name="T:nci_event_2604">
event bnci - hidden part spindle speed master event
</member>
        <member name="T:nci_event_2603">
event bnci - part spindle speed master event
</member>
        <member name="T:nci_event_2602">
event bnci - hidden tool change marker event
</member>
        <member name="T:nci_event_2600">
event bnci - sync event
</member>
        <member name="T:nci_event_2586">
event bnci - part spindle stock grip length move
</member>
        <member name="T:nci_event_2585">
event bnci - part spindle stock clearance move 
</member>
        <member name="T:nci_event_2580">
event bnci - part spindle advance/retract 
</member>
        <member name="T:nci_event_2571">
event bnci - bar puller stock grip length move
</member>
        <member name="T:nci_event_2570">
event bnci - bar puller stock clearance move
</member>
        <member name="T:nci_event_2566">
event bnci - tool linear 3d (mill)
</member>
        <member name="T:nci_event_2563">
event bnci - tool stock clearance move 2d (lathe)
</member>
        <member name="T:nci_event_2561">
event bnci - tool linear 2d
</member>
        <member name="T:nci_event_2543">
event bnci - bar feed
</member>
        <member name="T:nci_event_2540">
event bnci - bar feed lock/unlock
</member>
        <member name="T:nci_event_2533">
event bnci - steady rest advance/retract
</member>
        <member name="T:nci_event_2532">
event bnci - steady rest roller lock/unlock
</member>
        <member name="T:nci_event_2531">
event bnci - steady rest pin advance/retract
</member>
        <member name="T:nci_event_2530">
event bnci - steady rest open/close
</member>
        <member name="T:nci_event_2529">
event bnci - tailstock quill retract
</member>
        <member name="T:nci_event_2528">
event bnci - tailstock quill advance
</member>
        <member name="T:nci_event_2525">
event bnci - tailstock quill lock/unlock
</member>
        <member name="T:nci_event_2514">
event bnci - tailstock retract
</member>
        <member name="T:nci_event_2513">
event bnci - tailstock advance
</member>
        <member name="T:nci_event_2511">
event bnci - tailstock pin advance/retract
</member>
        <member name="T:nci_event_2510">
event bnci - tailstock lock/unlock
</member>
        <member name="T:nci_event_2500">
event bnci - axis motion
</member>
        <member name="T:nci_event_2240">
event bnci - dwell
</member>
        <member name="T:nci_event_2227">
event bnci - tool spindle air blast on/off
</member>
        <member name="T:nci_event_2226">
event bnci - tool spindle orient 
</member>
        <member name="T:nci_event_2224">
event bnci - tool spindle speed clamp 
</member>
        <member name="T:nci_event_2223">
event bnci - tool spindle live spindle enable/disable
</member>
        <member name="T:nci_event_2222">
event bnci - tool spindle direction with coolant
</member>
        <member name="T:nci_event_2221">
event bnci - tool spindle direction
</member>
        <member name="T:nci_event_2220">
event bnci - tool spindle speed
</member>
        <member name="T:nci_event_2208">
event bnci - part spindle rpm from css
</member>
        <member name="T:nci_event_2207">
event bnci - part spindle air blast on/off
</member>
        <member name="T:nci_event_2206">
event bnci - part orient 
</member>
        <member name="T:nci_event_2205">
event bnci - part spindle sync on/off
</member>
        <member name="T:nci_event_2204">
event bnci - part spindle speed clamp 
</member>
        <member name="T:nci_event_2203">
event bnci - part spindle mill axis enable/disable
</member>
        <member name="T:nci_event_2202">
event bnci - part spindle direction with coolant
</member>
        <member name="T:nci_event_2201">
event bnci - part spindle direction
</member>
        <member name="T:nci_event_2200">
event bnci - part spindle speed
</member>
        <member name="T:nci_event_2180">
event bnci - part catcher advance/retract
</member>
        <member name="T:nci_event_2170">
event bnci - eject pin advance/retract
</member>
        <member name="T:nci_event_2140">
event bnci - bar puller open/close
</member>
        <member name="T:nci_event_2110">
event bnci - chuck open/close
</member>
        <member name="T:nci_event_2104">
event bnci - retract coolant place holder
</member>
        <member name="T:nci_event_2103">
event bnci - approach coolant place holder
</member>
        <member name="T:nci_event_2102">
event bnci - coolant
</member>
        <member name="T:nci_event_2100">
event bnci - program stop
</member>
        <member name="T:nci_event_2099">
event bnci - event list header event
</member>
        <member name="T:nci_event_2002">
event bnci - tool change retract event list
</member>
        <member name="T:nci_event_2001">
event bnci - tool change approach event list
</member>
        <member name="T:nci_event_2000">
@defgroup custom ops event bnci lines 
@{ 
event bnci - custom op event list
</member>
        <member name="T:nci_nest_prm2">
nesting nci - miscellaneous parameters #2
</member>
        <member name="T:nci_nest_prm1">
nesting nci - miscellaneous parameters #1
</member>
        <member name="T:nci_wire_22001">
wire nci - Agie data
</member>
        <member name="T:nci_wire_20200">
wire nci - stock to leave
</member>
        <member name="T:nci_lathe_20112">
lathe nci - tool definition - custom tool geometry file name
</member>
        <member name="T:nci_lathe_20111">
lathe nci - tool definition - tool holder parameters
</member>
        <member name="T:nci_lathe_20110">
lathe nci - tool definition - tool holder name
</member>
        <member name="T:nci_lathe_20109">
lathe nci - tool definition - drilling tool parameters (cutting)
</member>
        <member name="T:nci_lathe_20108">
lathe nci - tool definition - drilling tool parameters (geometry)
</member>
        <member name="T:nci_lathe_20107">
lathe nci - tool definition - grooving/parting insert parameters
</member>
        <member name="T:nci_lathe_20106">
lathe nci - tool definition - threading insert parameters
</member>
        <member name="T:nci_lathe_20105">
lathe nci - tool definition - general turning/boring insert parameters
</member>
        <member name="T:nci_lathe_20104">
lathe nci - tool definition - tool insert general parameters
</member>
        <member name="T:nci_lathe_20103">
lathe nci - tool definition - tool insert name
</member>
        <member name="T:nci_lathe_20102">
lathe nci - tool definition - tool geometric parameters
</member>
        <member name="T:nci_lathe_20101">
lathe nci - tool definition - tool general cutting parameters
</member>
        <member name="T:nci_lathe_20100">
lathe nci - tool definition - tool programming parameters
</member>
        <member name="T:nci_mill_20800">
multiaxis comp in control value
</member>
        <member name="T:nci_mill_20017">
mill nci - matl comment
</member>
        <member name="T:nci_mill_20016">
mill nci - matl name
</member>
        <member name="T:nci_mill_20015">
mill nci - wcs comment
</member>
        <member name="T:nci_mill_20014">
mill nci - wcs name
</member>
        <member name="T:nci_mill_20013">
mill nci - tpln comment
</member>
        <member name="T:nci_mill_20012">
mill nci - tpln name
</member>
        <member name="T:nci_mill_20011">
mill nci - cpln comment
</member>
        <member name="T:nci_mill_20010">
mill nci - cpln name
</member>
        <member name="T:nci_mill_20009">
mill nci - tool definition - custom parameters
</member>
        <member name="T:nci_mill_20008">
mill nci - tool definition - head parameters
</member>
        <member name="T:nci_mill_20007">
mill nci - tool definition - holder parameters
</member>
        <member name="T:nci_mill_20006a">
mill nci - tool definition - mill type tool specific parameters
</member>
        <member name="T:nci_mill_20005">
mill nci - tool definition - drill type tool specific parameters
</member>
        <member name="T:nci_mill_20004">
mill nci - tool definition - tool parameters
</member>
        <member name="T:nci_mill_20003">
mill nci - tool definition - chuck name
</member>
        <member name="T:nci_lathe_20002">
lathe nci - tool definition - manufacturer
</member>
        <member name="T:nci_mill_20002a">
mill nci - tool definition - manufacturer
</member>
        <member name="T:nci_lathe_20001">
lathe nci - tool definition - tool comment (name)
</member>
        <member name="T:nci_mill_20001">
mill nci - tool definition - tool comment
</member>
        <member name="T:nci_lathe_20000">
lathe nci - tool definition - mc7 path for custom tool geometry
</member>
        <member name="T:nci_mill_20000">
mill nci - tool definition - mc7 path for tool reference
</member>
        <member name="T:nci_prm">
mill nci - operation parameters
</member>
        <member name="T:nci_mill_1055">
tool inspection comment
</member>
        <member name="T:nci_mill_1053">
machine group name
</member>
        <member name="T:nci_mill_1052">
machine group comment
</member>
        <member name="T:nci_mill_1051">
machine name
</member>
        <member name="T:nci_lathe_1050">
lathe nci - version, date and geometry file name
</member>
        <member name="T:nci_mill_1050">
mill nci - version, date and geometry file name
</member>
        <member name="T:nci_mill_1032">
mill nci - miscellaneous int - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1031">
mill nci - miscellaneous reals - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1017">
lathe nci - construction plane 3x3 matrix
</member>
        <member name="T:nci_lathe_1020">
lathe nci - stock description
</member>
        <member name="T:nci_mill_1029">
Mill/Router nci - Multi head, block, station info part 2 
</member>
        <member name="T:nci_mill_1028">
Mill/Router nci - Multi head, block, station info part 1 -block tools/drills/aggregates 
</member>
        <member name="T:nci_wire_1025">
wire - canned text
</member>
        <member name="T:nci_lathe_1025">
lathe - canned text
</member>
        <member name="T:nci_lathe_1027">
lathe nci - working coordinate system
</member>
        <member name="T:nci_mill_1027">
mill nci - working coordinate system
</member>
        <member name="T:nci_mill_1025">
mill - canned text
</member>
        <member name="T:nci_wire_1020">
mill nci - stock description
</member>
        <member name="T:nci_mill_1020">
mill nci - stock description
</member>
        <member name="T:nci_mill_1019">
            <summary> All but wire nci - end of sub program section. </summary>
            <remarks> This structure must match the types from nci_mill_1018 because code uses these interchangeably.
See comments with nci_mill_1018. </remarks>
        </member>
        <member name="T:nci_mill_1018">
            <summary> All but wire nci - start of sub program section. </summary>
            <remarks> The structure is context and process dependent. See comments. </remarks>
        </member>
        <member name="T:nci_mill_1017">
mill nci - construction plane 3x3 matrix
</member>
        <member name="T:nci_wire_1016">
wire nci - associative params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1016">
lathe nci - associative params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1016">
mill nci - associative params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_wire_1015">
wire nci - subroutine parameters
</member>
        <member name="T:nci_lathe_1014">
lathe nci - tool plane 3x3 matrix
</member>
        <member name="T:nci_mill_1014">
mill nci - tool plane 3x3 matrix
</member>
        <member name="T:nci_wire_1013">
wire nci - miscellaneous params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1013">
lathe nci - miscellaneous params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1013">
mill nci - miscellaneous params - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_wire_1012">
wire nci - miscellaneous int - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1012">
lathe nci - miscellaneous int - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1012">
mill nci - miscellaneous int - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_wire_1011">
wire nci - miscellaneous reals - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_lathe_1011">
lathe nci - miscellaneous reals - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_mill_1011">
mill nci - miscellaneous reals - make sure mill/lathe/wire stay same size!
</member>
        <member name="T:nci_wire_1010">
wire nci - control settings change
</member>
        <member name="T:nci_wire_1009">
wire nci - wirepath length
</member>
        <member name="T:nci_wire_1008">
wire nci - operation comment
</member>
        <member name="T:nci_lathe_1008">
lathe nci - operation comment
</member>
        <member name="T:nci_mill_1008">
mill nci - operation comment
</member>
        <member name="T:nci_wire_1005">
wire nci - comment (manual entry)
</member>
        <member name="T:nci_lathe_1005">
lathe nci - comment (manual entry)
</member>
        <member name="T:nci_mill_1005">
mill nci - comment (manual entry)
</member>
        <member name="T:nci_wire_1004">
wire nci - cancel cutter comp in control
</member>
        <member name="T:nci_lathe_1004">
lathe nci - cancel cutter comp in control
</member>
        <member name="T:nci_mill_1004">
mill nci - cancel cutter comp in control
</member>
        <member name="T:nci_wire_1003">
wire nci - end of file
</member>
        <member name="T:nci_lathe_1003">
lathe nci - end of file
</member>
        <member name="T:nci_mill_1003">
mill nci - end of file
</member>
        <member name="T:nci_wire_1002">
wire nci - start of nci file and/or tool change
</member>
        <member name="T:nci_lathe_1002">
lathe nci - start of nci file and/or tool change
</member>
        <member name="T:nci_mill_1002">
mill nci - start of nci file and/or tool change
</member>
        <member name="F:nci_20701.pad">
for rent
</member>
        <member name="F:nci_20701.useAltTurretIndexPosn">
alternate turret position flag (turret lathe)
</member>
        <member name="F:nci_20701.toolNumber">
tool number
</member>
        <member name="F:nci_20701.toolStation">
tool station number
</member>
        <member name="F:nci_20701.mdSequentialIndex">
ATC tool pocket, turret index position, gang tool = station
</member>
        <member name="F:nci_20701.changerId">
ent_idn of tool changer component
</member>
        <member name="F:nci_20701.changerType">
tool changer type: 
ATC_COMPONENT, TURRET_COMPONENT, MT_TURRET_COMPONENT, GANG_TOOL_COMPONENT
</member>
        <member name="T:nci_20701">
nci enhanced tool change information
</member>
        <member name="T:nci_lathe_950">
lathe nci - axis combination
</member>
        <member name="T:nci_mt_steady_rest">
MT steady rest (standalone) operation
</member>
        <member name="T:nci_mt_turret">
turret operation
</member>
        <member name="T:nci_mt_tailstock">
tailstock operation
</member>
        <member name="T:nci_mt_spindle_sync">
spindle sync operation
</member>
        <member name="T:nci_mt_spindle_move">
spindle advance/retract operation
</member>
        <member name="T:nci_mt_spindle_grip">
chuck clamp/unclamp operation
</member>
        <member name="T:nci_mt_bar_feed">
bar feed operation
</member>
        <member name="T:nci_mt_bar_feeder">
bar feeder on/off
</member>
        <member name="T:nci_mt_bar_puller">
bar puller open/close
</member>
        <member name="T:nci_lathe_912">
lathe nci - miscops custom integer parameters
</member>
        <member name="T:nci_lathe_911">
lathe nci - miscops custom real parameters
</member>
        <member name="T:nci_lathe_906">
lathe nci - turret park operation - obsolete
</member>
        <member name="T:nci_lathe_905">
lathe nci - steady rest position operation
</member>
        <member name="T:nci_lathe_904">
lathe nci - tailstock position operation
</member>
        <member name="T:nci_lathe_903">
lathe nci - chuck clamp/un-clamp, reposition operation
</member>
        <member name="T:nci_lathe_902">
lathe nci - stock bar feed operation
</member>
        <member name="T:nci_lathe_901">
lathe nci - stock flip operation
</member>
        <member name="T:nci_lathe_900">
lathe nci - stock transfer operation
</member>
        <member name="T:nci_lathe_201">
lathe nci - start of threading cycle
</member>
        <member name="T:nci_lathe_200">
lathe nci - threading cycle
</member>
        <member name="T:nci_wire_100">
wire nci - canned cycle point position
</member>
        <member name="T:nci_mill_100">
mill nci - canned cycle point position
</member>
        <member name="T:nci_mill_83">
nci - drill block parameters
</member>
        <member name="T:nci_wire_81">
wire nci - start canned cycle
</member>
        <member name="T:nci_lathe_81">
lathe nci - start canned cycle
</member>
        <member name="T:nci_lathe_82">
lathe nci - custom drill parameters
</member>
        <member name="T:nci_mill_82">
mill nci - custom drill parameters
</member>
        <member name="T:nci_mill_81">
mill nci - start canned cycle
</member>
        <member name="T:nci_wire_80">
wire nci - cancel canned cycle
</member>
        <member name="T:nci_lathe_80">
lathe nci - cancel canned cycle
</member>
        <member name="T:nci_mill_80">
mill nci - cancel canned cycle
</member>
        <member name="T:nci_wire_22">
wire nci - 4axis direct arc XY or UV move (gcodes 22, 23, 32, 33)
</member>
        <member name="T:nci_wire_20">
wire nci - 4axis direct linear XY or UV move (gcodes 20, 21, 30, 31)
</member>
        <member name="T:nci_wire_11">
wire nci - 4axis longhand
</member>
        <member name="T:nci_lathe_11">
            <summary> Lathe nci 5 axis move. </summary>
        </member>
        <member name="T:nci_mill_11">
mill nci - 5 axis move
</member>
        <member name="T:nci_wire_4">
wire nci - dwell
</member>
        <member name="T:nci_lathe_4">
mill nci - dwell
</member>
        <member name="T:nci_mill_4">
mill nci - dwell
</member>
        <member name="T:nci_wire_2">
wire nci - arc feed move
</member>
        <member name="T:nci_lathe_2">
lathe nci - arc feed move
</member>
        <member name="T:nci_mill_2">
mill nci - arc feed move
</member>
        <member name="T:nci_lathe_1">
lathe nci - linear feed move
</member>
        <member name="T:nci_mill_1">
mill nci - linear feed move
</member>
        <member name="T:nci_wire_0">
wire nci - rapid or feed move (depends on gcode 0 or 1)
</member>
        <member name="T:nci_mill_0">
mill nci - rapid move
</member>
        <member name="T:op_list">
for linked lists of operation entities 
</member>
        <member name="M:op_Equality(LatheMTSteadyRestPointPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,LatheMTSteadyRestPointPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(LatheMTSteadyRestPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,LatheMTSteadyRestPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(LatheBAxisContourTurningPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,LatheBAxisContourTurningPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(LatheBAxisContourTurningBasicPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,LatheBAxisContourTurningBasicPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(LatheBAxisContourTurningDepthPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,LatheBAxisContourTurningDepthPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(LatheBAxisContourTurningAdvancedPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,LatheBAxisContourTurningAdvancedPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomCommonPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomCommonPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomRetractMotionPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomRetractMotionPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomToolInspectionPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomToolInspectionPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomAllowancePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomAllowancePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomMultiStartPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomMultiStartPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomFinishPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomFinishPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomFinishDepthPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomFinishDepthPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomRoughPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomRoughPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomRoughDepthPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomRoughDepthPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomRoughStepPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomRoughStepPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomShapePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomShapePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomParametricShapePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomParametricShapePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomParametricTrapezoidalShapePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomParametricTrapezoidalShapePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomParametricRopeShapePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomParametricRopeShapePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomParametricButtressShapePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomParametricButtressShapePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadCustomParametricSquareShapePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadCustomParametricSquareShapePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadOvercutPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadOvercutPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadAccelerationClearancePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadAccelerationClearancePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(ThreadPitchPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ThreadPitchPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(LatheEntryExitPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,LatheEntryExitPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(LatheEntryOrExitPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,LatheEntryOrExitPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(LatheFeedratePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,LatheFeedratePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(LatheSpindleSpeedPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,LatheSpindleSpeedPrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:op_Equality(LatheStockToLeavePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,LatheStockToLeavePrmStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="T:operation">
operation parameter definition
* @note If a operation member is added between version and u and the new
*		 member is not supposed to be part of the operation header, the define
*		 below must be changed to use the new member in place of u.

</member>
        <member name="T:op_smoothing_5d">
operation parameters - multiaxes smoothing parameters 
</member>
        <member name="T:arcFeedOverride">
            <summary> For Override Arc Feedrate on Arc Filter / Tolerance page. </summary>
        </member>
        <member name="T:ArcFit">
            <summary> For arc fit parameters on linking page. </summary>
        </member>
        <member name="T:op_feedrate_optimization">
operation parameters - Feedrate optimization 
</member>
        <member name="T:op_rotary">
operation parameters - common rotary parameters 
c-axis = polar conversion (3 axis)
y-axis = toolplane positioning (rotary positioning)
</member>
        <member name="T:op_tool_display">
operation parameters - common toolpath display parameters 
</member>
        <member name="T:op_lead_io">
operation parameters - contour lead in-out parameters 
</member>
        <member name="T:op_entry_exit">
operation parameters - contour entry-exit parameters 
</member>
        <member name="T:op_home_pos">
operation parameters - home position 
</member>
        <member name="T:op_multi_cuts">
operation parameters - pocket and contour multi cuts 
</member>
        <member name="T:op_depth_cuts">
operation parameters - pocket and contour depth cuts 
</member>
        <member name="T:op_view">
operation parameters - tool and construction planes 
</member>
        <member name="T:op_cc">
operation parameters - cutter comp 
</member>
        <member name="T:op_cc_control">
operation parameters - cutter comp in control 
</member>
        <member name="T:op_cc_computer">
operation parameters - cutter comp in computer 
</member>
        <member name="T:op_filter">
operation parameters - toolpath filter settings 
</member>
        <member name="T:op_v8">
operation parameters - more room
</member>
        <member name="T:op_events">
operation events
</member>
        <member name="T:op_canned_text">
operation parameters - canned text 
</member>
        <member name="T:op_aux_file">
auxiliary file name - mill:msurf recut file, wire:material library
</member>
        <member name="T:op_common">
operation parameters - common parameters for all mill operation types 
</member>
        <member name="T:op_db">
operation parameters - database info 
</member>
        <member name="T:LatheBAxisContourTurningPrmStruct">
            <summary> Lathe b-axis contour turning parameters. </summary>
        </member>
        <member name="T:LatheBAxisContourTurningBasicPrmStruct">
            <summary> Lathe b-axis contour turning angle control parameters. </summary>
        </member>
        <member name="T:LatheBAxisContourTurningDepthPrmStruct">
            <summary> Lathe b-axis contour turning depth parameters. </summary>
        </member>
        <member name="T:LatheBAxisContourTurningAdvancedPrmStruct">
            <summary> Lathe b-axis contour turning advanced parameters. </summary>
        </member>
        <member name="T:LatheMTSteadyRestPointPrmStruct">
            <summary> MT steady rest point parameters. </summary>
        </member>
        <member name="T:LatheMTSteadyRestPrmStruct">
            <summary> MT steady rest parameters. </summary>
        </member>
        <member name="M:GetLinkedComponentCount(LinkedComponentIdsStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Given a linked components ids struct count the number of non-zero ids. </summary>
            <param name="linkedComponentIdsStruct"> Linked component ids struct. </param>
            <returns> Linked component ids count. </returns>
        </member>
        <member name="M:LinkedComponentIdsStruct.op_Equality(LinkedComponentIdsStruct!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="rhs"> The right hand side. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="T:LinkedComponentIdsStruct">
            <summary> Component ids of linked components. </summary>
        </member>
        <member name="T:SteadyRestMoveType">
            <summary> Steady rest POCO move/operation types. </summary>
        </member>
        <member name="T:ThreadCustomPrmStruct">
            <summary> Thread custom parameters. </summary>
        </member>
        <member name="T:ThreadCustomCommonPrmStruct">
            <summary> Thread custom common rough and finish parameters. </summary>
        </member>
        <member name="T:ThreadCustomRetractMotionPrmStruct">
            <summary> Thread custom retract motion parameters. </summary>
        </member>
        <member name="T:ThreadCustomToolInspectionPrmStruct">
            <summary> Thread custom tool inspection parameters. </summary>
        </member>
        <member name="T:ThreadCustomAllowancePrmStruct">
            <summary> Thread custom allowance parameters. </summary>
        </member>
        <member name="T:ThreadCustomMultiStartPrmStruct">
            <summary> Thread custom multi-start parameters. </summary>
        </member>
        <member name="T:ThreadCustomFinishPrmStruct">
            <summary> Thread custom finish parameters. </summary>
        </member>
        <member name="T:ThreadCustomFinishDepthPrmStruct">
            <summary> Thread custom finish depth parameters. </summary>
        </member>
        <member name="T:ThreadCustomRoughPrmStruct">
            <summary> Thread custom rough parameters. </summary>
        </member>
        <member name="T:ThreadCustomRoughDepthPrmStruct">
            <summary> Thread custom rough depth parameters. </summary>
        </member>
        <member name="T:ThreadCustomRoughStepPrmStruct">
            <summary> Thread custom rough step parameters. </summary>
        </member>
        <member name="T:ThreadCustomShapePrmStruct">
            <summary> Thread custom shape parameters. </summary>
        </member>
        <member name="T:ThreadCustomParametricShapePrmStruct">
            <summary> Thread custom parametric shape parameters. </summary>
        </member>
        <member name="T:ThreadCustomParametricTrapezoidalShapePrmStruct">
            <summary> Thread Custom toolpath parametric trapezoidal shape parameters. </summary>
        </member>
        <member name="T:ThreadCustomParametricRopeShapePrmStruct">
            <summary> Thread Custom toolpath parametric rope shape parameters. </summary>
        </member>
        <member name="T:ThreadCustomParametricButtressShapePrmStruct">
            <summary> Thread Custom toolpath parametric buttress shape parameters. </summary>
        </member>
        <member name="T:ThreadCustomParametricSquareShapePrmStruct">
            <summary> Thread Custom toolpath parametric square shape parameters. </summary>
        </member>
        <member name="T:ThreadOvercutPrmStruct">
            <summary> Lathe thread overcut parameters. </summary>
        </member>
        <member name="T:ThreadAccelerationClearancePrmStruct">
            <summary> Lathe thread acceleration clearance parameters. </summary>
        </member>
        <member name="T:ThreadPitchPrmStruct">
            <summary> Lathe thread pitch parameters. </summary>
        </member>
        <member name="T:LatheEntryExitPrmStruct">
            <summary> Lathe entry and exit parameters. </summary>
        </member>
        <member name="T:LatheEntryOrExitPrmStruct">
            <summary> Lathe entry or exit parameters. </summary>
        </member>
        <member name="T:LatheFeedratePrmStruct">
            <summary> Lathe feed rate parameters. </summary>
        </member>
        <member name="T:LatheSpindleSpeedPrmStruct">
            <summary> Lathe stock to leave parameters. </summary>
        </member>
        <member name="T:LatheStockToLeavePrmStruct">
            <summary> Lathe stock to leave parameters struct. </summary>
        </member>
        <member name="T:GrooveShapeType">
            <summary> Values that represent parametric groove shape types. </summary>
        </member>
        <member name="T:ThreadAccelerationClearanceType">
            <summary> Values that represent thread acceleration clearance type. </summary>
        </member>
        <member name="T:MultiStartCutOrderType">
            <summary> Values that represent multi start cut order types. </summary>
        </member>
        <member name="T:LatheDistanceType">
            <summary> Values that represent lathe distance types. </summary>
        </member>
        <member name="T:LatheSpindleSpeedType">
            <summary> Values that represent lathe spindle speed types. </summary>
        </member>
        <member name="T:ToolInspectionLocationType">
            <summary> Values that represent tool inspection locations. </summary>
        </member>
        <member name="T:ThreadCustomCutOrderType">
            <summary> Values that represent thread custom cut order. </summary>
        </member>
        <member name="T:ThreadCustomRoughDepthType">
            <summary> Values that represent thread custom rough depth types. </summary>
        </member>
        <member name="T:ThreadCustomRoughStepType">
            <summary> Values that represent thread custom rough step types. </summary>
        </member>
        <member name="T:ThreadPitchType">
            <summary> Values that represent thread pitch types. </summary>
        </member>
        <member name="T:ThreadCustomOrientationType">
            <summary> Values that represent thread orientations. </summary>
        </member>
        <member name="T:StockModel_Parameters">
            <summary> Operation parameters - stock model. </summary>
        </member>
        <member name="M:Plane.GetAssocEntInfo(System.Boolean)">
            <summary> Map definition for this plane's associated entity information. </summary>
            <summary> Gets the associated entity information contained in this plane. </summary>
            <param name="warn"> (Optional) True to warn for bad solid data. </param>
            <returns> The associated entity information. </returns>
        </member>
        <member name="M:Plane.AssocEntInfo.#ctor(Plane.AssocMask,PlanePoint.AssocEntInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="assocMask"> Origin or Matrix. </param>
            <param name="assocEntInfo"> Information describing the associated entity. </param>
        </member>
        <member name="M:Plane.AssocEntInfo.op_Inequality(Plane.AssocEntInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object to compare. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Plane.AssocEntInfo.op_Equality(Plane.AssocEntInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object to compare. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="T:Plane.AssocEntInfo">
            <summary> Information about the plane's associated entity links. </summary>
        </member>
        <member name="M:Plane.SubtractMatrix33AndOrigin(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between given matrix and origin and TOP and transform this plane by that amount. </summary>
            <param name="m33">	    3x3 matrix to subtract from this. </param>
            <param name="originPt"> Point in world coordinates to subtract from this. </param>
        </member>
        <member name="M:Plane.SubtractPlane(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between given plane and TOP and transform this plane by that amount. </summary>
            <param name="thePlane"> Plane to subtract from this. </param>
        </member>
        <member name="M:Plane.AddMatrix33AndOrigin(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between TOP and given matrix and origin and transform this plane by that amount. </summary>
            <param name="m33">	    3x3 matrix to add to this. </param>
            <param name="originPt"> Point in world coordinates to add to add to this. </param>
        </member>
        <member name="M:Plane.AddPlane(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between TOP and given plane and transform this plane by that amount. </summary>
            <param name="thePlane"> Plane to add to this. </param>
        </member>
        <member name="M:Plane.AddOrSubtractMatrix33AndOrigin(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Calculate the transformation matrix between TOP and given matrix and origin and transform this plane by
		  that amount. </summary>
            <param name="m33">	    3x3 matrix to add to this. </param>
            <param name="originPt"> Point in world coordinates to add to add to this. </param>
            <param name="add">	    True to add, false to subtract. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.InverseTransformMatrixAndOrigin(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inverse transform matrix and origin. </summary>
            <param name="xfm">			 The transform. </param>
            <param name="m33">			 The 3x3 matrix. </param>
            <param name="worldOriginPt"> The world origin point. </param>
        </member>
        <member name="M:Plane.UndoXformApplyNext(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between to views and origins. </summary>
            <param name="from33"> Source view. </param>
            <param name="fromPt"> Source origin in world coordinates. </param>
            <param name="to33">   Destination view. </param>
            <param name="toPt">   Destination origin in world coordinates. </param>
            <returns> transformation matrix. </returns>
        </member>
        <member name="M:Plane.CreationMethodRequiresGeometry">
            <summary> See if m_CreationMethod requires geometry. </summary>
            <returns> true if it it does, false if it doesn't. </returns>
        </member>
        <member name="M:Plane.InitOperationView(op_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Initialize an op_view to the contents of this plane. </summary>
            <param name="opView">	    op_view to initialize. </param>
            <param name="refPlanes">    A reference to a MastercamPlanes objcet to get the view # from. </param>
            <param name="doWorkOffset"> true = set op_view.woff_n, false = maintain current op_view.woff_n value. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Plane.CheckParameters(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,EntityMap!System.Runtime.CompilerServices.IsConst*)">
            <summary> Check our parameters. </summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="ignorePrm">  (Optional) Ignore these parameters. </param>
            <param name="pEntityMap"> (Optional) The geometry map. </param>
            <returns> Return pair, first=Error code mask, second=true=plane was updated. </returns>
        </member>
        <member name="M:Plane.ConstructorCheck">
            <summary> set m_RegenErrors from constructor values. </summary>
            <returns> returns true if okay. </returns>
        </member>
        <member name="M:Plane.EraseGnomon">
            <summary> create and draw the Plane's icon in the screen background color. </summary>
        </member>
        <member name="M:Plane.DrawGnomon(System.Boolean,System.Boolean,System.Boolean)">
            <summary> Create and draw the Plane's gnomon in its native color. </summary>
            <param name="includeName"> true to include the plane name. </param>
            <param name="selected">    (Optional) true if plane planel active and plane selected (default = false). </param>
            <param name="enable">      (Optional) true to draw as enabled; false to draw as disabled (default = true). </param>
        </member>
        <member name="M:Plane.CreateGnomon(System.Boolean)">
            <summary> Create a PlaneGnomon for this plane in m_spGnomon. </summary>
            <param name="singleInstance"> true to single instance. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.GetGnomonPtr">
            <summary> Return const pointer to m_spGnomon. </summary>
            <returns> The gnomon pointer. </returns>
        </member>
        <member name="M:Plane.SetRegenErrors(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set regeneration errors. </summary>
            <param name="regenErrors"> error mask to add. </param>
            <returns> return previous error values. </returns>
        </member>
        <member name="M:Plane.RegenerateLinkedPlane(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Regenerate if we're a linked plane. </summary>
            <param name="refPlanes">			    A reference to a MastercamPlanes object to get our
										parent plane we're linked to. </param>
            <param name="dontUpdateMatrixOrOrigin"> True = dont update origin or matrix. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.RegenerateSolidOrMeshPlane(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,EntityMap!System.Runtime.CompilerServices.IsConst*)">
            <summary> Regenerates us to our associated entities. </summary>
            <param name="refPlanes">			    A reference to a MastercamPlanes object to get the
										view #'s from. </param>
            <param name="dontUpdateMatrixOrOrigin"> True = dont update origin or matrix. </param>
            <param name="pEntityMap">			    (Optional) Pointer to a geometry map.  If nullptr,
										we'll create one but it's expensive to do so. </param>
            <returns> [0] = true if matrix updated [1] = true if origin updated [2] = additional
		  transformation applied. </returns>
        </member>
        <member name="M:Plane.CompareOrigin(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compares the given origin with our m_Origin to detect changes. </summary>
            <param name="origin"> The origin to compare with m_Origin. </param>
            <returns> The comparison information. </returns>
        </member>
        <member name="T:Plane.OriginInfo">
            <summary> Values that represent plane origin information. </summary>
        </member>
        <member name="M:Plane.OriginShouldNotBeTransformed">
            <summary> Determines if we should NOT apply any additional transformation to the origin during
		  regneration. </summary>
            <returns> True if origin should have any additional transformation stored in m_Transform
		  applied when being regenerated, false if it should. </returns>
        </member>
        <member name="M:Plane.Regenerate(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,EntityMap!System.Runtime.CompilerServices.IsConst*)">
            <summary> Regenerates us to our associated geometry. </summary>
            <param name="refPlanes">			    A reference to a MastercamPlanes object to get the
										view #'s from. </param>
            <param name="dontUpdateMatrixOrOrigin"> True = dont update origin or matrix. </param>
            <param name="pEntityMap">			    (Optional) Pointer to a geometry map. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.DebugDiffTol(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get's the largest difference of any of the coordinates in the matrix or origin. </summary>
            <param name="m33">    The matrix to compare ours with. </param>
            <param name="origin"> The origin to compare ours with. </param>
            <returns> A pair with first = the largest difference, second = difference position in the origin or matrix. </returns>
        </member>
        <member name="M:Plane.DebugDiffStr(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Calls DebugPlaneStr() with the difference of this plane's matrix/origin with the
		  given ones. </summary>
            <param name="m33">			   The matrix to compare ours with. </param>
            <param name="origin">		   The origin to compare ours with. </param>
            <param name="showDebugDialog"> True to show the debug dialog, false to not. </param>
            <returns> True if there is a difference, false if not. </returns>
        </member>
        <member name="M:Plane.DebugPlaneNameStr(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calls DebugPlaneStr() with this plane's name. </summary>
            <param name="msg"> The message. </param>
        </member>
        <member name="M:Plane.MakePlanePtr(PlaneClass,Plane!System.Runtime.CompilerServices.IsConst*)">
            <summary> Allocates for a plane based on type. </summary>
            <param name="planeClass"> The plane class (SystemMatrix, NamedPlane, etc). </param>
            <param name="pPlane">	  (Optional) ptr to plane to copy. </param>
            <returns> Base class ptr to newly allocated plane. </returns>
        </member>
        <member name="M:Plane.PlaneToWorld(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point in plane coordinates to world coordinates (map from plane's view, add the plane origin). </summary>
            <param name="planePt"> The point in plane coordinates. </param>
            <returns> P3D of world point relative to the plane's view and origin. </returns>
        </member>
        <member name="M:Plane.WorldToPlane(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point in world coordinates to plane coordinates (map to plane's view, subtract the plane origin). </summary>
            <param name="worldPt"> The point in world coordinates. </param>
            <returns> P3D of world point relative to the plane's view and origin. </returns>
        </member>
        <member name="M:Plane.GetTemporary">
            <summary> Return value of m_Temporary. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.SetTemporary(System.Boolean)">
            <summary> Set m_Temporary. </summary>
            <param name="temporary"> if true, temporary plane will not be listed in Planes Manager and will be deleted on file/save. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:Plane.GetLparam">
            <summary> Gets the lparam. </summary>
            <returns> Return value of m_Lparam. </returns>
        </member>
        <member name="M:Plane.SetLparam(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Set optional user value. </summary>
            <param name="lParam"> value to set. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:Plane.SetEntityRefs(System.Boolean)">
            <summary> Increment or decrement ent.vw_refs in associated entities.  Should only be called if in the current db. </summary>
            <param name="increment"> true = increment, false = decrement. </param>
            <returns> return # of entities updated. </returns>
        </member>
        <member name="M:Plane.SetEntityRefs(System.Boolean,EntityMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Increment or decrement ent.vw_refs in associated entities.  Should only be called if in the current db. </summary>
            <param name="increment"> true = increment, false = decrement. </param>
            <param name="entityMap"> reference to geometry entities eptr/ID map, NULL will create one if regenerate is set to true. </param>
            <returns> return # of entities updated. </returns>
        </member>
        <member name="M:Plane.GetConstructorMethod">
            <summary> Gets constructor method. </summary>
            <returns> The constructor method. </returns>
        </member>
        <member name="M:Plane.GetRegenErrorString">
            <summary> return CString of m_RegenErrors. </summary>
            <returns> The regen error string. </returns>
        </member>
        <member name="M:Plane.GetRegenErrors">
            <summary> return value of m_RegenErrors. </summary>
            <returns> The regen errors. </returns>
        </member>
        <member name="M:Plane.SwapEntityIDs(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> swap old entity ID for new ID. </summary>
            <param name="oldID">	 the old entity ID. </param>
            <param name="newID">	 the new entity ID. </param>
            <param name="markDirty"> true = mark plane dirty if any ID's were swapped. </param>
            <returns> returns # of ID's swapped. </returns>
        </member>
        <member name="M:Plane.Erase">
            <summary> Erase the Plane's from the graphics window. </summary>
        </member>
        <member name="M:Plane.Draw(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Create and draw the Plane's wireframe icon in its native color. </summary>
            <param name="forceDraw">   (Optional) true to force drawing (ignore m_DisplayMode). </param>
            <param name="includeName"> (Optional) true to include the plane name (default = true). </param>
            <param name="selected">    (Optional) true if plane planel active and plane selected (default = false). </param>
            <param name="enable">      (Optional) true to draw as enabled; false to draw as disabled (default = true). </param>
        </member>
        <member name="M:Plane.ConvertNoWorkOffset(op_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 op_view structure without overriding the op_view's work offset value. </summary>
            <param name="opView"> reference to X6 op_view structure to fill in. </param>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view # from. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Convert(op_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 op_view structure. </summary>
            <param name="opView">    reference to X6 op_view structure to fill in. </param>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view # from. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Convert(group_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 group_view structure. </summary>
            <param name="groupView">	  reference to X6 group_view structure to fill in. </param>
        </member>
        <member name="M:Plane.Convert(view_ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MastercamPlanes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 view_ent structure. </summary>
            <param name="viewEnt">   reference to X6 view_ent structure to fill in. </param>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view # from. </param>
        </member>
        <member name="M:Plane.Convert(prm_xform_view*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this plane to an X6 view_ent structure. </summary>
            <param name="xformView"> reference to prm_xform_view structure to fill in. </param>
        </member>
        <member name="M:Plane.RemoveAssociation(Plane.AssocMask,System.Boolean,System.Boolean)">
            <summary> remove association between a plane and any entity. </summary>
            <param name="mask">					Remove geometry association for the origin, matrix or both. </param>
            <param name="deleteFromAssocEnt">	True to delete from associated ent (Solid or mesh), false just zero out association info in this plane. </param>
            <param name="resetTransform">		(Optional) True to reset the extra transform information. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.RemoveLink">
            <summary> Removes any link to another plane. </summary>
            <returns> The previous link (plane ID). </returns>
        </member>
        <member name="M:Plane.ValidRelativeType(Plane.RelativeType)">
            <summary> validate relative plane type. </summary>
            <param name="relType"> relative plane  (RelativeType::Front, etc) </param>
            <returns> return true if relative type is valid. </returns>
        </member>
        <member name="M:Plane.ValidCoordinateDisplayMask(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Validate coordinate display mask (lathe or mill). </summary>
            <param name="coordinateDisplayMask"> coordinate display mask type. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:Plane.ValidCoordinateDisplayType(CoordinateDisplayType)">
            <summary> Validate coordinate display type. </summary>
            <param name="coordinateDisplay"> coordinate display type. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:Plane.CompareForEditing(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> return true if the plane can be edited (not reserved, etc) </summary>
            <param name="obj">		 the Plane to check. </param>
            <param name="checkLock"> true = check if lock is on. </param>
            <returns> true if the plane can be edited. </returns>
        </member>
        <member name="M:Plane.CompareForNciChanges(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compare oldPlane against newPlane to determine if the change can affect a toolpath operation. </summary>
            <param name="newPlane"> New plane values. </param>
            <returns> true if a member variable's change will affect a toolpath operation, false if it won't. </returns>
        </member>
        <member name="M:Plane.CompareForPlaneRegen(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compare given plane to this, return true if differences are great enough to require a 
		  regeneration of this plane (i.e. matrix or origin changed, but not name, etc). </summary>
            <param name="obj"> The plane to compare. </param>
            <returns> Returns mask (COMPARISON_MATRIX, etc). </returns>
        </member>
        <member name="M:Plane.IsParallel(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Check if this plane is parallel to given view #. </summary>
            <param name="m33">		 SystemMatrix to compare with this. </param>
            <param name="oppZ">		 [in,out] reference to bool will be set to true if Z component is in the opposite direction. </param>
            <param name="allowOppZ"> (Optional) true = allow opposite Z component check, false = all opposite Z component views are ignored. </param>
            <returns> Return true if parallel. </returns>
        </member>
        <member name="M:Plane.UsesEntityIDs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Check if entity ID is used in this plane. </summary>
            <param name="entIDs"> Entity IDs to check for. </param>
            <returns> return true if any entity ID in the given set is associated with this plane. </returns>
        </member>
        <member name="M:Plane.ValidPlaneType(PlaneType,System.Boolean)">
            <summary> Check validity of plane type. </summary>
            <param name="whichPlane"> PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE. </param>
            <param name="warn">		  (Optional) debug only warning. </param>
            <returns> Return false if any other value was given in whichPlane. </returns>
        </member>
        <member name="M:Plane.GetLinkId">
            <summary> Get plane ID of the plane this plane is linked to. </summary>
            <returns> Return the ID of the plane this plane is linked (dependent) to, 0 if not linked. </returns>
        </member>
        <member name="M:Plane.GetLink">
            <summary> get the Plane's linking info (RelativeType::Front, etc), transform data </summary>
            <returns> The linking info. </returns>
        </member>
        <member name="M:Plane.IsAssoc(Plane.AssocMask)">
            <summary> return true if we are associated to geometry. </summary>
            <param name="assocMask"> What type of association are you checking?. </param>
            <returns> true if association found, false if not. </returns>
        </member>
        <member name="M:Plane.IsLatheCoordinateDisplay">
            <summary> Query if this object contains lathe coordinate display. </summary>
            <returns> true if lathe coordinate display, false if not. </returns>
        </member>
        <member name="M:Plane.IsReserved(System.Boolean)">
            <summary> return true if this plane is a reserved plane, false if it is not. </summary>
            <param name="warn"> (Optional) true to display warning. </param>
            <returns> return true if this plane is a reserved plane, false if it is not. </returns>
        </member>
        <member name="M:Plane.ValidCreationMethod(Plane.CreationMethod)">
            <summary> validate Plane creation method. </summary>
            <param name="creationMethod"> int representing creation method (CreationMethod::ThreePoints, etc) </param>
            <returns> returns true if valid. </returns>
        </member>
        <member name="M:Plane.IsTopAtZero">
            <summary> Return true if this plane is TOP at an origin of X0 Y0 Z0. </summary>
            <returns> true if top at zero, false if not. </returns>
        </member>
        <member name="M:Plane.MatrixAndOriginAreEqual(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Return true if this plane's matrix and origin match given plane's matrix and origin. </summary>
            <param name="thePlane"> a plane to compare this to. </param>
            <param name="warn">	    (Optional) true = debug only warning if not equal. </param>
            <returns> return true if equal within plane tolerance. </returns>
        </member>
        <member name="M:Plane.MatrixAndOriginAreEqual(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Return true if this plane's matrix and origin match given matrix and origin. </summary>
            <param name="m33">		 3x3 matrix to compare. </param>
            <param name="wOriginPt"> origin point in world coordinates to compare. </param>
            <param name="warn">		 (Optional) true = debug only warning if not equal. </param>
            <returns> return true if equal within plane tolerance. </returns>
        </member>
        <member name="M:Plane.GetIntersectionInView(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> calculate 3D intersection point within the given view for 2 entities. </summary>
            <param name="m33">		    view to calculate intersection in. </param>
            <param name="ent1">		    entity 1 of 2. </param>
            <param name="ent2">		    entity 2 of 2. </param>
            <param name="selPt1">	    2D selection point near entity 1. </param>
            <param name="selPt2">	    2D selection point near entity 2. </param>
            <param name="tVal">		    2D t value point for entity 1. </param>
            <param name="wIntersectPt"> calculated intersection point. </param>
            <returns> returns true if parallel. </returns>
        </member>
        <member name="M:Plane.LinesAreParallel(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> determine if the 2 given lines are parallel. </summary>
            <param name="line0"> line 1 of 2. </param>
            <param name="line1"> line 2 of 2. </param>
            <returns> returns true if parallel. </returns>
        </member>
        <member name="M:Plane.CheckFlat2lines(System.Boolean,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D)">
            <summary> determine the normal of the plane for two 3d lines. </summary>
            <param name="rejectIfSkew"> reject these lines (return false) if they do not lie in the same plane. </param>
            <param name="line0">	    line 1 of 2. </param>
            <param name="line1">	    line 2 of 2. </param>
            <param name="normXprd">	    normal of the plane that line0 and line1 lie in. </param>
            <returns> returns true if flat. </returns>
        </member>
        <member name="M:Plane.GetMatrixFrom2lines(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> calculate a 3x3 matrixm view # and intersection point from 2 lines. </summary>
            <param name="line0">	    line 1 of 2. </param>
            <param name="line1">	    line 2 of 2. </param>
            <param name="m33">		    calculated 3x3 matrix. </param>
            <param name="wIntersectPt"> calculated intersection point. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.GetMatrixFrom2lines(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> calculate a 3x3 matrix from 2 lines. </summary>
            <param name="line0"> line 1 of 2. </param>
            <param name="line1"> line 2 of 2. </param>
            <param name="m33">   calculated 3x3 matrix. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.GetMatrixFrom3points(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert 3 points into 2 lines and calculate a 3x3 matrix and an intersection point. </summary>
            <param name="pt1">		    point 1 of 3. </param>
            <param name="pt2">		    point 2 of 3. </param>
            <param name="pt3">		    point 3 of 3. </param>
            <param name="m33">		    calculated 3x3 matrix. </param>
            <param name="wIntersectPt"> calculated intersection point. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.RotateMatrix33(System.Double,System.Int32,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> rotate a Matrix33 about an axis by degrees. </summary>
            <param name="rotAngleDeg"> rotation amount in degrees. </param>
            <param name="rotAxis">	   the X, Y or Z axis to rotate about. </param>
            <param name="m33">		   the Matrix33 to rotate. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.RotateMatrix33Relative(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane.RelativeType)">
            <summary> rotate a Matrix33 by relative type. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="m33">		 [in,out] the Matrix33 to rotate. </param>
            <param name="relType">   the relative type (RelativeType::Front, etc) </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.MultiplyMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply this plane's matrix by the given matrix. </summary>
            <param name="m33"> a Matrix33 object to multiple this by. </param>
        </member>
        <member name="M:Plane.MultiplyMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply two 3x3 matrices. </summary>
            <param name="m1">	   a Matrix33 object. </param>
            <param name="m2">	   a Matrix33 object. </param>
            <param name="mResult"> the destination Matrix33 object ( m1 * m2) </param>
        </member>
        <member name="M:Plane.TransformTo(Matrix33!System.Runtime.CompilerServices.IsConst,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets new matrix, origin and transform after removing old transform. </summary>
            <param name="m33">	    The Plane's new 3x3 matrix. </param>
            <param name="originPt"> The Plane's new origin point in world coordinates. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.Transform(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Transform this plane by the given transformation matrix. </summary>
            <param name="xm">					 valid transformation matrix. </param>
            <param name="doOrigin">				 transform plane origin too. </param>
            <param name="onlyIfAssociated">		 If true, the transform is only applied if the plane is associated in origin or in orientation. </param>
            <param name="swapMatricesOperation"> (optional) if true, result matrix is initial plane matrix * transformation matrix.
									 Otherwise, result matrix is transformation matrix * initial plane matrix. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Rotate(System.Int32,System.Double)">
            <summary> Rotates an existing non-reserved, non-locked plane. </summary>
            <param name="axis">		   The axis to rotate about (X=0, Y=1, Z=2). </param>
            <param name="rotAngleDeg"> The rotation angle in degrees. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.RotateRelative(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane.RelativeType)">
            <summary> Transform this plane by a relative plane. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="relType">   RelativeType::Front, RelativeType::Back, etc. </param>
        </member>
        <member name="M:Plane.BnciCalcXmatrix(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,XfmMatrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between to views and origins for bnci purposes. </summary>
            <param name="from33"> Source view. </param>
            <param name="fromPt"> Source origin in world coordinates. </param>
            <param name="to33">   Destination view. </param>
            <param name="toPt">   Destination origin in world coordinates. </param>
            <param name="xm">	  [in,out] Reference to transformation matrix to fill in. </param>
            <returns> Return true if calculation successful and contents of xm is valid. </returns>
        </member>
        <member name="M:Plane.BnciTransform(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Transform this for bnci purposes. </summary>
            <param name="xm">	    The transformation. </param>
            <param name="doOrigin"> True to do origin. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.CalcXmatrix(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Calculate the transformation matrix between to views and origins. </summary>
            <param name="from33"> Source view. </param>
            <param name="fromPt"> Source origin in world coordinates. </param>
            <param name="to33">   Destination view. </param>
            <param name="toPt">   Destination origin in world coordinates. </param>
            <returns> Return transformation matrix. </returns>
        </member>
        <member name="M:Plane.TransformMatrixAndOrigin(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Transform a matrix and origin. </summary>
            <param name="xfm">			 The transform. </param>
            <param name="m33">			 [in,out] The matrix to transform. </param>
            <param name="worldOriginPt"> [in,out] The world origin point to transform. </param>
            <param name="swapMatricesOperation"> (optional) if true, result matrix is initial plane matrix * transformation matrix.
									 Otherwise, result matrix is transformation matrix * initial plane matrix. </param>
        </member>
        <member name="M:Plane.SetLink(Plane.Link!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the values in m_Link. </summary>
            <param name="linkInfo"> Information describing the dependency. </param>
            <returns> Previous value of m_Link. </returns>
        </member>
        <member name="M:Plane.RemoveTransform">
            <summary> Inverse transform by m_Transform. </summary>
            <returns> Previous value of m_Transform. </returns>
        </member>
        <member name="M:Plane.SetTransform(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets our transform in m_Transform. </summary>
            <param name="xfm"> The transformation matrix. </param>
            <returns> Previous value of m_Transform. </returns>
        </member>
        <member name="M:Plane.InitTransform(Plane.AssocMask)">
            <summary> Initializes the m_Transform. </summary>
            <param name="assocMask"> (Optional) Which parts of the additional transformation do you want
						 to initialize?  Default = both matrix and origin. </param>
            <returns> Previous value of m_Transform. </returns>
        </member>
        <member name="M:Plane.CopyNonReservedData(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy data that can be changed in a reserved Plane. </summary>
            <param name="thePlane"> The plane to copy from. </param>
        </member>
        <member name="M:Plane.SetDirty(System.Boolean)">
            <summary> Set plane's dirty flag. </summary>
            <param name="dirty"> true = dirty (requires regneration), false = clean. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:Plane.SetConstructorCoordinateDisplay(CoordinateDisplayType)">
            <summary> Sets coordinate display for all constructors.
		  This will be the default coordinate display value assigned to the Plane's upon instantiation. </summary>
            <param name="coordinateDisplay"> CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.SetCoordinateDisplay(CoordinateDisplayType)">
            <summary> Set the plane's coordinate display mode. </summary>
            <param name="coordinateDisplay"> CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD. </param>
            <returns> return previous value, -1 if invalid coordinateDisplay. </returns>
        </member>
        <member name="M:Plane.SetOutputCommentToNci(System.Boolean)">
            <summary> set the Plane's ouput comment to NCI mode. </summary>
            <param name="outputCommentToNci"> true = ouput Plane's comment to NCI. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetComment(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's comment string. </summary>
            <param name="comment"> a comment. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetDisplayMode(System.Int32)">
            <summary> set display (whether it will be drawn) to on or off. </summary>
            <param name="displayMode"> 1 = on, 0 = off. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetOriginPoint(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> set the Plane's origin. </summary>
            <param name="srcPt">	   the Plane's new origin in world coordinates. </param>
            <param name="removeAssoc"> true = remove info to associated geometry. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetOriginPoint(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's origin. </summary>
            <param name="srcPt"> the Plane's new origin in world coordinates. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="T:Plane.OriginSelection">
            <summary> Values that represent the return value of SelectOriginPoint (). </summary>
        </member>
        <member name="M:Plane.SetMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's 3x3 matrix (m_33) </summary>
            <param name="m33"> the Plane's new 3x3 matrix. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.SetType(PlaneType)">
            <summary> Set the plane type. </summary>
            <param name="whichPlane"> PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE. </param>
            <returns> Return previous value. </returns>
        </member>
        <member name="M:Plane.SetRelativeWcsID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set Plane relative to a WCS. </summary>
            <param name="relativeWcsID"> a Plane ID (whatever the active WCS was at the time of setting) </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetColor(System.Int32)">
            <summary> set the Plane's color. </summary>
            <param name="newColor"> the Plane's color. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetWorkOffset(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set the Plane's work offset value. </summary>
            <param name="work_offset"> the Plane's work offset value. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's name. </summary>
            <param name="name"> the Plane's name. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:Plane.SetMatrixPoints(std.vector&lt;PlanePoint,std.allocator&lt;PlanePoint&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's points and selected entity info used in it's definition. </summary>
            <param name="planePoints"> array of point info. </param>
            <returns> returns size of array. </returns>
        </member>
        <member name="M:Plane.SetID(System.Int32!System.Runtime.CompilerServices.IsLong,Plane.Link!System.Runtime.CompilerServices.IsConst*)">
            <summary> set the unique ID of the plane. </summary>
            <param name="newID"> the new ID. </param>
            <param name="pLink"> (Optional) Info of the dependent parent plane. </param>
            <returns> return the previous value of the ID. </returns>
        </member>
        <member name="M:Plane.SetVersion(System.Int32)">
            <summary> set the version. </summary>
            <param name="version"> The version. </param>
            <returns> return the previous version value. </returns>
        </member>
        <member name="M:Plane.SetSelected(System.Boolean)">
            <summary> set selected flag. </summary>
            <param name="selected"> true = selected. </param>
            <returns> return previous value of selected flag. </returns>
        </member>
        <member name="M:Plane.SetCreationMethod(Plane.CreationMethod)">
            <summary> set the creation method. </summary>
            <param name="creationMethod"> int representing creation method (CreationMethod::ThreePoints, etc) </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:Plane.SetSectionView(System.Boolean)">
            <summary> Sets the value of m_SectionView. </summary>
            <param name="on"> true = used as a section view. </param>
            <returns> The previous value of m_SectionView. </returns>
        </member>
        <member name="M:Plane.CastNamedPlanePtr(PlaneBase!System.Runtime.CompilerServices.IsConst*)">
            <summary> Casts the Plane pointer from a PlaneBasePtr to a Plane * if the class is PlaneClass::NamedPlane. </summary>
            <param name="pBase"> The base. </param>
            <returns> nullptr if it fails, else a valid Plane *. </returns>
        </member>
        <member name="M:Plane.CastNamedPlanePtr(std.shared_ptr&lt;PlaneBase&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Casts the Plane pointer from a PlaneBasePtr to a Plane * if the class is PlaneClass::NamedPlane. </summary>
            <param name="pBase"> The base. </param>
            <returns> nullptr if it fails, else a valid Plane *. </returns>
        </member>
        <member name="M:Plane.GetDirty">
            <summary> return the value of the 'dirty-needs regeneration' flag. </summary>
            <returns> return the value of the 'dirty-needs regeneration' flag. </returns>
        </member>
        <member name="M:Plane.CoordinateDisplayMatch(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return true if coordinate display and mask match value (CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD) </summary>
            <param name="coordDisplayMask"> plane coordinate display filter (COORD_MASK_MILL, COORD_MASK_LATHE_X, COORD_MASK_LATHE_D or COORD_MASK_ALL) </param>
            <returns> return true if coordinate display and mask match value. </returns>
        </member>
        <member name="M:Plane.GetCoordinateDisplayDescription(CoordinateDisplayType)">
            <summary> get the active coordinate display description. </summary>
            <param name="coordinateDisplay"> CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD. </param>
            <returns> return description. </returns>
        </member>
        <member name="M:Plane.GetCoordinateDisplayMask">
            <summary> Gets coordinate display mask from the coordinate display value of this. </summary>
            <returns> The coordinate display mask. </returns>
        </member>
        <member name="M:Plane.GetCoordinateDisplayMask(CoordinateDisplayType)">
            <summary> return correct mask value for coordinate display value (CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD) </summary>
            <param name="coordinateDisplay"> The coordinate display. </param>
            <returns> The coordinate display mask. </returns>
        </member>
        <member name="M:Plane.GetCoordinateDisplay">
            <summary> return coordinate display value (CoordinateDisplayType::Mill, CoordinateDisplayType::LatheX or CoordinateDisplayType::LatheD) </summary>
            <returns> The coordinate display. </returns>
        </member>
        <member name="M:Plane.GetDisplayMode">
            <summary> return icon display mode (0=off, 1=on) </summary>
            <returns> The display mode. </returns>
        </member>
        <member name="M:Plane.GetOutputCommentToNci">
            <summary> return comment output to NCI value. </summary>
            <returns> return comment output to NCI value. </returns>
        </member>
        <member name="M:Plane.GetComment">
            <summary> get the Plane's comment string. </summary>
            <returns> returns the Plane's comment string. </returns>
        </member>
        <member name="M:Plane.GetEntityIDsOrigin">
            <summary> Collect all the entity ID's used to make the Plane's origin. </summary>
            <returns> returns ID's collected in set. </returns>
        </member>
        <member name="M:Plane.GetEntityIDsMatrix">
            <summary> Collect all the entity ID's used to make the Plane's matrix. </summary>
            <returns> returns ID's collected in set. </returns>
        </member>
        <member name="M:Plane.GetEntityIDs">
            <summary> Collect all the entity ID's used to make the Plane. </summary>
            <returns> returns ID's collected in set. </returns>
        </member>
        <member name="M:Plane.GetColor">
            <summary> get the Plane's color. </summary>
            <returns> returns the Plane's color. </returns>
        </member>
        <member name="M:Plane.GetWorkOffset">
            <summary> get the Plane's work offset value. </summary>
            <returns> returns the Plane's work offset value. </returns>
        </member>
        <member name="M:Plane.GetDescription(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get a description of the Plane into a CStringArray. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="accuracy">  # of places behind the decimal point. </param>
            <param name="strArray">  CStringArray to stuff description into. </param>
            <returns> return size of strArray. </returns>
        </member>
        <member name="M:Plane.GetViewNo(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns the view # of the plane's matrix. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <returns> The view number. </returns>
        </member>
        <member name="M:Plane.GetDescription(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get a description of the Plane. </summary>
            <param name="refPlanes"> A reference to a MastercamPlanes object to get the view #'s from. </param>
            <returns> return Plane description. </returns>
        </member>
        <member name="M:Plane.GetDescription(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,PlaneType,System.Int32)">
            <summary> get a description of the Plane. </summary>
            <param name="refPlanes">	 A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="machineType">   machine type (MILL_MACHINE, LATHE_MACHINE, etc) </param>
            <param name="whichPlane">    plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or
							 PlaneType::WCSPLANE) </param>
            <param name="includeOrigin"> (Optional) type of origin description (-1=origin in view coords, 0=no origin,
							 1=origin in world coords) </param>
            <returns> return Plane description. </returns>
        </member>
        <member name="M:Plane.GetTypeDescription(PlaneType)">
            <summary> get a description of the given Plane type. </summary>
            <param name="whichPlane"> the plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE, PlaneType::WCSPLANE) </param>
            <returns> return Plane type description. </returns>
        </member>
        <member name="M:Plane.GetTypeDescription">
            <summary> get a description of the Plane type. </summary>
            <returns> return Plane type description. </returns>
        </member>
        <member name="M:Plane.IntToType(System.Int32)">
            <summary> Convert an int to a PlaneType. </summary>
            <param name="planeType"> int type of the plane. </param>
            <returns> PlaneType. </returns>
        </member>
        <member name="M:Plane.TypeToInt(PlaneType)">
            <summary> Convert PlaneType to an int for use as an array index. </summary>
            <param name="planeType"> Type of the plane. </param>
            <returns> int. </returns>
        </member>
        <member name="M:Plane.GetTypes">
            <summary> collect the 4 Plane types. </summary>
            <returns> The 4 types in CPLANE, TPLANE, GPLANE and WCS order. </returns>
        </member>
        <member name="M:Plane.GetSelected">
            <summary> return selected flag. </summary>
            <returns> return selected flag. </returns>
        </member>
        <member name="M:Plane.GetGeometry(std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get both the origin geometry and the geometry entities used to create the Plane. </summary>
            <param name="originGeometry">   array to copy the origin geometry into. </param>
            <param name="selectedGeometry"> array to copy the geometry into. </param>
            <param name="entityMap">	    entity ID-eptr map to look thru and find and extract entity from db with. </param>
            <param name="entsNotFound">	    ID's entities that could not be found in geomMap. </param>
            <returns> returns true if any geometry was collected. </returns>
        </member>
        <member name="M:Plane.GetMatrixGeometry(std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the geometry entities used to create the Plane. </summary>
            <param name="selectedGeometry"> array to copy the geometry into. </param>
            <param name="entityMap">	    entity ID-eptr map to look thru and find and extract entity from db with. </param>
            <param name="entsNotFound">	    ID's entities that could not be found in geomMap. </param>
            <returns> returns # of entities copied into the array. </returns>
        </member>
        <member name="M:Plane.GetOriginGeometry(std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the Plane's point' origin geometry entity. </summary>
            <param name="originGeometry"> array to copy the geometry into. </param>
            <param name="entityMap">	  entity ID-eptr map to look thru and find and extract entity from db with. </param>
            <param name="entsNotFound">   ID's entities that could not be found in geomMap. </param>
            <returns> returns true if entity successfully retrieved form db. </returns>
        </member>
        <member name="M:Plane.GetMatrixPoints(System.Boolean)">
            <summary> get the Plane's points and selected entity info used in it's definition. </summary>
            <param name="includeEmpty"> (Optional) True to include all 3 m_MatrixPoints[3], false for
							only one associated to geometry. </param>
            <returns> Plane's points and selected entity info used in it's definition. </returns>
        </member>
        <member name="M:Plane.GetMatchingPointFromDb(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> read thru the current db and return a P_ID entity that matches the given origin. </summary>
            <param name="wOriginPt"> origin in world coordinates. </param>
            <param name="ptEnt">	 The point ent. </param>
            <returns> return geometry entity ID if successful. </returns>
        </member>
        <member name="M:Plane.GetOriginInViewCoordinates(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return the Plane's origin in the Plane's view coordinates. </summary>
            <param name="p3d"> p_3d type to copy origin into. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Plane.GetOriginInViewCoordinates">
            <summary> return the Plane's origin in the Plane's view coordinates. </summary>
            <returns> The origin view coordinates. </returns>
        </member>
        <member name="M:Plane.GetOriginInWorldCoordinates(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get the Plane's origin in world coordinates. </summary>
            <param name="p3d"> p_3d type to copy origin into. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Plane.GetOriginInWorldCoordinates">
            <summary> return the Plane's origin in world coordinates. </summary>
            <returns> The origin world coordinates. </returns>
        </member>
        <member name="M:Plane.GetTransform">
            <summary> Gets the value in m_Transform. </summary>
            <returns> the value in m_Transform. </returns>
        </member>
        <member name="M:Plane.GetOriginPoint">
            <summary> get the Plane's origin. </summary>
            <returns> returns the Plane's origin. </returns>
        </member>
        <member name="M:Plane.GetType">
            <summary> return Plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </summary>
            <returns> return Plane type. </returns>
        </member>
        <member name="M:Plane.GetRelativeWcsID">
            <summary> return the Plane's relative-to-a-WCS-Plane-ID. </summary>
            <returns> return the Plane's relative-to-a-WCS-Plane-ID. </returns>
        </member>
        <member name="M:Plane.GetCreationMethodDescription">
            <summary> Gets creation method description. </summary>
            <returns> The creation method description. </returns>
        </member>
        <member name="M:Plane.GetCreationMethod">
            <summary> return the creation method. </summary>
            <returns> returns the creation method. </returns>
        </member>
        <member name="M:Plane.GetSectionView">
            <summary> Gets the value of m_SectionView. </summary>
            <returns> The value of m_SectionView. </returns>
        </member>
        <member name="M:Plane.IsEqual(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'thePlane' is equal. </summary>
            <param name="obj">	    the plane to compare to this. </param>
            <param name="errorStr"> The string to fill in with the name of the non-matching member variable. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:Plane.op_LessThan(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to another plane. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:Plane.op_Inequality(group_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an group_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Inequality(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an op_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Equality(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to a Matrix33 object. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Equality(group_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an group_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Equality(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an op_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Equality(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_Inequality(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Plane.op_SubtractionAssignment(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtraction-assignment operator. </summary>
            <param name="m33"> The third m 3. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Plane.op_SubtractionAssignment(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtraction-assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Plane.op_AdditionAssignment(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> addition-assignment operator. </summary>
            <param name="m33"> The third m 3. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Plane.op_AdditionAssignment(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> addition-assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Plane.op_Assign(PlaneBase!System.Runtime.CompilerServices.IsConst*)">
            <summary> Assignment operator. </summary>
            <param name="pPlane"> The plane base raw pointer. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.op_Assign(std.shared_ptr&lt;PlaneBase&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Assignment operator. </summary>
            <param name="pPlane"> The plane base shared pointer. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.op_Assign(view_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.op_Assign(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.op_Assign(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Plane.#ctor(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:Plane.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:Plane.InitReserved">
            <summary> zero out all member variables that determine if a Plane is 'reserved'. </summary>
        </member>
        <member name="M:Plane.Init">
            <summary> zero out all member variables. </summary>
        </member>
        <member name="M:Plane.#ctor(PlaneBase!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="pPlane"> The plane. </param>
        </member>
        <member name="M:Plane.#ctor(std.shared_ptr&lt;PlaneBase&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Constructor. </summary>
            <param name="pPlane"> The plane. </param>
        </member>
        <member name="M:Plane.#ctor(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for a normal. </summary>
            <param name="vNormLine">  the normal. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for a normal. </summary>
            <param name="vNorm">	  the normal. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
parameteritized constructor for an entity array.  It figures out the appropriate constructor to
call based on the number of entities it contains.
</summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="entArray">   array of entities. </param>
            <param name="selPt">	  location from original selection. </param>
            <param name="tVal">		  line endpoint t value. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for a single entity types that contain their own matrix or normal info (like arcs) </summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="theEnt">	  single entity (arc, spine, nurb, surface, cross-hatch, etc. </param>
            <param name="selPt">	  location from original selection. </param>
            <param name="tVal">		  line endpoint t value. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for 3 point entities. </summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="ptX">		  point entity lying on the X axis. </param>
            <param name="ptY">		  point entity lying on the Y axis. </param>
            <param name="ptZ">		  point entity defining Z axis and origin. </param>
            <param name="tVal">		  line endpoint t value. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or
						  PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to 1 for successful intersection, 2 for successful endpoint, or 0 for
						  failure. </param>
        </member>
        <member name="M:Plane.#ctor(MastercamPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor for 2 line entities. </summary>
            <param name="refPlanes">  A reference to a MastercamPlanes object to get the view #'s from. </param>
            <param name="ent1">		  line entity defining X axis. </param>
            <param name="ent2">		  line entity defining Y axis. </param>
            <param name="tVal">		  line endpoint t value. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or
						  PlaneType::WCSPLANE) </param>
            <param name="succfFlag">  will be set to point entry method (PEC_CENTER, PEC_INTERSECT, etc) or 0 for failure. </param>
        </member>
        <member name="M:Plane.#ctor(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> parameteritized constructor. </summary>
            <param name="opView">	  Mastercam op_view type. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
        </member>
        <member name="M:Plane.#ctor(group_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> parameteritized constructor. </summary>
            <param name="groupView">  Mastercam group_view type. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
        </member>
        <member name="M:Plane.#ctor(view_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="viewEnt"> Mastercam view entity. </param>
        </member>
        <member name="M:Plane.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> parameteritized constructor. </summary>
            <param name="m33">		  3x3 matrix. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
        </member>
        <member name="M:Plane.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlaneType)">
            <summary> parameteritized constructor. </summary>
            <param name="m33">		  3x3 matrix. </param>
            <param name="origin">	  Plane origin in world coordinates. </param>
            <param name="whichPlane"> plane type (PlaneType::CPLANE, PlaneType::TPLANE, PlaneType::GPLANE or PlaneType::WCSPLANE) </param>
        </member>
        <member name="M:Plane.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Plane.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:Plane.Link.Validate">
            <summary> Validates this object, zero-out if not. </summary>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Plane.Link.IsValid">
            <summary> Query if this object is valid. </summary>
            <returns> True if valid, false if not. </returns>
        </member>
        <member name="M:Plane.Link.op_Inequality(Plane.Link!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Plane.Link.op_Equality(Plane.Link!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Plane.Link.#ctor(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Plane.RelativeType)">
            <summary> Constructor. </summary>
            <param name="parentID"> Identifier for the parent plane. </param>
            <param name="relType">  Type of the relative (RelativeType::Off, RelativeType::Front, etc.) </param>
        </member>
        <member name="M:Plane.Link.#ctor(Plane.RelativeType)">
            <summary> Constructor. </summary>
            <param name="relType"> Type of the relative. </param>
        </member>
        <member name="T:Plane.Link">
            <summary> Class containing plane dependency to another plane info. </summary>
        </member>
        <member name="T:Plane.ConstructorMethod">
            <summary> Constructor method (saved in m_ConstructorMethod). </summary>
        </member>
        <member name="T:Plane.COORD_DISP_MASK">
            <summary> used when searching for matching planes. </summary>
        </member>
        <member name="T:Plane.COMPARISON_REGEN_MASK">
            <summary> comparison values to determine whether a regeneration of the plane is required. </summary>
        </member>
        <member name="T:Plane.AssocMask">
            <summary> Values that represent whether the origin and/or matrix is associated to geometry. </summary>
        </member>
        <member name="T:Plane.IconDrawMode">
            <summary> Plane icon drawing modes. </summary>
        </member>
        <member name="T:Plane.RelativeType">
            <summary> relative plane types. </summary>
        </member>
        <member name="T:Plane.CreationMethod">
            <summary> Plane creation methods. </summary>
        </member>
        <member name="M:SystemPlanes.SetQuickCplaneID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets the value of m_QuickCplaneID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> Previous value of m_QuickCplaneID. </returns>
        </member>
        <member name="M:SystemPlanes.GetQuickCplaneID">
            <summary> Gets the value of m_QuickCplaneID. </summary>
            <returns> the value of m_QuickCplaneID. </returns>
        </member>
        <member name="M:SystemPlanes.GetStatusBarPlaneLabel(System.Int32)">
            <summary> Gets status bar plane label from m_StatusBarPlaneLabels using an int. </summary>
            <param name="planeType"> Type of plane in int form. </param>
            <returns> The status bar plane label. </returns>
        </member>
        <member name="M:SystemPlanes.GetStatusBarPlaneLabel(PlaneType)">
            <summary> Gets status bar plane label from m_StatusBarPlaneLabels. </summary>
            <param name="planeType"> Type of plane. </param>
            <returns> The status bar plane label. </returns>
        </member>
        <member name="M:SystemPlanes.IsLatheCoordinateDisplay(CoordinateDisplayType)">
            <summary> Query if 'coordinateDisplay' is lathe coordinate display. </summary>
            <param name="coordinateDisplay"> The coordinate display. </param>
            <returns> true if lathe coordinate display, false if not. </returns>
        </member>
        <member name="M:SystemPlanes.GetViewportInfo">
            <summary> Gets viewport information. </summary>
            <returns> The viewport information. </returns>
        </member>
        <member name="M:SystemPlanes.SetViewportInfo(ViewportInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets viewport information. </summary>
            <param name="vpInfo"> Information describing the vp. </param>
            <returns> Returns previous value </returns>
        </member>
        <member name="M:SystemPlanes.GetLock(PlaneType)">
            <summary> Gets the lock status for the given plane </summary>
            <param name="whichPlane"> CPLANE, TPLANE, WCS or GPLANE. </param>
            <returns> The lock. </returns>
        </member>
        <member name="M:SystemPlanes.SetLock(PlaneType,SystemPlanes.PLANE_LOCK!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a lock on the given plane </summary>
            <param name="whichPlane"> CPLANE, TPLANE, WCS or GPLANE. </param>
            <param name="lock">		  LOCK_ALL_OFF, LOCK_ORIGIN	or LOCK_MATRIX. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:SystemPlanes.GetPrevious(PlaneType)">
            <summary> Gets the previous matrix/origin pair. </summary>
            <param name="whichPlane"> CPLANE, TPLANE, WCS or GPLANE. </param>
            <returns> The previous matrix/origin pair. </returns>
        </member>
        <member name="M:SystemPlanes.SetPrevious(PlaneType,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set m_Previous[] matrix/origin pairs. </summary>
            <param name="whichPlane">  CPLANE, TPLANE, WCS or GPLANE. </param>
            <param name="m33">		   The matrix to set. </param>
            <param name="worldOrigin"> The origin in world coordinates. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:SystemPlanes.GetPlaneID(PlaneType)">
            <summary> Gets plane identifier. </summary>
            <param name="whichPlane"> CPLANE, TPLANE, GPLANE or WCSPLANE </param>
            <returns> The plane ID for the requested active plane. </returns>
        </member>
        <member name="M:SystemPlanes.SetPlaneID(PlaneType,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Set m_PlaneIDs[]. </summary>
            <param name="whichPlane"> The which plane. </param>
            <param name="planeID">    plane ID to set. </param>
            <param name="viewNo">	  The view no of the plane's matrix to set in m_CacheViewNos. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:SystemPlanes.GetUnnamedOrigin">
            <summary> return m_UnnamedOrigin. </summary>
            <returns> const reference to m_UnnamedOrigin. </returns>
        </member>
        <member name="M:SystemPlanes.SetUnnamedOrigin(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set m_UnnamedOrigin. </summary>
            <param name="origin"> origin to set. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:SystemPlanes.GetUnnamedM33">
            <summary> return a Matrix33. </summary>
            <returns> Copy of m_UnnamedM33. </returns>
        </member>
        <member name="M:SystemPlanes.SetUnnamedM33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Set m_UnnamedM33. </summary>
            <param name="m33"> matrix to set. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="T:SystemPlanes.PLANE_LOCK">
            <summary> Values that represent PLANE_LOCK. </summary>
        </member>
        <member name="M:SystemPlanes.InitStatusBarPlaneLabels">
            <summary> Initialises the status bar plane labels in m_StatusBarPlaneLabels. </summary>
            <returns> size of m_StatusBarPlaneLabels. </returns>
        </member>
        <member name="M:SystemPlanes.Init(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Zero out member variables. </summary>
            <param name="defaultPlaneID"> (Optional) Initialize 4 system planes to this valid ID, or -1 to preserve the follow-rules. </param>
        </member>
        <member name="M:SystemPlanes.op_Assign(SystemPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:SystemPlanes.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:SystemPlanes.#ctor(SystemPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object to copy. </param>
        </member>
        <member name="M:SystemPlanes.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:SystemPlanes.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:SystemPlanes">
            <summary> SystemPlanes class contains current system construction, tool, WCS and graphics planes</summary>
        </member>
        <member name="M:ViewportInfo.SetCurrentGraphicsViewInfo">
            <summary> Sets current graphics view information. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ViewportInfo.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:ViewportInfo.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:ViewportInfo">
            <summary> Information about the active viewport. </summary>
        </member>
        <member name="M:PlaneBase.DeserializeStringToWide(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert an MBCS string to a wide string. </summary>
            <param name="archive"> The archive. </param>
            <param name="target">  If non-null, the wide character buffer. </param>
            <returns> The number of characters converted. </returns>
        </member>
        <member name="M:PlaneBase.FixMatrix">
            <summary> Correct imperfect matrix in m_33. </summary>
            <returns> first = matrix is valid, second = values were adjusted to make valid. </returns>
        </member>
        <member name="M:PlaneBase.SetMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's 3x3 matrix (m_33) </summary>
            <param name="m33"> the Plane's new 3x3 matrix. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:PlaneBase.ValidPlaneClass(PlaneClass,System.Boolean)">
            <summary> Validate plane class. </summary>
            <param name="planeClass"> The plane class. </param>
            <param name="warn">		  true for warning. </param>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:PlaneBase.GetTemporary">
            <summary> Return value of m_Temporary. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PlaneBase.SetTemporary(System.Boolean)">
            <summary> Set m_Temporary. </summary>
            <param name="temporary"> if true, temporary plane will not be listed in Planes Manager and will be deleted on file/save. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetSystemMatrixName(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Builds and returns system matrix name. </summary>
            <param name="m_ID"> The identifier. </param>
            <returns> The system matrix name. </returns>
        </member>
        <member name="M:PlaneBase.CorrectName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Enforce naming rules for this Plane's name. </summary>
            <param name="theName"> The name to check and alter. </param>
            <returns> return true if name has been altered. </returns>
        </member>
        <member name="M:PlaneBase.SetName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the Plane's name. </summary>
            <param name="name"> the Plane's name. </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:PlaneBase.SetLock(System.Boolean)">
            <summary> set Plane lock's state. </summary>
            <param name="lock"> true to lock, false to unlock. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:PlaneBase.SetReserved(System.Boolean)">
            <summary> set Plane as reserved (uneditable and unmovable) </summary>
            <param name="reserved"> true = reserved. </param>
            <returns> returns previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetLock">
            <summary> return Plane lock's state. </summary>
            <returns> return Plane lock's state. </returns>
        </member>
        <member name="M:PlaneBase.SetTol(System.Double)">
            <summary> Sets the tolerance for the plane. </summary>
            <param name="theTol"> the new tolerance. </param>
            <returns> The old tolerance. </returns>
        </member>
        <member name="M:PlaneBase.GetTol">
            <summary> return Plane tolerance value. </summary>
            <returns> The tolerance. </returns>
        </member>
        <member name="M:PlaneBase.GetName">
            <summary> get the Plane's name. </summary>
            <returns> returns the Plane's name. </returns>
        </member>
        <member name="M:PlaneBase.GetReserved">
            <summary> return true if the the Plane is a reserved Plane. </summary>
            <returns> return true if the the Plane is a reserved Plane. </returns>
        </member>
        <member name="M:PlaneBase.GetMatrix33(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the Plane's 3x3 matrix (m_33) </summary>
            <param name="m33"> 3x3 matrix to fill in. </param>
        </member>
        <member name="M:PlaneBase.GetMatrix33">
            <summary> get the Plane's 3x3 matrix (m_33) </summary>
            <returns> returns the Plane's 3x3 matrix. </returns>
        </member>
        <member name="M:PlaneBase.GetMatrix33Ref">
            <summary> get the Plane's 3x3 matrix (m_33) reference </summary>
            <returns> returns the Plane's 3x3 matrix. </returns>
        </member>
        <member name="M:PlaneBase.SetID(PlaneID)">
            <summary> set the unique ID of the plane. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> returns the previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetLongID">
            <summary> get the value of m_ID's m_ID. </summary>
            <returns> returns the value of m_ID's m_ID. </returns>
        </member>
        <member name="M:PlaneBase.GetShortID">
            <summary> get the value of m_ID's m_ID. </summary>
            <returns> returns the value of m_ID's m_ID. </returns>
        </member>
        <member name="M:PlaneBase.GetID">
            <summary> get the unique ID of the plane. </summary>
            <returns> returns the plane ID. </returns>
        </member>
        <member name="M:PlaneBase.SetGUID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets value of m_GUID. </summary>
            <param name="theGUID"> New value. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetGUID">
            <summary> Return value of m_GUID. </summary>
            <returns> Return value of m_GUID. </returns>
        </member>
        <member name="M:PlaneBase.SetVersion(System.Int32)">
            <summary> set the version. </summary>
            <param name="version"> The version. </param>
            <returns> return the previous version value. </returns>
        </member>
        <member name="M:PlaneBase.GetVersion">
            <summary> return the version. </summary>
            <returns> return the version. </returns>
        </member>
        <member name="M:PlaneBase.IsEqual(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal. </summary>
            <param name="obj">	    The object. </param>
            <param name="errorStr"> The string to fill in with the name of the non-matching member variable. </param>
            <returns> true if equal, false if not. </returns>
        </member>
        <member name="M:PlaneBase.op_Subscript(System.Int32)">
            <summary> Return reference to X, Y or Z component of m_33. </summary>
            <param name="XYorZ"> The X, Y or Z axis (0, 1 or 2). </param>
            <returns> const reference to X, Y or Z axis. </returns>
        </member>
        <member name="M:PlaneBase.op_LessThan(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to another plane. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:PlaneBase.op_Equality(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to a Matrix33 object. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Equality(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Inequality(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an op_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Equality(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> compare this to an op_view structure. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Inequality(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlaneBase.op_Assign(view_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneBase.op_Assign(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneBase.op_Assign(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneBase.SetClass(PlaneClass)">
            <summary> Sets the class. </summary>
            <param name="planeClass"> The plane class. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:PlaneBase.GetClass">
            <summary> Gets the class. </summary>
            <returns> The class. </returns>
        </member>
        <member name="M:PlaneBase.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:PlaneBase.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:PlaneBase.#ctor(PlaneBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:PlaneBase.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor. </summary>
            <param name="m33">	   3x3 matrix. </param>
            <param name="planeID"> Identifier for the plane. </param>
            <param name="name">    The name. </param>
        </member>
        <member name="M:PlaneBase.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor. </summary>
            <param name="m33"> 3x3 matrix. </param>
        </member>
        <member name="M:PlaneBase.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:PlaneBase">
            <summary> A macro that defines plane base version. </summary>
            <summary> Mastercam PlaneBase definition</summary>
        </member>
        <member name="M:op_Multiply(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mat_43!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply a 4D vector by a 4x3 matrix. </summary>
            <param name="vec"> 4D Vector. </param>
            <param name="mat"> 4x3 Matrix. </param>
            <returns> Resulting 3D vector. </returns>
        </member>
        <member name="M:op_Multiply(mat_43!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply a 4x3 matrix by a 4D vector. </summary>
            <param name="mat"> 4x3 Matrix. </param>
            <param name="vec"> 4D Vector. </param>
            <returns> Resulting 3D vector. </returns>
        </member>
        <member name="M:op_MultiplicationAssignment(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply (and assign) a 3x3 matrix by another. </summary>
            <param name="mat1"> Matrix 1. </param>
            <param name="mat2"> Matrix 2. </param>
            <returns> Reference to mat1. </returns>
        </member>
        <member name="M:op_Multiply(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply two 3x3 matrices. </summary>
            <param name="mat1"> Matrix 1. </param>
            <param name="mat2"> Matrix 2. </param>
            <returns> Resulting matrix. </returns>
        </member>
        <member name="M:op_MultiplicationAssignment(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply (and assign) a 3D vector by a 3x3 matrix. </summary>
            <param name="mat"> Matrix. </param>
            <param name="vec"> Vector. </param>
            <returns> Reference to vec. </returns>
        </member>
        <member name="M:op_Multiply(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply a 3D vector by a 3x3 matrix. </summary>
            <param name="mat"> Matrix. </param>
            <param name="vec"> Vector. </param>
            <returns> Resulting vector. </returns>
        </member>
        <member name="M:op_Multiply(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply a 3D vector by a 3x3 matrix. </summary>
            <param name="mat"> Matrix. </param>
            <param name="vec"> Vector. </param>
            <returns> Resulting vector. </returns>
        </member>
        <member name="M:PlaneID.GetDescription">
            <summary> Gets the description. </summary>
            <returns> The description. </returns>
        </member>
        <member name="M:PlaneID.IsValid(System.Boolean)">
            <summary> Query if this object is valid. </summary>
            <param name="warn"> true to warn. </param>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:PlaneID.SetID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Sets an identifier. </summary>
            <param name="theID"> Identifier for the. </param>
            <returns> . </returns>
        </member>
        <member name="M:PlaneID.GetShortID">
            <summary> Gets the identifier. </summary>
            <returns> The identifier. </returns>
        </member>
        <member name="M:PlaneID.GetLongID">
            <summary> Gets the identifier. </summary>
            <returns> The identifier. </returns>
        </member>
        <member name="M:PlaneID.SetClass(PlaneClass)">
            <summary> Sets the class type. </summary>
            <param name="planeClass"> the class. </param>
            <returns> previous value. </returns>
        </member>
        <member name="M:PlaneID.GetClass">
            <summary> Gets the class type. </summary>
            <returns> The class type. </returns>
        </member>
        <member name="M:PlaneID.SetGUID(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the GUID identifier. </summary>
            <param name="theGUID"> Unique identifier. </param>
            <returns> Previous value. </returns>
        </member>
        <member name="M:PlaneID.GetGUID">
            <summary> Gets the GUID identifier. </summary>
            <returns> The identifier. </returns>
        </member>
        <member name="M:PlaneID.GetVersion">
            <summary> Gets the version. </summary>
            <returns> The version. </returns>
        </member>
        <member name="M:PlaneID.op_Inequality(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlaneID.op_Equality(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlaneID.op_GreaterThan(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:PlaneID.op_LessThan(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:PlaneID.op_Assign(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Assignment operator for a long.  Will create a NamedPlane type ID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneID.op_Assign(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlaneID.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:PlaneID.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:PlaneID.#ctor(view_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="viewEnt"> A view entity. </param>
        </member>
        <member name="M:PlaneID.#ctor(group_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="grpView"> A group view. </param>
        </member>
        <member name="M:PlaneID.#ctor(op_view!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="opView"> An operation view. </param>
        </member>
        <member name="M:PlaneID.#ctor(ReservedPlanes.TypeID,PlaneClass)">
            <param name="typeID">	  Identifier for the plane. </param>
            <param name="planeClass"> (Optional) The plane class. </param>
        </member>
        <member name="M:PlaneID.#ctor(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:PlaneID.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,PlaneClass)">
            <summary> Constructor. </summary>
            <param name="planeID">    Identifier for the plane. </param>
            <param name="planeClass"> the plane class type. </param>
        </member>
        <member name="M:PlaneID.#ctor(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:PlaneID.#ctor(PlaneClass)">
            <summary> Default constructor. </summary>
            <param name="planeClass"> (Optional) the plane class. </param>
        </member>
        <member name="T:PlaneID">
            <summary> A macro that defines a null plane ID. </summary>
            <param name="PlaneID (PlaneClass::Undefined)"> The plane identifier ( plane class undefined) </param>
            <summary> Plane ID map key. </summary>
        </member>
        <member name="M:ScratchViewNo.op_Assign(ScratchViewType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:ScratchViewNo.op_GreaterThanOrEqual(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than-or-equal comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than or equal to the second. </returns>
        </member>
        <member name="M:ScratchViewNo.op_GreaterThan(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:ScratchViewNo.op_LessThanOrEqual(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than-or-equal comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than or equal to the second. </returns>
        </member>
        <member name="M:ScratchViewNo.op_LessThan(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:ScratchViewNo.op_Inequality(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:ScratchViewNo.op_Equality(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The view no. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:ScratchViewNo.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:ScratchViewNo.#ctor(ScratchViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:ScratchViewNo.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ScratchViewNo.#ctor(ScratchViewType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ScratchViewNo.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="M:ViewNo.IsValid">
            <summary> Query if this object is valid. </summary>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:ViewNo.IsViewportView">
            <summary> Query if this object is viewport view. </summary>
            <returns> true if scratch view, false if not. </returns>
        </member>
        <member name="M:ViewNo.IsScratchView">
            <summary> Query if this object is scratch view. </summary>
            <returns> true if scratch view, false if not. </returns>
        </member>
        <member name="M:ViewNo.IsScratchViewType(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if 'viewType' is scratch view type. </summary>
            <param name="viewType"> Type of the view. </param>
            <returns> True if scratch view type, false if not. </returns>
        </member>
        <member name="M:ViewNo.GetShortViewNo">
            <summary> Gets short view no. </summary>
            <returns> The short view no. </returns>
        </member>
        <member name="M:ViewNo.GetViewNo">
            <summary> Gets view no. </summary>
            <returns> The view no. </returns>
        </member>
        <member name="M:ViewNo.op_GreaterThanOrEqual(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than-or-equal comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than or equal to the second. </returns>
        </member>
        <member name="M:ViewNo.op_GreaterThan(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:ViewNo.op_LessThanOrEqual(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than-or-equal comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than or equal to the second. </returns>
        </member>
        <member name="M:ViewNo.op_LessThan(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:ViewNo.op_Inequality(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:ViewNo.op_Inequality(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Inequality operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:ViewNo.op_Equality(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The view no. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:ViewNo.op_Equality(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Equality operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:ViewNo.op_Assign(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Assignment operator. </summary>
            <param name="viewNo"> The view no. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:ViewNo.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:ViewNo.#ctor(ViewNo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:ViewNo.#ctor(ScratchViewType)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ViewNo.#ctor(System.Int16)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ViewNo.#ctor(System.Int32)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ViewNo.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="viewNo"> The view no. </param>
        </member>
        <member name="M:ViewNo.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:ViewNo">
            <summary> Class to be used as view number parameter instead of a short. </summary>
        </member>
        <member name="T:ScratchViewType">
            <summary> Values that represent the 'scratch view' types. </summary>
        </member>
        <member name="M:CompareNci.TokenizeStrings(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tokenize the NCI strings. </summary>
            <param name="delimiter"> The delimiter. </param>
            <param name="str1">		 The first string. </param>
            <param name="str2">		 The second string. </param>
            <param name="array1">    The first array. </param>
            <param name="array2">    The second array. </param>
            <returns> An INT_PTR. </returns>
        </member>
        <member name="M:CompareNci.MakeSameLength(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Makes both NCI strings the same length. </summary>
            <param name="str1"> The first NCI string. </param>
            <param name="str2"> The second NCI string. </param>
        </member>
        <member name="M:CompareNci.MarkStart(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Mark start of the NCI lines. </summary>
            <param name="str1">  The first NCI string. </param>
            <param name="indx1"> The first indx. </param>
            <param name="str2">  The second NCI string. </param>
            <param name="indx2"> The second indx. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CompareNci.MarkDifferences(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Mark the differences in the NCI lines as compared to one another. </summary>
            <param name="str1"> The first NCI string. </param>
            <param name="str2"> The second NCI string. </param>
            <returns> An number of differences marked. </returns>
        </member>
        <member name="M:CompareNci.FormatLine(nci_bin!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Format the NCI line. </summary>
            <param name="nciLine"> The binary NCI line. </param>
            <param name="nciStr">  The string to format. </param>
        </member>
        <member name="M:CompareNci.Run(CompareNci.RunPrm!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Compares NCI of the 3 states to the given nci accuracy. </summary>
            <param name="prm"> The comparison parameters. </param>
        </member>
        <member name="M:CompareNci.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CompareNci.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:CompareNci.RunPrm.#ctor(System.Int16,CStringArray*,System.Boolean,std.shared_ptr&lt;IInterrogateMastercamFile&gt;,std.shared_ptr&lt;IInterrogateMastercamFile&gt;)">
            <summary> Constructor. </summary>
            <param name="nciAccuracy"> (Optional) the nci accuracy. </param>
            <param name="pTrailer">    (Optional) If non-null, list of strings for the report trailer. </param>
            <param name="modeComp2">   (Optional) comparison mode, false = select files, true = compare NCI in pComp1 to pComp2. </param>
            <param name="spComp1">	   (Optional) If non-null, the NCI to compare with pComp2. </param>
            <param name="spComp2">	   (Optional) If non-null, the NCI to compare with pComp1. </param>
        </member>
        <member name="T:CompareNci.RunPrm">
            <summary> Comparison parameters. </summary>
        </member>
        <member name="T:CompareNci">
            <summary> Utility class to compare NCI of previous version files in 3 states:
		  1 - from disk before file is read in  
		  2 - from disk immediately after file is read in  
		  3 - after regeneration </summary>
        </member>
        <member name="M:ReportOperationViews(operation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Reports on operation's matrix/origin values. </summary>
            <param name="theOp"> the operation. </param>
        </member>
        <member name="M:CStringArrayToFile(CStringArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Dump the contents of a CStringArray to a file and display in the default editor. </summary>
            <param name="strArray">	    The array to dump. </param>
            <param name="addTimeOfDay"> True to add time of day string on first line. </param>
            <param name="fname">	    [in,out] Filename of the file. </param>
            <param name="editFile">	    true to edit file. </param>
        </member>
        <member name="M:Cnc.Globals.File.EmptyGlobalInterrogate">
            <summary> Empties s_spIInterrogateMastercamFile. </summary>
        </member>
        <member name="M:Cnc.Globals.File.LoadGlobalInterrogate">
            <summary> Loads s_spIInterrogateMastercamFile. </summary>
        </member>
        <member name="M:Cnc.Globals.File.GetGlobalInterrogate">
            <summary> Returns s_spIInterrogateMastercamFile. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.GetEntity(Cnc.Globals.File.EntityMapInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a copy of the entity with the given ent.ent_idn value from m_spEntityMap. </summary>
            <param name="entInfo"> Entity type info of the entity to retrieve. </param>
            <param name="theEnt">  the ent. </param>
            <returns> true if the entity was found and copied into theEnt. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.AllOperationsLoaded">
            <summary> Return true if all the operations that exist in our current database are loaded. </summary>
            <returns> true if all the operations that exist in our current database are loaded. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.EmptyGroups">
            <summary> Removes the contents of m_OpGroup, m_OtherGroups and m_GroupGeometry. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.AddGroups(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Copies the groups from an external file into m_OpGroups and m_OtherGroups. </summary>
            <param name="fileName"> Filename of the external Mastercam file. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.AddGroups">
            <summary> Copies the groups from our current db into m_OpGroups and m_OtherGroups. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.AddGroups(TpGrpList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds the contents of the given group list to m_OpGroup and m_OtherGroups. </summary>
            <param name="grpList"> List of groups. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.SetNciFpos(System.Int64)">
            <summary> Setter for the start of bnci fpos of the source file </summary>
            <param name="fpos"> The bnci fpos for the source file </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetNciFpos">
            <summary> Getter for the start of bnci fpos of the source file </summary>
            <returns> Returns long. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForPlanes(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation)">
            <summary> Preset masks and loads this object with plane info from an external Mastercam file. </summary>
            <param name="mcxFileName">   Mastercam file name. </param>
            <param name="entAllocation"> operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
            <returns> for planes. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForPlanes">
            <summary> Preset masks and loads this object with plane info from the current db. </summary>
            <returns> Number of planes loaded. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForNci(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation)">
            <summary> Preset masks and loads this object with operations and their NCI from an external Mastercam file. </summary>
            <param name="mcxFileName">   Filename of the Mastercam file. </param>
            <param name="entAllocation"> operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForNci">
            <summary> Preset masks and loads this object with operations and their NCI from the current db. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntities(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;TP_ENT_TYPE,std.less&lt;TP_ENT_TYPE&gt;,std.allocator&lt;TP_ENT_TYPE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities from an external Mastercam file. </summary>
            <param name="mcxFileName">   Filename of the Mastercam file. </param>
            <param name="opIDs">		 The IDs of operations to load. </param>
            <param name="entAllocation"> operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntities(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;TP_ENT_TYPE,std.less&lt;TP_ENT_TYPE&gt;,std.allocator&lt;TP_ENT_TYPE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in
		  the given opIDs parameter and their toolpath entities from the current db. </summary>
            <param name="opIDs">  The IDs of operations to load. </param>
            <param name="tpMask"> Operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForToolpathEntities">
            <summary> Preset masks and loads this object with just operations and toolpath entities 
		  from the current db.</summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForDependencies(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation)">
            <summary> Preset masks and loads this object with just operations and TP_OPID type toolpath entities from an
		  external Mastercam file. TP_OPID type toolpath entities are typically used in transform and nesting
		  operations. </summary>
            <param name="mcxFileName">   Mastercam file name. </param>
            <param name="entAllocation"> operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
            <returns> for dependencies. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForDependencies">
            <summary> Preset masks and loads this object with just operations and TP_OPID type toolpath entities 
		  from the current db. TP_OPID type toolpath entities are typically used in transform
		  and nesting operations.</summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadJustOperations(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation)">
            <summary> Preset masks and loads this object with just the operations from the current db. </summary>
            <param name="mcxFileName">   Filename of the Mastercam file. </param>
            <param name="entAllocation"> operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
            <returns> The number of operations loaded. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadJustOperations">
            <summary> Preset masks and loads this object with just the operations from the current db. </summary>
            <returns> The number of operations loaded. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.Load(IInterrogateMastercamFile.LoadCode)">
            <summary> Loads this object using the current db. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.Load(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;TP_ENT_TYPE,std.less&lt;TP_ENT_TYPE&gt;,std.allocator&lt;TP_ENT_TYPE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IInterrogateMastercamFile.LoadCode)">
            <summary> Loads this object using the given mcx file name. </summary>
            <param name="mcxFileName">    Filename of the Mastercam file. </param>
            <param name="entAllocation">  Operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
            <param name="opIDs">		  The IDs of the operations to load, empty = all. </param>
            <param name="tpMask">		  Collect only these types of toolpath entities, empty = all. </param>
            <param name="loadCode">		  (Optional) What are we loading for? </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestNciOpCode(TP_OPCODE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation code against masks before loading NCI into an operation. </summary>
            <param name="opCode"> The operation code. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestOpCode(TP_OPCODE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation code against masks before loading into m_Operations. </summary>
            <param name="opCode"> The operation code. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestTpEnt(Cnc.Globals.File.EntityMapInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests tp_net against masks before loading into m_Operations.m_TpEnts. </summary>
            <param name="entInfo"> The entity info. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestOperation(Cnc.Globals.File.EntityMapInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests operation against masks before loading into m_Operations. </summary>
            <param name="entInfo"> The entity info. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestTool(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests tool against masks before loading into m_Tools. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestViewEnt(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests view_ent against masks before loading into m_pPlanes. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestPlanes(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests planes against masks before loading into m_pPlanes. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.TestGeometry(Cnc.Globals.File.EntityMapInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Tests geometry against masks before loading into m_Geometry. </summary>
            <param name="entInfo"> The entity info. </param>
            <returns> true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.ValidOperationIterator(std._Tree_const_iterator&lt;std._Tree_val&lt;std._Tree_simple_types&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;CLibraryOperation&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Validate operation iterator from m_Operations (since m_Operations is public). </summary>
            <param name="iter"> The iterator. </param>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.InitBnciExtents">
            <summary> Initializes the bnci extents. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.DependentOperationsExist">
            <summary> Return true if dependent operation types exist in m_Operaitons. </summary>
            <returns> Return true if dependent operation types exist in m_Operaitons. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetEptrs">
            <summary> Builds a vector of all the eptrs in this. </summary>
            <returns> A shared ptr to a vector of eptrs in this. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMasks(IInterrogateMastercamFile.LoadMasks!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets m_Masks. </summary>
            <param name="masks"> The masks to set. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetEntityMap">
            <summary> Gets entity map. </summary>
            <returns> The entity map. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetPlanes">
            <summary> Gets the planes. </summary>
            <returns> The planes. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetBnciCenterPoint(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Setter for rectangle center </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetBnciCenterPoint">
            <summary> Getter for rectangle center </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetBnciUpperRight(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Setter for rectangle's upper right corner </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetBnciUpperRight">
            <summary> Getter for rectangle's upper right corner </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetBnciLowerLeft(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Setter for rectangle's lower left corner </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:CInterrogateMastercamFile.GetBnciLowerLeft">
            <summary> Getter for rectangle's lower left corner </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetMasks">
            <summary> Gets a refrence to m_Masks. </summary>
            <returns> Reference to m_Masks. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetBadTpGeomRefIDs">
            <summary> Gets bad TP geometry reference ids. </summary>
            <returns> The bad TP geometry reference ids. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOrphanedTpEnts">
            <summary> Getter for array of toolpath entities that have no parent operation </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetGeometry">
            <summary> Getter for array of geometry entity copies referenced by operations from the source file </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOperations">
            <summary> Getter for Map of operation copies from the source file </summary>
            <returns> Returns OpMap </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOpGroups">
            <summary> Gets Op groups. </summary>
            <returns> The Op groups. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetLoadCode">
            <summary> Gets const reference to m_LoadCode. </summary>
            <returns> const reference to m_LoadCode. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SwapEptrs(std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.pair&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.pair&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Swap the entity ptrs. </summary>
            <param name="mapGeom">	    The map geometry entity ID, pair of old eptr and new eptr. </param>
            <param name="updateDB">	    true to rewrite the entities to the current database. </param>
            <param name="markOpsDirty"> true to mark affected toolpath operations dirty. </param>
            <returns> Number of substitutions that occurred. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.RemoveOperation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Removes the operation described by opID from the map m_Operations. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.ReplaceOrAddOperation(System.Boolean,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation)">
            <summary> Adds (and replaces if needed) an operation to the map m_Operations. </summary>
            <param name="isExternal">    true if entity is from an external file, false for the current db. </param>
            <param name="opEnt">		 The operation entity. </param>
            <param name="entAllocation"> operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
            <returns> An OpMap::iterator where the operation was added. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOpIDsInOpMgrOrder">
            <summary> Returns a vector of all the operations' IDs in order of the global Operation Manager.</summary>
            <returns> A vector of all the dependent operations' IDs.</returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetFileName">
            <summary> Gets the file name of what's loaded. </summary>
            <returns> The file name. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskNciOpcodes(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the contents of m_MaskNciOpcodes to filter which operation's NCI is loaded when calling load functions. </summary>
            <param name="mask"> The TP_OPCODE mask. </param>
            <returns> Size of m_MaskNciOpcodes array after setting. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.SetMaskOpcodes(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the contents of m_MaskOpcodes to filter which operations are loaded when calling load functions. </summary>
            <param name="mask"> The TP_OPCODE mask. </param>
            <returns> Size of m_MaskOpcodes array after setting. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetTpGeometryEntityPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets geometry entity pointer. </summary>
            <param name="entID"> Identifier for the ent. </param>
            <returns> The geometry entity pointer. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetOperationPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets operation pointer by identifier. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> null if it fails, else the operation pointer by identifier. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetLibraryOperationPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets library operation pointer by identifier. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> null if it fails, else the library operation pointer by identifier. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.GetToolpathEntities(System.Int32!System.Runtime.CompilerServices.IsLong,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;TP_ENT_TYPE,std.less&lt;TP_ENT_TYPE&gt;,std.allocator&lt;TP_ENT_TYPE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns a vector of toolpath entities stored under the operation. </summary>
            <param name="opID">  Identifier for the operation. </param>
            <param name="opEnt"> The operation ent to fill in. </param>
            <param name="mask">  Collect only these types of toolpath entities, empty = all. </param>
            <returns> The toolpath entities. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.IsExternalFile">
            <summary> Query if this object was loaded from an external file. </summary>
            <returns> true if external file, false if not. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.IsLoaded">
            <summary> Query if this object is loaded (returns value of m_Loaded). </summary>
            <returns> true if loaded, false if not. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.CalcBnciExtents(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Calculates the extents of the bnci in this object. </summary>
            <param name="relWcs"> (Optional) true to relative wcs. </param>
            <param name="adjTOS"> (Optional) true to adjust to TOS. </param>
            <param name="deleteToolRadius"> (Optional) true to delete the tool radius from "Z". </param>
            <param name="includeEndOfRapids"> (Optional) true to include the end of rapids in extents calc. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForNci(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation,IDArray!System.Runtime.CompilerServices.IsConst*,IDArray!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object with operations and their NCI from and external Mastercam file. </summary>
            <param name="mcxFileName">   Filename of the external Mastercam file. </param>
            <param name="gcodeMask">	 List of NCI gcodes to include, empty gcodeMask = all NCI lines. </param>
            <param name="entAllocation"> operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
            <param name="pIncludeOpIDs"> (Optional) the include operation ids. </param>
            <param name="pExcludeOpIDs"> (Optional) the exclude operation ids. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForNci(System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*,IDArray!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object with operations and their NCI from the current db from just the
		  operations whose IDs match ones in the given pIncludeOpIDs parameter and not ones whose ID's match
		  ones in the given pExcludeOpIDs parameter. </summary>
            <param name="useCache">		 true = attempt to use NCI cache in global  Cnc::Globals::Planes::GetPlanes (). </param>
            <param name="gcodeMask">	 List of NCI gcodes to include, empty gcodeMask = all NCI lines. </param>
            <param name="pIncludeOpIDs"> (Optional) the include operation ids. </param>
            <param name="pExcludeOpIDs"> (Optional) the exclude operation ids. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForWorkOffsetInfo(System.Boolean,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with work offset information from just the operations whose IDs match
		  ones in the given includeOpIDs parameter and not ones whose ID's match ones in the given excludeOpIDs
		  parameter. </summary>
            <param name="useCache">	    true = use NCI cache, false = read from disk. </param>
            <param name="includeOpIDs"> The operations to include. </param>
            <param name="excludeOpIDs"> The operations to exclude. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.LoadForSingleOperation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object for just the 1 operation from the current db. </summary>
            <param name="opID">		  Identifier for the operation. </param>
            <param name="includeNci"> true to include NCI, false to exclude NCI. </param>
            <param name="pGcodeMask"> (Optional) if (includeNci == true), ptr to NCI gcode mask, nullptr to read in all. </param>
            <returns> pointer to operation, null if it fails. </returns>
        </member>
        <member name="M:CInterrogateMastercamFile.InitMasks">
            <summary> Initializes the masks. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.Copy(std.shared_ptr&lt;IInterrogateMastercamFile&gt;)">
            <summary> Transfers the contents described by spInFile. </summary>
            <param name="spInFile"> ptr to snapshot of current Mastercam file. </param>
        </member>
        <member name="M:CInterrogateMastercamFile.Empty">
            <summary> Empties this object. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CInterrogateMastercamFile.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:CInterrogateMastercamFile">
            <summary> Utility class to collect entities and info of the current db or an external Mastercam file. </summary>
        </member>
        <member name="M:Cnc.Globals.File.LoadInterrogate(std.shared_ptr&lt;IInterrogateMastercamFile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;TP_ENT_TYPE,std.less&lt;TP_ENT_TYPE&gt;,std.allocator&lt;TP_ENT_TYPE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServic">
            <summary> Preset masks and loads this object with just the operations whose IDs match ones in the given opIDs
		  parameter and their toolpath entities from an external Mastercam file. </summary>
            <param name="spInFile"> ptr to snapshot of current Mastercam file. </param>
            <param name="mcxFileName">   Filename of the Mastercam file. </param>
            <param name="entAllocation"> operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
            <param name="opIDs">		 The IDs of operations to load. </param>
            <param name="tpMask">		 Collect only these types of toolpath entities, empty = all. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Globals.File.LoadInterrogate(std.shared_ptr&lt;IInterrogateMastercamFile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;TP_ENT_TYPE,std.less&lt;TP_ENT_TYPE&gt;,std.allocator&lt;TP_ENT_TYPE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IInterrogateMastercamFile.LoadCode)">
            <summary> Loads an interrogate. </summary>
            <param name="spInFile"> ptr to snapshot of current Mastercam file. </param>
            <param name="opIDs">    The operation ids. </param>
            <param name="tpMask">   The TP mask. </param>
            <param name="loadCode"> (Optional) The load code. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Globals.File.LoadInterrogate(std.shared_ptr&lt;IInterrogateMastercamFile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation,IInterrogateMastercamFile.LoadCode)">
            <summary> Loads an interrogate. </summary>
            <param name="spInFile"> ptr to snapshot of current Mastercam file. </param>
            <param name="mcxFileName">   Filename of the mcx file. </param>
            <param name="entAllocation"> The ent allocation. </param>
            <param name="loadCode">		 (Optional) The load code. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Globals.File.LoadInterrogate(std.shared_ptr&lt;IInterrogateMastercamFile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IInterrogateMastercamFile.LoadCode)">
            <summary> Loads interrogate file. </summary>
            <param name="spInFile"> ptr to snapshot of current Mastercam file. </param>
            <param name="loadCode"> (Optional) The load code. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Globals.File.MakeInterrogate(IInterrogateMastercamFile.LoadMasks!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds and loads an IInterrogateMastercamFile class containing info from your current file. </summary>
            <param name="masks"> Entity masks. </param>
            <returns> A std::shared_ptr&lt;IInterrogateMastercamFile&gt; </returns>
        </member>
        <member name="M:Cnc.Globals.File.MakeInterrogate(IInterrogateMastercamFile.LoadCode)">
            <summary> Builds and loads an IInterrogateMastercamFile class containing info from your current file. </summary>
            <param name="loadCode"> (Optional) The load code (to preset m_Masks). </param>
            <returns> A std::shared_ptr&lt;IInterrogateMastercamFile&gt; </returns>
        </member>
        <member name="M:InterrogateMCFileFactory.Load(std.shared_ptr&lt;IInterrogateMastercamFile&gt;,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;TP_ENT_TYPE,std.less&lt;TP_ENT_TYPE&gt;,std.allocator&lt;TP_ENT_TYPE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IInterrogateMastercamFile.LoadCod">
            <summary> Loads. </summary>
            <param name="spInFile"> ptr to snapshot of current Mastercam file. </param>
            <param name="opIDs">    The operation i ds. </param>
            <param name="tpMask">   The TP mask. </param>
            <param name="loadCode"> (Optional) The load code. </param>
            <returns> A std::pair&lt;bool,std::shared_ptr&lt;IInterrogateMastercamFile&gt;&gt; </returns>
        </member>
        <member name="M:InterrogateMCFileFactory.Load(std.shared_ptr&lt;IInterrogateMastercamFile&gt;,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;TP_ENT_TYPE,std.less&lt;TP_ENT_TYPE&gt;,std.allocator&lt;TP_ENT_TYPE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IInterrogateMastercamFile.LoadCode)">
            <summary> Loads. </summary>
            <param name="spInFile"> ptr to snapshot of current Mastercam file. </param>
            <param name="opIDs">    The operation i ds. </param>
            <param name="tpMask">   The TP mask. </param>
            <param name="loadCode"> (Optional) The load code. </param>
            <returns> A std::pair&lt;bool,std::shared_ptr&lt;IInterrogateMastercamFile&gt;&gt; </returns>
        </member>
        <member name="M:InterrogateMCFileFactory.Load(std.shared_ptr&lt;IInterrogateMastercamFile&gt;,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation,IInterrogateMastercamFile.LoadCode)">
            <summary> Loads. </summary>
            <param name="spInFile"> ptr to snapshot of current Mastercam file. </param>
            <param name="mcxFileName">   Filename of the mcx file. </param>
            <param name="entAllocation"> The ent allocation. </param>
            <param name="loadCode">		 (Optional) The load code. </param>
            <returns> A std::pair&lt;bool,std::shared_ptr&lt;IInterrogateMastercamFile&gt;&gt; </returns>
        </member>
        <member name="M:InterrogateMCFileFactory.Load(std.shared_ptr&lt;IInterrogateMastercamFile&gt;,IInterrogateMastercamFile.LoadCode)">
            <summary> Loads the given load code. </summary>
            <param name="spInFile"> ptr to snapshot of current Mastercam file. </param>
            <param name="loadCode"> (Optional) The load code to load. </param>
            <returns> A std::pair&lt;bool,std::shared_ptr&lt;IInterrogateMastercamFile&gt;&gt; </returns>
        </member>
        <member name="M:InterrogateMCFileFactory.Load(IInterrogateMastercamFile.LoadMasks!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds and loads an IInterrogateMastercamFile class containing info from your current file. </summary>
            <param name="masks"> Entity masks. </param>
            <returns> A std::pair&lt;bool,std::shared_ptr&lt;IInterrogateMastercamFile&gt;&gt; </returns>
        </member>
        <member name="M:InterrogateMCFileFactory.MakeInterrogate(IInterrogateMastercamFile.LoadMasks!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Builds and loads an IInterrogateMastercamFile class containing info from your current file. </summary>
            <param name="masks"> Entity masks. </param>
            <returns> A std::shared_ptr&lt;IInterrogateMastercamFile&gt; </returns>
        </member>
        <member name="M:InterrogateMCFileFactory.MakeInterrogate(IInterrogateMastercamFile.LoadCode)">
            <summary> Default constructor. </summary>
            <summary> Destructor. </summary>
            <summary> Builds and loads an IInterrogateMastercamFile class containing info from your current file. </summary>
            <param name="loadCode"> The load code (preset m_Masks). </param>
            <returns> A std::shared_ptr&lt;IInterrogateMastercamFile&gt; </returns>
        </member>
        <member name="T:InterrogateMCFileFactory">
            <summary> Creates collection of entities and info of current db or external Mastercam files. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.MapInfo.#ctor(DB_LIST_ENT**,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="pEptr">		    pointer to an eptr in the entity. </param>
            <param name="ownerEntityID">    ent.ent_idn of entity that eptr resides in. </param>
            <param name="selectedEntityID"> ent.ent_idn of entity that m_pEptr points to. </param>
        </member>
        <member name="T:IInterrogateMastercamFile.MapInfo">
            <summary> Entity information for MapEptrs </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.GetEntityMap">
            <summary> Gets entity map. </summary>
            <returns> The entity map. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetPlanes">
            <summary> Gets the planes. </summary>
            <returns> The planes. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetBnciCenterPoint(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Setter for rectangle center </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetBnciCenterPoint">
            <summary> Getter for rectangle center </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetBnciUpperRight(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Setter for rectangle's upper right corner </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetBnciUpperRight">
            <summary> Getter for rectangle's upper right corner </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetBnciLowerLeft(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Setter for rectangle's lower left corner </summary>
            <param name="point"> p-3d point </param>
        </member>
        <member name="M:IInterrogateMastercamFile.GetBnciLowerLeft">
            <summary> Getter for rectangle's lower left corner </summary>
            <returns> Returns p_3d </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetMasks">
            <summary> Gets a const reference to m_Masks. </summary>
            <returns> const reference to m_Masks. </returns>
        </member>
        <member name="T:IInterrogateMastercamFile.LoadMasks">
            <summary> include/exclude masks for loading. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.GetBadTpGeomRefIDs">
            <summary> Gets bad TP geometry reference ids. </summary>
            <returns> The bad TP geometry reference ids. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetOrphanedTpEnts">
            <summary>  Getter for array of entities without references from the source file </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetGeometry">
            <summary> Getter for array of geometry entity copies referenced by operations from the source file </summary>
            <returns> Returns CFposEntArray reference </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetOperations">
            <summary> Getter for Map of operation copies from the source file </summary>
            <returns> Returns OpMap </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetOpGroups">
            <summary> Gets Op groups. </summary>
            <returns> The Op groups. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetLoadCode">
            <summary> Gets const reference to m_LoadCode. </summary>
            <returns> const reference to m_LoadCode. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SwapEptrs(std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.pair&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,std.pair&lt;DB_LIST_ENT**,DB_LIST_ENT**&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Swap the entity ptrs. </summary>
            <param name="mapGeom">	    The map geometry entity ID, pair of old eptr and new eptr. </param>
            <param name="updateDB">	    true to rewrite the entities to the current database. </param>
            <param name="markOpsDirty"> true to mark affected toolpath operations dirty. </param>
            <returns> Number of substitutions that occurred. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.RemoveOperation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Removes the operation described by opID from the map m_Operations. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.ReplaceOrAddOperation(System.Boolean,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation)">
            <summary> Adds (and replaces if needed) an operation to the map m_Operations. </summary>
            <param name="isExternal">    true if entity is from an external file, false for the current db. </param>
            <param name="opEnt">		 The operation entity. </param>
            <param name="entAllocation"> operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
            <returns> An OpMap::iterator where the operation was added. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetOpIDsInOpMgrOrder">
            <summary> Defines an alias representing the operation map pointer. </summary>
            <summary> Defines an alias representing the operation map (operation ID, copy of operation). </summary>
            <summary> Returns a vector of all the operations' IDs in order of the global Operation Manager.</summary>
            <returns> A vector of all the dependent operations' IDs.</returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetFileName">
            <summary> Gets the file name of what's loaded. </summary>
            <returns> The file name. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskNciOpcodes(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the contents of m_MaskNciOpcodes to filter which operation's NCI is loaded when calling load functions. </summary>
            <param name="mask"> The TP_OPCODE mask. </param>
            <returns> Size of m_MaskNciOpcodes array after setting. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.SetMaskOpcodes(VArray&lt;TP_OPCODE&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the contents of m_MaskOpcodes to filter which operations are loaded when calling load functions. </summary>
            <param name="mask"> The TP_OPCODE mask. </param>
            <returns> Size of m_MaskOpcodes array after setting. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetTpGeometryEntityPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets geometry entity pointer. </summary>
            <param name="entID"> Identifier for the ent. </param>
            <returns> The geometry entity pointer. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetOperationPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets operation pointer by identifier. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> null if it fails, else the operation pointer by identifier. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetLibraryOperationPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets library operation pointer by identifier. </summary>
            <param name="opID"> Identifier for the operation. </param>
            <returns> null if it fails, else the library operation pointer by identifier. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.GetToolpathEntities(System.Int32!System.Runtime.CompilerServices.IsLong,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;TP_ENT_TYPE,std.less&lt;TP_ENT_TYPE&gt;,std.allocator&lt;TP_ENT_TYPE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns a vector of toolpath entities stored under the operation. </summary>
            <param name="opID">  Identifier for the operation. </param>
            <param name="opEnt"> The operation ent to fill in. </param>
            <param name="mask">  Collect only these types of toolpath entities, empty = all. </param>
            <returns> The toolpath entities. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.IsExternalFile">
            <summary> Query if this object was loaded from an external file. </summary>
            <returns> true if external file, false if not. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.IsLoaded">
            <summary> Query if this object is loaded (returns value of m_Loaded). </summary>
            <returns> true if loaded, false if not. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.CalcBnciExtents(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Calculates the extents of the bnci in this object. </summary>
            <param name="relWcs"> (Optional) true to relative wcs. </param>
            <param name="adjTOS"> (Optional) true to adjust to TOS. </param>
            <param name="deleteToolRadius"> (Optional) true to delete the tool radius from "Z". </param>
            <param name="includeEndOfRapids"> (Optional) true to include the end of rapids in extents calc. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForNci(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation,IDArray!System.Runtime.CompilerServices.IsConst*,IDArray!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object with operations and their NCI from and external Mastercam file. </summary>
            <param name="mcxFileName">   Filename of the external Mastercam file. </param>
            <param name="gcodeMask">	 List of NCI gcodes to include, empty gcodeMask = all NCI lines. </param>
            <param name="entAllocation"> operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
            <param name="pIncludeOpIDs"> (Optional) the include operation ids. </param>
            <param name="pExcludeOpIDs"> (Optional) the exclude operation ids. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForNci(System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*,IDArray!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object with operations and their NCI from the current db from just the
		  operations whose IDs match ones in the given pIncludeOpIDs parameter and not ones whose ID's match
		  ones in the given pExcludeOpIDs parameter. </summary>
            <param name="useCache">		 true = attempt to use NCI cache in global  Cnc::Globals::Planes::GetPlanes (). </param>
            <param name="gcodeMask">	 List of NCI gcodes to include, empty gcodeMask = all NCI lines. </param>
            <param name="pIncludeOpIDs"> (Optional) the include operation ids. </param>
            <param name="pExcludeOpIDs"> (Optional) the exclude operation ids. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForWorkOffsetInfo(System.Boolean,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Preset masks and loads this object with work offset information from just the operations whose IDs match
		  ones in the given includeOpIDs parameter and not ones whose ID's match ones in the given excludeOpIDs
		  parameter. </summary>
            <param name="useCache">	    true = use NCI cache, false = read from disk. </param>
            <param name="includeOpIDs"> The operations to include. </param>
            <param name="excludeOpIDs"> The operations to exclude. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.LoadForSingleOperation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Preset masks and loads this object for just the 1 operation from the current db. </summary>
            <param name="opID">		  Identifier for the operation. </param>
            <param name="includeNci"> true to include NCI, false to exclude NCI. </param>
            <param name="pGcodeMask"> (Optional) if (includeNci == true), ptr to NCI gcode mask, nullptr to read in all. </param>
            <returns> pointer to operation, null if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.Load(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;TP_ENT_TYPE,std.less&lt;TP_ENT_TYPE&gt;,std.allocator&lt;TP_ENT_TYPE&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IInterrogateMastercamFile.LoadCode)">
            <summary> Loads this object using the given mcx file name. </summary>
            <param name="mcxFileName">    Filename of the Mastercam file. </param>
            <param name="entAllocations"> operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
            <param name="opIDs">		  The IDs of the operations to load, empty = all. </param>
            <param name="mask">			  Collect only these types of toolpath entities, empty = all. </param>
            <param name="loadCode">		  (Optional) What are we loading for? </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:IInterrogateMastercamFile.InitMasks">
            <summary> Initializes the masks. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.Copy(std.shared_ptr&lt;IInterrogateMastercamFile&gt;)">
            <summary> Transfers the contents described by spInFile. </summary>
            <param name="spInFile"> ptr to snapshot of current Mastercam file. </param>
        </member>
        <member name="M:IInterrogateMastercamFile.Empty">
            <summary> Empties this object. </summary>
        </member>
        <member name="M:IInterrogateMastercamFile.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="T:IInterrogateMastercamFile">
            <summary> Utility class to collect entities and info of the current db or an external Mastercam file. </summary>
        </member>
        <member name="M:CLibraryOperation.InitBnciExtents">
            <summary> Initializes the bnci extents. </summary>
        </member>
        <member name="M:CLibraryOperation.ReadNciSection(MCFile*,System.Int64,System.Int64,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Reads the operation's nci section from fposStartOfSection thru fposEndOfSection into m_spBnciRW. </summary>
            <param name="pOpenFile">		  [in,out] If non-null, the open file. </param>
            <param name="fposStartOfSection"> The file position to start reading. </param>
            <param name="fposEndOfSection">   The file end position of the last line to read. </param>
            <param name="pGcodeMask">		  The gcode mask. </param>
            <returns> The number of lines read into m_spBnciRW. </returns>
        </member>
        <member name="M:CLibraryOperation.ReadNciSection(System.Boolean,std.set&lt;NCI_GCODE,std.less&lt;NCI_GCODE&gt;,std.allocator&lt;NCI_GCODE&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary> Reads the operation's nci section into m_spBnciRW. </summary>
            <param name="useCache">   true = attempt to use NCI cache in global  Cnc::Globals::Planes::GetPlanes (). </param>
            <param name="pGcodeMask"> (Optional) The gcode mask. </param>
            <returns> The number of lines read into m_spBnciRW. </returns>
        </member>
        <member name="M:CLibraryOperation.CalcBnciExtents(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Calculates the bnci extents. </summary>
            <param name="relWcs"> (Optional) true to relative wcs. </param>
            <param name="adjTOS"> (Optional) true to adjust to TOS. </param>
            <param name="deleteToolRadius"> (Optional) true to delete the tool radius from "Z". </param>
            <param name="includeEndOfRapids"> (Optional) true to include the end of rapids in extents calc. </param>
            <returns> true if successful. </returns>
        </member>
        <member name="M:CLibraryOperation.FreeEntAllocation">
            <summary> Free the operation's varaible length data. </summary>
        </member>
        <member name="M:CLibraryOperation.Empty">
            <summary> Empties this object. </summary>
        </member>
        <member name="M:CLibraryOperation.GetOpPtr">
            <summary> Gets a ptr to the operation. </summary>
            <returns> null if it fails, else the operation pointer. </returns>
        </member>
        <member name="M:CLibraryOperation.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CLibraryOperation.#ctor(System.Boolean,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CLibraryOperation.EntAllocation)">
            <summary> Constructor. </summary>
            <param name="isExternal">    true if entity is from an external file, false for the current db. </param>
            <param name="opEnt">		 The operation entity. </param>
            <param name="entAllocation"> operation's variable length data mode (DontLoad, LoadAndFree, LoadAndKeep) </param>
        </member>
        <member name="M:CLibraryOperation.#ctor(CLibraryOperation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:CLibraryOperation.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:CLibraryOperation.EntAllocation">
            <summary> Values that represent how to load operations' variable length data
		  when interrogating external Mastercam files. </summary>
        </member>
        <member name="T:CLibraryOperation.NciOpViewMismatchInfo.ModType">
            <summary> Values that represent the modification types needed or applied. </summary>
        </member>
        <member name="M:CLibraryOperation.NciOpViewMismatchInfo.#ctor(PlaneType,matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Constructor. </summary>
            <param name="planeType">	    Type of the plane. </param>
            <param name="m33">			    The matrix of the Tplane, Cplane or WCS. </param>
            <param name="worldOrigin">	    The origin in world coords. </param>
            <param name="requestedPlaneID"> op's op_view's assigned plane ID. </param>
            <param name="planeReqd">	    Operation ID if a plane is required for this operation type, else a 0. </param>
            <param name="createIfNeeded">   true = create a new plane if needed. </param>
        </member>
        <member name="T:CLibraryOperation.NciOpViewMismatchInfo">
            <summary> Information about the operation's op_view data mismatch with its NCI. </summary>
        </member>
        <member name="T:CLibraryOperation">
            <summary> A toolpath operation's entity, associated toolpath entities and NCI information. </summary>
        </member>
        <member name="M:CFposEntArray.SetUseMultiMap(System.Boolean)">
            <summary> Sets value of m_UseMultiMap. </summary>
            <param name="on"> true = allow duplicate keys in m_Map, false = ensure unique keys (like std::map). </param>
            <returns> Previous value of m_UseMultiMap. </returns>
        </member>
        <member name="M:CFposEntArray.Add(System.Int64,System.Boolean,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds theEntity to m_Map. </summary>
            <param name="mapKey">	  The map key. </param>
            <param name="isExternal"> true if entity is from an external file, false for the current db. </param>
            <param name="theEntity">  the entity. </param>
            <returns> A MapType::iterator to the item added. </returns>
        </member>
        <member name="M:CFposEntArray.op_Assign(CFposEntArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> Source for the object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:CFposEntArray.#ctor(CFposEntArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:CFposEntArray.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CFposEntArray.#ctor">
            <summary> Defines an alias representing type of the map. </summary>
            <summary> Default constructor. </summary>
        </member>
        <member name="T:CFposEntArray">
            <summary> Array of entity information. </summary>
        </member>
        <member name="F:CFposEnt.m_spBlock">
            <summary> Defines an alias representing type of the byte. </summary>
        </member>
        <member name="M:CFposEnt.CopyCriticalDepths(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Copies the critical depths from m_CriticalDepths to theEnt. </summary>
            <param name="theEnt">	   the entity to copy to. </param>
            <param name="justZeroOut"> true to just zero out the ent. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:CFposEnt.AllocMem(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Allocate memory to house the entity. </summary>
            <param name="sz"> The entity size. </param>
            <returns> nullptr if it fails, else an ent*. </returns>
        </member>
        <member name="M:CFposEnt.Init">
            <summary> Initializes this object. </summary>
        </member>
        <member name="M:CFposEnt.GetFormulaeFile">
            <summary> Gets const reference to m_FormulaeFile. </summary>
            <returns> const reference to m_FormulaeFile. </returns>
        </member>
        <member name="M:CFposEnt.GetCriticalDepths">
            <summary> Gets const reference to m_CriticalDepths. </summary>
            <returns> const reference to m_CriticalDepths. </returns>
        </member>
        <member name="M:CFposEnt.Get(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Gets a copy of the ent defined in m_spBlock. </summary>
            <param name="theEnt">					    the entity to fill in. </param>
            <param name="copyVariableLengthParameters"> (Optional) true to copy variable length parameters (critical depths,
											formulae file, etc.). </param>
            <returns> Size of entity if successful, 0 or -1 on failure. </returns>
        </member>
        <member name="M:CFposEnt.GetPtr">
            <summary> Returns an ent* to m_spBlock. </summary>
            <returns>  Returns an ent* to m_spBlock. </returns>
        </member>
        <member name="M:CFposEnt.GetEntSize(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the size of theEnt. </summary>
            <param name="theEnt"> the entity. </param>
            <returns> The ent size. </returns>
        </member>
        <member name="M:CFposEnt.GetFromDb(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the entity stored in m_spBlock from the current database. </summary>
            <param name="entity"> The entity to fill in. </param>
            <returns> Size of entity if successful, 0 or -1 on failure. </returns>
        </member>
        <member name="M:CFposEnt.Replace(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Replaces the given entity in m_spBlock. </summary>
            <param name="entity"> The entity. </param>
            <returns> Size of entity if successful, 0 or -1 on failure. </returns>
        </member>
        <member name="M:CFposEnt.Set(System.Boolean,ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Allocate memory and copy entity in member variable. </summary>
            <param name="isExternal"> true if entity is from an external file, false for the current db. </param>
            <param name="entity">	  The entity to attach. </param>
            <returns> Size of entity if successful, 0 or -1 on failure. </returns>
        </member>
        <member name="M:CFposEnt.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CFposEnt.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:CFposEnt">
            <summary> Entity information. </summary>
        </member>
        <member name="M:GroupListEntity.VisitAssociationIds(Cnc.Db.AssociationIdVisitor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the stored identifiers of associated entities and updates them via the supplied visitor. </summary>
            <param name="visitor"> The visitor that will update the stored identifiers of associated entities. </param>
        </member>
        <member name="M:GroupListEntity.VisitAssociationIds(Cnc.Db.ConstAssociationIdVisitor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the identifiers of the entities that this entity is associated to. </summary>
            <param name="visitor"> The visitor that will accept the identifiers of the associated entities. </param>
        </member>
        <member name="M:GroupListEntity.EnsureUniqueName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Ensure the group name is unique. </summary>
            <param name="groupName"> [in,out] the group name. </param>
            <returns> Return true if name altered. </returns>
        </member>
        <member name="M:GroupListEntity.GetPtrByID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets pointer to the group by its ID. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> Null if it fails, else the pointer by identifier. </returns>
        </member>
        <member name="M:GroupListEntity.GetNextID">
            <summary> Gets the next unique identifier. </summary>
            <returns> The next unique identifier. </returns>
        </member>
        <member name="M:GroupListEntity.ClearSelectBits(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Clears the select bits in groups' entities or all entities in the db. </summary>
            <param name="groupIds"> The IDs of the groups that contain the entities to clear the select	bits from.
						Empty = clear the SELECT_BIT from all entities in the db. </param>
            <param name="drawEnt">  True to redraw the entities. </param>
        </member>
        <member name="M:GroupListEntity.ValidateEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Removes any IDs of entities that no longer exist in the db from the groups. </summary>
            <param name="groupIds"> List of IDs for groups to check, empty to check all groups. </param>
            <returns> Number of entity IDs removed. </returns>
        </member>
        <member name="M:GroupListEntity.Append(GroupListEntity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Appends another GroupListEntity to this. </summary>
            <param name="source"> The GroupListEntity that contains the groups we want to append. </param>
            <returns> A map of source group ID's and the actual group IDs they were assigned if any
		  conflicts with existing groups were found. </returns>
        </member>
        <member name="M:GroupListEntity.MakeGroupEntityMap(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Makes entity map using all the entity ids (ent.ent_idn) from all the group in this. </summary>
            <param name="groupIds">   Identifiers for the groups that contain the entities you want to make
						  a map of. </param>
            <param name="saveEntity"> True to save a copy of the entity in the EntityMap. </param>
            <returns> A std::shared_ptr&lt;EntityMap&gt; </returns>
        </member>
        <member name="M:GroupListEntity.RemoveAllEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Remove ALL entity ID's from our groups with the given IDs. </summary>
            <param name="groupIds"> List of group IDs to remove from. </param>
        </member>
        <member name="M:GroupListEntity.GetGroupsFromEntIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a map of group IDs and the entities that belong to them from the given entIds. </summary>
            <param name="entIds"> List of identifiers (ent.ent_idn) for the entities. </param>
            <returns> Map of group IDs and the entities that belong to them from the given entIds. </returns>
        </member>
        <member name="M:GroupListEntity.GetEntityEptrs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build and return a list of entity eptrs (ent.eptr) from the current db referenced by
		  the groups. </summary>
            <param name="groupIds"> List of identifiers for the groups. </param>
            <returns> List of entity eptrs (ent.eptr) from the current db referenced by the groups. </returns>
        </member>
        <member name="M:GroupListEntity.GetEntities(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build and return a list of entities from the current db referenced by the groups. </summary>
            <param name="groupIds"> List of identifiers for the groups. </param>
            <returns> The entities. </returns>
        </member>
        <member name="M:GroupListEntity.SetSelBitsOnEntities(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,System.Int16,System.Boolean)">
            <summary> Sets the ent.sel value on entities from groups in the current db. </summary>
            <param name="groupIds"> The IDs of the groups to collect entities from. </param>
            <param name="selClear"> Select bits to clean in ent.sel (except ALIVE_BIT). </param>
            <param name="selSet">   Select bits to set in ent.sel (except ALIVE_BIT). </param>
            <param name="drawEnt">  True to also draw the entities. </param>
            <returns> A list of eptrs of the entities in these groups that changed. </returns>
        </member>
        <member name="M:GroupListEntity.Add(ToolpathGroup*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a group to the underlying container. </summary>
            <param name="theGroup"> [in,out] The group to add. </param>
            <returns> const pointer to the newly added group, nullptr if failed. </returns>
        </member>
        <member name="M:GroupListEntity.Add(GeometryGroup*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a group to the underlying container. </summary>
            <param name="theGroup"> [in,out] The group to add. </param>
            <returns> const pointer to the newly added group, nullptr if failed. </returns>
        </member>
        <member name="M:GroupListEntity.GetGroupType">
            <summary> Gets group list type. </summary>
            <returns> The group list type. </returns>
        </member>
        <member name="M:GroupListEntity.GetChildGroupIds(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets all the child group identifiers of the group with the given ID. </summary>
            <param name="parentGroupId"> Identifier for the parent group. </param>
            <returns> The child group identifiers. </returns>
        </member>
        <member name="M:GroupListEntity.GetParentGroupIds(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets all the parent group identifiers of the group with the given ID. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> The parent group identifiers. </returns>
        </member>
        <member name="M:GroupListEntity.CastToolpathGroup(BaseGroup!System.Runtime.CompilerServices.IsConst*)">
            <summary> Attempt to cast a BaseGroup pointer to a ToolpathGroup pointer (group type is checked). </summary>
            <param name="pBaseGroup"> pointer to a BaseGroup. </param>
            <returns> Null if it fails, else a pointer to a const ToolpathGroup. </returns>
        </member>
        <member name="M:GroupListEntity.CastGeometryGroup(BaseGroup!System.Runtime.CompilerServices.IsConst*)">
            <summary> Attempt to cast a BaseGroup pointer to a GeometryGroup pointer (group type is checked). </summary>
            <param name="pBaseGroup"> pointer to a BaseGroup. </param>
            <returns> Null if it fails, else a pointer to a const GeometryGroup. </returns>
        </member>
        <member name="M:GroupListEntity.MakeGroupPtr(BaseGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Make a copy of any type of group and return a shared_ptr to a BaseGroupPtr. </summary>
            <param name="group"> The group to copy. </param>
            <returns> A BaseGroupPtr. </returns>
        </member>
        <member name="M:GroupListEntity.AddSystemAndResultGroups">
            <summary> Adds the standard system GROUP and RESULT groups. </summary>
        </member>
        <member name="M:GroupListEntity.GetToolpathGroupPtr(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a const toolpath group pointer from the underlying map. </summary>
            <param name="name"> Name of the group (not case sensitive). </param>
            <returns> Null if it fails, else the geometry group pointer. </returns>
        </member>
        <member name="M:GroupListEntity.GetToolpathGroupPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets a const toolpath group pointer from the underlying map. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> Null if it fails, else the toolpath group pointer. </returns>
        </member>
        <member name="M:GroupListEntity.NameExists(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Queries if a given name exists. </summary>
            <param name="name">				  The name. </param>
            <param name="excludethisGroupId"> Identifier for the group to exclude in the check. </param>
            <param name="warn">				  True to warn of existing name. </param>
            <returns> True if name exists, false if not. </returns>
        </member>
        <member name="M:GroupListEntity.GetGeometryGroupPtr(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a const geometry group pointer from the underlying map. </summary>
            <param name="name"> Name of the group (not case sensitive). </param>
            <returns> Null if it fails, else the geometry group pointer. </returns>
        </member>
        <member name="M:GroupListEntity.GetGeometryGroupPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets a const geometry group pointer from the underlying map. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> Null if it fails, else the geometry group pointer. </returns>
        </member>
        <member name="M:GroupListEntity.UnhighlightEntities(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Unhighlight the entities referenced by the groups with the given IDs in our current db. </summary>
            <param name="groupIds"> The IDs of the groups to unhighlight. </param>
        </member>
        <member name="M:GroupListEntity.HighlightEntities(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Highlight the entities referenced by the groups with the given IDs in our current db. </summary>
            <param name="groupIds"> The IDs of the groups to highlight. </param>
            <param name="clearHighlight"> true = first unhighlight all entities, false = append to current highlightment. </param>
        </member>
        <member name="M:GroupListEntity.HighlightEntities(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Highlight the entities referenced by the groups with the given IDs in our current db. </summary>
            <param name="groupIds"> The IDs of the groups to highlight. </param>
            <param name="clearHighlight"> true = first unhighlight all entities, false = append to current highlightment. </param>
            <param name="drawEnt">  True to draw the entity. </param>
        </member>
        <member name="M:GroupListEntity.UnselectEntities(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Unelect the entities referenced by the groups with the given IDs in our current db. </summary>
            <param name="groupIds"> The IDs of the groups to unselect. </param>
            <param name="drawEnt">  True to draw the entity. </param>
        </member>
        <member name="M:GroupListEntity.SelectEntities(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Select the entities referenced by the groups with the given IDs in our current db. </summary>
            <param name="groupIds"> The IDs of the groups to select. </param>
            <param name="clearSel"> true = first unselect all entities, false = append to current
						selections. </param>
            <param name="drawEnt">  True to draw the entity. </param>
        </member>
        <member name="M:GroupListEntity.SwapEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Swap entity identifiers in the given groups. </summary>
            <param name="groupIds">  List of group IDs to swap entity IDs in. </param>
            <param name="oldEntIdn"> old entity ID to remove. </param>
            <param name="newEntIdn"> new entity ID to replace the old one with. </param>
            <returns> set of IDs of groups updated. </returns>
        </member>
        <member name="M:GroupListEntity.SwapEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Swap entity identifiers in the given groups. </summary>
            <param name="groupIds">	    List of group IDs to swap entity IDs in. </param>
            <param name="oldNewEntIds"> Map of old and new entity IDs to swap in groups. </param>
            <returns> set of IDs of groups updated. </returns>
        </member>
        <member name="M:GroupListEntity.RemoveEntityIdsNotInEntityMap(EntityMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Removes the entity identifiers that are NOT in the given EntityMap. </summary>
            <param name="entityMap">   The entity map that contains valid entities. </param>
            <param name="deleteEmpty"> True to delete any groups that become empty . </param>
            <returns> Total number of ent.ent_idn removed the groups. </returns>
        </member>
        <member name="M:GroupListEntity.RemoveEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Remove entity ID's from our groups with the given IDs. </summary>
            <param name="groupIds">    List of group IDs to remove from. </param>
            <param name="entIds">	   List of identifiers for the entities (ent.ent_idn) to remove from the groups. </param>
            <param name="deleteEmpty"> (Optional) True to delete the group if it's now empty. </param>
            <returns> Total number of ent.ent_idn removed the groups. </returns>
        </member>
        <member name="M:GroupListEntity.AddEntitiesBySelectBits(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16)">
            <summary> Adds entities from our db by their matching select bit (ent.sel) to the groups with
		  the given IDs. </summary>
            <param name="groupIds"> List of group IDs to add to. </param>
            <param name="selBits">  The select bits (SELECT_BIT, GROUP_BIT, etc). </param>
            <returns> Total number of ent.ent_idn added to the groups. </returns>
        </member>
        <member name="M:GroupListEntity.AddEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds entity ID's to groups with the given IDs. </summary>
            <param name="groupIds"> List of group IDs to add to. </param>
            <param name="entIds">   List of identifiers for the entities (ent.ent_idn) to add to the
						groups. </param>
            <returns> Total number of ent.ent_idn added to the groups. </returns>
        </member>
        <member name="M:GroupListEntity.GetGroupIdsFromEptrs(std.set&lt;DB_LIST_ENT**,std.less&lt;DB_LIST_ENT**&gt;,std.allocator&lt;DB_LIST_ENT**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a set of group IDs that reference the given eptrs. </summary>
            <param name="entIds"> List of eptrs (ent.eptr) for the entities. </param>
            <returns> Set of group IDs that reference the given eptrs. </returns>
        </member>
        <member name="M:GroupListEntity.GetGroupIdsFromEntIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a set of group IDs that reference the given entIds. </summary>
            <param name="entIds"> List of identifiers (ent.ent_idn) for the entities. </param>
            <returns> Set of group IDs that reference the given entIds. </returns>
        </member>
        <member name="M:GroupListEntity.GetRootGroupPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets the root group pointer of the group with the given ID. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> Null if it fails, else a const pointer to the root group. </returns>
        </member>
        <member name="M:GroupListEntity.GetGroupPtrs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build and return a vector of std::shared_ptr&lt;BaseGroupgroup&gt; in this. </summary>
            <param name="groupIds"> List of identifiers for the groups. </param>
            <returns> a vector of std::shared_ptr&lt;BaseGroup&gt; in this OR ALL if groupIds is empty. </returns>
        </member>
        <member name="M:GroupListEntity.GetGroupIds">
            <summary> Build and return a list of group IDs in this. </summary>
            <returns> List of group IDs in this. </returns>
        </member>
        <member name="M:GroupListEntity.GetEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build and return a list of entity IDs (ent.ent_idn) from the current db referenced by
		  the groups. </summary>
            <param name="groupIds"> List of identifiers for the groups. </param>
            <returns> List of entity IDs (ent.ent_idn) from the current db referenced by the groups. </returns>
        </member>
        <member name="M:GroupListEntity.RemoveEmptyGroups">
            <summary> Removes all groups that do not contain any entity IDs. </summary>
            <returns> IDs of groups removed. </returns>
        </member>
        <member name="M:GroupListEntity.Remove(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Removes groups with the given IDs. </summary>
            <param name="groupIds">		  IDs of the groups to remove. </param>
            <param name="deleteChildren"> (Optional) true = delete all the children if the groups have them,
							  false = delete only if there are no children. </param>
            <returns> IDs of groups removed. </returns>
        </member>
        <member name="M:GroupListEntity.Replace(BaseGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Replaces the given group. </summary>
            <param name="group"> The group. </param>
            <returns> const iterator of group in map. </returns>
        </member>
        <member name="M:GroupListEntity.IsEmpty">
            <summary> Query if this object is empty. </summary>
            <returns> True if empty, false if not. </returns>
        </member>
        <member name="M:GroupListEntity.Empty">
            <summary> Empties this object. </summary>
        </member>
        <member name="M:GroupListEntity.GetMap">
            <summary> Gets a reference to the underlying map. </summary>
            <returns> The map. </returns>
            <summary> Gets a constant reference to the underlying map. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:GroupListEntity.IsEqual(GroupListEntity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal. </summary>
            <param name="obj"> The object. </param>
            <returns> True if equal, false if not. </returns>
        </member>
        <member name="M:GroupListEntity.op_Inequality(GroupListEntity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:GroupListEntity.op_Equality(GroupListEntity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:GroupListEntity.op_Assign(GroupListEntity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:GroupListEntity.GetAssocType">
            <summary> Return the entity type (for ClassEnt) </summary>
            <returns> Return the entity type. </returns>-
</member>
        <member name="M:GroupListEntity.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:GroupListEntity.#ctor(GroupListEntity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:GroupListEntity.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:GroupListEntity.#ctor(Cnc.Groups.GroupType)">
            <summary> Constructor setting the group type. </summary>
            <param name="groupListType"> (Optional) Type of the group list. </param>
        </member>
        <member name="T:GroupListEntity">
            <summary> GroupListEntity class. </summary>
        </member>
        <member name="M:IGroupListEntity.Append(GroupListEntity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Appends another GroupListEntity to this. </summary>
            <param name="source"> The GroupListEntity that contains the groups we want to append. </param>
            <returns> A map of source group ID's and the actual group IDs they were assigned if any
		  conflicts with existing groups were found. </returns>
        </member>
        <member name="M:IGroupListEntity.RemoveAllEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Remove ALL entity ID's from our groups with the given IDs. </summary>
            <param name="groupIds"> List of group IDs to remove from. </param>
        </member>
        <member name="M:IGroupListEntity.GetGroupsFromEntIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a map of group IDs and the entities that belong to them from the given entIds. </summary>
            <param name="entIds"> List of identifiers (ent.ent_idn) for the entities. </param>
            <returns> Map of group IDs and the entities that belong to them from the given entIds. </returns>
        </member>
        <member name="M:IGroupListEntity.GetEntityEptrs(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build and return a list of entity eptrs (ent.eptr) from the current db referenced by
		  the groups. </summary>
            <param name="groupIds"> List of identifiers for the groups. </param>
            <returns> List of entity eptrs (ent.eptr) from the current db referenced by the groups. </returns>
        </member>
        <member name="M:IGroupListEntity.GetEntities(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build and return a list of entities from the current db referenced by the groups. </summary>
            <param name="groupIds"> List of identifiers for the groups. </param>
            <returns> The entities. </returns>
        </member>
        <member name="M:IGroupListEntity.SetSelBitsOnEntities(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16,System.Int16,System.Boolean)">
            <summary> Sets the ent.sel value on entities from groups in the current db. </summary>
            <param name="groupIds"> The IDs of the groups to collect entities from. </param>
            <param name="selClear"> Select bits to clean in ent.sel (except ALIVE_BIT). </param>
            <param name="selSet">   Select bits to set in ent.sel (except ALIVE_BIT). </param>
            <param name="drawEnt">  True to also draw the entities. </param>
            <returns> A list of eptrs of the entities in these groups that changed. </returns>
        </member>
        <member name="M:IGroupListEntity.Add(ToolpathGroup*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a group to the underlying container. </summary>
            <param name="theGroup"> [in,out] The group to add. </param>
            <returns> const pointer to the newly added group, nullptr if failed. </returns>
        </member>
        <member name="M:IGroupListEntity.Add(GeometryGroup*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a group to the underlying container. </summary>
            <param name="theGroup"> [in,out] The group to add. </param>
            <returns> const pointer to the newly added group, nullptr if failed. </returns>
        </member>
        <member name="M:IGroupListEntity.GetGroupType">
            <summary> Gets group list type. </summary>
            <returns> The group list type. </returns>
        </member>
        <member name="M:IGroupListEntity.GetChildGroupIds(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets all the child group identifiers of the group with the given ID. </summary>
            <param name="parentGroupId"> Identifier for the parent group. </param>
            <returns> The child group identifiers. </returns>
        </member>
        <member name="M:IGroupListEntity.GetParentGroupIds(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets all the parent group identifiers of the group with the given ID. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> The parent group identifiers. </returns>
        </member>
        <member name="M:IGroupListEntity.AddSystemAndResultGroups">
            <summary> Adds the standard system GROUP and RESULT groups. </summary>
        </member>
        <member name="M:IGroupListEntity.GetToolpathGroupPtr(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a const toolpath group pointer from the underlying map. </summary>
            <param name="name"> Name of the group (not case sensitive). </param>
            <returns> Null if it fails, else the geometry group pointer. </returns>
        </member>
        <member name="M:IGroupListEntity.GetToolpathGroupPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets a const toolpath group pointer from the underlying map. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> Null if it fails, else the toolpath group pointer. </returns>
        </member>
        <member name="M:IGroupListEntity.NameExists(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Queries if a given name exists. </summary>
            <param name="name">				  The name. </param>
            <param name="excludethisGroupId"> Identifier for the group to exclude in the check. </param>
            <param name="warn">				  True to warn of existing name. </param>
            <returns> True if name exists, false if not. </returns>
        </member>
        <member name="M:IGroupListEntity.GetGeometryGroupPtr(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a const geometry group pointer from the underlying map. </summary>
            <param name="name"> Name of the group (not case sensitive). </param>
            <returns> Null if it fails, else the geometry group pointer. </returns>
        </member>
        <member name="M:IGroupListEntity.GetGeometryGroupPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets a const geometry group pointer from the underlying map. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> Null if it fails, else the geometry group pointer. </returns>
        </member>
        <member name="M:IGroupListEntity.UnselectEntities(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Unelect the entities referenced by the groups with the given IDs in our current db. </summary>
            <param name="groupIds"> The IDs of the groups to unselect. </param>
            <param name="drawEnt">  True to draw the entity. </param>
        </member>
        <member name="M:IGroupListEntity.SelectEntities(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary> Select the entities referenced by the groups with the given IDs in our current db. </summary>
            <param name="groupIds"> The IDs of the groups to select. </param>
            <param name="clearSel"> true = first unselect all entities, false = append to current
						selections. </param>
            <param name="drawEnt">  True to draw the entity. </param>
        </member>
        <member name="M:IGroupListEntity.SwapEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Swap entity identifiers in the given groups. </summary>
            <param name="groupIds">  List of group IDs to swap entity IDs in. </param>
            <param name="oldEntIdn"> old entity ID to remove. </param>
            <param name="newEntIdn"> new entity ID to replace the old one with. </param>
            <returns> set of IDs of groups updated. </returns>
        </member>
        <member name="M:IGroupListEntity.SwapEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Swap entity identifiers in the given groups. </summary>
            <param name="groupIds">	    List of group IDs to swap entity IDs in. </param>
            <param name="oldNewEntIds"> Map of old and new entity IDs to swap in groups. </param>
            <returns> set of IDs of groups updated. </returns>
        </member>
        <member name="M:IGroupListEntity.RemoveEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Remove entity ID's from our groups with the given IDs. </summary>
            <param name="groupIds">    List of group IDs to remove from. </param>
            <param name="entIds">	   List of identifiers for the entities (ent.ent_idn) to remove from the groups. </param>
            <param name="deleteEmpty"> (Optional) True to delete the group if it's now empty. </param>
            <returns> Total number of ent.ent_idn removed the groups. </returns>
        </member>
        <member name="M:IGroupListEntity.AddEntitiesBySelectBits(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16)">
            <summary> Adds entities from our db by their matching select bit (ent.sel) to the groups with
		  the given IDs. </summary>
            <param name="groupIds"> List of group IDs to add to. </param>
            <param name="selBits">  The select bits (SELECT_BIT, GROUP_BIT, etc). </param>
            <returns> Total number of ent.ent_idn added to the groups. </returns>
        </member>
        <member name="M:IGroupListEntity.AddEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds entity ID's to groups with the given IDs. </summary>
            <param name="groupIds"> List of group IDs to add to. </param>
            <param name="entIds">   List of identifiers for the entities (ent.ent_idn) to add to the
						groups. </param>
            <returns> Total number of ent.ent_idn added to the groups. </returns>
        </member>
        <member name="M:IGroupListEntity.GetGroupIdsFromEptrs(std.set&lt;DB_LIST_ENT**,std.less&lt;DB_LIST_ENT**&gt;,std.allocator&lt;DB_LIST_ENT**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a set of group IDs that reference the given eptrs. </summary>
            <param name="entIds"> List of eptrs (ent.eptr) for the entities. </param>
            <returns> Set of group IDs that reference the given eptrs. </returns>
        </member>
        <member name="M:IGroupListEntity.GetGroupIdsFromEntIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a set of group IDs that reference the given entIds. </summary>
            <param name="entIds"> List of identifiers (ent.ent_idn) for the entities. </param>
            <returns> Set of group IDs that reference the given entIds. </returns>
        </member>
        <member name="M:IGroupListEntity.GetRootGroupPtr(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Gets the root group pointer of the group with the given ID. </summary>
            <param name="groupId"> Identifier for the group. </param>
            <returns> Null if it fails, else a const pointer to the root group. </returns>
        </member>
        <member name="M:IGroupListEntity.GetGroupIds">
            <summary> Build and return a list of group IDs in this. </summary>
            <returns> List of group IDs in this. </returns>
        </member>
        <member name="M:IGroupListEntity.GetEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Build and return a list of entity IDs (ent.ent_idn) from the current db referenced by
		  the groups. </summary>
            <param name="groupIds"> List of identifiers for the groups. </param>
            <returns> List of entity IDs (ent.ent_idn) from the current db referenced by the groups. </returns>
        </member>
        <member name="M:IGroupListEntity.RemoveEmptyGroups">
            <summary> Removes all groups that do not contain any entity IDs. </summary>
            <returns> IDs of groups removed. </returns>
        </member>
        <member name="M:IGroupListEntity.Remove(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Removes groups with the given IDs. </summary>
            <param name="groupIds">		  IDs of the groups to remove. </param>
            <param name="deleteChildren"> (Optional) true = delete all the children if the groups have them,
							  false = delete only if there are no children. </param>
            <returns> IDs of groups removed. </returns>
        </member>
        <member name="M:IGroupListEntity.Replace(BaseGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Replaces the given group. </summary>
            <param name="group"> The group. </param>
            <returns> const iterator of group in map. </returns>
        </member>
        <member name="M:IGroupListEntity.IsEmpty">
            <summary> Query if this object is empty. </summary>
            <returns> True if empty, false if not. </returns>
        </member>
        <member name="M:IGroupListEntity.Empty">
            <summary> Empties this object. </summary>
        </member>
        <member name="M:IGroupListEntity.GetMap">
            <summary> Gets a reference to the underlying map. </summary>
            <returns> The map. </returns>
            <summary> Gets a constant reference to the underlying map. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:IGroupListEntity.IsEqual(GroupListEntity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal. </summary>
            <param name="obj"> The object. </param>
            <returns> True if equal, false if not. </returns>
        </member>
        <member name="M:IGroupListEntity.op_Inequality(GroupListEntity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:IGroupListEntity.op_Equality(GroupListEntity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:IGroupListEntity.op_Assign(GroupListEntity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:IGroupListEntity.GetAssocType">
            <summary> Return the entity type (for ClassEnt) </summary>
            <returns> Return the entity type. </returns>-
</member>
        <member name="M:IGroupListEntity.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="T:IGroupListEntity">
            <summary> IGroupListEntity class. </summary>
        </member>
        <member name="M:ClassEnt.GetAssocType">
            <summary> Gets the assoc_id representing the ClassEnt type (OP_ID, etc). </summary>
            <returns> The assoc_id representing the ClassEnt type. </returns>
        </member>
        <member name="M:ClassEnt.GetEntityType">
            <summary> Gets the entity id representing the ClassEnt type (ASSOC_ID, N_ID, etc). </summary>
            <returns> The entity id representing the ClassEnt type. </returns>
        </member>
        <member name="M:ClassEnt.AddDerivedClass(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;*(void)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a derived class. </summary>
            <param name="entID">   Identifier for the ent. </param>
            <param name="assocID"> Identifier for the associated. </param>
            <param name="func">    The function. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.AddDefaultClass(std.function&lt;*(void)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds/Sets the default constructor to the ClassEnt class factory. </summary>
            <remarks> If an unknown ClassEnt type is encountered while deserialization, this constructor will be invoked to contain the unknown typed entity. </remarks>
            <param name="func"> The default constructor function. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.CreateFromFile(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary> Creates the ClassEnt object instance and deserializes it from the file. </summary>
            <param name="file">   The file to read from. </param>
            <param name="entity"> The entity. </param>
            <param name="bytes">  The bytes. </param>
            <returns> null if it fails, else the new from file. </returns>
        </member>
        <member name="M:ClassEnt.GetXMLVersion">
            <summary> Get Version (used in XML serialization). </summary>
            <returns> the version </returns>
        </member>
        <member name="M:ClassEnt.Deserialize(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Reads/Deserializes entity from the given file. </summary>
            <param name="file">			The file to read from. </param>
            <param name="bytesToRead">	Size of the block in bytes containing the entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.Serialize(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Writes/Serializes entity to the given file. </summary>
            <param name="file"> The file to write to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.GetBufferSize">
            <summary> Gets buffer size. </summary>
            <remarks> the buffer size is the memory footprint that the entity takes in the serialized form. </remarks>
            <returns> The buffer size. </returns>
        </member>
        <member name="M:ClassEnt.GetIDN">
            <summary> Gets the ent_idn of the Mastercam entity that is represented by this instance. </summary>
            <returns> The Mastercam entity ent_idn value. </returns>
        </member>
        <member name="M:ClassEnt.DetachFromDatabase">
            <summary> Determines if we can detach from database. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.DetachFromDatabase(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Detach from database. </summary>
            <param name="entIdn"> The entity idn. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.DetachFromThisEntity(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Detach from supplied entity. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ClassEnt.AttachToThisEntity(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attach to supplied entity. </summary>
            <param name="entity"> The entity. </param>
            <returns> entity idn or -1. </returns>
        </member>
        <member name="M:ClassEnt.AttachToThisEntityAndRewriteEnt(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attach to entity and update database. </summary>
            <param name="entity"> The entity. </param>
            <returns> entity idn or -1. </returns>
        </member>
        <member name="M:ClassEnt.AttachToEntityAndStoreInDatabase">
            <summary> Attach to entity and store in database. </summary>
            <returns> entity idn or -1. </returns>
        </member>
        <member name="M:ClassEnt.VisitAssociationIds(Cnc.Db.AssociationIdVisitor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the stored identifiers of associated entities and updates them via the supplied visitor. </summary>
            <param name="visitor"> The visitor that will update the stored identifiers of associated entities. </param>
        </member>
        <member name="M:ClassEnt.VisitAssociationIds(Cnc.Db.ConstAssociationIdVisitor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the identifiers of the entities that this entity is associated to. </summary>
            <param name="visitor"> The visitor that will accept the identifiers of the associated entities. </param>
        </member>
        <member name="M:ClassEnt.VisitAssociativeIds(Cnc.Db.AssociationIdVisitor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the identifiers used for database entity association and updates them via the supplied visitor. </summary>
            <param name="visitor"> The visitor that will update the stored identifiers that can be used for association. </param>
        </member>
        <member name="M:ClassEnt.VisitAssociativeIds(Cnc.Db.ConstAssociationIdVisitor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visit the identifiers used for database entity association that this entity defines. </summary>
            <param name="visitor"> The visitor that will accept identifiers on this entity that can be used for association. </param>
        </member>
        <member name="M:ClassEnt.Dispose">
            <summary> Finalizes an instance of the ClassEnt class. </summary>
        </member>
        <member name="M:ClassEnt.#ctor">
            <summary> Initializes a new instance of the ClassEnt class. </summary>
        </member>
        <member name="T:ClassEnt">
            <summary> Base class providing a more object oriented approach to Mastercam entities. </summary>
        </member>
        <member name="M:Cnc.Db.IClassEnt.Deserialize(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Reads/Deserializes entity from the given file. </summary>
            <param name="file">			The file to read from. </param>
            <param name="bytesToRead">	Size of the block in bytes containing the entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Db.IClassEnt.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Writes/Serializes the entity from a given archive. </summary>
            <param name="archive"> The archive to write to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Db.IClassEnt.Serialize(MCFile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Writes/Serializes entity to the given file. </summary>
            <param name="file"> The file to write to. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Db.IClassEnt.GetBufferSize">
            <summary> Gets buffer size. </summary>
            <remarks> the buffer size is the memory footprint that the entity takes in the serialized form. </remarks>
            <returns> The buffer size. </returns>
        </member>
        <member name="M:Cnc.Db.IClassEnt.GetIDN">
            <summary> Gets the ent_idn of the Mastercam entity that is represented by this instance. </summary>
            <returns> The Mastercam entity ent_idn value. </returns>
        </member>
        <member name="M:Cnc.Db.IClassEnt.DetachFromDatabase">
            <summary> Determines if we can detach from database. </summary>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Db.IClassEnt.DetachFromDatabase(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Detach from database. </summary>
            <param name="entIdn"> The entity idn. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Db.IClassEnt.DetachFromThisEntity(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Detach from supplied entity. </summary>
            <param name="entity"> The entity. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Cnc.Db.IClassEnt.AttachToThisEntity(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attach to supplied entity. </summary>
            <param name="entity"> The entity. </param>
            <returns> entity idn or -1. </returns>
        </member>
        <member name="M:Cnc.Db.IClassEnt.AttachToThisEntityAndRewriteEnt(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Attach to entity and update database. </summary>
            <param name="entity"> The entity. </param>
            <returns> entity idn or -1. </returns>
        </member>
        <member name="M:Cnc.Db.IClassEnt.AttachToEntityAndStoreInDatabase">
            <summary> Attach to entity and store in database. </summary>
            <returns> entity idn or -1. </returns>
        </member>
        <member name="M:Cnc.Db.IClassEnt.VisitAssociationIds(Cnc.Db.AssociationIdVisitor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the stored identifiers of associated entities and updates them via the supplied visitor. </summary>
            <param name="visitor"> The visitor that will update the stored identifiers of associated entities. </param>
        </member>
        <member name="M:Cnc.Db.IClassEnt.VisitAssociationIds(Cnc.Db.ConstAssociationIdVisitor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the identifiers of the entities that this entity is associated to. </summary>
            <param name="visitor"> The visitor that will accept the identifiers of the associated entities. </param>
        </member>
        <member name="M:Cnc.Db.IClassEnt.VisitAssociativeIds(Cnc.Db.AssociationIdVisitor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visits the identifiers used for database entity association and updates them via the supplied visitor. </summary>
            <param name="visitor"> The visitor that will update the stored identifiers that can be used for association. </param>
        </member>
        <member name="M:Cnc.Db.IClassEnt.VisitAssociativeIds(Cnc.Db.ConstAssociationIdVisitor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Visit the identifiers used for database entity association that this entity defines. </summary>
            <param name="visitor"> The visitor that will accept identifiers on this entity that can be used for association. </param>
        </member>
        <member name="T:Cnc.Db.IClassEnt">
            <summary> An interface representing a class entity. </summary>
        </member>
        <member name="M:ToolpathGroup.Initialize">
            <summary> Initializes this object. </summary>
        </member>
        <member name="M:ToolpathGroup.IsMachineGroup">
            <summary> Query if this object is machine group. </summary>
            <returns> True if machine group, false if not. </returns>
        </member>
        <member name="M:ToolpathGroup.IsToolpathGroup">
            <summary> Query if this object is toolpath group. </summary>
            <returns> True if toolpath group, false if not. </returns>
        </member>
        <member name="M:ToolpathGroup.Convert(op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Maps this into an op_group structure. </summary>
            <param name="opGroup"> [in,out] The target op_group to map into. </param>
        </member>
        <member name="M:ToolpathGroup.IsEqual(ToolpathGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal. </summary>
            <param name="obj"> The object. </param>
            <returns> True if equal, false if not. </returns>
        </member>
        <member name="M:ToolpathGroup.op_Inequality(ToolpathGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:ToolpathGroup.op_Equality(ToolpathGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:ToolpathGroup.op_Assign(ToolpathGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:ToolpathGroup.#ctor(BaseGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="obj"> A base group class. </param>
        </member>
        <member name="M:ToolpathGroup.#ctor(op_group!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="obj"> The old style group structure. </param>
        </member>
        <member name="M:ToolpathGroup.#ctor(ToolpathGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:ToolpathGroup.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:ToolpathGroup.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:ToolpathGroup.#ctor(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="name">	    The group name. </param>
            <param name="parentId"> Identifier for the parent. </param>
            <param name="hidden">   True to set as hidden. </param>
            <param name="long">     (Optional) ID of the group. </param>
        </member>
        <member name="M:ToolpathGroup.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:ToolpathGroup">
            <summary> ToolpathGroup class. </summary>
        </member>
        <member name="M:IsOriginTopCorner(OriginCornerType!System.Runtime.CompilerServices.IsConst)">
            <summary>	Query if origin corner is top or bottom corner. </summary>
            <param name="originCorner">	The origin corner. </param>
            <returns>	True if origin corner is Top, false if it's Bottom. </returns>
        </member>
        <member name="M:InitOpGroup(op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,MCGroupType,System.Byte)">
 @par Purpose:
			Initializes a new group to whatever parameters are passed in.

 @param[in]		gpl			the group to be initialized
 @param[in]		name		new group name
 @param[in]		parent_idn	parent group id #
 @param[in]		hidden		true = if you want group marked hidden
 @param[in]		type		type of group
 @param[in]		product		PRODUCT_MILL, PRODUCT_LATHE, PRODUCT_ROUTER, PRODUCT_WIRE, or PRODUCT_MT

</member>
        <member name="M:AddEmptyOpGroup(System.Char!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Byte,System.Boolean,System.Boolean*)">
 @par Purpose:
			add a new group (empty) to the list

 @param[in]		name				new group name
 @param[in]		parent_idn			parent group id #
 @param[in]		hidden				true = if you want group marked hidden
 @param[in]		type				type of group
 @param[in]		product				PRODUCT_MILL, PRODUCT_LATHE, PRODUCT_ROUTER, PRODUCT_WIRE, or PRODUCT_MT
 @param[in]		move_insert_arrow	move insert arrow after group in opmgr
 @param[out]		succf				true = group added

 @returns			A pointer to the group newly added to the list

</member>
        <member name="F:group_pg3.min_ltool_clr">
@} 
@defgroup groups_ch3 PRODUCT_LATHE and PRODUCT_MT parameters 
@{ 
</member>
        <member name="F:group_pg3.x">
@} 
@defgroup groups_ch2 PRODUCT_MILL, PRODUCT_ROUTER, PRODUCT_WIRE parameters 
@{ 
</member>
        <member name="F:group_pg3.stock_fit">
@defgroup groups_ch1 common parameters 
@{ 
</member>
        <member name="T:group_pg3">
@note group_pg2 is meaningless without the
  * product type, which is in the op_group 
</member>
        <member name="T:group_pg2">
machine group tool settings
</member>
        <member name="T:group_pg1">
machine group file settings
</member>
        <member name="T:lathe_mc_extension_prm">
MCExtensions lathe machine parameters
</member>
        <member name="T:tplane_z">
Tplane Z information for MCExtensions lathe machine parameters used with the MT Platform machines.
</member>
        <member name="T:turn_profile_prm">
Turn profile parameters
</member>
        <member name="T:emap">
entity map structure
</member>
        <member name="T:group_pg1_advanced_defaults">
advanced tool options structure
</member>
        <member name="T:steadyrest_type">
steady rest structure (v9)
</member>
        <member name="T:tailstock_type">
tailstock structure (v9)
</member>
        <member name="T:chuck_type">
chuck jaw structure (v9)
</member>
        <member name="T:barstock_type">
round bar stock (with optional hole) structure
</member>
        <member name="T:TPlaneZ">
            <summary> How to compute Tplane Z coordinate for MT Platform lathe MCExtensions extended data. </summary>
        </member>
        <member name="T:WorkType">
            <summary> Values that represent MT JobSetup Work Types. (Note: LATHE_WORK_BAR / CHUCK deprecated old values). </summary>
        </member>
        <member name="M:GeometryGroup.Initialize">
            <summary> Initializes this object. </summary>
        </member>
        <member name="M:GeometryGroup.IsGeometryGroup">
            <summary> Query if this object is geometry group. </summary>
            <returns> True if geometry group, false if not. </returns>
        </member>
        <member name="M:GeometryGroup.IsSystemGroup">
            <summary> Query if this object is system group. </summary>
            <returns> True if system group, false if not. </returns>
        </member>
        <member name="M:GeometryGroup.IsEqual(GeometryGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal. </summary>
            <param name="obj"> The object. </param>
            <returns> True if equal, false if not. </returns>
        </member>
        <member name="M:GeometryGroup.op_Inequality(GeometryGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:GeometryGroup.op_Equality(GeometryGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:GeometryGroup.op_Assign(GeometryGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:GeometryGroup.#ctor(BaseGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="obj"> A base group class. </param>
        </member>
        <member name="M:GeometryGroup.#ctor(op_group!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="obj"> The old style group structure. </param>
        </member>
        <member name="M:GeometryGroup.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> destructor. </summary>
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:GeometryGroup.#ctor(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="name">		   The group name. </param>
            <param name="parentId">    Identifier for the parent. </param>
            <param name="hidden">	   True to set as hidden. </param>
            <param name="requestedId"> (Optional) Requested ID to assign to the new group. Will be
						   reassigned if found to conflict with existing groups. </param>
        </member>
        <member name="M:GeometryGroup.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:GeometryGroup">
            <summary> GeometryGroup class. </summary>
        </member>
        <member name="M:BaseGroup.Initialize(GroupTypes,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Initializes this object. </summary>
            <param name="groupType">	    Type of group. </param>
            <param name="requestedId"> Requested ID to assign to the new group. Will be reassigned
								if found to conflict with existing groups. </param>
        </member>
        <member name="M:BaseGroup.GetName">
            <summary> Gets the name. </summary>
            <returns> The name. </returns>
        </member>
        <member name="M:BaseGroup.GetType">
            <summary> Gets the type. </summary>
            <returns> The type. </returns>
        </member>
        <member name="M:BaseGroup.UnhighlightEntities">
            <summary> Unhighlight entities. </summary>
        </member>
        <member name="M:BaseGroup.HighlightEntities(System.Boolean,std.shared_ptr&lt;EntityMap&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Highlight entities from this group in the current db. </summary>
            <param name="clearHighlight"> true = first unhighlight all entities, false = append to current highlightment. </param>
            <param name="spEntityMap"> Pointer to an entity map, nullptr = we'll create our own (expensive). </param>
        </member>
        <member name="M:BaseGroup.UnselectEntities(System.Boolean,std.shared_ptr&lt;EntityMap&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Unselect entities from this group in the current db. </summary>
            <param name="drawEnt">	   True to draw the entity. </param>
            <param name="spEntityMap"> Pointer to an entity map, nullptr = we'll create our own (expensive). </param>
            <returns> A list of eptrs of unselected entities. </returns>
        </member>
        <member name="M:BaseGroup.SelectEntities(System.Boolean,System.Boolean,std.shared_ptr&lt;EntityMap&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Select entities from this group in the current db. </summary>
            <param name="clearSel">    True to first clear any currently selected entities, false to add
						   to selected entities. </param>
            <param name="drawEnt">	   True to draw the entity. </param>
            <param name="spEntityMap"> Pointer to an entity map, nullptr = we'll create our own (expensive). </param>
            <returns> A list of eptrs of selected entities. </returns>
        </member>
        <member name="M:BaseGroup.SetSelBitsOnEntities(System.Int16,System.Int16,System.Boolean,std.shared_ptr&lt;EntityMap&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Sets the ent.sel value on entities from this group in the current db. </summary>
            <param name="selClear">    Select bits to clean in ent.sel (except ALIVE_BIT). </param>
            <param name="selSet">	   Select bits to set in ent.sel (except ALIVE_BIT). </param>
            <param name="drawEnt">	   True to also draw the entity. </param>
            <param name="spEntityMap"> Pointer to an entity map, nullptr = we'll create our own (expensive). </param>
            <returns> A list of eptrs of the entities in this group that changed. </returns>
        </member>
        <member name="M:BaseGroup.SwapEntityIds(std.map&lt;System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Swap entity identifiers (like we need to do when geometry transform occurs). </summary>
            <param name="oldNewEntIds"> Map of old and new entity IDs to swap in groups. </param>
            <returns> Number of IDs swapped. </returns>
        </member>
        <member name="M:BaseGroup.RemoveEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Remove entity ID's to our group. </summary>
            <param name="entIds"> List of identifiers for the entities (ent.ent_idn). </param>
            <returns> Number of IDs remaining in m_EntIds. </returns>
        </member>
        <member name="M:BaseGroup.AddEntityIds(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds entity ID's to our group. </summary>
            <param name="entIds"> List of identifiers for the entities (ent.ent_idn). </param>
            <returns> Number of IDs added (filters out duplicates). </returns>
        </member>
        <member name="M:BaseGroup.op_Assign(BaseGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:BaseGroup.Convert(op_group*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Maps this into an op_group structure. </summary>
            <param name="opGroup"> [in,out] The target op_group to map into. </param>
        </member>
        <member name="M:BaseGroup.IsEqual(BaseGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal. </summary>
            <param name="obj"> The object. </param>
            <returns> True if equal, false if not. </returns>
        </member>
        <member name="M:BaseGroup.op_Inequality(BaseGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:BaseGroup.op_Equality(BaseGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:BaseGroup.#ctor(op_group!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="obj"> The old style group structure. </param>
        </member>
        <member name="M:BaseGroup.#ctor(BaseGroup!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:BaseGroup.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:BaseGroup.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:BaseGroup.#ctor(GroupTypes,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="groupType">   Type of the group. </param>
            <param name="name">		   The group name. </param>
            <param name="parentId">    Identifier for the parent group. </param>
            <param name="hidden">	   True to set as hidden. </param>
            <param name="requestedId"> (Optional) Requested ID to assign to the new group. Will be
						   reassigned if found to conflict with existing groups. </param>
        </member>
        <member name="M:BaseGroup.#ctor(GroupTypes,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Constructor. </summary>
            <param name="groupType">   (Optional) The group name. </param>
            <param name="requestedId"> (Optional) Requested ID to assign to the new group. Will be
						   reassigned if found to conflict with existing groups. </param>
        </member>
        <member name="T:BaseGroup">
            <summary> BaseGroup class. </summary>
        </member>
        <member name="M:Cnc.Globals.File.MakeEntityMap(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16,Cnc.Globals.File.EntityMapPrm.MemMgmt)">
            <summary> Read through our database, build and return a shared_ptr to an EntityMap class. </summary>
            <param name="entTypeMask"> (Optional) The entity type mask (ent.ent_id like
						   ALL_ENTITIES_MASK, PLASNB_MASK, L_ID, etc). </param>
            <param name="selBitMask">  (Optional) The selection bit mask (SELECT_BIT, GROUP_BIT, etc). </param>
            <param name="memMgmt">	   (Optional) Memory management method when making a copy of the entity. </param>
            <returns> A shared_ptr to an EntityMap class. </returns>
        </member>
        <member name="M:Cnc.Globals.File.MakeEntityMap(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Globals.File.EntityMapPrm!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Read through an external Mastercam file, build and return a shared_ptr to an EntityMap class. </summary>
            <param name="mcamFileName">		   Full path of an existing Mastercam file. </param>
            <param name="includeMaskFunction"> The include mask function. </param>
            <param name="loadPrm">			   Load parameters. </param>
            <returns> A shared_ptr to an EntityMap class. </returns>
        </member>
        <member name="M:Cnc.Globals.File.MakeEntityMap(std.function&lt;(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Globals.File.EntityMapPrm!System.Runtime.CompilerServices.IsConst*)">
            <summary> Read through our database, build and return a shared_ptr to an EntityMap class. </summary>
            <param name="includeMaskFunction"> The include mask function. </param>
            <param name="ploadPrm">			   (Optional) Pointer to load parameters. </param>
            <returns> A shared_ptr to an EntityMap class. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.EntityLoaded">
            <summary> Query if this object contains an entity copy. </summary>
            <returns> True if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.IsTpEnt">
            <summary> Query if this object represents a toolpath entity. </summary>
            <returns> True if toolpath entity, false if not. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.IsOpEnt">
            <summary> Query if this object represents an operation entity. </summary>
            <returns> True if operation entity, false if not. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.op_Inequality(Cnc.Globals.File.EntityMapInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.op_Equality(Cnc.Globals.File.EntityMapInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.IsEqual(Cnc.Globals.File.EntityMapInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal. </summary>
            <param name="obj"> The object. </param>
            <returns> True if equal, false if not. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.GetEntPtr">
            <summary> Gets a const ent pointer directly into the variable length buffer and the buffer size. </summary>
            <returns> Returns a const ent* and the buffer size.  The buffer size is also returned as insurance so any caller is
		  aware that it may not be a full-sized entity at the pointer so don't dereference the returned pointer
		  and do an "ent myEntity = *pEnt;". </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.GetEntity">
            <summary> Copies a full-sized entity from the variable-length buffer. </summary>
            <returns> first = a full-sized copy of the entity, second = true if successful. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.GetEntity(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copies a full-sized entity from the variable-length buffer. </summary>
            <param name="theEnt"> The entity to fill in. </param>
            <returns> Return true if successful, false if not. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,ASSOC_ENT_TYPE,DB_LIST_ENT*)">
            <summary> Constructor. </summary>
            <param name="entNo">   ent.ent_idn value of the entity. </param>
            <param name="typeId">  (Optional) ent.id value of the entity. </param>
            <param name="assocId"> (Optional) ent.assoc_id value of the entity. </param>
            <param name="eptr">    (Optional) ent.eptr value of the entity. </param>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.TpEntInfo.op_Inequality(Cnc.Globals.File.EntityMapInfo.TpEntInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.TpEntInfo.op_Equality(Cnc.Globals.File.EntityMapInfo.TpEntInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.TpEntInfo.IsEqual(Cnc.Globals.File.EntityMapInfo.TpEntInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal. </summary>
            <param name="obj"> The object. </param>
            <returns> True if equal, false if not. </returns>
        </member>
        <member name="T:Cnc.Globals.File.EntityMapInfo.TpEntInfo.ChainInfo">
            <summary> Chain specific toolpath entitiy information. </summary>
        </member>
        <member name="T:Cnc.Globals.File.EntityMapInfo.TpEntInfo">
            <summary> Information from the toolpath entity. </summary>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.OpEntInfo.op_Inequality(Cnc.Globals.File.EntityMapInfo.OpEntInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.OpEntInfo.op_Equality(Cnc.Globals.File.EntityMapInfo.OpEntInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.OpEntInfo.IsEqual(Cnc.Globals.File.EntityMapInfo.OpEntInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal. </summary>
            <param name="obj"> The object. </param>
            <returns> True if equal, false if not. </returns>
        </member>
        <member name="T:Cnc.Globals.File.EntityMapInfo.OpEntInfo">
            <summary> Information about the operation entity. </summary>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.EntBuffer.GetEntity">
            <summary> Gets a full-sized copy of the entity. </summary>
            <returns> A full-sized copy of the entity, true if successful. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.EntBuffer.GetEntity(ent*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets the entity from the variable-length buffer. </summary>
            <param name="theEnt"> The entity to fill in. </param>
            <returns> Return true if successful, false if not. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.EntBuffer.Init(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Initializes this object with the given entity. </summary>
            <param name="theEnt"> The entity to copy. </param>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.EntBuffer.IsEmpty">
            <summary> Query if this object is empty. </summary>
            <returns> True if empty, false if not. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.EntBuffer.op_Assign(Cnc.Globals.File.EntityMapInfo.EntBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.EntBuffer.#ctor(ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="theEnt"> The entity to copy. </param>
        </member>
        <member name="M:Cnc.Globals.File.EntityMapInfo.EntBuffer.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Cnc.Globals.File.EntityMapInfo.EntBuffer">
            <summary> Container class of MC_BYTES to house the true size of the entity and not the largest. </summary>
        </member>
        <member name="T:Cnc.Globals.File.EntityMapInfo">
            <summary> Information about the entity. </summary>
        </member>
        <member name="T:Cnc.Globals.File.EntityMapPrm.SortOrder">
            <summary> Values that represent desired sort order when calling GetData(). </summary>
        </member>
        <member name="T:Cnc.Globals.File.EntityMapPrm.MemMgmt">
            <summary> Values that represent how to handle copying of entities and their variable length data. </summary>
        </member>
        <member name="T:Cnc.Globals.File.EntityMapPrm">
            <summary> Parameters to pass to MakeEntityMap(). </summary>
        </member>
        <member name="M:ReservedPlanes.IsLatheTplane(ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'typeID' is lathe Tplane. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> true if lathe Tplane, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.AddReservedNamePair(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary> Adds a reserved name by resource ID to m_Names. </summary>
            <param name="name">			  The reserved name. </param>
            <param name="typeID">		  The reserved type ID. </param>
            <param name="nameResourceID"> The resource ID of the reserved name. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ReservedPlanes.AddReservedNamePair(System.UInt32,ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adds a reserved name by resource ID to m_Names. </summary>
            <param name="nameResourceID"> The resource ID of the reserved name. </param>
            <param name="typeID">		  The reserved type ID. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ReservedPlanes.BuildLatheNames(System.Boolean)">
            <summary> Builds the lathe Tplane name map. </summary>
            <param name="forceReload"> true to first clear m_Names and m_LatheNames to force reload. </param>
            <returns> size of m_LatheNames. </returns>
        </member>
        <member name="M:ReservedPlanes.BuildNames(System.Boolean)">
            <summary> Builds the reserved name map. </summary>
            <param name="forceReload"> true to first clear m_Names and m_LatheNames to force reload. </param>
            <returns> size of m_Named. </returns>
        </member>
        <member name="M:ReservedPlanes.BuildStandardMatrices">
            <summary> Build the array of hard-coded matrices. </summary>
            <returns> Size of array m_StandardMatrices. </returns>
        </member>
        <member name="M:ReservedPlanes.IsIsoType(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if the long 'typeID' is a valid Iso type. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> true if lathe tplane, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.WarnLatheTplaneSetAsReserved(PlaneID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Warning that a special lathe tplane is set as reserved. </summary>
            <param name="planeID">  Identifier for the plane. </param>
            <param name="reserved"> true if being set as reserved. </param>
        </member>
        <member name="M:ReservedPlanes.IsLatheCplaneOnlyReservedID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return true if the plane ID is a reserved lathe construction plane ID. </summary>
            <param name="planeID"> the Plane ID to check. </param>
            <returns> return true if the plane ID is a default one. </returns>
        </member>
        <member name="M:ReservedPlanes.IsStandardReservedID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Return true if the ID is one of the first standard plane ID's. </summary>
            <param name="planeID">		 the Plane ID to check. </param>
            <param name="includeLatheZ"> true to include Lathe_Z_Equals_World_Z. </param>
            <returns> true if one of the first standard, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.IsLatheVTL(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if 'typeID' is VTL type. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> True if a VTL type, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.IsLatheID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if the long 'typeID' is a valid lathe TypeID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> true if lathe tplane, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.IsLatheTplane(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Query if the long 'typeID' is a valid lathe Tplane TypeID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> true if lathe tplane, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.GetLatheNames">
            <summary> Gets lathe names. </summary>
            <returns> The lathe names. </returns>
        </member>
        <member name="M:ReservedPlanes.GetNames">
            <summary> Gets the names. </summary>
            <returns> The names. </returns>
        </member>
        <member name="M:ReservedPlanes.GetStandardMatrices">
            <summary> Gets const reference to m_StandardMatrices. </summary>
            <returns> The standard matrices. </returns>
        </member>
        <member name="M:ReservedPlanes.GetLatheMap">
            <summary> Gets constant reference to m_LathePlaneMap. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:ReservedPlanes.GetMap">
            <summary> Gets constant reference to the map. </summary>
            <returns> The map. </returns>
        </member>
        <member name="M:ReservedPlanes.GetSize">
            <summary> Gets the size of m_Map. </summary>
            <returns> The size. </returns>
        </member>
        <member name="M:ReservedPlanes.Build(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Builds the map m_Map. </summary>
            <param name="productMask"> AEB_MILL, AEB_LATHE, AEB_MT or a combination of all. </param>
            <param name="forceReload"> true to first clear m_Names and m_LatheNames to force reload. </param>
            <returns> Size of map. </returns>
        </member>
        <member name="M:ReservedPlanes.GetPtr(PlaneClass,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a pointer to a reserved plane with the matching class and matrix. </summary>
            <param name="planeClass"> PlaneClass::SystemMatrix or PlaneClass::NamedPlane. </param>
            <param name="m33">		  Matrix to match. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.SetName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets a reserved plane name. </summary>
            <param name="newName"> New name of the reserved plane. </param>
            <param name="typeID">  Identifier for the reserved plane type. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ReservedPlanes.GetName(ReservedPlanes.TypeID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a name by TypeID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> The name. </returns>
        </member>
        <member name="M:ReservedPlanes.GetPtr(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Gets a pointer to a reserved plane with the matching name (not case sensitive). </summary>
            <param name="name"> Name to match. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.GetLathePlanePtr(ReservedPlanes.TypeID)">
            <summary> Gets a pointer to a kinda-reserved super special lathe Tplane with the matching type ID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.GetPtr(ReservedPlanes.TypeID)">
            <summary> Gets a pointer to a reserved plane with the matching type ID. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.GetIterator(ReservedPlanes.TypeID)">
            <summary> Gets a pointer to the reserved info. </summary>
            <param name="resType"> Identifier for the resource. </param>
            <returns> null if it fails, else the pointer. </returns>
        </member>
        <member name="M:ReservedPlanes.IsReservedName(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'name' is reserved name. </summary>
            <param name="name">		    The name. </param>
            <param name="caseMismatch"> set to true = same name, but the case is mismatched. </param>
            <returns> true if reserved name, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.TypeIdToLong(ReservedPlanes.TypeID,System.Boolean)">
            <summary> Casts a TypeID identifier to a long. </summary>
            <param name="typeID"> Identifier for the type. </param>
            <param name="warn">   true for debug warning. </param>
            <returns> A long, 0 if invalid type. </returns>
        </member>
        <member name="M:ReservedPlanes.IsValidType(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Query if 'longType' is valid TypeID. </summary>
            <param name="longType">	TypeID as a long. </param>
            <param name="warn">		true for debug warning. </param>
            <returns> true if valid type, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.IsSystemMatrixType(ReservedPlanes.TypeID)">
            <summary> Query if 'resType' is system matrix identifier. </summary>
            <param name="resType"> Identifier for the resource. </param>
            <returns> true if system matrix identifier, false if not. </returns>
        </member>
        <member name="M:ReservedPlanes.GetStandardMatrix(System.Int32)">
            <summary> Return copy of hard-coded matrices if within range. </summary>
            <param name="viewNo"> Array index in m_StandardMatrices. </param>
            <returns> The standard matrix. </returns>
        </member>
        <member name="M:ReservedPlanes.op_Assign(ReservedPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:ReservedPlanes.#ctor(ReservedPlanes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Defines an alias representing the reserved plane map. </summary>
            <summary> Defines an alias representing the reserved plane pair. </summary>
            <summary> Defines an alias representing list of names of the reserved planes. </summary>
            <summary> Defines an alias representing the reserved name pair. </summary>
            <summary> Defines an alias representing list of names of the lathe tplanes. </summary>
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:ReservedPlanes.NameInfo.#ctor(ReservedPlanes.TypeID,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary> Constructor. </summary>
            <param name="typeID">		Identifier for the type. </param>
            <param name="name">			The name. </param>
            <param name="resourceID">	(Optional) identifier for the resource ID. </param>
        </member>
        <member name="T:ReservedPlanes.NameInfo">
            <summary> Information about the name. </summary>
        </member>
        <member name="M:ReservedPlanes.ResInfo.#ctor(ReservedPlanes.TypeID,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong,CoordinateDisplayType,System.Boolean)">
            <summary> Named view constructor. </summary>
            <param name="typeID">		Identifier for the resource. </param>
            <param name="m33">			The matrix. </param>
            <param name="product">		The product. </param>
            <param name="coordDisplay">	The coordinate display. </param>
            <param name="placeHolder">  true to place holder. </param>
        </member>
        <member name="M:ReservedPlanes.ResInfo.#ctor(ReservedPlanes.TypeID,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> SystemMatrix constructor. </summary>
            <param name="typeID"> Identifier for the resource. </param>
            <param name="m33">    The matrix. </param>
        </member>
        <member name="M:ReservedPlanes.ResInfo.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:ReservedPlanes.ResInfo">
            <summary> Information about the reserved plane. </summary>
        </member>
        <member name="T:ReservedPlanes.TypeID">
            <summary> Reserved ID's for standard planes that are non-editable. </summary>
        </member>
        <member name="M:ReservedPlanes.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:ReservedPlanes.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:ReservedPlanes">
            <summary> A to create and maintain the reserved planes. </summary>
        </member>
        <member name="M:PlaneGnomon.SetColor(System.Int32)">
            <summary> Sets the color of the plane. </summary>
            <param name="color"> Plane color. </param>
        </member>
        <member name="M:PlaneGnomon.IsValid">
            <summary> Return true if Set () was called and the gnomon contains valid info. </summary>
            <returns> true if valid, false if not. </returns>
        </member>
        <member name="M:PlaneGnomon.SetOrigin(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the origin of the gnomon. </summary>
            <param name="origin"> Origin. </param>
        </member>
        <member name="M:PlaneGnomon.Set(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> Initialize this gnomon to the given parameters. </summary>
            <param name="thePlane"> a Mastercam Plane. </param>
            <param name="enable">   true to enable, false to disable. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PlaneGnomon.GetID">
            <summary> Get the plane ID of this gnomon. </summary>
            <returns> The identifier. </returns>
        </member>
        <member name="M:PlaneGnomon.Erase(System.Boolean)">
            <summary> erase the Plane gnomon; free the memory. </summary>
            <param name="repaint"> (Optional) true = repaint. </param>
        </member>
        <member name="M:PlaneGnomon.Draw(System.Boolean,System.Boolean,System.Boolean)">
            <summary> draw the Plane gnomon. </summary>
            <param name="includeName"> (Optional) true to include the plane name (default = true). </param>
            <param name="selected">    (Optional) true if plane planel active and plane selected (default = false). </param>
            <param name="enable">      (Optional) true to draw as enabled; false to draw as disabled (default = true). </param>
        </member>
        <member name="M:PlaneGnomon.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:PlaneGnomon.#ctor(Plane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> parameterized constructor. </summary>
            <param name="thePlane">		  the plane. </param>
            <param name="singleInstance"> true to single instance. </param>
        </member>
        <member name="M:PlaneGnomon.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:PlaneSelectGnomon">
            <summary> A plane select gnomon. </summary>
        </member>
        <member name="T:PlaneGnomon">
            <summary> Mastercam PlaneGnomon definition to be used for drawing plane gnomons. </summary>
        </member>
        <member name="M:PlanePoint.Dump(CStringArray*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Dumps this to the given CStringArray and returns the size. </summary>
            <returns> The size of the CStringArray. </returns>
        </member>
        <member name="M:PlanePoint.GetRegenErrorString(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> return CString of m_RegenErrors. </summary>
            <param name="regenErrors"> The regen errors. </param>
            <returns> The regen error string. </returns>
        </member>
        <member name="M:PlanePoint.GetRegenErrors">
            <summary> return value of m_RegenErrors. </summary>
            <returns> The regen errors. </returns>
        </member>
        <member name="M:PlanePoint.RemoveAssocEntInfo(System.Boolean)">
            <summary> remove associated entity links if we're acting on the current database. </summary>
            <param name="deleteFromAssocEnt"> True to delete from associated ent, false just zero out associated ent info in this plane. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PlanePoint.SetAssocEntInfo(System.Byte,PlanePoint.AssocEntInfo.AssocEntLink!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the associated entity information in our point. </summary>
            <param name="creationMethod"> The creation method (PEC_SLD_FACE, PEC_SLD_POINT or PEC_MESH_FACET). </param>
            <param name="assocEntLink">	  The associated entity id number and face/facet selection id. </param>
            <returns> True if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:PlanePoint.GetAssocEntInfo(System.Boolean)">
            <summary> Gets associated entity information embedded in this. </summary>
            <param name="warn"> (Optional) True to warn for bad entity data. </param>
            <returns> a treasure trove of information, nullptr if this point does not reference a solid
		  face or end point. </returns>
        </member>
        <member name="M:PlanePoint.GetGeometry(std.vector&lt;ent,std.allocator&lt;ent&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Collect copies of the geometry used to define this PlanePoint. </summary>
            <param name="geometryArray"> Array to copy geometry entities into. </param>
            <param name="entityMap">	 entity ID and eptr so we don't have to read thru the db. </param>
            <param name="entsNotFound">  ID's entities that could not be found in geomMap. </param>
            <returns> return # of entities copied into array. </returns>
        </member>
        <member name="M:PlanePoint.SwapEntityIDs(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Swap the associated geoemtry entity ID's. </summary>
            <param name="oldID"> old entity ID. </param>
            <param name="newID"> new entity ID. </param>
            <returns> # of IDs swapped. </returns>
        </member>
        <member name="M:PlanePoint.SetSelPt(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the tvalue CAD entry values. </summary>
            <param name="selPt"> array of 2 doubles represeting tvalues into. </param>
        </member>
        <member name="M:PlanePoint.GetSelPt(p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the tvalue CAD entry values. </summary>
            <param name="selPt"> array of 2 doubles to insert tvalues into. </param>
        </member>
        <member name="M:PlanePoint.SetTval(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set the tvalue CAD entry values. </summary>
            <param name="tVal"> array of 2 doubles represeting tvalues into. </param>
        </member>
        <member name="M:PlanePoint.GetTval(p_2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the tvalue CAD entry values. </summary>
            <param name="tVal"> array of 2 doubles to insert tvalues into. </param>
        </member>
        <member name="M:PlanePoint.IsAssocCreationMethod(System.Byte)">
            <summary> Query if 'creationMethod' is a PEC_MESH_FACET, PEC_SLD_FACE or PEC_SLD_POINT. </summary>
            <param name="creationMethod"> The creation method. </param>
            <returns> True if associative creation method, false if not. </returns>
        </member>
        <member name="M:PlanePoint.IsMeshCreationMethod(System.Byte)">
            <summary> Query if 'creationMethod' is a PEC_MESH_FACET. </summary>
            <param name="creationMethod"> The creation method. </param>
            <returns> True if mesh creation method, false if not. </returns>
        </member>
        <member name="M:PlanePoint.IsSolidCreationMethod(System.Byte)">
            <summary> Query if 'creationMethod' is a PEC_SLD_FACE or PEC_SLD_POINT. </summary>
            <param name="creationMethod"> The creation method. </param>
            <returns> True if solid creation method, false if not. </returns>
        </member>
        <member name="M:PlanePoint.GetCreationMethodDescription(System.Byte)">
            <summary> Gets creation method description. </summary>
            <param name="creationMethod"> The creation method. </param>
            <returns> The creation method description. </returns>
        </member>
        <member name="M:PlanePoint.IsSnapPointMethod">
            <summary>	Query if this point is snap point method. </summary>
            <returns>	True if snap point method, false if not. </returns>
        </member>
        <member name="M:PlanePoint.GetCreationMethod">
            <summary> get the point CAD entry method. </summary>
            <returns> returns method  if successful. </returns>
        </member>
        <member name="M:PlanePoint.SetPointCreationMethod(System.Byte)">
            <summary> set the point CAD entry method. </summary>
            <param name="creationMethod"> MC_BYTE representing CAD creation method (PEC_ORIGIN, etc) </param>
            <returns> returns true if successful. </returns>
        </member>
        <member name="M:PlanePoint.ValidPointCreationMethod(System.Byte)">
            <summary> validate creation method. </summary>
            <param name="creationMethod"> MC_BYTE representing CAD creation method (PEC_ORIGIN, etc) </param>
            <returns> returns true if valid. </returns>
        </member>
        <member name="M:PlanePoint.AssocPointCreationMethod(System.Byte)">
            <summary> validate creation method. </summary>
            <param name="creationMethod"> MC_BYTE representing CAD creation method (PEC_ORIGIN, etc) </param>
            <returns> returns true if valid. </returns>
        </member>
        <member name="M:PlanePoint.GetEntityCount">
            <summary> Gets the number of valid entity ID's in m_EntityIDs. </summary>
            <returns> The number of valid entity ID's in m_EntityIDs. </returns>
        </member>
        <member name="M:PlanePoint.SetEntityIDs(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set up to two entity ID's that P3D is created with. </summary>
            <param name="entityIDs"> the Entity IDs to set. </param>
            <returns> Previous values. </returns>
        </member>
        <member name="M:PlanePoint.GetEntityIDs">
            <summary> return two entity ID's that P3D was created with. </summary>
            <returns> return entity ID's that P3D was created with. </returns>
        </member>
        <member name="M:PlanePoint.Convert(assoc_pt*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert a P3D to a Mastercam assoc_pt. </summary>
            <param name="thePt"> the Mastercam assoc_pt to convert into. </param>
        </member>
        <member name="M:PlanePoint.Convert(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert a P3D to a Mastercam p3d. </summary>
            <param name="thePt"> the Mastercam p_3d to convert into. </param>
        </member>
        <member name="M:PlanePoint.GetPointInViewCoordinates(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return the P3D m_Point member variable in view coordinates. </summary>
            <param name="m33"> the Mastercam view to convert point from world coordinates into. </param>
            <returns> return the P3D m_Point member variable in view coordinates. </returns>
        </member>
        <member name="M:PlanePoint.GetPointInWorldCoordinates">
            <summary> return the P3D m_Point member variable in world coordinates. </summary>
            <returns> The point in world coordinates. </returns>
        </member>
        <member name="M:PlanePoint.SetZ(System.Double)">
            <summary> set the origin's Z value in world coordinates. </summary>
            <param name="zVal"> the value to set Z to. </param>
            <returns> return the previous Z value. </returns>
        </member>
        <member name="M:PlanePoint.SetY(System.Double)">
            <summary> set the origin's Y value in world coordinates. </summary>
            <param name="yVal"> the value to set Y to. </param>
            <returns> return the previous Y value. </returns>
        </member>
        <member name="M:PlanePoint.SetX(System.Double)">
            <summary> set the origin's X value in world coordinates. </summary>
            <param name="xVal"> the value to set X to. </param>
            <returns> return the previous X value. </returns>
        </member>
        <member name="M:PlanePoint.SetPoint(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> initialize and set P3D m_Point member variable. </summary>
            <param name="srcPt"> Source point. </param>
            <param name="init">  true to initialise. </param>
            <returns> . </returns>
        </member>
        <member name="M:PlanePoint.SetByEvent(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,matrix_33i*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3di*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3di*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>	Sets this point to a Mastercam event. </summary>
            <param name="eve">		  	The event. </param>
            <param name="eventData">	MCEvent data containing selection information. </param>
            <param name="isSolidFace">	[in,out] True if the event is solid face, false if not. </param>
            <param name="isWireframe">	[in,out] True if the event is wireframe, false if not. </param>
            <param name="m33">		  	[in,out] The matrix of the selected solid face. </param>
            <param name="wOriginPt">	[out] The origin point of the entity --&gt; Center of the entity. </param>
            <param name="selectedPt">	[in, out] The clicked point on the entity. the one used as the origin of the plane. </param>
            <param name="doAssociation">[in,out] If false, we don't try to associate the plane with any entity </param>
            <returns>	old and new solid link info. </returns>
        </member>
        <member name="M:PlanePoint.SetVersion(System.Int32)">
            <summary> set the version. </summary>
            <param name="version"> the version number. </param>
            <returns> return the previous version value. </returns>
        </member>
        <member name="M:PlanePoint.GetVersion">
            <summary> return the version. </summary>
            <returns> The version. </returns>
        </member>
        <member name="M:PlanePoint.Regenerate(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EntityMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> recalculate the point position. </summary>
            <param name="m33">	     The third m 3. </param>
            <param name="entityMap"> entity ID and eptr map so it does not have to read thru the db to find geometry entities. </param>
            <param name="dynamicAssoc"> (Optional) True if parent plane is dynamically associated. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:PlanePoint.Regenerate(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> recalculate the point position. </summary>
            <param name="m33"> The third m 3. </param>
            <param name="dynamicAssoc"> (Optional) True if parent plane is dynamically associated. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:PlanePoint.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:PlanePoint.op_Subscript(System.Int32)">
            <summary> subscript operator. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:PlanePoint.Init">
            <summary> zero out all member variables. </summary>
        </member>
        <member name="M:PlanePoint.op_Equality(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlanePoint.op_Inequality(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlanePoint.op_Assign(aPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using Mastercam aPoint. </summary>
            <param name="aPt"> The point. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlanePoint.op_Assign(assoc_pt!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using Mastercam assoc_pt. </summary>
            <param name="aPt"> The point. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlanePoint.op_Assign(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:PlanePoint.#ctor(PlanePoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object to copy. </param>
        </member>
        <member name="M:PlanePoint.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:PlanePoint.#ctor(System.Byte,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PlanePoint.AssocEntInfo.AssocEntLink!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor for solid face or solid point. </summary>
            <param name="creationMethod"> The creation method (PEC_SLD_FACE, PEC_SLD_POINT or PEC_MESH_FACET). </param>
            <param name="origin">		  The origin point in world coordinates. </param>
            <param name="assocEntLink">	  The solid link (solid entity's ent.ent_idn and solid selection id. </param>
        </member>
        <member name="M:PlanePoint.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor. </summary>
            <param name="wOriginPt"> the origin point in world coordinates. </param>
        </member>
        <member name="M:PlanePoint.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Byte,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor. </summary>
            <param name="entID1">		  unique entity ID (ent.en_idn) </param>
            <param name="entID2">		  unique entity ID (ent.en_idn) </param>
            <param name="creationMethod"> MC_BYTE defining CAD creation method (PEC_ORIGIN, etc) </param>
            <param name="tVal">			  tValues from CAD creation. </param>
            <param name="wOriginPt">	  the origin point in world coordinates. </param>
        </member>
        <member name="M:PlanePoint.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Plane">
            <summary> make Plane a friend. </summary>
            <summary> Forward declaration. </summary>
            <summary> A plane. </summary>
            <summary> A macro that defines no work offset. </summary>
            <summary> Mastercam Plane definition</summary>
        </member>
        <member name="M:PlanePoint.AssocEntInfo.op_Inequality(PlanePoint.AssocEntInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object to compare. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlanePoint.AssocEntInfo.op_Equality(PlanePoint.AssocEntInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object to compare. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlanePoint.AssocEntInfo.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:PlanePoint.AssocEntInfo.AssocEntLink.IsValid">
            <summary> Query if this object is valid. </summary>
            <returns> True if valid, false if not. </returns>
        </member>
        <member name="M:PlanePoint.AssocEntInfo.AssocEntLink.op_Inequality(PlanePoint.AssocEntInfo.AssocEntLink!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:PlanePoint.AssocEntInfo.AssocEntLink.op_Equality(PlanePoint.AssocEntInfo.AssocEntLink!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="obj"> The object. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:PlanePoint.AssocEntInfo.AssocEntLink.op_LessThan(PlanePoint.AssocEntInfo.AssocEntLink!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. </summary>
            <param name="obj"> The object to compare with us. </param>
            <returns> True if the first parameter is less than the second. </returns>
        </member>
        <member name="M:PlanePoint.AssocEntInfo.AssocEntLink.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32,System.Int32)">
            <summary> Constructor. </summary>
            <param name="entityIdn">		(Optional) The associated entity's ent.ent_idn. </param>
            <param name="selectionId">		(Optional) The selection ID within the entity. </param>
            <param name="selectionIdSnap">	(Optional) The selection ID or the snapped point within the entity. </param>
        </member>
        <member name="T:PlanePoint.AssocEntInfo.AssocEntLink">
            <summary> The map key containing the associated entity's ent.ent_idn and the associated selection ID. </summary>
        </member>
        <member name="T:PlanePoint.AssocEntInfo">
            <summary> Information about any specific entity associated with this point (currently solids and meshes). </summary>
        </member>
        <member name="T:PlanePoint.REGEN_ERROR">
            <summary> error code applied in validation and regeneration. </summary>
        </member>
        <member name="T:PlanePoint">
            <summary> PlanePoint class defines a point entity used in creating a Plane.  
		  A plane contains up to 4 PlanePoint's: 1 for the origin and up to 3 to define the 3 axes.</summary>
        </member>
        <member name="M:XfmMatrix.IsIdentity">
            <summary> Determines if transform matrix and origin are Top @ 0,0,0. </summary>
            <returns> True if it transform data doesn't result in any transformation, false if it does. </returns>
        </member>
        <member name="M:XfmMatrix.Convert(x_matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert this to a Mastercam x_matrix. </summary>
            <param name="xm"> valid X component. </param>
        </member>
        <member name="M:XfmMatrix.GetT">
            <summary> return value of m_r member variable. </summary>
            <returns> . </returns>
        </member>
        <member name="M:XfmMatrix.Get33">
            <summary> return value of m_33 member variable. </summary>
            <returns> The 33. </returns>
        </member>
        <member name="M:XfmMatrix.op_Equality(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:XfmMatrix.op_Inequality(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:XfmMatrix.op_Assign(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:XfmMatrix.Init">
            <summary> Initialize member variables. </summary>
        </member>
        <member name="M:XfmMatrix.op_Subscript(System.Int64)">
            <summary> subscript operator - return XCOORD, YCOORD or ZCOORD. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:XfmMatrix.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:XfmMatrix.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from 3 P3D's. </summary>
            <param name="X3"> valid X component. </param>
            <param name="Y3"> valid Y component. </param>
            <param name="Z3"> valid Z component. </param>
            <param name="T3"> valid T component. </param>
        </member>
        <member name="M:XfmMatrix.op_Assign(x_matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using Mastercam's x_matrix. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:XfmMatrix.#ctor(x_matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from matrix_33. </summary>
            <param name="xm"> the Mastercam x_matrix to copy from. </param>
        </member>
        <member name="M:XfmMatrix.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from matrix_33. </summary>
            <param name="m33"> the Matrix33 to copy from. </param>
            <param name="mT">  the P3D to copy from. </param>
        </member>
        <member name="M:XfmMatrix.#ctor(XfmMatrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object to copy. </param>
        </member>
        <member name="M:XfmMatrix.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:XfmMatrix.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:XfmMatrix">
            <summary> Constructs an XfmMatrix object to be used instead of Mastercam's x_matrix</summary>
        </member>
        <member name="M:Matrix33.AllZeros(System.Boolean)">
            <summary> Test matrix's components to see if they're all of zero value (like someone did a memset(0). </summary>
            <param name="warn"> True to display debug warning. </param>
            <returns> True if all zero, false if not. </returns>
        </member>
        <member name="M:Matrix33.CheckDotProduct(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Check dot product of given Matrix33. </summary>
            <param name="m33"> The Matrix33 to check. </param>
            <returns> MatrixError::None for no error, MatrixError::DotProduct for bad dot product,. </returns>
        </member>
        <member name="M:Matrix33.CheckDotProduct(System.Boolean)">
            <summary> Check dot product of this. </summary>
            <param name="warn"> (Optional) the warning. </param>
            <returns> MatrixError::None for no error, MatrixError::DotProduct for bad dot product, 
		  MatrixError::DotProductOrthoNormalize for bad dot product that can be correct by re-orthonormalizing</returns>
        </member>
        <member name="M:Matrix33.ASSERT_MATRIX33(System.Boolean)">
            <summary> option to ASSERT. </summary>
            <param name="ok"> true if the operation was a success, false if it failed. </param>
        </member>
        <member name="M:Matrix33.ViewToView(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert a P3D in view coordinates to view coordinates in a different view. </summary>
            <param name="thePt">  the P3D in view coordinates to convert. </param>
            <param name="from33"> the view the point resides in. </param>
            <param name="to33">   the destination view. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.ViewToWorldSub(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert thePt in view coordinates to world coordinates then subtract wSubPt. </summary>
            <param name="thePt">  the P3D in view coordinates to convert. </param>
            <param name="wSubPt"> the point to subtract in world coords. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.ViewToWorldAdd(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert thePt in view coordinates to world coordinates then add wAddPt. </summary>
            <param name="thePt">  the P3D in view coordinates to convert. </param>
            <param name="wAddPt"> the point to add in world coords. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.WorldToViewAdd(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> add wAddPt from thePt, convert thePt to view coordinates. </summary>
            <param name="thePt">  the P3D in world coordinates to convert. </param>
            <param name="wAddPt"> point in world coordinates to subtract. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.WorldToViewSub(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtract wSubPt from thePt, convert thePt to view coordinates. </summary>
            <param name="thePt">  the P3D in world coordinates to convert. </param>
            <param name="wSubPt"> point in world coordinates to subtract. </param>
            <returns> return new pt. </returns>
        </member>
        <member name="M:Matrix33.MultiplyMatrixVector(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply a 3x3 matrix by a 3 element vector. </summary>
            <param name="vec"> A column vector. </param>
            <returns> Result. </returns>
        </member>
        <member name="M:Matrix33.ViewToWorld(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point from view coordinates in the given matrix coordinates to world. </summary>
            <param name="vPoint"> The point in view coordiantes. </param>
            <returns> A point in world coordinates. </returns>
        </member>
        <member name="M:Matrix33.WorldToView(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a point from world coordinates into given matrix coordinates. </summary>
            <param name="wPoint"> The point in world coordinates. </param>
            <returns> A point in view coordinates. </returns>
        </member>
        <member name="M:Matrix33.CheckAndFixMatrix(System.Boolean,System.Boolean)">
            <summary> check and correct bad matrix if needed. </summary>
            <param name="doK">  true = use MakeViewK() if all else fails. </param>
            <param name="warn"> (Optional) true = show debug warning if invalid. </param>
            <returns> return true if valid. </returns>
        </member>
        <member name="M:Matrix33.OrthoNormalize(System.Int32)">
            <summary> re-orthonormalize via Gram-Schmidt algorithm. </summary>
            <param name="priorityAxis"> (Optional) Which axis (X, Y or Z) is priority.  Z is the default). </param>
            <returns> true if it passes dot product check, false if it fails. </returns>
        </member>
        <member name="M:Matrix33.FixMatrix(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32)">
            <summary> correct bad matrix_33 type. </summary>
            <param name="m33">		    [in,out] The matrix to fix. </param>
            <param name="doK">		    true = use MakeViewK() if all else fails. </param>
            <param name="priorityAxis"> (Optional) Which axis (X, Y or Z) is priority.  Z is the default). </param>
            <returns> first = matrix is valid, second = values were adjusted to make valid. </returns>
        </member>
        <member name="M:Matrix33.FixMatrix(System.Boolean,System.Int32)">
            <summary> correct bad matrix. </summary>
            <param name="doK">		    true = use MakeViewK() if all else fails. </param>
            <param name="priorityAxis"> (Optional) Which axis (X, Y or Z) is priority.  Z is the default). </param>
            <returns> first = matrix is valid, second = values were adjusted to make valid. </returns>
        </member>
        <member name="M:Matrix33.GetDirty">
            <summary> Gets the dirty. </summary>
            <returns> return value of m_Dirty. </returns>
        </member>
        <member name="M:Matrix33.SetDirty(System.Boolean)">
            <summary> set value m_Dirty. </summary>
            <param name="isDirty"> true=dirty, false=clean. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:Matrix33.v_angle_3D(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> calculate the axis rotation angle from this with to the m33. </summary>
            <param name="m33"> Matrix33 to compare to. </param>
            <returns> return P3D of axis rotations in radians. </returns>
        </member>
        <member name="M:Matrix33.MakeViewK(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert this with a given k component. </summary>
            <param name="normXprd"> k component. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.MultiplyMatrix33(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiply two 3x3 matrices. </summary>
            <param name="m33"> a Matrix33 object. </param>
            <returns> return result. </returns>
        </member>
        <member name="M:Matrix33.FormatString(System.Int32)">
            <summary> return CString of coordinate values. </summary>
            <param name="nPlaces"> (Optional) number of places behind the decimal point. </param>
            <returns> The formatted string. </returns>
        </member>
        <member name="M:Matrix33.SetTol(System.Double)">
            <summary> set the tolerance. </summary>
            <param name="theTol"> the tolerance. </param>
            <returns> . </returns>
        </member>
        <member name="M:Matrix33.SetTightTol">
            <summary> Sets our tolerance to tight GetTightTol (). </summary>
            <returns> Return the previous value of m_Tol. </returns>
        </member>
        <member name="M:Matrix33.GetTightTol">
            <summary> Gets the tightest tolerance. </summary>
            <returns> The tight tolerance. </returns>
        </member>
        <member name="M:Matrix33.GetTol">
            <summary> return value of m_Tol. </summary>
            <returns> This matrix's tolerance. </returns>
        </member>
        <member name="M:Matrix33.GetMatchTolerances(System.Double)">
            <summary> Builds and returns a set of tolerances we use to match matrices when searching. </summary>
            <param name="maxTol"> The maximum tolerance. </param>
            <returns> The match tolerances. </returns>
        </member>
        <member name="M:Matrix33.SetTop">
            <summary> set this to TOP. </summary>
        </member>
        <member name="M:Matrix33.SetZero">
            <summary> zero out all member variables. </summary>
        </member>
        <member name="M:Matrix33.GetComponent(System.Int32)">
            <summary> Gets the X, Y or Z component. </summary>
            <param name="XYorZ"> The X, Y or Z component. </param>
            <returns> The component. </returns>
        </member>
        <member name="M:Matrix33.SetZ(System.Double,System.Double,System.Double)">
            <summary> set value of Z component. </summary>
            <param name="xVal"> new XCOORD value of Z component. </param>
            <param name="yVal"> new YCOORD value of Z component. </param>
            <param name="zVal"> new ZCOORD value of Z component. </param>
            <returns> return previous Z component. </returns>
        </member>
        <member name="M:Matrix33.SetZ(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set value of Z component. </summary>
            <param name="obj"> new Z component value. </param>
            <returns> return previous Z component. </returns>
        </member>
        <member name="M:Matrix33.GetZ">
            <summary> return P3D Z component. </summary>
            <returns> The z coordinate. </returns>
        </member>
        <member name="M:Matrix33.SetY(System.Double,System.Double,System.Double)">
            <summary> set value of Y component. </summary>
            <param name="xVal"> new XCOORD value of Y component. </param>
            <param name="yVal"> new YCOORD value of Y component. </param>
            <param name="zVal"> new ZCOORD value of Y component. </param>
            <returns> return previous Y component. </returns>
        </member>
        <member name="M:Matrix33.SetY(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set value of Y component. </summary>
            <param name="obj"> new Y component value. </param>
            <returns> return previous Y component. </returns>
        </member>
        <member name="M:Matrix33.GetY">
            <summary> return P3D Y component. </summary>
            <returns> The y coordinate. </returns>
        </member>
        <member name="M:Matrix33.SetX(System.Double,System.Double,System.Double)">
            <summary> set value of X component. </summary>
            <param name="xVal"> new XCOORD value of X component. </param>
            <param name="yVal"> new YCOORD value of X component. </param>
            <param name="zVal"> new ZCOORD value of X component. </param>
            <returns> return previous X component. </returns>
        </member>
        <member name="M:Matrix33.SetX(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set value of X component. </summary>
            <param name="obj"> new X component value. </param>
            <returns> return previous X component. </returns>
        </member>
        <member name="M:Matrix33.GetX">
            <summary> return P3D X component. </summary>
            <returns> The x coordinate. </returns>
        </member>
        <member name="M:Matrix33.RotateAboutAxis(System.Int32,System.Double)">
            <summary> rotate a Matrix33 about an axis by degrees. </summary>
            <param name="rotAxis">	   the X, Y or Z axis to rotate about. </param>
            <param name="rotAngleDeg"> rotation amount in degrees. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.FlipZaxisAboutXaxis">
            <summary> Flip this matrix's Z axis about its X axis. </summary>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.FlipZaxisAboutYaxis">
            <summary> Flip this matrix's Z axis about its Y axis. </summary>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.FlipAxis(System.Int32,System.Int32)">
            <summary> Flip this matrix by an axis. </summary>
            <param name="axisNo">   XCOORD, YCOORD or ZCOORD. </param>
            <param name="zRotAxis"> (Optional) if flipping Z axis, rotate about X or Y axis. </param>
            <returns> return true if successful. </returns>
        </member>
        <member name="M:Matrix33.IsValid(System.Boolean,System.Boolean,Matrix33.MatrixError*)">
            <summary> Return true if all values in this are valid. </summary>
            <param name="warn">		    (Optional) true = debug only warning. </param>
            <param name="forceCheck">   (Optional) true = ignore m_Dirty value and check values. </param>
            <param name="pMatrixError"> [in,out] (Optional) If non-null, (Optional) the matrix error. </param>
            <returns> Return true if matrix is mathematically correct. </returns>
        </member>
        <member name="M:Matrix33.IsLeftHand(System.Boolean)">
            <summary> test Matrix33 for 'left-handed' defintion. </summary>
            <param name="warn"> (Optional) the warning. </param>
            <returns> returns true if invalid values exist within m33. </returns>
        </member>
        <member name="M:Matrix33.Convert(matrix_33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> convert Matrix33 to matrix_33. </summary>
            <param name="m33"> the destination matrix_33. </param>
        </member>
        <member name="M:Matrix33.IsParallel(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Double)">
            <summary> return true if Matrix33 is parallel with given Matrix33. </summary>
            <param name="m33">	    3x3 matrix to compare to this. </param>
            <param name="opposite"> set to true if component is in the opposite direction. </param>
            <param name="axis">	    (Optional) The axis to check. </param>
            <param name="dotTol">   (Optional) The dot tolerance. </param>
            <returns> return true if Matrix33 is parallel with given Matrix33. </returns>
        </member>
        <member name="M:Matrix33.GetParallelInfo(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Double)">
            <summary> Gets parallel information of this compared to m33. </summary>
            <param name="m33">    The matrix to compare to this. </param>
            <param name="axis">   (Optional) The parallel axis (XCOORD, YCOORD or ZCOORD). </param>
            <param name="dotTol"> (Optional) The dot tolerance. </param>
            <returns> The parallel information. </returns>
        </member>
        <member name="M:Matrix33.AlignAxis(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> align axis of this to given matrix's axis. </summary>
            <param name="mDatum">	   3x3 matrix to align axis to. </param>
            <param name="axisToAlign"> X, Y or Z axis to align. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:Matrix33.AxesAligned(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return true if ALL view axes are aligned. </summary>
            <param name="m33">	    The matrix to compare. </param>
            <returns> true if axis aligned, false if not. </returns>
        </member>
        <member name="M:Matrix33.AxisAligned(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return true if the requested axis is aligned with given axis. </summary>
            <param name="m33">	    The matrix to compare. </param>
            <param name="axisNo">   The axis no (XCOORD, YCOORD or ZCOORD). </param>
            <param name="opposite"> Allow opposite direction comparison. </param>
            <returns> true if axis aligned, false if not. </returns>
        </member>
        <member name="M:Matrix33.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:Matrix33.IsEqualNormalized(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Return true if ortho-normalized Matrix33 is equal within a tolerance. </summary>
            <param name="obj">	    another Matrix33 to compare this with. </param>
            <param name="matchTol"> (Optional) match tolerance. </param>
            <returns> Return true if equal. </returns>
        </member>
        <member name="M:Matrix33.GetDifferenceStr(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> For debugging only - build and return a vector of 3 strings with the difference in
		  each of the vectors. </summary>
            <param name="obj">				 The matrix to compare with this. </param>
            <param name="accuracy">			 Accuracy of double format in string. </param>
            <param name="normalize">		 Normalize matrices before calculating difference. </param>
            <param name="outputDebugHeader"> (Optional) If not null, output debug strings to VS output window. </param>
            <returns> Vector of strings with the difference in each vector. </returns>
        </member>
        <member name="M:Matrix33.IsExactlyEqual(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is exactly equal (double == double). </summary>
            <param name="obj"> The matrix to compare to. </param>
            <returns> True if exactly equal, false if not. </returns>
        </member>
        <member name="M:Matrix33.IsIdentity">
            <summary> Query if this object is an identity matrix (top). </summary>
            <returns> True if identity, false if not. </returns>
        </member>
        <member name="M:Matrix33.IsEqual(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Return true if Matrix33 is equal within a tolerance. </summary>
            <param name="obj">	    Another Matrix33 to compare this with within the minimum of each objects tolerance. </param>
            <param name="matchTol"> Match tolerance. </param>
            <returns> Return true if equal within tolerance. </returns>
        </member>
        <member name="M:Matrix33.op_GreaterThan(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. Use for std::map when a key. </summary>
            <param name="obj"> The matrix to compare. </param>
            <returns> true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:Matrix33.op_LessThan(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. Use for std::map when a key. </summary>
            <param name="obj"> The matrix to compare. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:Matrix33.op_Inequality(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="m33"> The matrix to compare. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Matrix33.op_Equality(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="m33"> The matrix to compare. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Matrix33.op_Equality(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Matrix33.op_Inequality(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Matrix33.op_Assign(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using a matrix_33. </summary>
            <param name="m33"> The third m 3. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Matrix33.op_Assign(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:Matrix33.op_Subscript(System.Int64)">
            <summary> subscript operator - return XCOORD, YCOORD or ZCOORD. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> subscript operator - return XCOORD, YCOORD or ZCOORD. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:Matrix33.#ctor(a_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from a_3d. </summary>
            <param name="theArc"> arc info. </param>
        </member>
        <member name="M:Matrix33.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from 3 P3D's. </summary>
            <param name="normXprd"> k component. </param>
        </member>
        <member name="M:Matrix33.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from 3 P3D's. </summary>
            <param name="X3"> valid X component. </param>
            <param name="Y3"> valid Y component. </param>
            <param name="Z3"> valid Z component. </param>
        </member>
        <member name="M:Matrix33.#ctor(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from matrix_33. </summary>
            <param name="m33"> the matrix_33 to copy from. </param>
        </member>
        <member name="M:Matrix33.#ctor(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object to copy. </param>
        </member>
        <member name="M:Matrix33.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:Matrix33.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Matrix33.ParallelInfo.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:Matrix33.ParallelInfo">
            <summary> Information about the parallelism of a compared matrix. </summary>
        </member>
        <member name="T:Matrix33.MatrixError">
            <summary> Values that represent invalid components of a Matrix33. </summary>
        </member>
        <member name="T:Matrix33">
            <summary> Constructs a Matrix33 object to be used instead of Mastercam's matrix_33</summary>
        </member>
        <member name="M:L3D.Distance_P3D_L3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return the 3D distance between a P3D and a L3D. </summary>
            <param name="pt">   the point. </param>
            <param name="line"> the line. </param>
            <returns> return the distance between to P3D's. </returns>
        </member>
        <member name="M:L3D.ConvertTo_l_3d">
            <summary> convert and return this L3D in l_3d format. </summary>
            <returns> object converted to a l 3D. </returns>
        </member>
        <member name="M:L3D.GetPoint2(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get point #2 of this L3D. </summary>
            <param name="pt"> the p_3d to copy it into. </param>
        </member>
        <member name="M:L3D.GetPoint2(System.Double*)">
            <summary> get point #2 of this L3D. </summary>
            <param name="pt"> the p_3d to copy it into. </param>
        </member>
        <member name="M:L3D.GetPoint2">
            <summary> get point #2 of this L3D. </summary>
            <returns> The point 2. </returns>
        </member>
        <member name="M:L3D.SetPoint2(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set point #2 of this L3D. </summary>
            <param name="pt2"> The second point. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:L3D.GetPoint1(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get point #1 of this L3D. </summary>
            <param name="pt"> the p_3d to copy it into. </param>
        </member>
        <member name="M:L3D.GetPoint1(System.Double*)">
            <summary> get point #1 of this L3D. </summary>
            <param name="pt"> the p_3d to copy it into. </param>
        </member>
        <member name="M:L3D.GetPoint1">
            <summary> get point #1 of this L3D. </summary>
            <returns> The point 1. </returns>
        </member>
        <member name="M:L3D.SetPoint1(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> set point #1 of this L3D. </summary>
            <param name="pt1"> The first point. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:L3D.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:L3D.op_Equality(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:L3D.op_Inequality(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:L3D.op_Assign(l_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using a l_3d. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:L3D.op_Assign(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:L3D.#ctor(l_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:L3D.#ctor(L3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:L3D.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> parameteritized constructor from 2 P3D's. </summary>
            <param name="pt1"> The first point. </param>
            <param name="pt2"> The second point. </param>
        </member>
        <member name="M:L3D.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:L3D.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:L3D">
            <summary> Constructs a L3D object to be used instead of Mastercam's l_3d</summary>
        </member>
        <member name="M:P3DS.SetRelativeWcsID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set relative WCS ID. </summary>
            <param name="relativeWcsID"> Identifier for the relative wcs. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:P3DS.GetRelativeWcsID">
            <summary> return relative WCS ID. </summary>
            <returns> The relative wcs identifier. </returns>
        </member>
        <member name="M:P3DS.SetPlaneID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> set parent plane ID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> return previous value. </returns>
        </member>
        <member name="M:P3DS.GetPlaneID">
            <summary> return parent plane ID. </summary>
            <returns> The plane identifier. </returns>
        </member>
        <member name="M:P3DS.op_Assign(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> assignment operator for plane ID. </summary>
            <param name="planeID"> Identifier for the plane. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3DS.op_Assign(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator for P3D. </summary>
            <param name="pt"> The point. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3DS.Dispose">
            <summary>destructor</summary>
        </member>
        <member name="M:P3DS.#ctor(P3DS!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:P3DS.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> construct from P3D and a plane ID. </summary>
            <param name="pt">	   The point. </param>
            <param name="planeID"> (Optional) identifier for the plane. </param>
        </member>
        <member name="T:P3DS">
            <summary> Mastercam P3DS definition (same as P3D, but contains parent Plane ID and m_RelativeWcsID). </summary>
        </member>
        <member name="M:P3D.GetDifferenceStr(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> For debugging only - build and return a string with the difference. </summary>
            <param name="obj">	    The P3D to compare with this. </param>
            <param name="accuracy"> Accuracy of double format in string. </param>
            <returns> Vector of strings with the difference in each vector. </returns>
        </member>
        <member name="M:P3D.Distance_P3D_P3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> return the 3D distance between to P3D's. </summary>
            <param name="pt2">		    point #2 of 2. </param>
            <param name="do2Ddistance"> (Optional) return 2D distance instead of 3D. </param>
            <returns> return the distance between to P3D's. </returns>
        </member>
        <member name="M:P3D.FormatString(System.Int32)">
            <summary> return CString of coordinate values. </summary>
            <param name="nPlaces"> (Optional) number of places behind the decimal point. </param>
            <returns> The formatted string. </returns>
        </member>
        <member name="M:P3D.v_angle_3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> return the angle formed by two 3d vectors. </summary>
            <param name="v2"> P3D representing a vector. </param>
            <returns> return the angle in radians between v2 and this. </returns>
        </member>
        <member name="M:P3D.v_scale_3D(System.Double)">
            <summary> apply a scalar to the values. </summary>
            <param name="scale"> the scalar. </param>

### <returns> return scaled P3D or this. </returns></member>
        <member name="M:P3D.v_neg_3D">
            <summary> negative of a 3D vector. </summary>
            <returns> return the negative of a 3D vector. </returns>
        </member>
        <member name="M:P3D.v_cross_3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the cross product (vector product) of this and the given vector. </summary>
            <param name="v2"> the 2nd vector. </param>
            <returns> return the cross product. </returns>
        </member>
        <member name="M:P3D.v_dot_3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find the dot product (scalar product) of this and the given vector. </summary>
            <param name="v2"> the 2nd vector. </param>
            <returns> return the dot product. </returns>
        </member>
        <member name="M:P3D.v_norm_3D">
            <summary> normalize and return the vector. </summary>
            <returns> . </returns>
        </member>
        <member name="M:P3D.v_parallel_3D(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Determine if vector is parallel to this. </summary>
            <param name="v2"> The second P3D. </param>
            <returns> true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:P3D.v_length_3D">
            <summary> calculate and return the length of the vector. </summary>
            <returns> . </returns>
        </member>
        <member name="M:P3D.v_lincmb_3D(System.Double,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> find the linear combination of two 3d vectors. </summary>
            <param name="aFac"> The fac. </param>
            <param name="pt1">  The first point. </param>
            <param name="bFac"> The fac. </param>
            <param name="pt2">  The second point. </param>
            <returns> return the combination. </returns>
        </member>
        <member name="M:P3D.Convert(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> get the values in p_3d format. </summary>
            <param name="thePt"> the destination p_3d. </param>
        </member>
        <member name="M:P3D.Zero">
            <summary> zero out all member variables. </summary>
        </member>
        <member name="M:P3D.SetTol(System.Double)">
            <summary> set value of tolerance. </summary>
            <param name="newTol"> new tolerance value. </param>
            <returns> return previous value of tolerance. </returns>
        </member>
        <member name="M:P3D.GetTol">
            <summary> return tolerance value. </summary>
            <returns> The tolerance. </returns>
        </member>
        <member name="M:P3D.SetXYZ(System.Double,System.Double,System.Double)">
            <summary> set XCOORD, YCOORD and ZCOORD values. </summary>
            <param name="newX"> new XCOORD component value. </param>
            <param name="newY"> new YCOORD component value. </param>
            <param name="newZ"> new ZCOORD component value. </param>
        </member>
        <member name="M:P3D.GetComponentPtr(System.Int32)">
            <summary> Gets a const pointer to the X, Y or Z component. </summary>
            <param name="XYorZ"> The X, Y or Z component. </param>
            <returns> The const pointer, nullptr if invalid XYorZ value. </returns>
        </member>
        <member name="M:P3D.GetComponent(System.Int32)">
            <summary> Gets the X, Y or Z component. </summary>
            <param name="XYorZ"> The X, Y or Z component. </param>
            <returns> The component. </returns>
        </member>
        <member name="M:P3D.SetZ(System.Double)">
            <summary> set value of ZCOORD component. </summary>
            <param name="newZ"> new ZCOORD component value. </param>
            <returns> return previous value of ZCOORD component. </returns>
        </member>
        <member name="M:P3D.GetZ">
            <summary> return ZCOORD component. </summary>
            <returns> return XCOORD component. </returns>
        </member>
        <member name="M:P3D.SetY(System.Double)">
            <summary> set value of YCOORD component. </summary>
            <param name="newY"> new YCOORD component value. </param>
            <returns> return previous value of YCOORD component. </returns>
        </member>
        <member name="M:P3D.GetY">
            <summary> return YCOORD component. </summary>
            <returns> return YCOORD component. </returns>
        </member>
        <member name="M:P3D.SetX(System.Double)">
            <summary> set value of XCOORD component. </summary>
            <param name="newX"> new XCOORD component value. </param>
            <returns> return previous value of XCOORD component. </returns>
        </member>
        <member name="M:P3D.GetX">
            <summary> return XCOORD component. </summary>
            <returns> return XCOORD component. </returns>
        </member>
        <member name="M:P3D.Serialize(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> serialize this. </summary>
            <param name="archive"> the destination/source archive object. </param>
        </member>
        <member name="M:P3D.IsExactlyEqual(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is exactly equal (double == double). </summary>
            <param name="obj"> The P3D to compare to. </param>
            <returns> True if exactly equal, false if not. </returns>
        </member>
        <member name="M:P3D.IsEqual(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Return true if P3D is equal within a tolerance. </summary>
            <param name="obj">	    another P3D to compare this with. </param>
            <param name="matchTol"> match tolerance. </param>
            <returns> Return true if equal. </returns>
        </member>
        <member name="M:P3D.op_Subscript(System.Int64)">
            <summary> subscript operator. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> subscript operator. </summary>
            <param name="nIndex"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:P3D.op_GreaterThan(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Greater-than comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:P3D.op_LessThan(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less-than comparison operator. Use in std::map as a key. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:P3D.op_Equality(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:P3D.op_Inequality(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> comparison operator. </summary>
            <param name="obj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:P3D.op_Inequality(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> comparison operator. </summary>
            <param name="pObj"> The object. </param>
            <returns> true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:P3D.op_Assign(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator using a const a p_3d. </summary>
            <param name="pnt"> The point. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3D.op_Assign(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> assignment operator using a const double * pointing to a p_3d. </summary>
            <param name="pObj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3D.op_Assign(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:P3D.op_AdditionAssignment(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> addition-assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:P3D.op_SubtractionAssignment(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> subtraction-assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:P3D.#ctor(P3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:P3D.Dispose">
            <summary> destructor. </summary>
        </member>
        <member name="M:P3D.#ctor(System.Double,System.Double,System.Double)">
            <summary> construct from XCOORD, YCOORD &amp; ZCOORD. </summary>
            <param name="Xval"> The xval. </param>
            <param name="Yval"> The yval. </param>
            <param name="Zval"> The zval. </param>
        </member>
        <member name="M:P3D.#ctor(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> construct from p_3d. </summary>
            <param name="pnt"> The point. </param>
        </member>
        <member name="M:P3D.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> parameteritized constructor from double ptr pointing to a double[3]. </summary>
            <param name="pDouble"> The double. </param>
        </member>
        <member name="M:P3D.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:P3D">
            <summary> Mastercam P3D definition. </summary>
        </member>
        <member name="T:PlanesUpdated">
            <summary> Return value for Set() and Replace() </summary>
        </member>
        <member name="T:CoordinateDisplayType">
            <summary> Values that represent CoordinateDisplayType. </summary>
        </member>
        <member name="T:PlaneClass">
            <summary> Values that represent class of plane. </summary>
        </member>
        <member name="T:PlaneType">
            <summary> Plane types. </summary>
        </member>
        <member name="M:IDArray.GetLastID">
            <summary> Gets the last identifier, 0 on error. </summary>
            <returns> The last identifier. </returns>
        </member>
        <member name="M:IDArray.IsEqualContents(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Query if 'obj' is equal contents to this. </summary>
            <param name="obj"> The object to compare. </param>
            <returns> true if equal contents, false if not. </returns>
        </member>
        <member name="M:IDArray.GetExcludedIDs">
            <summary> Returns reference to m_ExcludeIDs. </summary>
            <returns> reference to m_ExcludeIDs. </returns>
        </member>
        <member name="M:IDArray.HasExcludedIDs">
            <summary> Query if this object has excluded operation IDs. </summary>
            <returns> true if excluded operation IDs exist, false if not. </returns>
        </member>
        <member name="M:IDArray.ExcludeThisOpID(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary> Add the given ID to the exclude mask (exclude this ID from being added to or 
		  existing in the array. Any existing matching ID's will be removed from the array. </summary>
            <param name="theID">			 The ID to exclude. </param>
            <param name="clearExcludeArray"> (Optional) first empty exclude mask. </param>
        </member>
        <member name="M:IDArray.RemoveID(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Removes all instances of the ID from the array. </summary>
            <param name="theID"> The ID to remove. </param>
            <returns> Size of array. </returns>
        </member>
        <member name="M:IDArray.SetSize(System.Int64)">
            <summary> Sets new size of array. </summary>
            <param name="newSize"> The new size. </param>
            <returns> Size of array. </returns>
        </member>
        <member name="M:IDArray.GetAllowNegatives">
            <summary> Gets value of m_AllowNegatives. </summary>
            <returns> value of m_AllowNegatives. </returns>
        </member>
        <member name="M:IDArray.GetAllowDuplicates">
            <summary> Gets value of m_AllowDuplicates. </summary>
            <returns> value m_AllowDuplicates. </returns>
        </member>
        <member name="M:IDArray.SetAllowDuplicates(System.Boolean,System.Boolean)">
            <summary> Sets m_AllowDuplicates and removed duplicate IDs from the array. </summary>
            <param name="allowDuplicates"> true to allow, false to deny duplicates. </param>
            <param name="ensureUnique">    (Optional) true to ensure contents are unique. </param>
            <returns> Previous value of m_AllowDuplicates. </returns>
        </member>
        <member name="M:IDArray.GetSortMode">
            <summary> Gets sort mode. </summary>
            <returns> The sort mode. </returns>
        </member>
        <member name="M:IDArray.Sort(VArray&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;.SortMode)">
            <summary> Sorts the array per the given sort mode. </summary>
            <param name="sortMode"> (Optional) the sort mode. </param>
        </member>
        <member name="M:IDArray.Copy(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Use this member function to copy the elements of one array to another. </summary>
            <param name="obj"> Source of the elements to be copied to an array. </param>
            <returns> Returns true if successful. </returns>
        </member>
        <member name="M:IDArray.Append(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Appends the given set to this. </summary>
            <param name="obj"> Source of the elements to be appended to an array. </param>
            <returns> The index of the first appended element. </returns>
        </member>
        <member name="M:IDArray.Append(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Appends the array of long ID's at pOpIDs. </summary>
            <param name="pOpIDs"> The ptr to the operation IDs. </param>
            <param name="nOpIDs"> The number operation IDs. </param>
            <returns> The index of the first appended element. </returns>
        </member>
        <member name="M:IDArray.Append(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Appends the given array to this. </summary>
            <param name="obj"> Source of the elements to be appended to an array. </param>
            <returns> The index of the first appended element. </returns>
        </member>
        <member name="M:IDArray.Add(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Adds the ID to the array. </summary>
            <param name="theID"> the identifier to add. </param>
            <returns> . </returns>
        </member>
        <member name="M:IDArray.IsEmpty">
            <summary> Query if this object is empty. </summary>
            <returns> true if empty, false if not. </returns>
        </member>
        <member name="M:IDArray.op_Assign(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object to copy. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:IDArray.op_Assign(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object to copy. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:IDArray.op_Assign(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator. </summary>
            <param name="obj"> The object. </param>
            <returns> A shallow copy of this object. </returns>
        </member>
        <member name="M:IDArray.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:IDArray.#ctor(std.vector&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor that accepts a set of longs. </summary>
            <param name="theIDs"> std::set of longs. </param>
        </member>
        <member name="M:IDArray.#ctor(std.set&lt;System.Int32!System.Runtime.CompilerServices.IsLong,std.less&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;,std.allocator&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor that accepts a set of longs. </summary>
            <param name="theIDs"> std::set of longs. </param>
        </member>
        <member name="M:IDArray.#ctor(IDArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
            <param name="obj"> The object. </param>
        </member>
        <member name="M:IDArray.#ctor(System.Boolean,VArray&lt;System.Int32!System.Runtime.CompilerServices.IsLong&gt;.SortMode)">
            <summary> Constructor. </summary>
            <param name="allowDuplicates"> (Optional) allow duplicates IDs in the array. </param>
            <param name="sortMode">		   (Optional) the sort mode. </param>
        </member>
        <member name="T:IDArray">
            <summary> A std::vector of long data types used for operation ID's. </summary>
        </member>
        <member name="D:SldHoleAxisDataChangeVector">
            <summary> Defines an alias representing the solid hole axis data change vector. </summary>
        </member>
        <member name="T:SldHoleAxisDataChangeItem">
            <summary> Solid hole axis data change item. </summary>
        </member>
        <member name="T:SldHoleAxisDataChangeStatus">
            <summary> Solid hole axis data change status. </summary>
        </member>
        <member name="D:HoleAxisDataArray">
            <summary> Defines an alias representing options for controlling the detect hole axis. </summary>
        </member>
        <member name="T:SDetectHoleAxisData">
            <summary> Output data for a single cylindrical "hole" from SDetectSelectHoleAxis function. </summary>
        </member>
        <member name="T:SDETECT_CONE_FACE">
Solid Detection - conical face structure
</member>
        <member name="T:SDETECT_CYL_FACE">
Solid Detection - cylindrical face structure
</member>
        <member name="T:v9_SDETECT_DRILL_PARAMS">
@defgroup  Contour_Types Contour types 
@{ 
@} 
@defgroup  Pocket_Types Pocket types 
@{ 
@} 
V9 Solids drill detection parameters
</member>
        <member name="T:prm_probe_cycle">
            <summary> probe toolpath parameters. </summary>
        </member>
        <member name="T:probe_param">
            <summary> A probe parameter. </summary>
        </member>
        <member name="T:prm_nesting">
            <summary> toolpath nesting parameters. </summary>
        </member>
        <member name="T:prm_solid_drill">
            <summary> solid drill toolpath parameters. </summary>
        </member>
        <member name="T:SDETECT_DRILL_PARAMS">
            <summary> Solid drill detection parameters. </summary>
        </member>
        <member name="T:AutoDrillPrm">
automatic drilling parameters
</member>
        <member name="T:prm_trimmed">
            <summary> trimmed toolpath parameters. </summary>
        </member>
        <member name="T:prm_manual_entry">
            <summary> manual entry parameters. </summary>
        </member>
        <member name="T:prm_chook">
            <summary> chook operation. </summary>
        </member>
        <member name="T:DependencyMode">
            <summary> Values that represent dependency modes in CHook operations. </summary>
        </member>
        <member name="T:prm_coons">
            <summary> coons parameters. </summary>
        </member>
        <member name="T:prm_swept3d">
            <summary> swept 3D parameters. </summary>
        </member>
        <member name="T:prm_swept2d">
            <summary> swept 2D parameters. </summary>
        </member>
        <member name="T:prm_lofted">
            <summary> lofted parameters. </summary>
        </member>
        <member name="T:prm_revolved">
            <summary> revolved parameters. </summary>
        </member>
        <member name="T:prm_ruled">
            <summary> ruled parameters. </summary>
        </member>
        <member name="T:prm_helix_bore">
            <summary> helix bore parameters. </summary>
        </member>
        <member name="T:prm_slotmill">
            <summary> slotmill parameters. </summary>
        </member>
        <member name="T:prm_thdmill">
            <summary> thread mill parameters. </summary>
        </member>
        <member name="T:prm_adv_5ax">
            <summary> operation parameters - ADV 5 axis. </summary>
            <remarks> Declarations in 3rd party package: const int mcamParamsManager::MPM_MAX_CHOOK_PARAMS=470;
		  const int mcamParamsManager::MPM_MAX_FURTHER_CHOOK_PARAMS=(147+8+13);
		  const int mcamParamsManager::MPM_MAX_V8_PAD_PARAMS=250;
		  const int mcamParamsManager::MPM_MAX_V8_PADX_PARAMS=28; </remarks>
        </member>
        <member name="T:prm_circle_5ax">
            <summary> operation parameters - circle 5axis specific parameters. </summary>
        </member>
        <member name="T:prm_circmill">
            <summary> circmill parameters. </summary>
        </member>
        <member name="T:prm_port_5ax">
            <summary> operation parameters - Port 5 axis. </summary>
        </member>
        <member name="T:prm_slice_5ax">
            <summary> operation parameters - slice 5 axis. </summary>
        </member>
        <member name="F:prm_msurf_5ax.iteration_count">
no longer used but leave to retrieve values from older .mc9 files 
</member>
        <member name="T:prm_msurf_5ax">
            <summary> operation parameters - Msurf 5 axis. </summary>
        </member>
        <member name="T:prm_m5_box">
            <summary> Box Pattern data. </summary>
        </member>
        <member name="T:prm_m5_sph">
            <summary> Sphere Pattern data. </summary>
        </member>
        <member name="T:prm_m5_cyl">
Support structures for Msurf 5 axis 
<summary> Cylinder Pattern data. </summary></member>
        <member name="T:prm_swarf_5ax">
            <summary> operation parameters - swarf 5 axis. </summary>
        </member>
        <member name="F:prm_curve_5ax.step_meth">
@} 
</member>
        <member name="F:prm_curve_5ax.OutputFormat">
@defgroup cc5dlg_parameters1 CC5dlg parameters 
@{ 
</member>
        <member name="T:prm_curve_5ax">
            <summary> operation parameters - curve 5 axis. </summary>
        </member>
        <member name="F:prm_srf_4ax.gen">
@} 
</member>
        <member name="F:prm_srf_4ax.OutputFormat">
@defgroup cm5dlg_parameters4 CM5dlg parameters 
@{ 
</member>
        <member name="T:prm_srf_4ax">
            <summary> operation parameters - surface finish 4 axis. </summary>
        </member>
        <member name="F:prm_srf_flow5ax.f4thaxis">
@} 
</member>
        <member name="F:prm_srf_flow5ax.OutputFormat">
@defgroup cm5dlg_parameters1 CM5dlg parameters 
@{ 
</member>
        <member name="T:prm_srf_flow5ax">
            <summary> operation parameters - surface finish flowline 5 axis. </summary>
        </member>
        <member name="T:multax_exit_blend">
            <summary> Exit_Blend Parameters. </summary>
        </member>
        <member name="T:pt_generator">
            <summary> Point generators. </summary>
        </member>
        <member name="T:multax_oscillate">
            <summary> multiaxis oscillate settings. </summary>
        </member>
        <member name="T:multax_overlap">
multiaxis overlap settings 
</member>
        <member name="T:multax_entry_exit">
            <summary> multiaxis entry and exit. </summary>
        </member>
        <member name="T:ent_exit">
            <summary> multiaxis entry or exit. </summary>
        </member>
        <member name="T:prm_srf_hmm">
            <summary>operation parameters - surface hmm.</summary>
            <remarks>This structure is written and read from disk. Practices to follow when adding new parameters:

		 1. Look for "gaps" between data members that result from data alignment and will not change the alignment of subsequent data members.
		 2. Look for data members named pad_short, pad_int, etc. These are memory pads that are no longer used if you fail to find a "gap" in the structure.  
		 3. Backward compatibility may need to be addressed after adding or modifying a data member as follows:  
			a. Edit INTERFACES\GUI\ChkSIM_E.h and pump up the minor version - V20XX_MINOR - and add a new one V20XX_'whatever describes the change' set to the old minor version,
			b. older versions are handled by editing files MastercamX\\MCPrvVerFile\\V20XXTentToV20XY.cpp, and  
			b. minor versions are handled by editing the file MCCore\\DbLoIO.cpp.  

		Padding, from structure packing alignment or "unused" padding variables, can be expected to be zeroed out, and, thus, the newly introduced variable that was squeezed into
		an existing gap in the structure will also be zeroed out. In this case, there's no need to bump-up the minor version. But, if the new data members require 
		special initialization, (3) will be needed. For examples on how this could be done, you may want to look at revision 196292 where the data members limitXYOption and 
		includeStockXY were introduced.
		
		A helpful tool to identify alignment gaps are the compiler flags /d1reportSingleClassLayoutXXX and /d1reportAllClassLayout. They provide a memory layout of the
		structure with the available memory identified as 'alignment memory'.
	</remarks>
        </member>
        <member name="T:prm_srf_fin_conscalop">
            <summary> operation parameters - surface finish constant scallop. </summary>
        </member>
        <member name="T:prm_srf_fin_shallow">
            <summary> operation parameters - surface finish shallow. </summary>
        </member>
        <member name="T:prm_srf_fin_steep">
            <summary> operation parameters - surface finish steep. </summary>
        </member>
        <member name="T:prm_srf_fin_leftover">
            <summary> operation parameters - surface finish leftover. </summary>
        </member>
        <member name="T:prm_srf_fin_pencil">
            <summary> operation parameters - surface finish pencil. </summary>
        </member>
        <member name="T:prm_srf_fin_contour">
            <summary> operation parameters - surface finish contour. </summary>
        </member>
        <member name="T:prm_srf_fin_flowline">
            <summary> operation parameters - surface finish flowline. </summary>
        </member>
        <member name="T:prm_srf_fin_blend">
            <summary> operation parameters - surface finish blend. </summary>
        </member>
        <member name="T:prm_srf_fin_project">
            <summary> operation parameters - surface finish project. </summary>
        </member>
        <member name="T:prm_srf_fin_radial">
            <summary> operation parameters - surface finish radial. </summary>
        </member>
        <member name="T:prm_srf_fin_parallel">
            <summary> operation parameters - surface finish parallel. </summary>
        </member>
        <member name="T:prm_srf_rgh_plunge">
            <summary> operation parameters - surface rough plunge. </summary>
        </member>
        <member name="T:prm_srf_rgh_pocket">
            <summary> operation parameters - surface rough pocket. </summary>
        </member>
        <member name="T:prm_srf_rgh_restmill">
            <summary> operation parameters - surface rough rest mill. </summary>
        </member>
        <member name="T:prm_srf_rgh_contour">
            <summary> operation parameters - surface rough contour. </summary>
        </member>
        <member name="T:prm_srf_rgh_flowline">
            <summary> operation parameters - surface rough flowline. </summary>
        </member>
        <member name="T:prm_srf_rgh_project">
            <summary> operation parameters - surface rough project. </summary>
        </member>
        <member name="T:prm_srf_rgh_radial">
            <summary> operation parameters - surface rough radial. </summary>
        </member>
        <member name="T:prm_srf_rgh_parallel">
            <summary> operation parameters - surface rough parallel. </summary>
        </member>
        <member name="T:prm_srf_limits">
            <summary> operation parameters - surface operation's limit settings. </summary>
        </member>
        <member name="T:prm_srf_rough_settings">
            <summary> operation parameters - surface operation's roughing settings. </summary>
        </member>
        <member name="T:prm_srf_depths">
            <summary> operation parameters - surface operation's depth settings. </summary>
        </member>
        <member name="T:prm_srf_hsopts">
            <summary> operation parameters - surface high speed parameters. </summary>
        </member>
        <member name="T:prm_srf_direction">
            <summary> operation parameters - surface operation's direction settings. </summary>
        </member>
        <member name="T:prm_srf_edge_settings">
            <summary> operation parameters - surface operation's edge settings. </summary>
        </member>
        <member name="T:prm_srf_gap_settings">
            <summary> operation parameters - surface operation's gap settings. </summary>
        </member>
        <member name="T:prm_srf_common">
            <summary> operation parameters - common parameters for all surface operations. </summary>
        </member>
        <member name="T:prm_chamfer">
            <summary> operation parameters - model chamfering. </summary>
        </member>
        <member name="T:prm_2d_hmm">
            <summary> operation parameters - 2D toolpaths hmm. </summary>
        </member>
        <member name="T:PrmHmmLinkFirstLastLeadMotion">
            <summary> A collection of link lead motions and other data for first/last leads. </summary>
        </member>
        <member name="M:PrmHmmLinkLeadMotion.Init">
            <summary> Initialize link lead motion to the defaults. </summary>
        </member>
        <member name="M:PrmHmmLinkLeadMotion.op_Equality(PrmHmmLinkLeadMotion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="rhs"> The right hand side of the structure to test against. </param>
            <returns> True if the structures are considered equivalent. </returns>
        </member>
        <member name="T:PrmHmmLinkLeadMotion">
            <summary> A prm hmm link lead motion. </summary>
        </member>
        <member name="T:prm_facing">
            <summary> Facing. </summary>
        </member>
        <member name="T:prm_pocket">
            <summary> Pocket. </summary>
            <remarks> Note: if you increase the size of prm_pocket, adjust padding at end of prm_srf_rgh_pocket, too. </remarks>
        </member>
        <member name="T:prm_hem">
            <summary> HEM parameters. </summary>
        </member>
        <member name="T:prm_thinwall">
            <summary> Thinwall pocket. </summary>
        </member>
        <member name="T:prm_pkt_hsopts">
            <summary> High speed pocket options. </summary>
        </member>
        <member name="T:prm_open_pock">
            <summary> Open pockets. </summary>
        </member>
        <member name="T:prm_remach_pock">
            <summary> Pocket remachining. </summary>
        </member>
        <member name="T:prm_pock_facing">
            <summary> operation parameters - pocket specific parameters. </summary>
        </member>
        <member name="T:prm_rgh_entry">
            <summary> operation parameters - pocket specific parameters. </summary>
        </member>
        <member name="T:prm_ramp">
            <summary> operation parameters - pocket specific parameters. </summary>
        </member>
        <member name="T:prm_helix">
            <summary> operation parameters - pocket specific parameters. </summary>
        </member>
        <member name="T:prm_taper">
            <summary> operation parameters - pocket specific parameters. </summary>
        </member>
        <member name="T:prm_custom_op">
            <summary> Custom operation parameters. </summary>
        </member>
        <member name="T:prm_lpark_turret">
            <summary> lathe park turret operation. </summary>
        </member>
        <member name="T:prm_mt_turret">
            <summary> turret operation. </summary>
        </member>
        <member name="T:prm_mt_center_point">
            <summary> center point operation. </summary>
        </member>
        <member name="T:prm_mt_tailstock">
            <summary> tailstock operation. </summary>
        </member>
        <member name="T:prm_mt_spindle_sync">
spindle sync operation
</member>
        <member name="T:ExactRotaryDirection">
            <summary> Exact rotary direction types. </summary>
            <remarks> Exact rotary type as in values that explicitly state the rotary direction.
		  A different way to specify rotary (or spindle) direction is to say "shortest",
		  but that should have its own enumeration to clearly differentiate between usages. </remarks>
        </member>
        <member name="T:SpindleSyncType">
            <summary> Spindle sync operation types. </summary>
        </member>
        <member name="T:prm_mt_spindle_move">
spindle advance/retract operation
</member>
        <member name="T:SpindleMoveType">
            <summary> Spindle move operation types. </summary>
        </member>
        <member name="T:prm_mt_spindle_grip">
            <summary> chuck clamp/unclamp operation. </summary>
        </member>
        <member name="T:prm_mt_bar_feed">
            <summary> bar feed operation. </summary>
        </member>
        <member name="T:axis_motion_type">
            <summary> miscop axis motion description. </summary>
        </member>
        <member name="T:prm_lsteadyrest">
            <summary> lathe steady rest position operation. </summary>
        </member>
        <member name="T:prm_ltailstock">
            <summary> lathe tailstock position operation. </summary>
        </member>
        <member name="T:prm_lchuck_clamp">
            <summary> lathe chuck clamp/un-clamp operation. </summary>
        </member>
        <member name="T:prm_lbarfeed">
            <summary> lathe stock bar feed operation. </summary>
        </member>
        <member name="T:prm_lstock_flip">
            <summary> lathe stock flip operation. </summary>
        </member>
        <member name="T:prm_lstock_xfer">
            <summary> lathe stock transfer operation. </summary>
        </member>
        <member name="T:prm_lcan_pattern">
            <summary> lathe pattern repeat toolpath. </summary>
        </member>
        <member name="T:prm_lcan_finish">
            <summary> lathe canned finish toolpath. </summary>
        </member>
        <member name="T:prm_lcan_rough">
            <summary> lathe canned rough toolpath. </summary>
        </member>
        <member name="T:prm_lpoint">
            <summary> lathe point toolpath parameters. </summary>
        </member>
        <member name="T:prm_lthread">
            <summary> lathe thread toolpath parameters. </summary>
        </member>
        <member name="T:prm_thread_cut">
            <summary> lathe thread cut parameters. </summary>
        </member>
        <member name="T:prm_thread_shape">
            <summary> lathe thread shape parameters. </summary>
        </member>
        <member name="T:prm_lplunge">
            <summary> lathe plunge and turn toolpath parameters. </summary>
        </member>
        <member name="T:prm_plunge_finish">
            <summary> lathe plunge and turn finish parameters. </summary>
        </member>
        <member name="T:prm_plunge_rough">
            <summary> lathe plunge and turn rough parameters. </summary>
        </member>
        <member name="T:prm_lgroove">
            <summary> lathe groove toolpath parameters. </summary>
        </member>
        <member name="T:prm_groove_finish">
            <summary> lathe groove finish parameters (not used with 2 boundary groove) </summary>
        </member>
        <member name="T:prm_groove_rough">
            <summary> lathe groove rough parameters. </summary>
        </member>
        <member name="T:prm_groove_step">
            <summary> lathe groove roughing step removal parameters. </summary>
        </member>
        <member name="T:PrmGrooveRibCutting">
Lathe groove rough rib cutting parameters. 
</member>
        <member name="T:RibWidthType">
            <summary> Lathe groove rough rib cutting rib width. </summary>
        </member>
        <member name="T:GrooveRoughCutDir">
            <summary> Lathe groove rough cut direction. </summary>
        </member>
        <member name="T:prm_groove_depth">
            <summary> lathe groove rough multiple depth cut parameters. </summary>
        </member>
        <member name="T:prm_groove_shape">
            <summary> lathe groove shape parameters (not used with 2 boundary groove) </summary>
        </member>
        <member name="T:GrooveGeometryType">
            <summary> Lathe groove geometry type. </summary>
        </member>
        <member name="F:prm_lcutoff.do_clearance">
clearance cut 
</member>
        <member name="T:prm_lcutoff">
            <summary> lathe cutoff toolpath parameters. </summary>
        </member>
        <member name="T:prm_lcutoff_fs">
            <summary> lathe cutoff toolpath feed speed parameters. </summary>
        </member>
        <member name="T:prm_lcutoff_cantxt">
            <summary> lathe cutoff toolpath canned text parameters. </summary>
        </member>
        <member name="T:prm_lathe_corner">
            <summary> lathe corner parameters. </summary>
        </member>
        <member name="F:prm_lathe_peck.dwell_type">
dwell parameters 
</member>
        <member name="F:prm_lathe_peck.retract_type">
retract parameters 
</member>
        <member name="F:prm_lathe_peck.peck_type">
peck parameters 
</member>
        <member name="T:prm_lathe_peck">
            <summary> lathe peck/dwell parameters. </summary>
        </member>
        <member name="T:prm_pinch_turn">
            <summary> lathe pinch turn operation. </summary>
        </member>
        <member name="T:PrmLathePrimeTurning">
            <summary> Lathe prime turning parameters. </summary>
        </member>
        <member name="T:PrmLathePrimeTurningFinish">
            <summary> Lathe prime turning finish parameters. </summary>
        </member>
        <member name="T:PrimeTurningFinishStrategy">
            <summary> Lathe prime turning finish strategies. </summary>
        </member>
        <member name="T:PrmLathePrimeTurningRough">
            <summary> Lathe prime turning rough parameters. </summary>
        </member>
        <member name="T:PrimeTurningRoughStrategy">
            <summary> Lathe prime turning rough strategies. </summary>
        </member>
        <member name="T:PrmLathePrimeTurningCommon">
            <summary> Lathe prime turning common parameters for rough and finish. </summary>
        </member>
        <member name="T:PrimeTurningFinishFeedSpeed">
            <summary> Feed rate and spindle speed parameters, used by prime turning finish. </summary>
        </member>
        <member name="T:PrimeTurningRoughFeedSpeed">
            <summary> Feed rate and spindle speed parameters, used by prime turning rough. </summary>
        </member>
        <member name="T:prm_lcontour">
            <summary> lathe contour rough toolpath parameters. </summary>
        </member>
        <member name="T:prm_ldynamic">
            <summary> lathe dynamic rough toolpath parameters. </summary>
        </member>
        <member name="T:prm_lrough">
            <summary> lathe rough toolpath parameters. </summary>
        </member>
        <member name="T:LatheSemiFinishFeedSpeed">
            <summary> Lathe semi finish feed/speed parameters. </summary>
        </member>
        <member name="T:prm_pinch_params">
            <summary> lathe pinch turn parameters. </summary>
        </member>
        <member name="T:prm_lfinish">
lathe finish toolpath parameters 
</member>
        <member name="T:LatheCutDirection">
            <summary> Lathe cut direction. </summary>
        </member>
        <member name="T:prm_lathe_down_cutting">
lathe finish down cutting parameters 
</member>
        <member name="T:prm_lathe_corner_break">
            <summary> lathe corner break parameters. </summary>
        </member>
        <member name="T:prm_lathe_face">
            <summary> lathe face toolpath parameters. </summary>
        </member>
        <member name="T:SecondaryFeedSpeedPrm">
            <summary> Lathe secondary feed/speed parameters. </summary>
        </member>
        <member name="T:prm_lathe_face_corner">
            <summary> lathe face corner parameters. </summary>
        </member>
        <member name="T:prm_lathe_plunge">
            <summary> lathe plunge parameters. </summary>
        </member>
        <member name="T:prm_lathe_ee">
            <summary> lathe entry/exit parameters. </summary>
        </member>
        <member name="T:prm_lathe_ee_vec">
            <summary> individual lathe entry/exit parameters. </summary>
        </member>
        <member name="T:prm_ldrill">
            <summary> lathe drill toolpath parameters. </summary>
        </member>
        <member name="T:PrmChamferDrill">
            <summary> Chamfer drill toolpath parameters. </summary>
        </member>
        <member name="T:PrmAdvancedDrill">
            <summary> Toolpath parameters for a Advanced Drill operation. </summary>
        </member>
        <member name="T:prm_drill">
operation parameters - drilling specific parameters 
</member>
        <member name="T:ProcessHolePositioningMethod">
            <summary> Process hole linking options. </summary>
        </member>
        <member name="T:ProcessHoleLinkingMethod">
            <summary> Process hole linking options. </summary>
        </member>
        <member name="T:ProcessHoleSortMethod">
            <summary> Process hole sorting options. </summary>
        </member>
        <member name="T:multax_trim2stock">
            <summary> multiaxis trim to stock settings. </summary>
        </member>
        <member name="T:prm_lathe_chip_break">
            <summary> Lathe chip break parameters. </summary>
        </member>
        <member name="T:prm_ltool_inspect">
            <summary> lathe tool inspection parameters. </summary>
        </member>
        <member name="T:prm_mintilt">
            <summary> Minimum tilt parameters. </summary>
        </member>
        <member name="T:prm_5ax_limit">
            <summary> Axis limit property page. </summary>
        </member>
        <member name="T:multax_limit">
            <summary> multiaxis axis limit. </summary>
        </member>
        <member name="T:prm_contour">
            <summary> operation parameters - contour specific parameters. </summary>
            <remarks> Please note:  if you change prm_contour, please adjust other structures (such as prm_2d_hmm and
		  prm_chamfer) which include it. </remarks>
        </member>
        <member name="T:prm_oscillate_ctour">
            <summary> Contour oscillate. </summary>
        </member>
        <member name="T:prm_tab">
            <summary> Tab parameters. </summary>
        </member>
        <member name="T:prm_tp_common">
            <summary> router common parameters. </summary>
        </member>
        <member name="T:prm_ext_short">
            <summary> Extend/shorten contour. </summary>
        </member>
        <member name="T:prm_ramp_ctour">
            <summary> Contour ramp. </summary>
        </member>
        <member name="T:prm_chamfer_ctour">
            <summary> Contour chamfer. </summary>
        </member>
        <member name="T:prm_ctourpock">
@defgroup operation_parameters_common_contour_and_pocket_parameters operation parameters - common contour and pocket parameters
*	@note get rid of this pathetic data structure for version 9.
*		  Move finish_all to op_multi_cuts.  Use op_common.cmp_to_tip

@{ 
<summary> Contour pocket. </summary></member>
        <member name="T:prm_remach_ctour">
            <summary> Contour remachining. </summary>
        </member>
        <member name="T:prm_xform">
            <summary> operation parameters - xform toolpath. </summary>
        </member>
        <member name="T:prm_xform_misc_ops">
            <summary> operation parameters - xform toolpath misc ops. </summary>
        </member>
        <member name="T:prm_xform_translate">
            <summary> operation parameters - xform-translate (linear array) toolpath. </summary>
        </member>
        <member name="T:prm_xform_rotate">
            <summary> operation parameters - xform-rotate toolpath. </summary>
        </member>
        <member name="T:prm_xform_mirror">
            <summary> operation parameters - xform-mirror toolpath. </summary>
        </member>
        <member name="T:prm_xform_view">
            <summary> operation parameters - xform-view info. </summary>
        </member>
        <member name="T:prm_safelink">
            <summary> operation parameters - safe link. </summary>
        </member>
        <member name="T:m5_safety_zone">
            <summary> A 5 safety zone. </summary>
        </member>
        <member name="T:BlockAnchorPts">
            <summary> Block safety zone anchor points. </summary>
        </member>
        <member name="T:CylinderAnchorPts">
            <summary> Cylinder safety zone anchor points. </summary>
        </member>
        <member name="T:SafetyZoneWrapTypes">
            <summary> Values that represent safety zone wrap types. </summary>
        </member>
        <member name="T:SafetyZoneLinkToolOptions">
            <summary> Values that represent safety zone link tool options. </summary>
        </member>
        <member name="T:SafetyZoneTypes">
            <summary> Values that represent safety zone types. </summary>
        </member>
        <member name="T:prm_wire_4axis">
            <summary> wire 4axis wirepath parameters. </summary>
        </member>
        <member name="T:prm_wire_point">
            <summary> wire point wirepath parameters. </summary>
        </member>
        <member name="T:prm_wire_nocore">
            <summary> wire nocore wirepath parameters. </summary>
        </member>
        <member name="T:prm_wcan_cycle">
            <summary> wire canned cycle wirepath parameters. </summary>
        </member>
        <member name="T:prm_wire_contour">
            <summary> wire contour wirepath parameters. </summary>
        </member>
        <member name="T:prm_wire_tab">
            <summary> Wire tab parameters. </summary>
        </member>
        <member name="T:prm_chain_sort">
            <summary> wire window chain sorting parameters. </summary>
        </member>
        <member name="T:prm_wire_ee">
            <summary> wire entry/exit parameters. </summary>
        </member>
        <member name="T:prm_wire_common">
            <summary> wire common parameters. </summary>
        </member>
        <member name="T:op_misc">
            <summary> operation parameters - miscellaneous integers and reals. </summary>
        </member>
        <member name="T:tp_entity">
            <summary> toolpath entity definition. </summary>
            <remarks> If a tp_entity member is added between flag and u and the new member is not supposed to be part of the
		  tp_entity header, the define below must be changed to use the new member in place of u. </remarks>
        </member>
        <member name="T:tp_stock_model_result">
            <summary> toolpath entity - Stock Model Result entity. </summary>
        </member>
        <member name="T:tp_fbm_zone">
            <summary> toolpath entity - FBM zone control entity. </summary>
        </member>
        <member name="T:tp_fbm_chn">
            <summary> toolpath entity - FBM chain control entity. </summary>
        </member>
        <member name="T:tp_fbm_bnd">
            <summary> toolpath entity - FBM chain boundary entity. </summary>
        </member>
        <member name="T:tp_op_idn">
            <summary> operation id entity. </summary>
        </member>
        <member name="T:tp_eptrs">
            <summary> assoc info. </summary>
        </member>
        <member name="T:tp_nest_grp_info">
            <summary> toolpath entity - Nesting group info. </summary>
        </member>
        <member name="T:tp_nest_grp">
            <summary> toolpath entity - Nesting Group entity. </summary>
        </member>
        <member name="T:tp_nest_prt_opid">
            <summary> toolpath entity - Nesting Part operation id # entity. </summary>
        </member>
        <member name="T:tp_nest_prt">
            <summary> toolpath entity - Nesting Part entity. </summary>
        </member>
        <member name="T:tp_nest_sht">
            <summary> toolpath entity - Nesting Sheet entity. </summary>
        </member>
        <member name="T:tp_tab">
            <summary> toolpath entity - Router tab entity. </summary>
        </member>
        <member name="T:tp_chook">
            <summary> CHook Toolpath Structure. </summary>
        </member>
        <member name="T:tp_group_deprecated">
            <summary> group entity. </summary>
        </member>
        <member name="T:tp_hst_stock">
            <summary> Information about the 3D HST variable stock group. </summary>
        </member>
        <member name="T:HstSurfType">
            <summary> HST surface type. </summary>
        </member>
        <member name="D:TpHstId">
surface entity - surface info 
</member>
        <member name="T:tp_fbm_drill_hole">
            <summary> toolpath drilled hole feature. </summary>
        </member>
        <member name="T:tp_arc_sld">
            <summary> toolpath entity - arc from solid information. </summary>
        </member>
        <member name="T:V8_SDETECT_DRILL_GEOM">
            <summary> V8 SDetect Drill Geometry Structure. </summary>
        </member>
        <member name="T:tpDrillHoleSegment">
            <summary> Drill hole segments used by the Advanced Drill toolpath for creating deep hole drilling operations. </summary>
        </member>
        <member name="T:OrderedItemType">
            <summary> Advanced Drill ordered item type. </summary>
        </member>
        <member name="T:PeckType">
            <summary> Peck type. </summary>
        </member>
        <member name="T:SpindleDirection">
            <summary> Spindle direction. </summary>
        </member>
        <member name="T:tp_point_sld">
            <summary> toolpath entity - drilling point from solid information. </summary>
        </member>
        <member name="T:tp_line">
            <summary> toolpath entity - 5axis position information. </summary>
        </member>
        <member name="T:tp_point">
            <summary> toolpath entity - drilling point information. </summary>
        </member>
        <member name="T:LinkingParametersAssociativePointType">
            <summary> Linking parameters associative point type enumeration. </summary>
        </member>
        <member name="T:tp_grid">
            <summary> toolpath entity - drilling grid information. </summary>
        </member>
        <member name="T:tp_bolt_circle">
            <summary> toolpath entity - drilling bolt circle information. </summary>
        </member>
        <member name="T:tp_man_ent">
            <summary> toolpath entity - manual entry. </summary>
        </member>
        <member name="T:tp_chain">
            <summary> toolpath entity - chain control entity. </summary>
        </member>
        <member name="T:tp_boundary">
            <summary> toolpath entity - chain boundary entity. </summary>
        </member>
        <member name="T:tp_change">
            <summary> toolpath entity - modify chain information. </summary>
        </member>
        <member name="T:tp_thread_cut">
            <summary> toolpath entity - thread cut entity (Used in Wire only) </summary>
        </member>
        <member name="T:tp_sync">
            <summary> toolpath entity - chain sync entity. </summary>
        </member>
        <member name="T:tp_density">
            <summary> toolpath entity - chain boundary entity. </summary>
        </member>
        <member name="T:LatheFeedFromType">
            <summary> Lathe feed from types. </summary>
        </member>
        <member name="T:LatheFeedrateType">
            <summary> Lathe feed rate types. </summary>
        </member>
        <member name="T:LatheEntryExitFeedrateMode">
            <summary> Lathe entry/exit feed rate mode. </summary>
        </member>
        <member name="T:LatheEntryExitMode">
            <summary> Lathe entry/exit mode. </summary>
        </member>
        <member name="D:GCODE_MASK">
            <summary> Defines an alias representing the gcode mask. </summary>
        </member>
        <member name="T:NCI_GCODE">
            <summary> Values that represent nci gcodes. </summary>
        </member>
        <member name="T:htl_list">
            <summary>	for linked lists of head tool entities. </summary>
        </member>
        <member name="T:BlockToolRecord">
            <summary>	Information about the block tool. </summary>
        </member>
        <member name="T:ltl_list">
for linked lists of lathe tool entities 
</member>
        <member name="T:tl_list">
for linked lists of mill tool entities 
</member>
        <member name="T:Cnc.Tool.ToolRef">
            <summary> Tool reference information. </summary>
        </member>
        <member name="T:tp_holder">
            <summary> holder segment definition. </summary>
        </member>
        <member name="T:tp_tool">
            <summary> tool definition. </summary>
        </member>
        <member name="T:tool_attr_head">
            <summary> tool parameters - Multi tool head specific -block tools/drills/aggregates. </summary>
        </member>
        <member name="T:tool_attr_drill">
            <summary> tool parameters - drill specific. </summary>
        </member>
        <member name="T:tool_attr_mill">
            <summary> tool parameters - mill specific. </summary>
        </member>
        <member name="T:op_tool_info">
            <summary> operation parameters - common tool parameters for all operation types. </summary>
        </member>
        <member name="T:post_axis_combo_type">
axis combo information in an MP friendly format
</member>
        <member name="D:machine_axis_data">
Maximum number of components in an axis combination that can be handled
by the post
 @brief array for storing the number of each possible axis of motion for an operation

 Entry 0 isn't used, entries 1-&gt;LAST_AXIS_TYPE correspond to axis definitions
 The value identifies the number of each unique axis present

 endcode

</member>
        <member name="F:cnc_machine_type.dataStreams_ent_idn">
data stream names
</member>
        <member name="F:cnc_machine_type.supportsEvents">
machine supports event-based programming - post must match
</member>
        <member name="F:cnc_machine_type.version">
version number major.minor starting with 11.2 (X2 MR2)
</member>
        <member name="F:cnc_machine_type.autoLoadTools">
automatically load tools when changing MGP machines
</member>
        <member name="F:cnc_machine_type.supportsRTCP">
does the machine support RTCP
</member>
        <member name="F:cnc_machine_type.id">
unique identifier for this machine
</member>
        <member name="F:cnc_machine_type.cplane">
default construction plane
</member>
        <member name="F:cnc_machine_type.maxWireTaperAngle">
maximum wire taper angle (deg)
</member>
        <member name="F:cnc_machine_type.holderCatalogFile">
holder catalog file
</member>
        <member name="F:cnc_machine_type.insertCatalogFile">
insert catalog file
</member>
        <member name="F:cnc_machine_type.machModeList_ent_idn">
ent_idn of list of machining modes
</member>
        <member name="F:cnc_machine_type.axisComboList_ent_idn">
ent_idn of list of axis combination entities
</member>
        <member name="F:cnc_machine_type.refPosList_ent_idn">
ent_idn of of list of machine reference positions
</member>
        <member name="F:cnc_machine_type.firstGroup_ent_idn">
ent_idn of 1st component group entity
</member>
        <member name="F:cnc_machine_type.machineBase_ent_idn">
ent_idn of machine base component entity
</member>
        <member name="F:cnc_machine_type.ctrlDef_ent_idn">
ent_idn of related control definition
</member>
        <member name="F:cnc_machine_type.ent_idn">
ent_idn for the cnc machine entity (this one!)
</member>
        <member name="F:cnc_machine_type.useTbState">
use the toolbar state
</member>
        <member name="F:cnc_machine_type.tbState">
name of tool bar state to load with machine
</member>
        <member name="F:cnc_machine_type.comment">
comment to describe the machine
</member>
        <member name="F:cnc_machine_type.matlLibFile">
material library file (inch, mm)
</member>
        <member name="F:cnc_machine_type.toolLibFile">
tool library files (inch, mm)
</member>
        <member name="F:cnc_machine_type.pstFile">
post-processor file
</member>
        <member name="F:cnc_machine_type.ctrlDefFile">
control definition file
</member>
        <member name="F:cnc_machine_type.coolant">
coolant
</member>
        <member name="F:cnc_machine_type.opFeedrates">
toolpath operation feedrate limits - inch, mm / min, deg/min, 1/sec
</member>
        <member name="F:cnc_machine_type.maxLinearFeedrates">
global maximum machine axis feedrates
</member>
        <member name="F:cnc_machine_type.pad1">
for rent
</member>
        <member name="F:cnc_machine_type.simInfoEntIdn">
Machine simulation info entity id.
</member>
        <member name="F:cnc_machine_type.configurationId">
MT .machine configuration GUID - gets assigned when the machine is loaded into a machine group
</member>
        <member name="F:cnc_machine_type.macros">
macro event lists
</member>
        <member name="F:cnc_machine_type.eventDflts">
event defaults event list
</member>
        <member name="F:cnc_machine_type.dynamics">
machine dynamics information for high-feed machining
and operation timing calculations
</member>
        <member name="F:cnc_machine_type.multiAxMotion">
multi-axis motion control
</member>
        <member name="F:cnc_machine_type.dfltLatheWCS">
lathe default WCS - 0 = none, 1 = top, 2 = LATHEZ=WORLDZ
</member>
        <member name="F:cnc_machine_type.vtl">
Is this a VTL? (lathe only)
</member>
        <member name="F:cnc_machine_type.type">
machine type (mill, lathe, router, wire EDM currently supported)
</member>
        <member name="T:cnc_machine_type">
@} 
CNC machine definition
</member>
        <member name="F:machine_dynamics_type.machAccel">
machine motion acceleration value
</member>
        <member name="F:machine_dynamics_type.syncTimingStep">
@} 
@defgroup dynamic information NOT for high-feed 
@{ 
timing increment for MATSS sync-list
</member>
        <member name="F:machine_dynamics_type.centrip_accel">
cornering acceleration
</member>
        <member name="F:machine_dynamics_type.test_radius">
corner radius
</member>
        <member name="F:machine_dynamics_type.min_corner_fr">
feedrate to slow down to at sharp corners
</member>
        <member name="F:machine_dynamics_type.corner_angle">
minimum change in direction to slow down to min_corner_fr
</member>
        <member name="F:machine_dynamics_type.accel_seg_len_pct">
segment length as % of tool diameter
</member>
        <member name="F:machine_dynamics_type.accelerate">
apply acceleration
</member>
        <member name="F:machine_dynamics_type.max_fr_change">
maximum feedrate change per block
</member>
        <member name="F:machine_dynamics_type.look_ahead_pct">
look-ahead as a percentage of tool diameter
</member>
        <member name="F:machine_dynamics_type.recombine_pct">
@defgroup parameters taken from HighFeed_E.h 
@{ 
maximum change in feedrate to recombine segments (%)
</member>
        <member name="T:machine_dynamics_type">
Machine dynamic parameters
</member>
        <member name="F:multiax_motion_type.maxCombinedAngle">
maximum combined angle before break is required
</member>
        <member name="F:multiax_motion_type.breakRotaryCombined">
break combined rotary axis motion
</member>
        <member name="T:multiax_motion_type">
@defgroup cnc_machine_parameters CNC machine parameters 
@{ 
Multi-axis motion control
</member>
        <member name="F:component_group_type.ent_idns">
ent_idns of this and related entities in database\n
ent_idns.thisEnt is used as the group reference stored with operations
</member>
        <member name="F:component_group_type.firstComponent_ent_idn">
ent_idn for 1st component in group
</member>
        <member name="F:component_group_type.firstParam_ent_idn">
ent_idn for 1st component group parameters entity in the list
</member>
        <member name="T:component_group_type">
            <summary>	 ! DEPRECATED ! Old Component group definition. Since 2020, replaced by CComponentGroup class members.  </summary>
        </member>
        <member name="F:component_group_params.ent_idns">
ent_idns of this and related entities in database
</member>
        <member name="F:component_group_params.groupType">
specific group type (UL_TOOLS_GROUP, etc.)
</member>
        <member name="F:component_group_params.groupClass">
general component group class (PART_HOLDING_GROUP_TYPE, etc.)
</member>
        <member name="T:component_group_params">
Component group parameters
 @brief Component group parameters

 A linked list of these parameters is stored with a component group.
 This allows a group to have the parameters of more than one group type.
 For example, a component group can have both turret and spindle parameters.
 The turret and spindle specific parameters are stored in different entries
 in the list

</member>
        <member name="F:machine_component_type.u">
component type specific parameters
</member>
        <member name="F:machine_component_type.g">
geometry definition parameters (non-component specific)
</member>
        <member name="F:machine_component_type.geoType">
type of geometry used to define the component
</member>
        <member name="F:machine_component_type.machine_ent_idn">
ent_idn of owner machine
</member>
        <member name="F:machine_component_type.ent_idns">
ent_idns of this and related entities in database
</member>
        <member name="F:machine_component_type.curPos">
current position of anchorPt (world coordinates)
= anchorPt position on the machine at start of program most of the time... [REMOVE]
</member>
        <member name="F:machine_component_type.curXform">
transformation matrix to put component @ current NC position
= initXform initially [REMOVE]
</member>
        <member name="F:machine_component_type.color">
color to draw component
</member>
        <member name="F:machine_component_type.type">
type of component (machine base, chuck, turret, etc)
</member>
        <member name="F:machine_component_type.groupID">
component group id
</member>
        <member name="T:machine_component_type">
@} 
CNC machine component parameters
</member>
        <member name="F:multi_tool_component_type.aggHeadGeo">
aggregate head parametric geometry definition
</member>
        <member name="F:multi_tool_component_type.WCS_num">
work offset number
</member>
        <member name="F:multi_tool_component_type.tool_axis_length">
tool length
</member>
        <member name="F:multi_tool_component_type.z_angle">
tilt angle
</member>
        <member name="F:multi_tool_component_type.xy_angle">
machine view angle
</member>
        <member name="F:multi_tool_component_type.stationPosition">
X,Y,Z station position
</member>
        <member name="F:multi_tool_component_type.stationAnchor">
X,Y,Z block anchor position
</member>
        <member name="F:multi_tool_component_type.tc_type">
tool change type
</member>
        <member name="F:multi_tool_component_type.axis">
Orientation axis
</member>
        <member name="F:multi_tool_component_type.type">
Aggregate type
</member>
        <member name="F:multi_tool_component_type.idn">
station/block number
</member>
        <member name="T:multi_tool_component_type">
Aggregate head component parameters
</member>
        <member name="F:gang_tool_component_type.turretFace">
turret face number on which this gang is installed (if any...)
</member>
        <member name="F:gang_tool_component_type.slantAngle">
angle of slant bed that gang is installed on
used for determining tool alignment in tool location components
</member>
        <member name="F:gang_tool_component_type.spindleSpeeds">
min./max. spindle speed for live tools
</member>
        <member name="T:gang_tool_component_type">
Gang tool component parameters
</member>
        <member name="F:turret_component_type.useXStickout">
flags for applying the stickout values
</member>
        <member name="F:turret_component_type.xStickout">
default 'stickout' lengths for auto tooling the turret
</member>
        <member name="F:turret_component_type.slantAngle">
slant angle (deg.) - used for computing the axis of rotation and indexed tool vectors
</member>
        <member name="F:turret_component_type.spindleSpeeds">
min./max. spindle speed for live tools
</member>
        <member name="F:turret_component_type.geo">
turret parametric geometry definition
</member>
        <member name="F:turret_component_type.indexType">
CW, CCW, OPTIMIZE
</member>
        <member name="F:turret_component_type.numFaces">
number of tool stations defined
</member>
        <member name="F:turret_component_type.indexTime">
time to index between adjacent faces (sec.)
</member>
        <member name="F:turret_component_type.indexedToolAxis">
defines direction of tools in indexed position
must be perpendicular to rotaryAxis
</member>
        <member name="F:turret_component_type.rotaryAxis">
axis of turret rotation
defines CW/CCW direction for auto-face numbering
</member>
        <member name="T:turret_component_type">
Turret component parameters
</member>
        <member name="T:tool_spindle_component_type">
Tool spindle component parameters
This also applies to the turning tool device that works on machines that
use an ATC for turning tools
'standard' geometry types are supported
</member>
        <member name="T:atc_component_type">
@} 
@defgroup multi_tool_component_types Multi-tool component types
@{ 
<summary>	Automatic tool changer (ATC) component parameters </summary><remarks>			tool change kinematic simulation is not currently supported, this component is
			necessary: to provide tool change times so machine simulation knows where to send
			the tools for a tool change 'standard' geometry types are supported. </remarks></member>
        <member name="T:tool_component_type">
Tool component type
</member>
        <member name="F:mh_piggyback_component_type.stationSpacing">
X,Y,Z spacing for the stations
</member>
        <member name="T:mh_piggyback_component_type">
Multi-head piggyback component parameters
</member>
        <member name="F:multi_head_component_type.stationSpacing">
X,Y,Z spacing for the stations
</member>
        <member name="T:multi_head_component_type">
Multi-head head component parameters
</member>
        <member name="F:drill_block_station_component_type.stationGeo">
station geometry definition
</member>
        <member name="F:drill_block_station_component_type.stationGeoType">
station geometry type
</member>
        <member name="F:drill_block_station_component_type.blockGeo">
block geometry definition
</member>
        <member name="F:drill_block_station_component_type.blockGeoType">
block geometry type
</member>
        <member name="F:drill_block_station_component_type.stationPosition">
X,Y,Z position for the stations
</member>
        <member name="F:drill_block_station_component_type.stationAnchor">
X,Y,Z block Anchor position
</member>
        <member name="F:drill_block_station_component_type.idn">
station/block number
</member>
        <member name="T:drill_block_station_component_type">
Router drill block station component parameters
</member>
        <member name="F:wire_lower_guide_component_type.geo">
guide geometry
</member>
        <member name="T:wire_lower_guide_component_type">
Wire lower guide component type
</member>
        <member name="F:wire_upper_guide_component_type.geo">
guide geometry
</member>
        <member name="F:wire_upper_guide_component_type.alignWithLower">
align guide vertically with lower guide at home position
</member>
        <member name="F:wire_upper_guide_component_type.threadTime">
thread time (sec)
</member>
        <member name="T:wire_upper_guide_component_type">
Wire upper guide component type
</member>
        <member name="F:wire_guide_geo_type.majorRad">
geometry
</member>
        <member name="T:wire_guide_geo_type">
wire guide geometry type
</member>
        <member name="F:tool_location_type.pad">
for rent
</member>
        <member name="F:tool_location_type.allowLatheDrills">
allow fixed (Lathe) drilling tools at this location
</member>
        <member name="F:tool_location_type.allowLiveTools">
allow live (Mill) tools at this station
</member>
        <member name="F:tool_location_type.allowInsertUpTools">
allow fixed (Lathe) tools at this location (NOT lathe drills!)
</member>
        <member name="F:tool_location_type.allowFaceTools">
allow face tools at this location
</member>
        <member name="F:tool_location_type.allowCrossTools">
allow cross tools at this location
</member>
        <member name="F:tool_location_type.anyStation">
use this locator for any tool, irregardless of the tool station #
</member>
        <member name="F:tool_location_type.toolStation">
tool station number to match on
</member>
        <member name="F:tool_location_type.allPositions">
use this locator for all turret index or gang tool positions
</member>
        <member name="F:tool_location_type.toolPosnType">
reference point on tool for this locator
TOOL_LOC_CENTER,	   TOOL_LOC_TOP_LEFT,	  TOOL_LOC_CENTER_LEFT,
TOOL_LOC_BOTTOM_LEFT,  TOOL_LOC_TOP_CENTER,	  TOOL_LOC_TOP_RIGHT,
TOOL_LOC_CENTER_RIGHT, TOOL_LOC_BOTTOM_RIGHT, TOOL_LOC_BOTTOM_CENTER,
TOOL_LOC_USER,	
</member>
        <member name="F:tool_location_type.toolXformType">
method by which the user defined the tool transformation view
TOOL_XFORM_CROSS_UPPER,	TOOL_XFORM_CROSS_LOWER,
TOOL_XFORM_FACE_LEFT,	TOOL_XFORM_FACE_RIGHT,
TOOL_XFORM_NAMED_VIEW
</member>
        <member name="F:tool_location_type.toolXformID">
tool transformation matrix named view v_idn
</member>
        <member name="F:tool_location_type.useStickout">
use the stickout value
</member>
        <member name="F:tool_location_type.stickout">
stickout length for the tool
</member>
        <member name="F:tool_location_type.gangToolPos">
gang tool position ID for a tool
</member>
        <member name="F:tool_location_type.turretFace">
turret face number for a tool
</member>
        <member name="F:tool_location_type.atcPocket">
ATC pocket for a tool
</member>
        <member name="F:tool_location_type.toolXform">
position and orientation tool for this location
used for pre-defined tool position and orientation for spindles, turrets,
and gangs
</member>
        <member name="T:tool_location_type">
@} 
@defgroup single_tool_component_types Single tool component types
@{ 
</member>
        <member name="T:steadyrest_component_type">
Steady rest component parameters
</member>
        <member name="T:steadyrest_geo_type">
Steady rest structure (X)
</member>
        <member name="T:tailstock_component_type">
Tailstock component parameters
</member>
        <member name="T:tailstock_geo_type">
Tailstock structure (X)
</member>
        <member name="T:lathe_center_component_type">
Centre component parameters (live or dead centre, no taper is modelled)
This is a special component added directly from the MGP stock setup page
</member>
        <member name="T:lathe_center_geo_type">
@} 
@defgroup programmable_misc_tooling_component_types Programmable misc tooling component types
@{ 
Centre component geometry (live or dead centre, no taper is modelled)
</member>
        <member name="T:guide_bushing_component_type">
Guide bushing component parameters
</member>
        <member name="F:collet_component_type.geo">
parametric geometry definition
</member>
        <member name="T:collet_component_type">
Collet component parameters
- not implemented currently in Mastercam X
</member>
        <member name="T:chuck_component_type">
Chuck component parameters
</member>
        <member name="T:chuck_geo_type">
Chuck geometry type
</member>
        <member name="T:chuckjaws_component_type">
Chuck jaw(s) component
This is a special component added directly from the MGP stock setup page
</member>
        <member name="T:chuckjaw_stock_stickout">
Chuck jaw stock stickout
</member>
        <member name="T:chuckjaw_geo_type">
Chuck jaw geometry
</member>
        <member name="T:vise_component_type">
Machine vise component parameters
- not implemented currently in Mastercam X
</member>
        <member name="T:vise_jaw_component_type">
@} 
@defgroup work_holding_comp_types Work Holding Component Types 
@{ 
Machine vise jaw component parameters
- not implemented currently in Mastercam X
</member>
        <member name="T:wire_table_component_type">
Wire EDM table component parameters
</member>
        <member name="T:round_table_component_type">
Round table component parameters
- not implemented currently in Mastercam X
</member>
        <member name="T:rect_table_component_type">
Rectangular table component parameters
</member>
        <member name="T:rect_table_geo_type">
Rectangular table geometry - not implemented currently in Mastercam X
</member>
        <member name="T:tslot_geo_type">
T slot parameters - not implemented currently in Mastercam X
</member>
        <member name="F:rotary_axis_component_type.disableEvFr">
disable feedrate programming for axis motion events
</member>
        <member name="F:rotary_axis_component_type.g28Angle">
simulation startup axis angle
</member>
        <member name="F:rotary_axis_component_type.travelLimits">
min/max rotational travel limits (deg.)
</member>
        <member name="F:rotary_axis_component_type.maxFeedrate">
maximum feedrate (deg/min)
</member>
        <member name="F:rotary_axis_component_type.maxAngularMove">
maximum angular move before breaking
</member>
        <member name="F:rotary_axis_component_type.breakWithChordal">
use chordal deviation to determine when to break
</member>
        <member name="F:rotary_axis_component_type.breakRotaryMoves">
break rotary move
</member>
        <member name="F:rotary_axis_component_type.axisOutputType">
signed continuous, signed direction (0-360 deg),
shortest direction (0 - 360 deg)
</member>
        <member name="F:rotary_axis_component_type.indexAngle">
must divide evenly into 360
</member>
        <member name="F:rotary_axis_component_type.indexingAxis">
is this an indexing axis?
</member>
        <member name="F:rotary_axis_component_type.reposAngles">
rotational reposition limits (deg)
</member>
        <member name="F:rotary_axis_component_type.rotAngle">
angle of rotation for nutated axis, right hand rule (degrees)
</member>
        <member name="F:rotary_axis_component_type.tiltAxis">
axis of rotation for axis out of plane (WCS axis!)\n
	  *		X_AXIS,		Y_AXIS,		Z_AXIS\n
	  * NEG_X_AXIS, NEG_Y_AXIS, NEG_Z_AXIS\n

</member>
        <member name="F:rotary_axis_component_type.isNutated">
nutated machine axis
</member>
        <member name="F:rotary_axis_component_type.cwAxis">
true = CW is +ive direction for this axis
</member>
        <member name="F:rotary_axis_component_type.zeroDegAxis">
axis '0 deg' vector WRT machine axes
lies in plane perpendicular to axis of rotation
</member>
        <member name="F:rotary_axis_component_type.wcsAxis">
axis of rotation wrt machine linear axes
</member>
        <member name="F:rotary_axis_component_type.machineAxis">
rotary axis to drive on the machine: A_AXIS, B_AXIS, C_AXIS, MACRO_AXIS
</member>
        <member name="T:rotary_axis_component_type">
Rotary axis component parameters
</member>
        <member name="F:linear_axis_component_type.disableEvFr">
disable feedrate programming for axis motion events
</member>
        <member name="F:linear_axis_component_type.maxFeedrates">
max. feed rates (rapid traverse rates)
</member>
        <member name="F:linear_axis_component_type.machineAxis">
axis to drive on the machine: X_AXIS, Y_AXIS, Z_AXIS, MACRO_AXIS
</member>
        <member name="F:linear_axis_component_type.common">
[0] = parameters for the physical axis direction on the machine
[1] = parameters for the programmed direction of machine motion for this axis, 
	  which may be in combination with other linear axes, if the machine axes are 
	  non-orthogonal
</member>
        <member name="T:linear_axis_component_type">
Linear axis component parameters
</member>
        <member name="F:axis_params_type.g28AxisPos">
simulation startup axis position
</member>
        <member name="F:axis_params_type.travelLimits">
min/max linear travel limits (in/mm) measured along axis direction from zeroPos
</member>
        <member name="F:axis_params_type.tiltAngle">
angle of rotation for tilt, right hand rule (degrees)
</member>
        <member name="F:axis_params_type.tiltAxis">
axis of rotation for axis out of plane (WCS axis!)\n
	  *		X_AXIS,		Y_AXIS,		Z_AXIS\n
	  * NEG_X_AXIS, NEG_Y_AXIS, NEG_Z_AXIS\n

</member>
        <member name="F:axis_params_type.isTilted">
tilt the axis
</member>
        <member name="F:axis_params_type.axisDir">
base axis direction WRT the WCS:
	X_AXIS,		Y_AXIS,		Z_AXIS
NEG_X_AXIS, NEG_Y_AXIS, NEG_Z_AXIS
</member>
        <member name="T:axis_params_type">
generic axis component parameters
The actual axis direction vector is computed by taking the wcsAxis
vector direction and rotating it about the tiltAxis by rotAngle
</member>
        <member name="T:travel_limits_type">
travel limits
</member>
        <member name="T:axis_feedrate_type">
Axis feed rates
</member>
        <member name="T:fixture_component_type">
General fixture component parameters
</member>
        <member name="T:machine_base_component_type">
Machine base component parameters
</member>
        <member name="T:misc_component_type">
Miscellaneous component parameters
</member>
        <member name="F:stock_component_type.barstockGeo">
round barstock geometry with stock margins
other stock types defined using standard solid types
</member>
        <member name="T:stock_component_type">
Stock component type
</member>
        <member name="T:barstock_geo_type">
@} 
@defgroup generic_comp_types Generic Component Types 
@{ 
Round bar stock (with optional hole) structure (X)
</member>
        <member name="T:tube_geo_type">
Cylinder with a hole in it (revolved component)
</member>
        <member name="T:polygon_geo_type">
Other specialized geometry geometry definitions
Filleted polygon
</member>
        <member name="T:solid_geo_dflts">
'Standard' solid component definition defaults
</member>
        <member name="T:revolved_component_def">
Parameters for a component definition from a revolved profile
</member>
        <member name="T:extruded_component_def">
Parameters for a component definition from an extruded profile
</member>
        <member name="T:cylinder_component_def">
Parameters for a component definition from a cylinder
</member>
        <member name="T:block_component_def">
Parameters for a component definition from a block
</member>
        <member name="T:stl_component_def">
Parameters for a component definition from a STL entity
</member>
        <member name="T:solid_component_def">
Component Geometry Definitions
Component geometry will provide the backbone for machine simulation in
future releases of Mastercam. It will also enable graphical descriptions
of CNC machines, currently provided via post-processor variables
Component geometry is NOT supported in the current version of Mastercam

@defgroup component_geometry_definitions Component Geometry Definitions 
@{ 
Parameters for a component definition from a solid entity
</member>
        <member name="D:eMachineTypes">
used to identify variables in the above enum
</member>
        <member name="D:eToolStorageIndexMethods">
used for turrets and tool changers
</member>
        <member name="D:eToolPosns">
used for tool location components
</member>
        <member name="D:eToolXforms">
used for tool location components
</member>
        <member name="D:eRotAxisOutputTypes">
used to identify variables in the above enum
</member>
        <member name="D:eComponentAxes">
used to identify variables in the above enum
</member>
        <member name="D:eComponentGeometryTypes">
used to identify variables in the above enum
</member>
        <member name="D:eComponentGroups">
used to identify variables in the above enum
</member>
        <member name="F:FIRST_CUSTOM_GROUP">
Custom groups, up to 99999
These will be used in future versions to cover groups that don't fit
into the pre-defined definitions
</member>
        <member name="F:START_WIRE_TOOLING_GROUPS">
Wire-specific miscellaneous tooling groups
</member>
        <member name="F:START_ROUTER_TOOLING_GROUPS">
Router-specific miscellaneous tooling groups
</member>
        <member name="F:START_LATHE_TOOLING_GROUPS">
Lathe-specific miscellaneous tooling groups
</member>
        <member name="F:START_MILL_TOOLING_GROUPS">
Miscellaneous tooling component groups
These groups contain auxiliary machine automation, not related to
holding/driving the part or tool
Mill-specific miscellaneous tooling groups
</member>
        <member name="F:START_WIRE_TOOL_STORAGE_GROUPS">
Wire-specific tool storage groups
</member>
        <member name="F:START_ROUTER_TOOL_STORAGE_GROUPS">
Router-specific tool storage groups
</member>
        <member name="F:START_LATHE_TOOL_STORAGE_GROUPS">
Lathe-specific tool storage groups
</member>
        <member name="F:START_MILL_TOOL_STORAGE_GROUPS">
Cutting tool storage component groups
Mill-specific tool storage groups
</member>
        <member name="F:START_WIRE_PART_HOLDING_GROUPS">
Wire-specific part holding groups
</member>
        <member name="F:START_ROUTER_PART_HOLDING_GROUPS">
Router-specific part holding groups
</member>
        <member name="F:START_LATHE_PART_HOLDING_GROUPS">
Lathe-specific part holding groups
</member>
        <member name="F:START_MILL_PART_HOLDING_GROUPS">
Part holding component groups
Mill-specific part holding groups
</member>
        <member name="D:eComponentGroupClasses">
used to identify variables in the above enum
</member>
        <member name="T:group_view">
group view structure
</member>
        <member name="T:Cnc.MachineDef.ComponentTypes">
            <summary> Type codes for the machine components. </summary>
        </member>
        <member name="D:eComponentTypes">
            <summary>   Used to identify variables in the above enum. </summary>
        </member>
        <member name="F:FIRST_TOOLING_COMPONENT">
misc. tooling components, ATC included as tool components only
hold tools while cutting
</member>
        <member name="F:FIRST_MULTI_TOOL_COMPONENT">
Multi-cutting tool components
</member>
        <member name="F:FIRST_TOOL_COMPONENT">
Single tool holding components
</member>
        <member name="F:FIRST_WORK_HOLDING_COMPONENT">
Work holding components
(tables included, as the part can sit on a table)
</member>
        <member name="F:FIRST_GENERIC_COMPONENT">
Generic components
Components marked with an * aren't available currently in X2
</member>
        <member name="T:machining_mode_type">
Multi-tasking machining mode
</member>
        <member name="T:stream_info_type">
Multi-tasking data stream information for a machining mode
</member>
        <member name="F:axis_combination_type.compList_ent_idns">
ent_idn for lists of components (this list is stored in the database as an ent_idn_list)
</member>
        <member name="F:axis_combination_type.group_ent_idns">
component lists for this axis combination
- each list consists of components from 1 component group
- one list is for the tool holding components
- the other is for the part holding components
- miscop operations (ex. tailstock advance) may only require one list
- this list should be the first one
ent_idns of component groups to which all components belong
</member>
        <member name="F:axis_combination_type.toolChgPos">
Tool change (V9 home) position (inch, mm)
</member>
        <member name="F:axis_combination_type.name">
Axis combination name
</member>
        <member name="T:axis_combination_type">
 @par Machining mode axis combination

 @note Rules:
 - Any 'cutting' toolpath operation requires the interaction of 2
	 component groups and their components, hence 2 component lists.
 - Only one of each linear axis + 2 different rotary axes are allowed.
 - Tool and part holding components must NOT be stored in the same
	 component list. (Each list must have one or the other.)

</member>
        <member name="T:evl_list_info">
event list information
</member>
        <member name="T:machine_position">
Machine reference position type and method of positioning
</member>
        <member name="T:ReferencePositionSource">
Reference position source (how it was created)
</member>
        <member name="T:ReferencePositionType">
Type of reference position
</member>
        <member name="F:TYPE_AXIS_COMBO_REFPT">
            <summary>	The next 2 members are used for axis combination reference POINTS and home position only. </summary>
        </member>
        <member name="D:stream_name_array">
array of data stream names
</member>
        <member name="D:stream_name_type">
@par Multi-tasking data stream parameters
@note MAX_DATA_STREAMS is defined in AssocTyp_ch.h

data stream name
</member>
        <member name="M:op_Equality(tp_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tp_ent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator. </summary>
            <param name="lhs"> The first instance to compare. </param>
            <param name="rhs"> The second instance to compare. </param>
            <returns> True if the parameters are considered equivalent. </returns>
        </member>
        <member name="T:bdry_fillet_type">
            <summary> Fillet information. </summary>
        </member>
        <member name="T:lathe_bdry">
            <summary> lathe component boundary. </summary>
        </member>
        <member name="T:ltool_rec">
            <summary> Lathe tool definition. </summary>
        </member>
        <member name="T:TP_OPCODE_RANGES">
@} 
</member>
        <member name="T:matl_list">
for linked lists of material entities 
</member>
        <member name="T:Cnc.Tool.V7LATHETOOL">
LATHE TOOL 
</member>
        <member name="T:Cnc.Tool.HOLDERCFG">
GENERAL HOLDER MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.LDRILLTOOLCFG">
DRILLING TOOL MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.GRVINSERTCFG">
GROOVING/PARTING INSERT MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.THDINSERTCFG">
THREADING INSERT MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.GTBINSERTCFG">
GENERAL TURNING / BORING INSERT MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.LTOOLTYPECFG">
LATHE TOOL TYPE MENU CONFIGURATION 
</member>
        <member name="T:Cnc.Tool.DIMBMPINFO">
CONFIGURATION FOR DIMENSIONED BITMAP 
</member>
        <member name="T:Cnc.Tool.LISTINFO">
CONFIGURATION INFO FOR A LIST VIEW OR DROPDOWN 
</member>
        <member name="T:Cnc.Tool.MINMAXREAL">
@defgroup ltooldef_ch2 LIMITS 
@{ 
@} 
@defgroup ltooldef_ch7 DRILLING TYPES 
@{ 
@} 
@defgroup ltooldef_ch8 TAP TYPES 
@{ 
@} 
@defgroup ltooldef_ch9 TOOL COMPENSATION TYPES 
@{ 
@} 
FLOATING POINT EDIT BOX LIMITS, DEFAULTS 
</member>
        <member name="T:Cnc.Tool.LATHETOOL">
            <summary> A lathe tool definition. </summary>
        </member>
        <member name="T:Cnc.Tool.LATHEFR">
            <summary> Lathe feed rate and units. </summary>
        </member>
        <member name="T:Cnc.Tool.CUSTOMLTOOL">
            <summary> Custom lathe tool. </summary>
        </member>
        <member name="T:Cnc.Tool.LHOLDER">
            <summary> Generic tool holder. </summary>
            <remarks> All units always in inches! </remarks>
        </member>
        <member name="T:Cnc.Tool.INSERT">
            <summary> Lathe insert/drilling tool definition. </summary>
            <remarks> All units always in inches! </remarks>
        </member>
        <member name="T:Cnc.Tool.LDRILLTOOL">
            <summary> Lathe drilling tool definition. </summary>
            <remarks> All units always in inches! </remarks>
        </member>
        <member name="T:Cnc.Tool.GRVINSERT">
            <summary> Grooving/Parting insert. </summary>
            <remarks> All units always in inches! </remarks>
        </member>
        <member name="T:Cnc.Tool.THDINSERT">
            <summary> Threading insert. </summary>
            <remarks> All units always in inches! </remarks>
        </member>
        <member name="T:Cnc.Tool.GTBINSERT">
            <summary> General turning/boring insert. </summary>
            <remarks> All units always in inches! </remarks>
        </member>
        <member name="M:Cnc.Tool.op_RightShift(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	CArchive read operator overload for the TlID class. </summary>
            <param name="ar">	The archive. </param>
            <param name="id">	The identifier. </param>
            <returns>	The archive. </returns>
        </member>
        <member name="M:Cnc.Tool.op_LeftShift(CArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cnc.Tool.TlID)">
            <summary>	CArchive write operator overload for the TlID class. </summary>
            <param name="ar">	The archive. </param>
            <param name="id">	The identifier. </param>
            <returns>	The adjusted archive. </returns>
        </member>
        <member name="F:Cnc.Tool.TlID.m_Guid">
            <summary>	Unique identifier. </summary>
        </member>
        <member name="F:Cnc.Tool.TlID.EmptyID">
            <summary>	Identifier for the empty tlid. </summary>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Implicit~_GUID">
            <summary>	GUID casting operator. </summary>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Implicit~ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;">
            <summary>	CString casting operator. </summary>
        </member>
        <member name="M:Cnc.Tool.TlID.op_LessThan(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Less-than comparison operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the first parameter is less than the second. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_GreaterThan(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Greater-than comparison operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the first parameter is greater than to the second. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Inequality(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Inequality operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Equality(Cnc.Tool.TlID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Equality operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Inequality(_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Inequality operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the parameters are not considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Equality(_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Equality operator. </summary>
            <param name="other">	The other. </param>
            <returns>	true if the parameters are considered equivalent. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Assign(_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment guid operator. </summary>
            <param name="guidGUID">	Unique identifier. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.op_Assign(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Assignment string operator. </summary>
            <param name="stringGUID">	Unique identifier for the string. </param>
            <returns>	A shallow copy of this object. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.ToString">
            <summary>	Convert this object into a string representation. </summary>
            <returns>	This object as a CString. </returns>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary>	Parameterized blob constructor. </summary>
            <param name="blob">	   	The BLOB. </param>
            <param name="blobsize">	The blobsize. </param>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor(_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Parameterized byte guid constructor. </summary>
            <param name="guidGUID">	Unique identifier. </param>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*)">
            <summary>	Parameterized string constructor. </summary>
            <param name="stringGUID">	Unique identifier for the string. </param>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>	Parameterized string constructor. </summary>
            <param name="stringGUID">	Unique identifier for the string. </param>
        </member>
        <member name="M:Cnc.Tool.TlID.#ctor">
            <summary>	Default constructor. </summary>
        </member>
        <member name="T:Cnc.Tool.TlID">
            <summary> Class representing a tool identifier in the form of a GUID (Globally unique identifier) </summary>
        </member>
        <member name="T:ComponentType">
            <summary> Values that represent component types. </summary>
        </member>
        <member name="T:TlTurnHolderType">
            <summary>	Values that represent turn holder types. </summary>
        </member>
        <member name="T:TlToolAssemblyType">
            <summary>	Values that represent 3D Tool Assembly types. </summary>
        </member>
        <member name="T:TlSpindleSpeedUnits">
            <summary>	Values that represent spindle speed units. </summary>
        </member>
        <member name="T:TlCompensationPositionState">
            <summary>	Values that represent tool compensation positions states. </summary>
        </member>
        <member name="T:TlBoundaryGenerationMethod">
            <summary> Defined methods for calculating the profile from the 3D model. </summary>
        </member>
        <member name="T:TlDefinition">
            <summary>	Values that represent the insert definition. </summary>
        </member>
        <member name="T:TlCuttingSide">
            <summary>	Values that represent the handedness of a tool or tool item. </summary>
        </member>
        <member name="T:TlGraphicsFileFormat">
            <summary>	Values that represent tool graphics file formats. </summary>
        </member>
        <member name="T:TlThreadShape">
            <summary> Values that represent the different Thread Shapes. </summary>
        </member>
        <member name="T:TlShankType">
            <summary> Values that represent the different shank types on tools. </summary>
        </member>
        <member name="T:MCToolType">
            <summary> Values that represent the different tool types that Mastercam supports. </summary>
        </member>
        <member name="T:LowerConnectionType">
            <summary>	Enumeration representing the Holder Lower Connection Type. </summary>
        </member>
        <member name="T:TlHelixType">
            <summary>	 Helix type for router tools </summary>
        </member>
        <member name="T:TlSpindleDir">
            <summary>	 Enumeration for spindle directions. </summary>
        </member>
        <member name="T:TlDisplayType">
            <summary>	 Enumeration representing the Tool Display Type </summary>
        </member>
        <member name="T:TlCornerType">
            <summary>	Enumeration that represent TlCornerType. </summary>
        </member>
        <member name="T:TlCutSource">
            <summary>	 Enumeration for source of cut params. </summary>
        </member>
        <member name="T:TlCutQuality">
            <summary>	Enumeration for cut quality. </summary>
        </member>
        <member name="T:TlRadiusType">
            <summary>	Enumeration for radius types </summary>
        </member>
        <member name="T:TlMaterialHardness">
            <summary>	Enumeration for different hardness scales. </summary>
        </member>
        <member name="T:TlMaterialISOValue">
            <summary>	Enumeration representing the different material ISO Group Values. </summary>
        </member>
        <member name="T:TlMaterialGroup">
            <summary>	Enumeration for different material groups. </summary>
        </member>
        <member name="T:TlLiveCenterTaperStyle">
            <summary> Values that represent the different Lathe Live Center taper styles. </summary>
        </member>
        <member name="T:TlLiveCenterPointStyle">
            <summary> Values that represent the different Lathe Live Center point styles. </summary>
        </member>
        <member name="T:UpperConnectionType">
@defgroup assocvar_ch26 tool radius types 
@{ 
@} 
@defgroup assocvar_ch27 canned cycle types 
@{ 
@} 
@defgroup assocvar_ch3 mill cutter capabilities 
@{ 
@}
@defgroup ltooldef_ch3 LATHE TOOL TYPES 
@{ 
@} 
@defgroup ltooldef_ch4 CUSTOM GEOMETRY TOOL TYPES 
@{ 
@} 
@defgroup ltooldef_ch5 THREAD INSERT TYPES 
@{ 
@} 
@defgroup ltooldef_ch6 THREAD TYPES 
@{ 
@} 
<summary>	Enumeration representing the Holder Upper Connection Type. </summary><summary>	Enumeration representing the Holder Upper Connection Type. </summary></member>
        <member name="T:Cnc.Tool.TlLatheDefinition">
            <summary>	Declares the TlLatheDefinition type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A class representing a lathe tool definition. </summary>
            <summary>	A class representing a lathe tool definition. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCuttingConfigurationGrooving">
            <summary>	Declares the TlCuttingConfigurationGrooving type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A grooving cutting configuration. </summary>
            <summary>	A grooving cutting configuration. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCuttingConfigurationThreading">
            <summary>	Declares the TlCuttingConfigurationThreading type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A threading cutting configuration. </summary>
            <summary>	A threading cutting configuration. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCuttingConfigurationTurningBoring">
            <summary>	Declares the TlCuttingConfigurationTurningBoring type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A turning or boring cutting configuration. </summary>
            <summary>	A turning or boring cutting configuration. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCuttingConfiguration">
            <summary>	Declares the TlCuttingConfiguration type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A tool cutting configuration. </summary>
            <summary>	A tool cutting configuration. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyConfiguration">
            <summary>	Declares the TlAssemblyConfiguration type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A tool assembly configuration. </summary>
            <summary>	A tool assembly configuration. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyComponentTree">
            <summary>	Declares the TlAssemblyComponentTree type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a tree of assembly components. </summary>
            <summary> Class representing a tree of assembly components. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyAdaptiveItem">
            <summary>	Declares the TlAssemblyAdaptiveItem type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Class representing an adaptive item that is part of a tool or holder assembly. </summary>
            <summary>	Class representing an adaptive item that is part of a tool or holder assembly. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyTurnHolder">
            <summary>	Declares the TlAssemblyTurnHolder type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Class representing a turn holder that is part of a tool assembly. </summary>
            <summary>	Class representing a turn holder that is part of a tool assembly. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyInsert">
            <summary>	Declares the TlAssemblyInsert type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing an insert that is part of a tool assembly. </summary>
            <summary> Class representing an insert that is part of a tool assembly. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyComponent">
            <summary>	Declares the TlAssemblyComponent type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Prototype class defining parameterized information on a tool assembly component. </summary>
            <summary> Prototype class defining parameterized information on a tool assembly component. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolAssemblyComponentView">
            <summary>	Declares the TlToolAssemblyLatheDefView type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A specific assembly component view of a TlToolAssembly instance. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolAssemblyLatheDefView">
            <summary>	Declares the TlToolAssemblyLatheDefView type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A lathe definition view of a TlToolAssembly instance. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderAssembly">
            <summary>	Declares the TlHolderAssembly type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Class representing an assembly of adapters, extensions, and holders. </summary>
            <summary>	Class representing an assembly of adapters, extensions, and holders. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolAssembly">
            <summary>	Declares the TlToolAssembly type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Prototype class describing an assembly of tool components. </summary>
            <summary> Prototype class describing an assembly of tool components. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAdaptiveItem">
            <summary>	Declares the TlAdaptiveItem type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	The TlAdaptiveItem class for adapters and extensions. </summary>
            <summary>	The TlAdaptiveItem class for adapters and extensions. </summary>
        </member>
        <member name="T:Cnc.Tool.TlTurnHolder">
            <summary>	Declares the TlTurnHolder type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A basic turn holder. </summary>
            <summary>	A basic turn holder. </summary>
        </member>
        <member name="T:Cnc.Tool.TlBoundaryGenerationParams">
            <summary>	Declares the TlBoundaryGenerationParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class defining boundary generation parameters to calculate cut and no-cut boundaries from a 3D Tool model. </summary>
        </member>
        <member name="T:Cnc.Tool.TlConnectionMap">
            <summary>	Declares the TlConnectionMap type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Defines an ID referencable map of connections. </summary>
        </member>
        <member name="T:Cnc.Tool.TlConnection">
            <summary>	Declares the TlConnection type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A connection between tool components. </summary>
        </member>
        <member name="T:Cnc.Tool.TlGraphicsFileCollection">
            <summary>	Declares the TlGraphicsFileCollection type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Class representing a collection of tool graphics files. </summary>
        </member>
        <member name="T:Cnc.Tool.TlGraphicsFile">
            <summary>	Declares the TlGraphicsFile type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Class representing a tool graphics file in memory. </summary>
            <summary>	Class representing a tool graphics file in memory. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAccessoryCollection">
            <summary>	Declares the TlAccessoryCollection type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Class representing a collection of tool accessory items. </summary>
            <summary>	Class representing a collection of tool accessory items. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAccessory">
            <summary>	Declares the TlAccessory type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	The tl accessory class for assembly accessory items. </summary>
            <summary>	The tl accessory class for assembly accessory items. </summary>
        </member>
        <member name="T:Cnc.Tool.TlLocator">
            <summary>	Declares the TlLocator type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A class that provides standard tool class behavior on top of wrapping a transformation matrix. </summary>
        </member>
        <member name="T:Cnc.Tool.TransformationMatrixColumn">
            <summary>	Declares the TransformationMatrixColumn type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a transformation matrix column for use with composite mill tool holders. </summary>
            <summary> Class representing a transformation matrix column for use with composite mill tool holders. </summary>
        </member>
        <member name="T:Cnc.Tool.TransformationMatrix">
            <summary>	Declares the TransformationMatrix type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a transformation matrix for use with composite mill tool holders. </summary>
            <summary> Class representing a transformation matrix for use with composite mill tool holders. </summary>
        </member>
        <member name="T:Cnc.Tool.TlXMLNode">
            <summary>	Declares the TlXMLNode type and its shared_ptr/unique_ptr aliases. </summary>
        </member>
        <member name="T:Cnc.Tool.TlManufacturer">
            <summary>	Declares the TlManufacturer type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a tool manufacturer. </summary>
            <summary> Class representing a tool manufacturer. </summary>
        </member>
        <member name="T:Cnc.Tool.TlOpType">
            <summary>	Declares the TlOpType type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a custom user-defined operation type. </summary>
            <summary> Class representing a custom user-defined operation type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlOpGroup">
            <summary>	Declares the TlOpGroup type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a custom user-defined operation group. </summary>
            <summary> Class representing a custom user-defined operation group. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolemakingOpParams">
            <summary>	Declares the TlHolemakingOpParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class defining Drilling Tool Operation Parameters. </summary>
            <summary> Class defining Drilling Tool Operation Parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.TlMillingOpParams">
            <summary>	Declares the TlMillingOpParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class defining Milling Tool Operation Parameters. </summary>
            <summary> Class defining Milling Tool Operation Parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.TlOpParams">
            <summary>	Declares the TlOpParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class defining Tool Operation Parameters. </summary>
            <summary> Class defining Tool Operation Parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileArcSegment">
            <summary>	Declares the TlProfileArcSegment type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing an arc segment on a 2D profile. </summary>
            <summary> Class representing an arc segment on a 2D profile. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileLineSegment">
            <summary>	Declares the TlProfileLineSegment type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a line segment on a 2D profile. </summary>
            <summary> Class representing a line segment on a 2D profile. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfileSegment">
            <summary>	Declares the TlProfileSegment type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a segment on a 2d profile. </summary>
        </member>
        <member name="T:Cnc.Tool.TlProfile">
            <summary>	Declares the TlProfile type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a 2D profile comprised of instances of the TlProfileSegment class. </summary>
            <summary> Class representing a 2D profile comprised of instances of the TlProfileSegment class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlMgr">
            <summary>	Declares the TlMgr type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class to maintain a list of tool items.  Can be added to the database to store a file tool item list, or
		  can be kept unattached to function as a "local" tool item list. </summary>
            <summary> Class to maintain a list of tool items.  Can be added to the database to store a file tool item list, or
		  can be kept unattached to function as a "local" tool item list. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheLiveCenter">
            <summary>	Declares the TlHolderLatheLiveCenter type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a Lathe Live Center. </summary>
            <summary> Class representing a Lathe Live Center. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheTurning">
            <summary>	Declares the TlHolderLatheTurning type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl holder lathe turning. </summary>
            <summary>	Tl holder lathe turning. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheThreading">
            <summary>	Declares the TlHolderLatheThreading type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl holder lathe threading class. </summary>
            <summary>	Tl holder lathe threading class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheGrooving">
            <summary>	Declares the TlHolderLatheGrooving type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl holder lathe grooving class. </summary>
            <summary>	Tl holder lathe grooving class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheDrill">
            <summary>	Declares the TlHolderLatheDrill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl holder lathe drill class. </summary>
            <summary>	Tl holder lathe drill class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLatheBoring">
            <summary>	Declares the TlHolderLatheBoring type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl holder lathe boring class. </summary>
            <summary>	Tl holder lathe boring class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderLathe">
            <summary>	Declares the TlHolderLathe type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl holder lathe class. </summary>
            <summary>	Tl holder lathe class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertTurningBoring">
            <summary>	Declares the TlInsertTurningBoring type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl insert turning boring class. </summary>
            <summary>	Tl insert turning boring class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertThreading">
            <summary>	Declares the TlInsertThreading type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl insert threading class. </summary>
            <summary>	Tl insert threading class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertLatheDrill">
            <summary>	Declares the TlInsertLatheDrill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl insert lathe drill class. </summary>
            <summary>	Tl insert lathe drill class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsertGrooving">
            <summary>	Declares the TlInsertGrooving type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	Tl insert grooving class. </summary>
            <summary>	Tl insert grooving class. </summary>
        </member>
        <member name="T:Cnc.Tool.TlInsert">
            <summary>	Declares the TlInsert type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Base class for insert representation </summary>
            <summary> Base class for insert representation </summary>
        </member>
        <member name="T:Cnc.Tool.TlCoolant">
            <summary>	Declares the TlCoolant type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a collection of tool coolant settings. </summary>
            <summary> Class representing a collection of tool coolant settings. </summary>
        </member>
        <member name="T:Cnc.Tool.TlCutParam">
            <summary>	Declares the TlCutParam type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a cutting parameter. </summary>
            <summary> Class representing a cutting parameter. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolType">
            <summary>	Declares the TlToolType type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a custom user-defined tool type. </summary>
            <summary> Class representing a custom user-defined tool type. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolGroup">
            <summary>	Declares the TlToolGroup type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a custom user-defined tool group. </summary>
            <summary> Class representing a custom user-defined tool group. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolGrade">
            <summary>	Declares the TlToolGrade type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a custom user-defined tool grade. </summary>
            <summary> Class representing a custom user-defined tool grade. </summary>
        </member>
        <member name="T:Cnc.Tool.TlWorkMaterial">
            <summary>	Declares the TlWorkMaterial type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a workpiece material within the Mastercam tool system. </summary>
            <summary> Class representing a workpiece material within the Mastercam tool system. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolMaterial">
            <summary>	Declares the TlToolMaterial type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a tool material. </summary>
            <summary> Class representing a tool material. </summary>
        </member>
        <member name="T:Cnc.Tool.TlMaterial">
            <summary>	Declares the TlMaterial type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a basic material. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderTreeNode">
            <summary>	Declares the TlHolderTreeNode type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a node within the tree of holders that make up a composite mill tool holder. </summary>
            <summary> Class representing a node within the tree of holders that make up a composite mill tool holder. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolderComposite">
            <summary>	Declares the TlHolderComposite type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a composite mill tool holder. </summary>
            <summary> Class representing a composite mill tool holder. </summary>
        </member>
        <member name="T:Cnc.Tool.TlHolder">
            <summary>	Declares the TlHolder type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a mill tool holder. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolBarrelMill">
            <summary>	Declares the TlToolBarrelMill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing barrel mill tools. </summary>
            <summary> Class representing barrel mill tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolFeedMill">
            <summary>	Declares the TlToolFeedMill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing high feed milling tools </summary>
            <summary> Class representing high feed milling tools </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolThreading">
            <summary>	Declares the TlToolThreading type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing tools that have threading characteristics. </summary>
            <summary> Class representing tools that have threading characteristics. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolReamer">
            <summary>	Declares the TlToolReamer type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing reamer tools. </summary>
            <summary> Class representing reamer tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolLatheCustom">
            <summary>	Declares the TlToolLatheCustom type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing custom lathe tools. </summary>
            <summary> Class representing custom lathe tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolLatheISO">
            <summary>	Declares the TlToolLatheISO type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing isometric lathe tools. </summary>
            <summary> Class representing isometric lathe tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolLathe">
            <summary>	Declares the TlToolLathe type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> The base lathe tool class.  This class contains data and functions that are common to every tool. </summary>
            <summary> The base lathe tool class.  This class contains data and functions that are common to every tool. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolEndmill">
            <summary>	Declares the TlToolEndmill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class represnting tool types that contain similar end milling type parameters. </summary>
            <summary> Class represnting tool types that contain similar end milling type parameters. </summary>
            <summary> Class represnting tool types that contain similar end milling type parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolSlotMill">
            <summary>	Declares the TlToolSlotMill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing slot mill tools. </summary>
            <summary> Class representing slot mill tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolDrill">
            <summary>	Declares the TlToolDrill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing tools that contain common holemaking parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolCenterDrill">
            <summary>	Declares the TlToolCenterDrill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing center drill tools. </summary>
            <summary> Class representing center drill tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolCounterBore">
            <summary>	Declares the TlToolCounterBore type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing counter bore tools. </summary>
            <summary> Class representing counter bore tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolBoring">
            <summary>	Declares the TlToolBoring type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing fine boring tools. </summary>
            <summary> Class representing fine boring tools. </summary>
        </member>
        <member name="T:Cnc.Tool.TlToolMill">
            <summary>	Declares the TlToolMill type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> The base mill tool class.  This class contains data and functions that are common to every mill tool. </summary>
        </member>
        <member name="T:Cnc.Tool.TlTool">
            <summary>	Declares the TlTool type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> The base tool class.  This class contains data and functions that are common to every tool. </summary>
            <summary> The base tool class.  This class contains data and functions that are common to every tool. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssembly">
            <summary>	Declares the TlAssembly type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a mill tool assembly. </summary>
            <summary> Class representing a mill tool assembly. </summary>
        </member>
        <member name="T:Cnc.Tool.TlAssemblyItem">
            <summary>	Declares the TlAssemblyItem type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Class representing a tool assembly item. </summary>
        </member>
        <member name="T:Cnc.Tool.TlObject">
            <summary>	Declares the TlObject type and its shared_ptr/unique_ptr aliases. </summary>
            <summary> Base class for all tool class objects. </summary>
            <summary> Base class for all tool class objects. </summary>
            <summary> Base class for all tool class objects. </summary>
        </member>
        <member name="T:Cnc.Tool.ILToolDrillCutParams">
            <summary>	Declares the ILToolDrillCutParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	An interface representing 3D lathe tool cutting parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.ILToolTurnBoreCutParams">
            <summary>	Declares the ILToolTurnBoreCutParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	An interface representing 3D lathe tool cutting parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.ILToolThreadCutParams">
            <summary>	Declares the ILToolThreadCutParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	An interface representing 3D lathe tool cutting parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.ILToolGrooveCutParams">
            <summary>	Declares the ILToolGrooveCutParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	An interface representing 3D lathe tool cutting parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.ILToolCutParams">
            <summary>	Declares the ILToolCutParams type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	An interface representing 3D lathe tool cutting parameters. </summary>
        </member>
        <member name="T:Cnc.Tool.IMTool">
            <summary>	Declares the IMTool type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A mill tool interface. </summary>
        </member>
        <member name="T:Cnc.Tool.I3dLTool">
            <summary>	Declares the I3dLTool type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A 3d Lathe Tool interface. </summary>
        </member>
        <member name="T:Cnc.Tool.ILTool">
            <summary>	Declares the ILTool type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A lathe tool interface. </summary>
        </member>
        <member name="T:Cnc.Tool.ITool">
            <summary>	Declares the ITool type and its shared_ptr/unique_ptr aliases. </summary>
            <summary>	A tool interface. </summary>
            <summary>	A tool interface. </summary>
        </member>
        <member name="D:Cnc.Tool.TlIDListIter">
            <summary>	Defines an alias representing A constant iterator through a TlIDList. </summary>
        </member>
        <member name="D:Cnc.Tool.TlIDList">
            <summary>	Defines an alias representing a vector of type TlID. </summary>
        </member>
        <member name="D:LPMEMFILESTRUCT">
POINTER TO MEMFILESTRUCT STRUCTURE 
</member>
        <member name="F:MEMFILESTRUCT.hFileMap">
MEMORY FILE BUFFER INFORMATION 
</member>
        <member name="F:MEMFILESTRUCT.hFile">
DISK FILE INFORMATION 
</member>
        <member name="T:MEMFILESTRUCT">
WIN32 FILE INFORMATION 
</member>
        <member name="T:ent_idn_list_ptrs">
ent_list_idn memory pointer info
</member>
        <member name="T:assoc_setup">
            <summary> setup and stock definition. </summary>
        </member>
        <member name="T:CylindricalStockAnchor">
            <summary> Position of the cylinder origin with respect to the cylinder shape. </summary>
            <remarks> This value must be a single byte to fit in as a replacement in the group structure. </remarks>
        </member>
        <member name="T:RectangularStockAnchor">
            <summary> Position of the rectangle origin with respect to the rectangle shape. </summary>
            <remarks> Note that the face names in the value names are labeled as viewed in 3d space in Mastercam with corresponding plane names,
		  not with respect to any static image used anywhere in the UI. </remarks>
        </member>
        <member name="T:OriginCornerType">
            <summary> Origin corner for stock setup box </summary>
        </member>
        <member name="T:safety_zone">
            <summary> safety zones. </summary>
        </member>
        <member name="T:assoc_hdr">
            <summary> mc7 associative file header definition. </summary>
        </member>
        <member name="T:wp_change_header">
            <summary> Wire change at point header. </summary>
        </member>
        <member name="T:wire_power_set">
            <summary> Wire power set settings. </summary>
        </member>
        <member name="T:wire_power_set_pass">
            <summary> Wire power set pass settings. </summary>
        </member>
        <member name="T:drw_entity">
            <summary> A draw entity (Wire only). </summary>
        </member>
        <member name="T:drw_arc">
            <summary> A draw arc (Wire only). </summary>
        </member>
        <member name="T:drw_line">
            <summary> A draw line (Wire only). </summary>
        </member>
        <member name="T:drw_point">
            <summary> A draw point (Wire only). </summary>
        </member>
        <member name="T:misc_set">
            <summary> Miscellaneous set data. </summary>
        </member>
        <member name="T:misc_set_pass">
            <summary> Miscellaneous pass set data. </summary>
        </member>
        <member name="T:WireNewPowerSet">
            <summary> wire new power set parameters. </summary>
        </member>
        <member name="T:WireNewPowerPass">
            <summary> wire new power pass parameters. </summary>
        </member>
        <member name="T:WireAgieSet">
            <summary> wire Agie parameters. </summary>
        </member>
        <member name="T:AxisPositions">
Positions (coordinates + method of getting there) for all axes
</member>
        <member name="T:AxisCoordinate">
Axis coordinate
</member>
        <member name="T:AxisCoordinateType">
Axis coordinate types
</member>
        <member name="F:AXIS_COMBO_ABS_COORD">
            <summary>	The next 2 members are used for axis combination reference POINTS and home position only. </summary>
        </member>
        <member name="D:group_class_and_type">
            <summary> Single value to store group class and type for a set of component group parameters </summary>
            <remarks> The value is represented as: (100000 x group class) + group type. </remarks>
        </member>
        <member name="D:component_id_type">
Machine component unique identifier
</member>
        <member name="F:coolant_type.submergedWire">
use coolant to control submerged wire
</member>
        <member name="F:coolant_type.useEventList">
use event list to activate coolant
</member>
        <member name="F:coolant_type.useCoolantFromPost">
use coolant commands in post-processor (provided for backward compatibility)
</member>
        <member name="F:coolant_type.firstCoolantOffShutsOffAll">
1st 'coolant off' command shuts off ALL coolant commands on the machine
</member>
        <member name="F:coolant_type.btnTxt">
coolant button text for tool page
</member>
        <member name="F:coolant_type.offTxt">
'coolant off' interface display text
</member>
        <member name="F:coolant_type.onTxt">
'coolant on' interface display text
</member>
        <member name="F:coolant_type.baseTxt">
'base' coolant interface display text
</member>
        <member name="T:coolant_type">
            <summary> Coolant. </summary>
        </member>
        <member name="T:op_events_coolant">
            <summary> An operation events coolant. </summary>
        </member>
        <member name="D:coolant_cmd_str">
@defgroup  assocvar_ch40 tool types 
@{ 
@} 
MT work type
MT prototype version
</member>
        <member name="T:material">
            <summary> material definition. </summary>
        </member>
        <member name="T:matl_lathe">
            <summary> lathe specific material specs. </summary>
        </member>
        <member name="T:matl_mill">
@defgroup material_structures Material Structures 
@{ 
<summary> mill specific material specs. </summary></member>
        <member name="T:art_assoc_entry">
            <summary> Art Associative Entry. </summary>
        </member>
        <member name="T:ent_profile">
@} 
profile entity type  
</member>
        <member name="T:DB_LIST_ENT">
Database List Entity
</member>
        <member name="T:FilePolygonalMesh">
            <summary> polygonal mesh entity as it appears in a file (difference is data_index). </summary>
        </member>
        <member name="T:polygonal_mesh">
            <summary> polygonal_mesh (enhanced file_ent with persistant DB storage, smart memory usage, masking, selection,
		  etc.) </summary>
        </member>
        <member name="T:file_ent">
            <summary> file entity (when e.id = FILE_ID, data is in e.u.f) </summary>
        </member>
        <member name="T:bitmap_type">
            <summary> Bitmap type. </summary>
        </member>
        <member name="T:descr_type">
            <summary> Description type. </summary>
        </member>
        <member name="T:fileLockHistoryType">
            <summary> File Lock History Type. </summary>
        </member>
        <member name="T:fileLockHistoryStruct">
            <summary> File Lock History Structure. </summary>
        </member>
        <member name="T:fileLockType">
            <summary> File Lock Type. </summary>
        </member>
        <member name="T:history_type">
            <summary> History Type. </summary>
        </member>
        <member name="T:history_struct">
            <summary> A history structure. </summary>
        </member>
        <member name="T:version_header">
            <summary> Version Header. </summary>
        </member>
        <member name="T:rel_density_type">
            <summary> Relative density (used in NCS files only) </summary>
        </member>
        <member name="T:v8_dimension">
            <summary> structure for dimensions. </summary>
        </member>
        <member name="T:v8_u_pad">
            <summary> Union padding for v8 types. </summary>
        </member>
        <member name="T:dm_params">
            <summary> Dimension parameters. </summary>
        </member>
        <member name="T:v8_tangent">
            <summary> structure for tangent dimensions. </summary>
        </member>
        <member name="T:v8_perp">
            <summary> structure for linear dimensions. </summary>
        </member>
        <member name="T:v8_pt_dim">
            <summary> structure for point dimensions. </summary>
        </member>
        <member name="T:v8_ord_dim">
            <summary> structure for ordinate dimensions. </summary>
        </member>
        <member name="T:v8_circular">
            <summary> structure for circular dimensions (rad/dia) </summary>
        </member>
        <member name="T:v8_angular">
            <summary> structure for angular dimensions. </summary>
        </member>
        <member name="T:v8_linear">
            <summary> structure for linear dimensions. </summary>
        </member>
        <member name="T:v8_note">
            <summary> structure for notes. </summary>
        </member>
        <member name="T:v8_dim_txt">
            <summary> structure for dimension text. </summary>
        </member>
        <member name="T:v8_wit_ldr">
            <summary> structure for leaders and witness lines. </summary>
        </member>
        <member name="T:v8_wl_arc">
            <summary> circular leader. </summary>
        </member>
        <member name="T:v8_wl_line">
            <summary> structure for standard non_assoc points. </summary>
        </member>
        <member name="T:aPoint">
            <summary> A point. </summary>
        </member>
        <member name="T:eSel">
            <summary> A selected entity. </summary>
        </member>
        <member name="T:hatch_sty">
            <summary> A hatch style. </summary>
        </member>
        <member name="T:fonts_type">
            <summary> Fonts Type. </summary>
        </member>
        <member name="T:font_style">
            <summary> Font style. </summary>
        </member>
        <member name="T:copious_data">
 @note If a copious_data member is added between lathe_bdry_valid and pad1
		 and the new member is not supposed to be part of the copious_data
		 header, the define below must be changed to use the new member in place
		 of pad1.

<summary> Copius Data structure. </summary></member>
        <member name="T:font_attr">
            <summary> Data structure for font attributes. </summary>
        </member>
        <member name="T:worksheet_type">
            <summary> The worksheets structure. </summary>
        </member>
        <member name="T:levels_type">
            <summary> The level structure. </summary>
        </member>
        <member name="T:levelNameStruct">
            <summary> Structure to hold names of levels. </summary>
        </member>
        <member name="T:globals_type">
            <summary> Visible levels. </summary>
        </member>
        <member name="T:screen_info_type">
            <summary> Screen Information Type. </summary>
        </member>
        <member name="T:v_matrix_type">
            <summary> View Matrix Type. </summary>
        </member>
        <member name="T:relief_info_type">
            <summary> Relief Information Type. </summary>
        </member>
        <member name="T:art_bbox">
            <summary> Art Bounding Box. </summary>
        </member>
        <member name="T:CHAIN">
            <summary> A CHAIN is a single chain or the start of a linked list of chains. </summary>
        </member>
        <member name="T:CHAIN_ENT">
            <summary> A chain ent entity. </summary>
        </member>
        <member name="T:CHAIN_ENT_ID">
            <summary> Values that represent chain entity Identifiers. </summary>
        </member>
        <member name="T:CHAIN_HASH">
            <summary> A chain hash. </summary>
        </member>
        <member name="T:CHAIN_HASH_REC">
 @defgroup chain_data_structures Chain Data Structures
 @note END_OF_CHAIN is used only for manual sync (only at the end of
		 the first chain).	Normally, the end of chain is determined from
		 next == NULL.

<summary> Information about the chain hash. </summary></member>
        <member name="T:CONE_sf">
            <summary> Cone definition structure that corresponds to Parasolid's cone structure. </summary>
            <remarks> To convert to Mastercam units one simply uses mastercamValue = PS2MC (parasolidValue)
		  for a value like the radius, or PS2MCPT3D (parasolidPoint, mastercamPoint) for point values. No
		  conversion is required for unit vectors like the axis and ref_direction or for an angular value. </remarks>
        </member>
        <member name="T:CYLINDER_sf">
            <summary> Cylinder definition structure that corresponds to Parasolid's cylinder structure. </summary>
            <remarks> To convert to Mastercam units one simply uses mastercamValue = PS2MC (parasolidValue)
		  for a value like the radius, or PS2MCPT3D (parasolidPoint, mastercamPoint) for point values. No
		  conversion is required for unit vectors like the axis and ref_direction or for an angular value. </remarks>
        </member>
        <member name="T:PLANE_sf">
            <summary> This corresponds to Parasolid's plane structure and to STEP's axis2_placement structure. </summary>
        </member>
        <member name="T:SDETECT_POCKET_DATA">
            <summary> Solid Pocket detection Data. </summary>
        </member>
        <member name="T:SDETECT_DRILL_GEOM">
            <summary> Solid Drill detection Data. </summary>
        </member>
        <member name="T:mc_solid_ent">
            <summary> Solid. </summary>
        </member>
        <member name="T:mc_solid_xmt_ent">
            <summary> Solid data header for storing .x_t in partfile. </summary>
        </member>
        <member name="T:surf_type">
            <summary> Surface Entity Type. </summary>
        </member>
        <member name="T:trim_type">
            <summary> Trimmed Surface. </summary>
        </member>
        <member name="T:offset_type">
            <summary> Offset Surface. </summary>
        </member>
        <member name="T:plane_type">
            <summary> Plane. </summary>
        </member>
        <member name="T:fillet_type">
            <summary> Fillet. </summary>
        </member>
        <member name="T:tabcyl_type">
            <summary> Draft Surface. </summary>
        </member>
        <member name="T:rev_type">
            <summary> Revolved Surface. </summary>
        </member>
        <member name="T:loft_type">
            <summary> Loft Surface. </summary>
        </member>
        <member name="T:nbs_type">
            <summary> NURBS Surface. </summary>
        </member>
        <member name="T:pps_type">
            <summary> piecewise polynomial surface. </summary>
        </member>
        <member name="T:surf_header">
            <summary> A surface entity header. </summary>
        </member>
        <member name="T:cc_type">
            <summary> composite curve. </summary>
        </member>
        <member name="T:cons_type">
            <summary> Curve ON Surface. </summary>
        </member>
        <member name="T:nb_type">
 @note If a spline member is added between pad and ent_ptr and the new
		 member is not supposed to be part of the spline header, the define
		 below must be changed to use the new member in place of ent_ptr.

<summary> NURBS Spline. </summary></member>
        <member name="T:spline">
            <summary> Parametric spline. </summary>
        </member>
        <member name="T:entattr_type">
            <summary> Entity Attribute Type. </summary>
        </member>
        <member name="T:ea_type">
            <summary> EA Type. </summary>
        </member>
        <member name="T:ent_idn_list">
            <summary> misc. list of entities by ent_idn. </summary>
        </member>
        <member name="T:ent_idn_type">
ent_idns for machine components and component groups in the database
</member>
        <member name="T:attributes">
            <summary> Attribute structure. </summary>
        </member>
        <member name="T:pock_bound">
pocket boundary.  This is the central data structure used by pocketing.
All boundaries and islands can be expressed in this structure.  It
is a linked list.

</member>
        <member name="T:pock_chn">
@defgroup pock_data_structures Pocket Data Structures 
@{ 
</member>
        <member name="D:art_data32">
pointer to art data
</member>
        <member name="D:homogeneous_matrix">
            <summary> Homogeneous matrix. </summary>
        </member>
        <member name="D:art_data">
            <summary> pointer to art data. </summary>
        </member>
        <member name="M:CncGaf.UtObject.Serialize(CncGaf.UtArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Serializes this object's data to (or from) an archive. </summary>
            <param name="ar"> Reference to archive. </param>
        </member>
        <member name="M:CncGaf.UtObject.GetObjectClassId">
            <summary> Gets the runtime class ID of this object. </summary>
            <returns> Class runtime ID. </returns>
        </member>
        <member name="M:CncGaf.UtObject.GetObjectClassName">
            <summary> Gets the class name of this object. </summary>
            <returns> Class name. </returns>
        </member>
        <member name="M:CncGaf.UtObject.Dispose">
            <summary> Destructor. </summary>
        </member>
        <member name="M:CncGaf.UtObject.#ctor">
            <summary> Constructor. </summary>
        </member>
        <member name="T:CncGaf.UtObject">
            <summary> Base object for classes requiring serialization support. </summary>
        </member>
        <member name="T:CncGaf.UtArchive">
\ingroup GafBase
@{
</member>
        <member name="T:TP_ENT_TYPE">
            <summary> Values that represent toolpath entity types 
		  (for ent.u.tp.tp_id when ent.id == ASSOC_ID and ent.assoc_id == TP_ID). </summary>
        </member>
        <member name="T:ASSOC_ENT_TYPE">
            <summary> Values that represent associative entity types 
		  (for ent.assoc_id when ent.id == ASSOC_ID). </summary>
        </member>
        <member name="M:P4dToP3d(p_4d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a p_4d reference to a p_3d reference. </summary>
            <param name="pnt"> 4D point to convert. </param>
            <returns> p_3d reference. </returns>
        </member>
        <member name="M:P3dToP2d(p_3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Convert a p_3d reference to a p_2d reference. </summary>
            <param name="pnt"> 3D point to convert. </param>
            <returns> p_2d reference. </returns>
        </member>
        <member name="M:P4dRef(System.Double*)">
            <summary> Convert a double pointer to a p_4d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> p_4d reference. </returns>
        </member>
        <member name="M:P4dRef(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Convert a constant double pointer to a constant p_4d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> Constant p_4d reference. </returns>
        </member>
        <member name="M:P3dRef(System.Double*)">
            <summary> Convert a double pointer to a p_3d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> p_3d reference. </returns>
        </member>
        <member name="M:P3dRef(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Convert a constant double pointer to a constant p_3d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> Constant p_3d reference. </returns>
        </member>
        <member name="M:P2dRef(System.Double*)">
            <summary> Convert a double pointer to a p_2d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> p_2d reference. </returns>
        </member>
        <member name="M:P2dRef(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Convert a constant double pointer to a constant p_2d reference. </summary>
            <param name="ptr"> Double pointer to convert. </param>
            <returns> Constant p_2d reference. </returns>
        </member>
        <member name="M:op_Inequality(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator overload for 4D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are not equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Equality(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator overload for 4D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Inequality(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator overload for 3D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are not equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Equality(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator overload for 3D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Inequality(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Inequality operator overload for 2D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are not equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:op_Equality(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Equality operator overload for 2D point. </summary>
            <remarks> The comparison is done using the tolerance MTOL.  Call Equal to compare two points
		  using a caller specified tolerance. </remarks>
            <param name="pnt1"> First point to compare. </param>
            <param name="pnt2"> Second point to compare. </param>
            <returns> True if the points are equal withing MTOL, false otherwise. </returns>
        </member>
        <member name="M:Cross(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the cross product of two 3D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Cross product. </returns>
        </member>
        <member name="M:Cross(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the cross product of two 2D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Cross product. </returns>
        </member>
        <member name="M:Dot(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the dot product of two 4D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Dot product. </returns>
        </member>
        <member name="M:Dot(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the dot product of two 3D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Dot product. </returns>
        </member>
        <member name="M:Dot(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the dot product of two 2D "vectors". </summary>
            <param name="vec1"> First vector. </param>
            <param name="vec2"> Second vector. </param>
            <returns> Dot product. </returns>
        </member>
        <member name="M:DistanceSq(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance squared between two 4D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance squared. </returns>
        </member>
        <member name="M:DistanceSq(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance squared between two 3D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance squared. </returns>
        </member>
        <member name="M:DistanceSq(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance squared between two 2D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance squared. </returns>
        </member>
        <member name="M:Distance(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance between two 4D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance. </returns>
        </member>
        <member name="M:Distance(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Computes the distance between two 3D points. </summary>
            <param name="pnt1"> First point. </param>
            <param name="pnt2"> Second point. </param>
            <returns> Distance. </returns>
        </member>
        <member name="M:Distance(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@} 
<summary> Computes the distance between two 2D points. </summary><param name="pnt1"> First pnt. </param><param name="pnt2"> Second pnt. </param><returns> Distance. </returns></member>
        <member name="T:TlProfileEnt">
3D line, point or arc
</member>
        <member name="D:matrix_44">
@} 
<summary> Defines an alias representing the matrix 44. </summary></member>
        <member name="T:x_matrix">
Transformation matrix
</member>
        <member name="M:mat_43.op_Subscript(System.Int32)">
            <summary> Array indexer operator. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="T:mat_43">
            <summary> 4x3 matrix. </summary>
        </member>
        <member name="M:matrix_33i.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="m00"> row 0 column 0. </param>
            <param name="m01"> row 0 column 1. </param>
            <param name="m02"> row 0 column 2. </param>
            <param name="m10"> row 1 column 0. </param>
            <param name="m11"> row 1 column 1. </param>
            <param name="m12"> row 1 column 2. </param>
            <param name="m20"> row 2 column 0. </param>
            <param name="m21"> row 2 column 1. </param>
            <param name="m22"> row 2 column 2. </param>
        </member>
        <member name="M:matrix_33i.#ctor(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="xAxis"> X axis (row 0). </param>
            <param name="yAxis"> Y axis (row 1). </param>
            <param name="zAxis"> Z axis (row 2). </param>
        </member>
        <member name="M:matrix_33i.#ctor(Cnc.Math.Matrix.MatBase&lt;0x3,0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="mat"> Math Library-style matrix to copy. </param>
        </member>
        <member name="M:matrix_33i.#ctor(matrix_33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="mat"> Matrix to copy. </param>
        </member>
        <member name="M:matrix_33i.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:matrix_33i">
            <summary> 3x3 matrix (initialized). </summary>
            <remarks> By default, the matrix is initialized to the identity matrix. </remarks>
        </member>
        <member name="M:matrix_33.TransposeThis">
            <summary> Transposes this matrix. </summary>
            <returns> Reference to this matrix. </returns>
        </member>
        <member name="M:matrix_33.Transpose">
            <summary> Returns a matrix that is the transpose of this matrix. </summary>
            <returns> Transposed matrix. </returns>
        </member>
        <member name="M:matrix_33.IsIdentity">
            <summary> Checks if this object is the identity matrix. </summary>
            <returns> True if identity matrix, false if not. </returns>
        </member>
        <member name="M:matrix_33.SetIdentity">
            <summary> Sets this object to the identity matrix. </summary>
        </member>
        <member name="M:matrix_33.op_Subscript(System.Int32)">
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:matrix_33.op_Implicit~Cnc.Math.Matrix.MatBase&lt;0x3,0x3,System.Double&gt;">
            <summary> Operator (Cnc::Math::Matrix33) overload. </summary>
            <returns> This object converted to a Math Library-style matrix. </returns>
        </member>
        <member name="M:matrix_33.op_Assign(Cnc.Math.Matrix.MatBase&lt;0x3,0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="mat"> Math Library-style matrix to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="T:matrix_33">
@} 
@defgroup matrix_types Matrix Types 
@{ 
<summary> 3x3 matrix. </summary></member>
        <member name="T:gt">
2D line, point or arc
</member>
        <member name="T:a_3d">
3D Arc
</member>
        <member name="T:a_2d">
2D Arc
</member>
        <member name="T:l_3d">
3D Line
</member>
        <member name="T:l_2d">
2D Line
</member>
        <member name="M:p_4di.op_Assign(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="M:p_4di.#ctor(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Constructor. </summary>
            <param name="pnt"> 3D point. </param>
            <param name="w">   w value. </param>
        </member>
        <member name="M:p_4di.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="val"> X/Y/Z/W values. </param>
        </member>
        <member name="M:p_4di.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
            <param name="z"> Z value. </param>
            <param name="w"> W value. </param>
        </member>
        <member name="M:p_4di.#ctor(Cnc.Math.Vector.VecBase&lt;0x4,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="vec"> Math Library-style vector to copy. </param>
        </member>
        <member name="M:p_4di.#ctor(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="pnt"> Point to copy. </param>
        </member>
        <member name="M:p_4di.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:p_4di">
            <summary> 4D point (initialized). </summary>
            <remarks> By default, the point is initialized to (0., 0., 0., 0.). </remarks>
        </member>
        <member name="M:op_Multiply(System.Double,p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiplication operator overload for "scale * p_4d". </summary>
            <param name="scale"> Value to multiply by. </param>
            <param name="pnt">   4D point to scale. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_4d.Normalize">
            <summary> Gets a normalized (unitized) copy of this "vector". </summary>
            <returns> Normalized "vector". </returns>
        </member>
        <member name="M:p_4d.NormalizeThis">
            <summary> Normalizes (unitizes) this "vector". </summary>
            <returns> A reference to this "vector". </returns>
        </member>
        <member name="M:p_4d.LengthSq">
            <summary> Gets the length squared of this "vector". </summary>
            <returns> Vector length squared. </returns>
        </member>
        <member name="M:p_4d.Length">
            <summary> Gets the length of this "vector". </summary>
            <returns> Vector length. </returns>
        </member>
        <member name="M:p_4d.op_DivisionAssignment(System.Double)">
            <summary> Division assignment operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_4d.op_Division(System.Double)">
            <summary> Division operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide by. </param>
            <returns> A point which contains the result of the division. </returns>
        </member>
        <member name="M:p_4d.op_MultiplicationAssignment(System.Double)">
            <summary> Multiplication assignment operator overload. </summary>
            <param name="scale"> Value to multiply this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_4d.op_Multiply(System.Double)">
            <summary> Multiplication operator overload. </summary>
            <param name="scale"> Value to multiply by. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_4d.op_SubtractionAssignment(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction assignment operator overload. </summary>
            <param name="pnt"> Point to subtract from this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_4d.op_Subtraction(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction operator overload. </summary>
            <param name="pnt"> Point to subtract. </param>
            <returns> A point which contains the result of the subtraction. </returns>
        </member>
        <member name="M:p_4d.op_UnaryNegation">
            <summary> Unary minus operator overload. </summary>
            <returns> A point which contains this point negated. </returns>
        </member>
        <member name="M:p_4d.op_AdditionAssignment(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition assignment operator overload. </summary>
            <param name="pnt"> Point to add to this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_4d.op_Addition(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition operator overload. </summary>
            <param name="pnt"> Point to add. </param>
            <returns> A point which contains the result of the addition. </returns>
        </member>
        <member name="M:p_4d.op_LessThan(p_4d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less than operator overload. </summary>
            <param name="pnt"> Point to compare against. </param>
            <returns> True if this point is less than specified point, false otherwise. </returns>
        </member>
        <member name="M:p_4d.DoublePtr">
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
        </member>
        <member name="M:p_4d.ConvertTo3d">
            <summary> Converts this object to a 3D point. </summary>
            <returns> 3D point. </returns>
        </member>
        <member name="M:p_4d.SetXYZ(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the X/Y/Z components of this object to the specified values. </summary>
            <param name="pnt"> 3D point. </param>
        </member>
        <member name="M:p_4d.Set(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="pnt"> 3D point. </param>
            <param name="w">   W value. </param>
        </member>
        <member name="M:p_4d.Set(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets this object to the specified values. </summary>
            <param name="val"> X/Y/Z/W values. </param>
        </member>
        <member name="M:p_4d.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
            <param name="z"> Z value. </param>
            <param name="w"> W value. </param>
        </member>
        <member name="M:p_4d.Set">
            <summary> Sets this object to (0., 0., 0., 0.). </summary>
        </member>
        <member name="M:p_4d.op_Subscript(System.Int32)">
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:p_4d.op_Implicit~Cnc.Math.Vector.VecBase&lt;0x4,System.Double&gt;">
            <summary> Operator (Cnc::Math::Vector4D) overload. </summary>
            <returns> This object converted to a math. </returns>
        </member>
        <member name="M:p_4d.op_Assign(Cnc.Math.Vector.VecBase&lt;0x4,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="T:p_4d">
            <summary> 4D point. </summary>
        </member>
        <member name="M:p_3di.op_Assign(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="M:p_3di.#ctor(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Constructor. </summary>
            <param name="pnt"> 2D point. </param>
            <param name="z">   Z value. </param>
        </member>
        <member name="M:p_3di.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*,System.Double)">
            <summary> Constructor. </summary>
            <param name="val"> X/Y values. </param>
            <param name="z">   Z value. </param>
        </member>
        <member name="M:p_3di.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="val"> X/Y/Z values. </param>
        </member>
        <member name="M:p_3di.#ctor(System.Double,System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
            <param name="z"> Z value. </param>
        </member>
        <member name="M:p_3di.#ctor(Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="vec"> Math Library-style vector to copy. </param>
        </member>
        <member name="M:p_3di.#ctor(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="pnt"> Point to copy. </param>
        </member>
        <member name="M:p_3di.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:p_3di">
            <summary> 3D point (initialized). </summary>
            <remarks> By default, the point is initialized to (0., 0., 0.). </remarks>
        </member>
        <member name="M:op_Multiply(System.Double,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiplication operator overload for "scale * p_3d". </summary>
            <param name="scale"> Value to multiply by. </param>
            <param name="pnt">   3D point to scale. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_3d.Normalize">
            <summary> Gets a normalized (unitized) copy of this "vector". </summary>
            <returns> Normalized "vector". </returns>
        </member>
        <member name="M:p_3d.NormalizeThis">
            <summary> Normalizes (unitizes) this "vector". </summary>
            <returns> A reference to this "vector". </returns>
        </member>
        <member name="M:p_3d.LengthSq">
            <summary> Gets the length squared of this "vector". </summary>
            <returns> Vector length squared. </returns>
        </member>
        <member name="M:p_3d.Length">
            <summary> Gets the length of this "vector". </summary>
            <returns> Vector length. </returns>
        </member>
        <member name="M:p_3d.op_DivisionAssignment(System.Double)">
            <summary> Division assignment operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_3d.op_Division(System.Double)">
            <summary> Division operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide by. </param>
            <returns> A point which contains the result of the division. </returns>
        </member>
        <member name="M:p_3d.op_MultiplicationAssignment(System.Double)">
            <summary> Multiplication assignment operator overload. </summary>
            <param name="scale"> Value to multiply this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_3d.op_Multiply(System.Double)">
            <summary> Multiplication operator overload. </summary>
            <param name="scale"> Value to multiply by. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_3d.op_SubtractionAssignment(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction assignment operator overload. </summary>
            <param name="pnt"> Point to subtract from this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_3d.op_Subtraction(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction operator overload. </summary>
            <param name="pnt"> Point to subtract. </param>
            <returns> A point which contains the result of the subtraction. </returns>
        </member>
        <member name="M:p_3d.op_UnaryNegation">
            <summary> Unary minus operator overload. </summary>
            <returns> A point which contains this point negated. </returns>
        </member>
        <member name="M:p_3d.op_AdditionAssignment(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition assignment operator overload. </summary>
            <param name="pnt"> Point to add to this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_3d.op_Addition(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition operator overload. </summary>
            <param name="pnt"> Point to add. </param>
            <returns> A point which contains the result of the addition. </returns>
        </member>
        <member name="M:p_3d.op_LessThan(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less than operator overload. </summary>
            <param name="pnt"> Point to compare against. </param>
            <returns> True if this point is less than specified point, false otherwise. </returns>
        </member>
        <member name="M:p_3d.DoublePtr">
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
        </member>
        <member name="M:p_3d.ConvertTo2d">
            <summary> Converts this object to a 2D point. </summary>
            <returns> 2D point. </returns>
        </member>
        <member name="M:p_3d.SetXY(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets the X/Y components of this object to the specified values. </summary>
            <param name="val"> X/Y value. </param>
        </member>
        <member name="M:p_3d.SetXY(System.Double,System.Double)">
            <summary> Sets the X/Y components of this object to the specified values. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
        </member>
        <member name="M:p_3d.SetXY(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the X/Y components of this object to the specified values. </summary>
            <param name="pnt"> 3D point. </param>
        </member>
        <member name="M:p_3d.SetXY(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the X/Y components of this object to the specified values. </summary>
            <param name="pnt"> 2D point. </param>
        </member>
        <member name="M:p_3d.Set(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="pnt"> 2D point. </param>
            <param name="z">   Z value. </param>
        </member>
        <member name="M:p_3d.Set(System.Double!System.Runtime.CompilerServices.IsConst*,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="val"> X/Y values. </param>
            <param name="z">   Z value. </param>
        </member>
        <member name="M:p_3d.Set(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets this object to the specified values. </summary>
            <param name="val"> X/Y/Z value. </param>
        </member>
        <member name="M:p_3d.Set(System.Double,System.Double,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
            <param name="z"> Z value. </param>
        </member>
        <member name="M:p_3d.Set">
            <summary> Sets this object to (0., 0., 0.). </summary>
        </member>
        <member name="M:p_3d.op_Subscript(System.Int32)">
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:p_3d.op_Implicit~Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;">
            <summary> Operator (Cnc::Math::Vector3D) overload. </summary>
            <returns> This object converted to a math. </returns>
        </member>
        <member name="M:p_3d.op_Assign(Cnc.Math.Vector.VecBase&lt;0x3,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="M:p_2di.op_Assign(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="M:p_2di.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Constructor. </summary>
            <param name="val"> X/Y values. </param>
        </member>
        <member name="M:p_2di.#ctor(System.Double,System.Double)">
            <summary> Constructor. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
        </member>
        <member name="M:p_2di.#ctor(Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="vec"> Math Library-style vector to copy. </param>
        </member>
        <member name="M:p_2di.#ctor(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor. </summary>
            <param name="pnt"> Point to copy. </param>
        </member>
        <member name="M:p_2di.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:p_2di">
            <summary> 2D point (initialized). </summary>
            <remarks> By default, the point is initialized to (0., 0.). </remarks>
        </member>
        <member name="M:op_Multiply(System.Double,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Multiplication operator overload for "scale * p_2d". </summary>
            <param name="scale"> Value to multiply by. </param>
            <param name="pnt">   2D point to scale. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_2d.Normalize">
            <summary> Gets a normalized (unitized) copy of this "vector". </summary>
            <returns> Normalized "vector". </returns>
        </member>
        <member name="M:p_2d.NormalizeThis">
            <summary> Normalizes (unitizes) this "vector". </summary>
            <returns> A reference to this "vector". </returns>
        </member>
        <member name="M:p_2d.LengthSq">
            <summary> Gets the length squared of this "vector". </summary>
            <returns> Vector length squared. </returns>
        </member>
        <member name="M:p_2d.Length">
            <summary> Gets the length of this "vector". </summary>
            <returns> Vector length. </returns>
        </member>
        <member name="M:p_2d.op_DivisionAssignment(System.Double)">
            <summary> Division assignment operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_2d.op_Division(System.Double)">
            <summary> Division operator overload. </summary>
            <remarks> There is no check to insure "scale" is not zero. </remarks>
            <param name="scale"> Value to divide by. </param>
            <returns> A point which contains the result of the division. </returns>
        </member>
        <member name="M:p_2d.op_MultiplicationAssignment(System.Double)">
            <summary> Multiplication assignment operator overload. </summary>
            <param name="scale"> Value to multiply this point by. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_2d.op_Multiply(System.Double)">
            <summary> Multiplication operator overload. </summary>
            <param name="scale"> Value to multiply by. </param>
            <returns> A point which contains the result of the multiplication. </returns>
        </member>
        <member name="M:p_2d.op_SubtractionAssignment(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction assignment operator overload. </summary>
            <param name="pnt"> Point to subtract from this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_2d.op_Subtraction(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Subtraction operator overload. </summary>
            <param name="pnt"> Point to subtract. </param>
            <returns> A point which contains the result of the subtraction. </returns>
        </member>
        <member name="M:p_2d.op_UnaryNegation">
            <summary> Unary minus operator overload. </summary>
            <returns> A point which contains this point negated. </returns>
        </member>
        <member name="M:p_2d.op_AdditionAssignment(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition assignment operator overload. </summary>
            <param name="pnt"> Point to add to this point. </param>
            <returns> A reference to this point. </returns>
        </member>
        <member name="M:p_2d.op_Addition(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Addition operator overload. </summary>
            <param name="pnt"> Point to add. </param>
            <returns> A point which contains the result of the addition. </returns>
        </member>
        <member name="M:p_2d.op_LessThan(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Less than operator overload. </summary>
            <param name="pnt"> Point to compare against. </param>
            <returns> True if this point is less than specified point, false otherwise. </returns>
        </member>
        <member name="M:p_2d.DoublePtr">
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
            <summary> Gets a double "array" pointer to this object. </summary>
            <returns> Double pointer to this object. </returns>
        </member>
        <member name="M:p_2d.ConvertTo3d">
            <summary> Converts this object to a 3D point. </summary>
            <returns> 3D point. </returns>
        </member>
        <member name="M:p_2d.Set(System.Double!System.Runtime.CompilerServices.IsConst*)">
            <summary> Sets this object to the specified values. </summary>
            <param name="val"> X/Y values. </param>
        </member>
        <member name="M:p_2d.Set(System.Double,System.Double)">
            <summary> Sets this object to the specified values. </summary>
            <param name="x"> X value. </param>
            <param name="y"> Y value. </param>
        </member>
        <member name="M:p_2d.Set">
            <summary> Sets this object to (0., 0.). </summary>
        </member>
        <member name="M:p_2d.op_Subscript(System.Int32)">
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
            <summary> Array indexer operator overload. </summary>
            <param name="idx"> The index. </param>
            <returns> The indexed value. </returns>
        </member>
        <member name="M:p_2d.op_Implicit~Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;">
            <summary> Operator (Cnc::Math::Vector2D) overload. </summary>
            <returns> This object converted to a math. </returns>
        </member>
        <member name="M:p_2d.op_Assign(Cnc.Math.Vector.VecBase&lt;0x2,System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Assignment operator overload. </summary>
            <param name="pnt"> Point to copy. </param>
            <returns> A reference to this object. </returns>
        </member>
        <member name="T:p_2d">
            <summary> 2D point. </summary>
        </member>
        <member name="T:p_3d">
@defgroup Points_Lines_Arcs Point, Line, and Arc Types 
@{ 
<summary> 3D point. </summary>
@defgroup dbvars_ch2 Entity IDs 
@{ 
@} 
@defgroup Mins_maxs_tols Min's, Max's, and Tolerances 
@{ 
@} 
@defgroup PI_and_Angles PI and Angles  
@{ 
@} 
@defgroup Points_Lines_Arcs Point, Line, and Arc Types 
@{ 
</member>
        <member name="F:nc_tol">
@} 
</member>
        <member name="F:main_level">
@defgroup math_varuables math variables
  *
  * initialized in this module

</member>
        <member name="F:tol">
@{ 
System Tolerance
</member>
        <member name="M:FormatMessageFromID(System.UInt32,BTEllipsis)">
            <summary> Write formatted (CString::FormatMessage style) data to a CString. </summary>
            <param name="nFormatID"> String resource identifier that contains the format-control string. </param>
            <returns> The formatted string. </returns>
        </member>
        <member name="M:FormatFromID(System.UInt32,BTEllipsis)">
            <summary> Write formatted (printf style) data to a CString. </summary>
            <param name="nFormatID"> String resource identifier that contains the format-control string. </param>
            <returns> The formatted string. </returns>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:TpMatMgr.GetMainMatList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:TpGrpList.GetArray'. -->
        <!-- Discarding badly formed XML document comment for member 'M:TpGrpMgr.GetMainGrpList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:TpGrpMgr.GetReadGrpList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:TpOpMgr.GetMainOpList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ent'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ent'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ent'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ent'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:DB_LIST_ENT'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ent'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:DB_LIST_ENT'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ent'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FormatMessageFromHInstID(HINSTANCE__*,System.UInt32,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.type'. -->
        <!-- Discarding badly formed XML document comment for member 'F:plane_type.pad'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.pr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_perp.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:v8_tangent.hvp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:axis_params_type.initAxisPos'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:linear_axis_component_type.diameterOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'F:rotary_axis_component_type.axisLabel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.initFace'. -->
        <!-- Discarding badly formed XML document comment for member 'F:turret_component_type.faceToolRadius'. -->
        <!-- Discarding badly formed XML document comment for member 'F:cnc_machine_type.displayMappedParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IDArray.SetAllowNegatives(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:P3DS.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.GetGroupPtrs(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:IGroupListEntity.MakeGroupEntityMap(std.set<System.Int32!System.Runtime.CompilerServices.IsLong,std.less<System.Int32!System.Runtime.CompilerServices.IsLong>,std.allocator<System.Int32!System.Runtime.CompilerServices.IsLong>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:CLibraryOperation.NciUpdate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SetOriginPoint(MCEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GnomonEventData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.BuildMatrixChoices(Matrix33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Plane.SelectOriginPoint(System.Boolean,System.Boolean,System.Boolean,CWnd*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1040'. -->
        <!-- Discarding badly formed XML document comment for member 'T:nci_mill_1041'. -->
        <!-- Discarding badly formed XML document comment for member 'T:post_dlg_settings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:file_ctrl.szNcPath'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Equal(p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,p_3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)'. -->
    </members>
</doc>